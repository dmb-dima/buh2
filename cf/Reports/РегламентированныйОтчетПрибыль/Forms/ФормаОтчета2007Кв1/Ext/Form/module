////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мРаздел1_1;
Перем мРаздел1_2;
Перем мРаздел1_3;
Перем мРаздел2;
Перем мРаздел2_Прил1;
Перем мРаздел2_Прил2;
Перем мРаздел2_Прил3;
Перем мРаздел2_Прил4;
Перем мРаздел2_Прил5;
Перем мРаздел2_Прил6;
Перем мРаздел2_Прил7;
Перем мРаздел3;
Перем мРаздел3Продолжение;
Перем мРаздел3Реестр;
Перем мРаздел4;

Перем мРаздел5;
Перем мРаздел6;
Перем мРаздел7;

Перем СпП Экспорт;
Перем мОсновнойПланСчетов Экспорт;

// Хранят имена многострочных разделов
Перем мИдГруппы1;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;

Перем мСтруктураИсхКолвоСтрокРазделов;

Перем мИННЮЛ;
Перем мКППЮЛ;

// Переменные титульного листа, представитель.
Перем мПредставительФизЛицо Экспорт;
Перем мНазваниеПредставителя Экспорт;
Перем мДокументПредставителя Экспорт;
Перем мФамилияПредставителя Экспорт;
Перем мИмяПредставителя Экспорт;
Перем мОтчествоПредставителя Экспорт;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

Перем мРежимПечати Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Для явной установки типа значения 14, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ Экспорт;
Перем мОписаниеТиповБулево;

Перем мВПрограммеИзмененаОрганизация;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель Экспорт;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Для определения последнего периода отчета. Инициализация().
Перем мПоследнийПериод;

Перем мСписокМесяцев;

// Переменная для механизма обхода номеров страниц, при вводе показателей.
Перем мСтруктураВзаимныхПереходов Экспорт;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

// Список КБК после 2004
Перем мКодыБюджетнойКлассификации2005;

// Список КБК после 2005
Перем мКодыБюджетнойКлассификации2006;

// Список КБК после 2007
Перем мКодыБюджетнойКлассификации2007;

// Список КБК для раздела 1_3
Перем мКодыКБК2005Раздел1_3;

// Коды видов поступлений, используются на листе 10
Перем мПрибыльКодыВидовПоступлений;

// Структура хранит координаты признака сельхозтоваропроизводетеля.
Перем мСтруктураПризнаковСх;

// Структура используется для сохранения признака к разделам, которые пересчитаны в структуре, признак отображать ли
// данные раздела при переключении закладки основной панели.
// Перем мСтруктураПерепоказаСтраниц;

// Отчитывается по обособленному или за себя, если Истина то за себя,
// иначе заа обособленное подразделение
Перем мПоМестуНахожденияОрганизации;

// Переменных для хранения целых значений, в представлении квадратных
Перем мКодОкатоРаздел1_1;
Перем мСрокУплатыРаздел1_1;
Перем мКБКвФБРаздел1_1;
Перем мСуммаДоплФедРаздел1_1;
Перем мСуммаУменФедРаздел1_1;
Перем мСуммаПерехФедРаздел1_1;
Перем мКБКвБСРаздел1_1;
Перем мСуммаДоплСубРаздел1_1;
Перем мСуммаУменСубРаздел1_1;
Перем мСуммаПерехСубРаздел1_1;
Перем мКБКвМБРаздел1_1;
Перем мСуммаПерехМестРаздел1_1;

// Раздел1_2
Перем мКодОкатоРаздел1_2;
Перем мСрокУплаты1Раздел1_2;
Перем мСрокУплаты2Раздел1_2;
Перем мСрокУплаты3Раздел1_2;
Перем мКБКвФБРаздел1_2;
Перем мСуммаФедПоСроку1Раздел1_2;
Перем мСуммаФедПоСроку2Раздел1_2;
Перем мСуммаФедПоСроку3Раздел1_2;
Перем мКБКвБСРаздел1_2;
Перем мСуммаСубПоСроку1Раздел1_2;
Перем мСуммаСубПоСроку2Раздел1_2;
Перем мСуммаСубПоСроку3Раздел1_2;

// Раздел1_3
Перем мКодОкатоРаздел1_3;
Перем мКБКРаздел1_3;
Перем мСуммаНалога1Раздел1_3;
Перем мСрокУплаты1Раздел1_3;

Перем мСуммаНалога2Раздел1_3;
Перем мСрокУплаты2Раздел1_3;

Перем мСуммаНалога3Раздел1_3;
Перем мСрокУплаты3Раздел1_3;

Перем мСуммаНалога4Раздел1_3;
Перем мСрокУплаты4Раздел1_3;

Перем мСуммаНалога5Раздел1_3;
Перем мСрокУплаты5Раздел1_3;

// Переменная для исключения запуска Расчета при вставке доп. страниц.
Перем мИсключитьЗапускРасчета;

// Переменная флаг, хранит признак, есть ли обособленные подразделения.
Перем мЕстьОбособленныеПодразделения;

// Раздел2
Перем мЯвляетсяСельхоз;
Перем мСобранныеДанные3901Лист2;
Перем мМесяцЗптГодРаздел2;

// Прил3 Лист02
Перем мЯвляетсяСельхозПрил3Лист02;

// Прил5 Лист02
Перем мЯвляетсяСельхозПрил5Лист02;

// Прил5а Лист02
Перем мОбязанностьНаОбособке;

//Перем мМесяцОтчетаЛист03;
//Перем мГодОтчетаЛист03;

Перем мФамилияРаздел3Реестр;
Перем мИмяРаздел3Реестр;
Перем мОтчествоРаздел3Реестр;
Перем мФИОДляВыгрузкиРаздел3Реестр ;

Перем мЯвляетсяСельхозПрил1Лист02;
Перем мЯвляетсяСельхозПрил2Лист02;
Перем мЯвляетсяСельхозПрил4Лист02;

Перем РежимОтладки;

Перем ОбязРазделов Экспорт;

Перем ВариантыФорматовВыгрузки;

Перем ТаблицаСообщений Экспорт;

Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;

// Таблица для хранения настроек при вставки, удалении строк многострочных частей
Перем мТаблицаНастроекРежимаДляВставкиСтрок;

// Инифиализируется в обработчике ПриОткрытии и в ВосстановитьСохраненныеДанные
// Однозначно формирует представление о текущем документе
// умышленно не брался параметр мСохраненныйДок
Перем мДокументВосстановлен;

Перем мСоставПоказателей Экспорт;

Перем мБезОткрытияФормы Экспорт;

Перем СписокСтатейЗатрат;
Перем ПС;

////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ОбновитьСтруктуруМногостраничныхРазделов
// Обновляет структуру многостраничных разделов формы.
// После обновления структуры выводит в табличный документ
// данные первой страницы из набора страниц.
//
Процедура ОбновитьСтруктуруМногостраничныхРазделов(ИмяСтраницы = Неопределено)

	// В данной декларации в силу особенностей реализации, введенные значения в многостраничные разделы, сразу записываются
	// в соответствующий раздел мСтруктурыМногостраничныхРаздедлов.

	Возврат;
	// РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, имяСтраницы);

КонецПроцедуры // ОбновитьСтруктуруМногостраничныхРазделов()

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	// Если пользователь отказался от очистки, то вернемся
	Если НЕ РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
	// Очистим флаг вхождения в группу ОП.
	ВГруппуОПВходитОрганизация = Ложь;
	ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Ложь;

	// Очистим структуру перепоказа страниц.
	//мСтруктураПерепоказаСтраниц.Очистить();
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);

	Расчет("");
	
	// Очищаем расшифровку.
	СпП.Очистить();

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // Очистить()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

	Если ИмяТекущейСтраницыПанели = "Лист02_Прил5" Тогда

		// Восстановим признак V в приложении 5 листа 02. Если не было отключен режим
		Если мРаздел2_Прил5.Области.П002050015003.Значение = "0" Тогда
			мРаздел2_Прил5.Области.П002050015003.Значение = "";
		Иначе
			мРаздел2_Прил5.Области.П002050015003.Значение = "V";
		КонецЕсли;

		Если мРаздел2_Прил5.Области.П002050000200.Значение = "4" Тогда
			ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Истина;

			// прочитаем признак
			ДанныеАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Лист02_Прил5.Найти(Истина, "АктивнаяСтраница").Данные;

			Если ТипЗнч(ДанныеАктивнойСтраницы) <> Тип("Структура") Тогда
				РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_Прил5", Ложь);
			КонецЕсли;

			Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
				ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
			Иначе
				ВГруппуОПВходитОрганизация = Ложь;
			КонецЕсли;

		Иначе

			ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Ложь;
			ВГруппуОПВходитОрганизация = Ложь;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь, ТипЗнчСуммы = Неопределено)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную, ТипЗнчСуммы);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// УдалитьДополнительнуюСтраницу
// Удаляет текущую страницу многостраничного раздела формы.
// Программа стандартизации процедур 10.05.2005
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//              в табличном поле которой удаляется дополнительная страница.
//
Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // УдалитьДополнительнуюСтраницу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 
	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = мРаздел7;
	КонецЕсли;
	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на заданном табличном поле.
//
// Параметры:
//  ТекТабличноеПоле - поле тбличного документа.
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ТекТабличноеПоле)
	Перем ИдГруппы;

	Если ТекТабличноеПоле = мРаздел7 Тогда
		ИдГруппы = мИдГруппы1;
	КонецЕсли;

	Возврат ИдГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоТабличномуПолю()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Имя листа, если известно, на каком листе должна быть многострочность;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;

	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Лист07" Тогда
		ИмяГруппы = мИдГруппы1;
	КонецЕсли;
	
	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// СуммаПоказателяПоВсемСтраницамСпец
// Параметры:
//  ИмяСтраницы     - имя страницы декларации
//  Показатель      - показатель декларации
//  Округлять       - округлять или нет значения
//  Условия         - не обязательный параметр, задает условия, при которых будет суммироваться результат
//  СохранитьРаздел - в некоторых случаях необходимо, чтобы не сохранялся раздел или он уже был ранее сохранен, чтобы не проходили лишние
//  операции, в случае, если присвоить этому параметру Ложь, то сохранение проходить не будет, по умолчанию Неопределено - Сохранять.
//  Вариант         - предназначен для приложения 5 к листу 02, вариант 1 означает, все с признаком 1, вариант 2 - все остальные (обособки).
//
Функция СуммаПоказателяПоВсемСтраницамСпец(ИмяСтраницы, Показатель, Округлять, Условие = Неопределено, СохранитьРаздел = Неопределено, Вариант = Неопределено)

	МногостраничностьЕсть = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяСтраницы, "МногостраничностьВРазделе");

	Если НЕ МногостраничностьЕсть Тогда
		ТаблПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницы];
		Результат = ТаблПоле.Области[Показатель].Значение;
		Если Условие <> Неопределено Тогда
			Если ТаблПоле.Области[Условие.Ключ] <> Условие.Значение Тогда
				Результат = 0;
			КонецЕсли;
		КонецЕсли;

		Возврат ?(Округлять, ОкруглитьЧислоПоФормату(Результат), Результат);

	Иначе

		ТаблицаРаздела = Неопределено;

		Если СохранитьРаздел = Неопределено Или СохранитьРаздел = Истина Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяСтраницы, Ложь);
		КонецЕсли;

		мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела)

	КонецЕсли;

	СуммаПоказателей = 0;
	Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл

		ЗначениеПоказателя = ТаблицаРаздела[Инд].Данные[Показатель];
		Если Условие <> Неопределено Тогда
			ПриУсловии = ТаблицаРаздела[Инд].Данные[Условие.Ключ];

			Если ТипЗнч(ПриУсловии) = Тип("Строка") Тогда
				ПриУсловии = СокрЛП(ПриУсловии);
			КонецЕсли;

			Если Условие.Значение <> ПриУсловии Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если Вариант <> Неопределено Тогда
			// Если приложение 5, то дополнительные условия должны срабатывать, в зависимости от варианта требуемых данныех.
			// 1 - по организации с признаком 1, 2 - по всем остальным
			Если Вариант = "1" Тогда
				Если ТаблицаРаздела[Инд].Данные.П002050000200 <> "1" Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли Вариант = "1а" Тогда
				// Включаем все данные с признаком 1 и 3. Для раздела 1.1 и 1.2
				Если (ТаблицаРаздела[Инд].Данные.П002050000200 = "1" Или ТаблицаРаздела[Инд].Данные.П002050000200 = "3") Тогда
					// Собереме данные только с кодами 2 и 4 исключая пустые значения.
					Продолжить;
				КонецЕсли;
			ИначеЕсли Вариант = "2" Тогда
				// соберем данные по всем кроме признака 3 ликвидированные.
				Если ТаблицаРаздела[Инд].Данные.П002050000200 = "3" Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли Вариант = "3" Тогда
				// соберем данные по всем листам ТОЛЬКО с признакам 1.
				Если ТаблицаРаздела[Инд].Данные.П002050000200 = "2"
				   Или ТаблицаРаздела[Инд].Данные.П002050000200 = "3"
				   // Пропустим страницу с кодом 4 и без признака входящего в ОП.
				   Или (ТаблицаРаздела[Инд].Данные.П002050000200 = "4" И НЕ ?(ТаблицаРаздела[Инд].Данные.Свойство("ВГруппуОПВходитОрганизация"), ТаблицаРаздела[Инд].Данные.ВГруппуОПВходитОрганизация, Ложь))
				   Или РегламентированнаяОтчетность.ПустоеЗначение(ТаблицаРаздела[Инд].Данные.П002050000200) Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли Вариант = "Только2и4" Тогда
				// соберем данные по всем листам ТОЛЬКО с признакам 2 и 4.
				Если ТаблицаРаздела[Инд].Данные.П002050000200 = "1"
				   Или ТаблицаРаздела[Инд].Данные.П002050000200 = "3"
				   Или РегламентированнаяОтчетность.ПустоеЗначение(ТаблицаРаздела[Инд].Данные.П002050000200) Тогда
					Продолжить;
				КонецЕсли;

			ИначеЕсли Вариант = "Ликвидированные" Тогда
				// соберем данные по всем листам ТОЛЬКО с Ливкидированные.
				Если ТаблицаРаздела[Инд].Данные.П002050000200 <> "3" Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		Если Округлять Тогда
			ЗначениеПоказателя = ОкруглитьЧислоПоФормату(ЗначениеПоказателя);
		КонецЕсли;

		СуммаПоказателей = СуммаПоказателей + ЗначениеПоказателя;

	КонецЦикла;

	Возврат СуммаПоказателей;

КонецФункции // СуммаПоказателяПоВсемСтраницамСпец

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	ТабличноеПолеИмя = ТабличноеПоле.Имя;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		Если (ТабличноеПолеИмя = "ПолеТабличногоДокументаЛист02")
		И (ИмяПоказателя = "П002000029001") Тогда
			локП002000029001 = СокрЛП(ЗначениеПоказателя);
		ИначеЕсли (ТабличноеПолеИмя = "ПолеТабличногоДокументаЛист02")
		И (ИмяПоказателя = "П002000038500") Тогда
			локП002000038500 = "200" + СокрЛП(ЗначениеПоказателя);

		ИначеЕсли ТабличноеПолеИмя = ("ПолеТабличногоДокументаЛист02")
		И (ИмяПоказателя = "П002000036001") Тогда
			локП002000036001НомерМесяца = Неопределено;
			локП002000036001НомерГода = Неопределено;

			Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(ЗначениеПоказателя) Тогда
				локП002000036001НомерМесяца = Формат(ЗначениеПоказателя, "ДФ=М");
				Если СтрДлина(локП002000036001НомерМесяца) = 1 Тогда
					локП002000036001НомерМесяца = "0" + локП002000036001НомерМесяца;
				КонецЕсли;

				локП002000036001НомерГода = Формат(ЗначениеПоказателя, "ДФ=гггг");

			КонецЕсли;

		КонецЕсли;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ТабличноеПолеИмя = "ПолеТабличногоДокументаТитульный" Тогда
		СтруктураДанныхПоля.Вставить("ПредставительФизЛицо", мПредставительФизЛицо);
		СтруктураДанныхПоля.Вставить("НазваниеПредставителя", мНазваниеПредставителя);
		СтруктураДанныхПоля.Вставить("ДокументПредставителя", мДокументПредставителя);
		СтруктураДанныхПоля.Вставить("ФамилияПредставителя", мФамилияПредставителя);
		СтруктураДанныхПоля.Вставить("ИмяПредставителя", мИмяПредставителя);
		СтруктураДанныхПоля.Вставить("ОтчествоПредставителя", мОтчествоПредставителя);

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел1_1" Тогда
		СтруктураДанныхПоля.Вставить("КодОкатоРаздел1_1", мКодОкатоРаздел1_1);
		СтруктураДанныхПоля.Вставить("СрокУплатыРаздел1_1", мСрокУплатыРаздел1_1);
		СтруктураДанныхПоля.Вставить("КБКвФБРаздел1_1", мКБКвФБРаздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаДоплФедРаздел1_1", мСуммаДоплФедРаздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаУменФедРаздел1_1", мСуммаУменФедРаздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаПерехФедРаздел1_1", мСуммаПерехФедРаздел1_1);
		СтруктураДанныхПоля.Вставить("КБКвБСРаздел1_1", мКБКвБСРаздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаДоплСубРаздел1_1", мСуммаДоплСубРаздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаУменСубРаздел1_1", мСуммаУменСубРаздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаПерехСубРаздел1_1", мСуммаПерехСубРаздел1_1);
		СтруктураДанныхПоля.Вставить("КБКвМБРаздел1_1", мКБКвМБРаздел1_1);
		СтруктураДанныхПоля.Вставить("СуммаПерехМестРаздел1_1", мСуммаПерехМестРаздел1_1);
	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел1_2" Тогда
		СтруктураДанныхПоля.Вставить("КодОкатоРаздел1_2", мКодОкатоРаздел1_2);
		СтруктураДанныхПоля.Вставить("СрокУплаты1Раздел1_2", мСрокУплаты1Раздел1_2);
		СтруктураДанныхПоля.Вставить("СрокУплаты2Раздел1_2", мСрокУплаты2Раздел1_2);
		СтруктураДанныхПоля.Вставить("СрокУплаты3Раздел1_2", мСрокУплаты3Раздел1_2);
		СтруктураДанныхПоля.Вставить("КБКвФБРаздел1_2", мКБКвФБРаздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаФедПоСроку1Раздел1_2", мСуммаФедПоСроку1Раздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаФедПоСроку2Раздел1_2", мСуммаФедПоСроку2Раздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаФедПоСроку3Раздел1_2", мСуммаФедПоСроку3Раздел1_2);
		СтруктураДанныхПоля.Вставить("КБКвБСРаздел1_2", мКБКвБСРаздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаСубПоСроку1Раздел1_2", мСуммаСубПоСроку1Раздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаСубПоСроку2Раздел1_2", мСуммаСубПоСроку2Раздел1_2);
		СтруктураДанныхПоля.Вставить("СуммаСубПоСроку3Раздел1_2", мСуммаСубПоСроку3Раздел1_2);

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел1_3" Тогда

		СтруктураДанныхПоля.Вставить("КодОкатоРаздел1_3", мКодОкатоРаздел1_3);
		СтруктураДанныхПоля.Вставить("КБКРаздел1_3", мКБКРаздел1_3);

		СтруктураДанныхПоля.Вставить("СуммаНалога1Раздел1_3", мСуммаНалога1Раздел1_3);
		СтруктураДанныхПоля.Вставить("СрокУплаты1Раздел1_3", мСрокУплаты1Раздел1_3);

		СтруктураДанныхПоля.Вставить("СуммаНалога2Раздел1_3", мСуммаНалога2Раздел1_3);
		СтруктураДанныхПоля.Вставить("СрокУплаты2Раздел1_3", мСрокУплаты2Раздел1_3);

		СтруктураДанныхПоля.Вставить("СуммаНалога3Раздел1_3", мСуммаНалога3Раздел1_3);
		СтруктураДанныхПоля.Вставить("СрокУплаты3Раздел1_3", мСрокУплаты3Раздел1_3);

		СтруктураДанныхПоля.Вставить("СуммаНалога4Раздел1_3", мСуммаНалога4Раздел1_3);
		СтруктураДанныхПоля.Вставить("СрокУплаты4Раздел1_3", мСрокУплаты4Раздел1_3);

		СтруктураДанныхПоля.Вставить("СуммаНалога5Раздел1_3", мСуммаНалога5Раздел1_3);
		СтруктураДанныхПоля.Вставить("СрокУплаты5Раздел1_3", мСрокУплаты5Раздел1_3);


	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаЛист02" Тогда

		локП002000029001 = ?(локП002000029001 = Неопределено, "", локП002000029001);
		локП002000038500 = ?(локП002000038500 = Неопределено, "", локП002000038500);
		
		Если (локП002000029001 <> "") И (локП002000038500 <> "") Тогда
			локП002000029001 = РегламентированнаяОтчетность.ДополнитьСтроку(локП002000029001, 2, "0");
			мСобранныеДанные3901Лист2 = локП002000029001 + "," + локП002000038500;
		КонецЕсли;

		СтруктураДанныхПоля.Вставить("ЯвляетсяСельхоз", мЯвляетсяСельхоз);
		СтруктураДанныхПоля.Вставить("СобранныеДанные3901Лист2", мСобранныеДанные3901Лист2);

		Если локП002000036001НомерМесяца <> Неопределено Тогда
			мМесяцЗптГодРаздел2 = локП002000036001НомерМесяца + "," + локП002000036001НомерГода;
		Иначе
			// Если дата не была введена, тогда выгружаем пустое значение.
			мМесяцЗптГодРаздел2 = "";
		КонецЕсли;

		СтруктураДанныхПоля.Вставить("МесяцЗптГодРаздел2", мМесяцЗптГодРаздел2);

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаЛист02_Прил3" Тогда
		СтруктураДанныхПоля.Вставить("ЯвляетсяСельхозПрил3Лист02", мЯвляетсяСельхозПрил3Лист02);
	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаЛист02_Прил5" Тогда

		СтруктураДанныхПоля.Вставить("ЯвляетсяСельхозПрил5Лист02", мЯвляетсяСельхозПрил5Лист02);
		СтруктураДанныхПоля.Вставить("ВГруппуОПВходитОрганизация", ВГруппуОПВходитОрганизация);
		Если (СтруктураДанныхПоля.П002050015003 = "V") Или (СтруктураДанныхПоля.П002050015003 = "1") Тогда
			Рез = "1";
		Иначе
			Рез = "0";
		КонецЕсли;

		СтруктураДанныхПоля.Вставить("П002050015003", Рез);

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаЛист02_Прил1" Тогда
		СтруктураДанныхПоля.Вставить("ЯвляетсяСельхозПрил1Лист02", мЯвляетсяСельхозПрил1Лист02);
	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаЛист02_Прил2" Тогда
		СтруктураДанныхПоля.Вставить("ЯвляетсяСельхозПрил2Лист02", мЯвляетсяСельхозПрил2Лист02);
	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаЛист02_Прил4" Тогда
		СтруктураДанныхПоля.Вставить("ЯвляетсяСельхозПрил4Лист02", мЯвляетсяСельхозПрил4Лист02);
	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаЛист03Реестр" Тогда
		СтруктураДанныхПоля.Вставить("_АдресЛист03РеестрДляЦелейВыгрузки", СобратьАдресИзТабличногоПоля(мРаздел3Реестр));

		СтруктураДанныхПоля.Вставить("ФамилияРаздел3Реестр", мФамилияРаздел3Реестр);
		СтруктураДанныхПоля.Вставить("ИмяРаздел3Реестр", мИмяРаздел3Реестр);
		СтруктураДанныхПоля.Вставить("ОтчествоРаздел3Реестр", мОтчествоРаздел3Реестр);
		СтруктураДанныхПоля.Вставить("ФИОДляВыгрузкиРаздел3Реестр", мФИОДляВыгрузкиРаздел3Реестр);

	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// СобратьАдресИзТабличногоПоля
//
Функция СобратьАдресИзТабличногоПоля(Область)

	ПочтИндекс = "";
	Для Инд = 1 По 6 Цикл
		ПочтИндекс = ПочтИндекс + Область.Области["ПочтИнд" + Строка(Инд)].Значение;
	КонецЦикла;

	СубъектРФ = Область.Области["Суб1"].Значение + Область.Области["Суб2"].Значение;

	Район     = Область.Области.Район.Значение;
	Город     = Область.Области.Город.Значение;
	НП        = Область.Области.НасПункт.Значение;
	Улица     = Область.Области.Улица.Значение;
	Дома      = Область.Области.Дом.Значение;
	Корпус    = Область.Области.Корпус.Значение;
	Квартира  = Область.Области.Квартира.Значение;

	АдресРезультат = "643," + СокрЛП(ПочтИндекс) + ","
	                + СокрЛП(СубъектРФ) + ","
	                + СокрЛП(Район) + ","
	                + СокрЛП(Город) + ","
	                + СокрЛП(НП) + ","
	                + СокрЛП(Улица) + ","
	                + СокрЛП(Дома) + ","
	                + СокрЛП(Корпус) + ","
	                + СокрЛП(Квартира);

	Возврат АдресРезультат;

КонецФункции // СобратьАдресИзТабличногоПоля

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);


	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  мОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", мОписаниеТиповБулево);

	// Для разделов, где этот ключ = Истина после очистки листа будет запускаться экспортная процедура из РО модуля СпециальныеОперацииПослеОчисткиЛиста.
	мСвойстваРазделовДекларации.Колонки.Добавить("ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "КодОкатоРаздел1_3";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист02";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "Нет";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "Нет";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "Нет";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "Нет";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил4";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "Нет";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист02_Прил5";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист03";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист03Продолжение";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист03Реестр";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П002080001003";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист04";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "Нет";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист05";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист06";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Лист07";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

	// Формируем настройки для спец-режима вставки строк
	мТаблицаНастроекРежимаДляВставкиСтрок = Новый ТаблицаЗначений;
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазделДекларации"        , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("мИдГруппы"               , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазмерПоОсиХ"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазмерПоОсиУ"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ДельтаСтрокаКонкатенации", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("НомерГраницы"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("НомерГраницыСтр"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3)); // Для объед страниц

	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧасть"            , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьХ"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьУ"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьУСтр"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));  // Для объед страниц
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ШиринаСтрокиМногострочнойЧасти"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3)); // Определяет, из скольких строк состоит строчка многострочного раздела
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("НазваниеМногострочнаяЧасть", ОписаниеТиповСтрока254); // Определяет, из скольких строк состоит строчка многострочного раздела

	// Инициализируем таблицу настроек вставки, удаления доп. строк
	НовСтр = мТаблицаНастроекРежимаДляВставкиСтрок.Добавить();
	НовСтр.РазделДекларации         = "ПолеТабличногоДокументаЛист07";
	НовСтр.мИдГруппы                = мИдГруппы1;
	НовСтр.РазмерПоОсиХ             = 46;
	НовСтр.РазмерПоОсиУ             = 52;
	НовСтр.ОсновнаяЧасть            = "ПустаяСтрока1";

	// Координаты для объединения
	НовСтр.НомерГраницы             = 8; // Размер кнд объединения
	НовСтр.ОсновнаяЧастьУ           = 47; // Строчка по У

	НовСтр.НомерГраницыСтр          = 2;
	НовСтр.ОсновнаяЧастьУСтр        = 49;
	НовСтр.ШиринаСтрокиМногострочнойЧасти = 2; // Определяет, из скольких строк состоит строчка многострочного раздела
	НовСтр.НазваниеМногострочнаяЧасть = "МногострочнаяЧасть";

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()
	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);
			ЕстьИзменения = Истина;

		КонецЕсли;
	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для Каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// ЗаголовокРегламентированногоОтчета
// Функция генерирует заголовок к форме. Также данный заголовок используется в системе проверки показателей, для вывода
// в заголовок отчета.
// Параметры:
//  ДатаНач        - дата начала периода отчета
//  ДатаКон        - дата окончания периода отчета
//  Периодичность  - периодичность - не обязательно, только в тех декларациях, где присутствует.
// Возвращаемое значение:
//  Строка. Заголовок.
//
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина" );
	Возврат ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
КонецФункции // ЗаголовокРегламентированногоОтчета

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	Если мПериодичность = Перечисления.Периодичность.Месяц И НомерМесяца <> "0" Тогда
		мТитульный.Области.НалогПериод.Значение = "1";
		// в этой форме нет НомераКвартала
		мТитульный.Области.НомКвартал1.Значение = Сред(Формат(Число(?(НомерМесяца = "0", "12", НомерМесяца)), "ЧЦ=2; ЧВН="), 1, 1);
		мТитульный.Области.НомКвартал2.Значение = Сред(Формат(Число(?(НомерМесяца = "0", "12", НомерМесяца)), "ЧЦ=2; ЧВН="), 2, 1);

		// мРаздел3.Области.МесяцЛист03_1.Значение = Сред(Формат(Число(?(НомерМесяца = "0", "12", НомерМесяца)), "ЧЦ=2; ЧВН="), 1, 1);
		// мРаздел3.Области.МесяцЛист03_2.Значение = Сред(Формат(Число(?(НомерМесяца = "0", "12", НомерМесяца)), "ЧЦ=2; ЧВН="), 2, 1);

		//мРаздел3.Области.П002060000300.Значение = "1";
		//мМесяцОтчетаЛист03 = Сред(Формат(Число(?(НомерМесяца = "0", "12", НомерМесяца)), "ЧЦ=2; ЧВН="), 1);

	Иначе

		//мТитульный.Области.НомКвартал1.Значение = Сред(Формат(Число(НомерКвартала), "ЧЦ=2; ЧВН="), 1, 1);
		//мТитульный.Области.НомКвартал2.Значение = Сред(Формат(Число(НомерКвартала), "ЧЦ=2; ЧВН="), 2, 1);

		Если НомерКвартала = "4" Тогда
			мТитульный.Области.НалогПериод.Значение = "0";
			//мРаздел3.Области.П002060000300.Значение = "0";
		ИначеЕсли НомерКвартала = "3" Тогда
			мТитульный.Области.НалогПериод.Значение = "9";
			//мРаздел3.Области.П002060000300.Значение = "9";
		ИначеЕсли НомерКвартала = "2" Тогда
			мТитульный.Области.НалогПериод.Значение = "6";
			//мРаздел3.Области.П002060000300.Значение = "6";
		ИначеЕсли НомерКвартала = "1" Тогда
			мТитульный.Области.НалогПериод.Значение = "3";
			//мРаздел3.Области.П002060000300.Значение = "3";
		КонецЕсли;

		//мМесяцОтчетаЛист03 = "";

	КонецЕсли;

	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОтчетГод", 4, НомерГода);
	//РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Лист03", "ГодЛист03_", 4, НомерГода);
	//мГодОтчетаЛист03 = НомерГода;

	// СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЗаголовокРегламентированногоОтчета(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета);

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаПодписиРук     = "";

	стрУказаннаяДата = Формат(ДатаПодписи, "ДФ=""ддММгггг""");

	ДатаПодписиРук = стрУказаннаяДата;
	ДатаПодписиУпПред = стрУказаннаяДата;

	Если ПустаяСтрока(мТитульный.Области.ОргДиректор.Значение) Тогда
		ДатаПодписиРук = "        ";
	КонецЕсли;

	Если ПустаяСтрока(мТитульный.Области.ОргУп.Значение) Тогда
		ДатаПодписиУпПред = "        ";
	КонецЕсли;

	Для НомЯчейки = 1 По 8 Цикл

		СимволДатыРук = Сред(ДатаПодписиРук, НомЯчейки, 1);
		СимволДатыУпП = Сред(ДатаПодписиУпПред, НомЯчейки, 1);

		мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = СимволДатыРук;
		мТитульный.Области["ДатаПодписиОргУп" + НомЯчейки].Значение = СимволДатыУпП;

		мРаздел1_1.Области["ДатаПодписи1_"    + НомЯчейки].Значение = СимволДатыРук;
		мРаздел1_1.Области["ДатаПодписи2_"    + НомЯчейки].Значение = СимволДатыУпП;

		мРаздел1_2.Области["ДатаПодписи1_"    + НомЯчейки].Значение = СимволДатыРук;
		мРаздел1_2.Области["ДатаПодписи2_"    + НомЯчейки].Значение = СимволДатыУпП;

	КонецЦикла;

	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаПодписиРук, "ДатаПодписи1_", , "Раздел1_3", , Ложь, Истина);
	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаПодписиУпПред, "ДатаПодписи2_", , "Раздел1_3", , Ложь, Истина);

	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаПодписиРук, "ДатаПодписи1_", , "Лист03Реестр", , Ложь, Истина);
	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДатаПодписиУпПред, "ДатаПодписи2_", , "Лист03Реестр", , Ложь, Истина);

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// ПолучитьСтавкаНалога
//
Процедура ПолучитьСтавкиНалога()

	Перем СтавкаПрибФед;
	Перем СтавкаПрибРесп;

	Сведения = Новый СписокЗначений;

	Сведения.Добавить("", "СтавкаПрибФед");  // Ставка прибыль федеральный бюджет
	Сведения.Добавить("", "СтавкаПрибРесп");  // Ставка прибыль респ. бюджет

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, Сведения);

	СтавкаПрибФед = 0;
	СтавкаПрибРесп = 0;

	ОргСведения.Свойство("СтавкаПрибФед", СтавкаПрибФед);
	ОргСведения.Свойство("СтавкаПрибРесп", СтавкаПрибРесп);

	мРаздел2.Области.П002000015003.Значение = СтавкаПрибФед;
	мРаздел2.Области.П002000016003.Значение = СтавкаПрибРесп;

	Если НЕ ФлажокОтклАвтоРасчет Тогда
		мРаздел2.Области.П002000014003.Значение = СтавкаПрибФед + СтавкаПрибРесп + мРаздел2.Области.П002000017003.Значение;
	КонецЕсли;

КонецПроцедуры // ПолучитьСтавкаНалога

// ПроставитьСведенияОПредставителеОрганизации
// Процедура вызывается из модуля регл. отчетности, из роЗаполнитьСведенияОбОрганизации.
//
// Параметров нет.
//
Процедура ПроставитьСведенияОПредставителеОрганизации() Экспорт
	РегламентированнаяОтчетность.роПроставитьСведенияОПредставителеОрганизации(ЭтаФорма, Ложь);
КонецПроцедуры // ПроставитьСведенияОПредставителеОрганизации

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	// ПолучитьСтавкиНалога();

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		Сведения = "НаимЮЛПол, ОКАТО, КодНО, НаимНО, ТипНП, НаимОППол, НаимГоловнОрг, КППГоловнОрг, ТелОрганизации, ОКВЭДКвадратикиТочкиРазделения, ";
		ПолучитьИННКПП();
	КонецЕсли;

	Сведения = Сведения + "ФИОРук";

	Результат = РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации(ЭтаФорма, Сведения, "не предусмотрено для заполнения ФЛ");

	Если (НЕ ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда

		// В случае Обновить, вторым параметров должно быть Ложь.
		РегламентированнаяОтчетность.ПроставитьИННКППНаВсехЛистахРегОтчета(ЭтаФорма, НЕ мВпрограммеИзмененаОрганизация);

		ТипНП = Результат.ТипНП;
		Если ТипНП = 2 Тогда

			мТитульный.Области.ТипОрг2.Значение = "V";
			мТитульный.Области.ТипОрг1.Значение = "";
			мТитульный.Области.ТипОрг3.Значение = "";
			мТитульный.Области.ТипОрг4.Значение = "";
			мПоМестуНахожденияОрганизации = Ложь;
			СнятьПризнакАвтозаполненияПоСтроке030Прил5КЛисту02();

		ИначеЕсли ТипНП = 1 Тогда

			мТитульный.Области.ТипОрг1.Значение = "V";
			мТитульный.Области.ТипОрг2.Значение = "";
			мПоМестуНахожденияОрганизации = Истина;
			мТитульный.Области.ТипОрг3.Значение = "";
			мТитульный.Области.ТипОрг4.Значение = "";
			УстановитьПризнакАвтозаполненияПоСтроке030Прил5КЛисту02();

		КонецЕсли;

		ОКАТО = РегламентированнаяОтчетность.ДополнитьСтроку(Результат.ОКАТО, 11, " ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1", "КодОКАТО_1_", 11, ОКАТО);
		мКодОКАТОРаздел1_1 = ОКАТО;

		ОбособленныеПодразделенияОрг = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
		Если ОбособленныеПодразделенияОрг.Количество() > 0 Тогда
			мЕстьОбособленныеПодразделения = Истина;
		Иначе
			мЕстьОбособленныеПодразделения = Ложь;
		КонецЕсли;

		// Произведем обновление всех страниц многостраничных разделов, из-за особенностей механизм показат страниц.
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// УправлениеЛистами
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт

	Если ТипНП = Неопределено Тогда
		ТипНП = 0;

		Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
			Возврат
		КонецЕсли;

		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ТипНП");
		ОргСведения.Свойство("ТипНП", ТипНП);
	КонецЕсли;

	// Управление цветами
	Если ТипНП = 2 Тогда
		УстановитьСвойстваВалидныхЯчеек("Блокировать ячейки ЮЛ", мВпрограммеИзмененаОрганизация);
	ИначеЕсли ТипНП = 1 Тогда
		УстановитьСвойстваВалидныхЯчеек("Блокировать ячейки ЮЛОбособ", мВпрограммеИзмененаОрганизация);
	КонецЕсли;

КонецПроцедуры // УправлениеЛистами

// УстановитьСвойстваВалидныхЯчеек
// Блокирует необходимые ячейки, в зависимости от комманды
//
// Параметры:
// КоммандаТекст = может принимать значения "Блокировать ячейки ЮЛ" или "Блокировать ячейки ЮЛОбособ"
Процедура УстановитьСвойстваВалидныхЯчеек(Знач КоммандаТекст, Знач Очищать)

	НазванияЯчеекОтносящихсяКЮЛ = Новый СписокЗначений;
	НазванияЯчеекОтносящихсяКЮЛ.Добавить("ТипОрг1"   + Символы.ПС + "Титульный"+ Символы.ПС  + "Несоставная" + Символы.ПС + "");

	НазванияЯчеекОтносящихсяКОбособ = Новый СписокЗначений;
	НазванияЯчеекОтносящихсяКОбособ.Добавить("ТипОрг2"   + Символы.ПС + "Титульный"+ Символы.ПС  + "Несоставная" + Символы.ПС + "");
	//НазванияЯчеекОтносящихсяКОбособ.Добавить("ОбПодрНазв"   + Символы.ПС + "Титульный"+ Символы.ПС  + "Несоставная" + Символы.ПС + "");

	ЦветФонаРазБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_0", ЦветФонаРазБлокировки);

	ЦветФонаБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_5", ЦветФонаБлокировки);

	Если КоммандаТекст = "Блокировать ячейки ЮЛ" Тогда
		БлокируемыеЯчейки    = НазванияЯчеекОтносящихсяКЮЛ;
		РазБлокируемыеЯчейки = НазванияЯчеекОтносящихсяКОбособ;
	ИначеЕсли КоммандаТекст = "Блокировать ячейки ЮЛОбособ" Тогда
		БлокируемыеЯчейки    = НазванияЯчеекОтносящихсяКОбособ;
		РазБлокируемыеЯчейки = НазванияЯчеекОтносящихсяКЮЛ;
	КонецЕсли;

	// 1 - установка блокировки 2- снятие
	Для Инд = 1 По 2 Цикл

		Ячейки = ?(Инд = 1, БлокируемыеЯчейки, РазблокируемыеЯчейки);

		Для Каждого Показатель из Ячейки Цикл

			ПоказательСтр = СтрПолучитьСтроку(Показатель.Значение, 1);
			Страница      = СтрПолучитьСтроку(Показатель.Значение, 2);
			Группа        = СтрПолучитьСтроку(Показатель.Значение, 3);
			ПростойРежим  = ?(РегламентированнаяОтчетность.ПустоеЗначение(СтрПолучитьСтроку(Показатель.Значение, 4)), Ложь, Истина);
			Комманда      = ?(Инд = 1, "УстановитьЗащиту", "СнятьЗащиту");
			Цвет          = ?(Инд = 1, ЦветФонаБлокировки, ЦветФонаРазБлокировки);

			Если Группа = "Составная" Тогда

				Если НЕ ПростойРежим Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПоказательСтр, Комманда       ,                   , Страница);
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПоказательСтр, "ПроставитьЦветРаскраски", Цвет, Страница);
				КонецЕсли;

				Если Очищать Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПоказательСтр, "Очистить"               ,                   , Страница);
				КонецЕсли;

			ИначеЕсли Группа = "Несоставная" Тогда

				ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + Страница;
				Если НЕ ПростойРежим Тогда
					ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].Защита = ?(Инд = 1, Истина, Ложь);
					ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].ЦветФона = Цвет;
				КонецЕсли;

				Если Очищать Тогда
					ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].Значение = "";
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // УстановитьСвойстваВалидныхЯчеек

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// ПолучитьЗначениеКвадратногоЗначенияПоИмени
//
Функция ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре) Экспорт

	Рез = 0;
	Если КодПоказателяПоСтруктуре = "КодОкатоРаздел1_1" Тогда
		Рез = мКодОкатоРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплатыРаздел1_1" Тогда
		Рез = мСрокУплатыРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКвФБРаздел1_1" Тогда
		Рез = мКБКвФБРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаДоплФедРаздел1_1" Тогда
		Рез = мСуммаДоплФедРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаУменФедРаздел1_1" Тогда
		Рез = мСуммаУменФедРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаПерехФедРаздел1_1" Тогда
		Рез = мСуммаПерехФедРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКвБСРаздел1_1" Тогда
		Рез = мКБКвБСРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаДоплСубРаздел1_1" Тогда
		Рез = мСуммаДоплСубРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаУменСубРаздел1_1" Тогда
		Рез = мСуммаУменСубРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаПерехСубРаздел1_1" Тогда
		Рез = мСуммаПерехСубРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКвМБРаздел1_1" Тогда
		Рез = мКБКвМБРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаПерехМестРаздел1_1" Тогда
		Рез = мСуммаПерехМестРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодОкатоРаздел1_2" Тогда
		Рез = мКодОкатоРаздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты1Раздел1_2" Тогда
		Рез = мСрокУплаты1Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты2Раздел1_2" Тогда
		Рез = мСрокУплаты2Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты3Раздел1_2" Тогда
		Рез = мСрокУплаты3Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКвФБРаздел1_2" Тогда
		Рез = мКБКвФБРаздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаФедПоСроку1Раздел1_2" Тогда
		Рез = мСуммаФедПоСроку1Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаФедПоСроку2Раздел1_2" Тогда
		Рез = мСуммаФедПоСроку2Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаФедПоСроку3Раздел1_2" Тогда
		Рез = мСуммаФедПоСроку3Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКвБСРаздел1_2" Тогда
		Рез = мКБКвБСРаздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаСубПоСроку1Раздел1_2" Тогда
		Рез = мСуммаСубПоСроку1Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаСубПоСроку2Раздел1_2" Тогда
		Рез = мСуммаСубПоСроку2Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаСубПоСроку3Раздел1_2" Тогда
		Рез = мСуммаСубПоСроку3Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "КодОкатоРаздел1_3" Тогда
		Рез = мКодОкатоРаздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКРаздел1_3" Тогда
		Рез = мКБКРаздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога1Раздел1_3" Тогда
		Рез = мСуммаНалога1Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты1Раздел1_3" Тогда
		Рез = мСрокУплаты1Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога2Раздел1_3" Тогда
		Рез = мСуммаНалога2Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты2Раздел1_3" Тогда
		Рез = мСрокУплаты2Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога3Раздел1_3" Тогда
		Рез = мСуммаНалога3Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога4Раздел1_3" Тогда
		Рез = мСуммаНалога4Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога5Раздел1_3" Тогда
		Рез = мСуммаНалога5Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты3Раздел1_3" Тогда
		Рез = мСрокУплаты3Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты4Раздел1_3" Тогда
		Рез = мСрокУплаты4Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты5Раздел1_3" Тогда
		Рез = мСрокУплаты5Раздел1_3;
	ИначеЕсли КодПоказателяПоСтруктуре = "ЯвляетсяСельхоз" Тогда
		Рез = мЯвляетсяСельхоз;
	ИначеЕсли КодПоказателяПоСтруктуре = "ЯвляетсяСельхозПрил5Лист02" Тогда
		Рез = мЯвляетсяСельхозПрил5Лист02;
	ИначеЕсли КодПоказателяПоСтруктуре = "ЯвляетсяСельхозПрил3Лист02" Тогда
		Рез = мЯвляетсяСельхозПрил3Лист02;
	ИначеЕсли КодПоказателяПоСтруктуре = "ЯвляетсяСельхозПрил1Лист02" Тогда
		Рез = мЯвляетсяСельхозПрил1Лист02;
	ИначеЕсли КодПоказателяПоСтруктуре = "ЯвляетсяСельхозПрил2Лист02" Тогда
		Рез = мЯвляетсяСельхозПрил2Лист02;
	ИначеЕсли КодПоказателяПоСтруктуре = "ЯвляетсяСельхозПрил4Лист02" Тогда
		Рез = мЯвляетсяСельхозПрил4Лист02;
	ИначеЕсли КодПоказателяПоСтруктуре = "СобранныеДанные3901Лист2" Тогда
		Рез = мСобранныеДанные3901Лист2;
	ИначеЕсли КодПоказателяПоСтруктуре = "МесяцЗптГодРаздел2" Тогда
		Рез = мМесяцЗптГодРаздел2;

	//ИначеЕсли КодПоказателяПоСтруктуре = "МесяцОтчетаЛист03" Тогда
	//	Рез = мМесяцОтчетаЛист03;

	//ИначеЕсли КодПоказателяПоСтруктуре = "ГодОтчетаЛист03" Тогда
	//	Рез = мГодОтчетаЛист03;

	КонецЕсли;

	Возврат Рез;

КонецФункции // ПолучитьЗначениеКвадратногоЗначенияПоИмени

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку(ИмяГруппы = Неопределено)
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	Если ИмяГруппы = Неопределено Тогда
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	КонецЕсли;
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(КолСтрок, "ЧГ=0");

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);

	Предел = 10000;
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(КолСтрок, "ЧГ=0");
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат((КолСтрок + 1), "ЧГ=0");

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");

		КонецЕсли;
	КонецЦикла;

	//// Назначаем новый номер добавленной строке
	//// (данный фрагмент используется в отдельных формах).
	//
	НомерСтрокиОбласть       = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,     3, НомерНижнЯчейкиОбласти,     3);
	НомераСтрокиНоваяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти,3, НомерНижнЯчейкиНовойОбласти,3);
	ПоследнийНомер           = НомерСтрокиОбласть.Текст;

	Если Не ПустаяСтрока(ПоследнийНомер) Тогда
		ИсходныйНомер = Число(ПоследнийНомер);
	Иначе
		ИсходныйНомер = МаксимальноеКоличествоСтрокГруппы;
	КонецЕсли;

	НовыйПорядковыйНомер = ИсходныйНомер + 1;

	// МаксимальноеКоличествоСтрокГруппы

	Если НомераСтрокиНоваяОбласть.СодержитЗначение Тогда
		НомераСтрокиНоваяОбласть.Значение = ? (НЕ НовыйПорядковыйНомер > Предел, Строка(НовыйПорядковыйНомер) + ".", "");
	Иначе
		НомераСтрокиНоваяОбласть.Текст = ? (НЕ НовыйПорядковыйНомер > Предел, Формат(НовыйПорядковыйНомер, "ЧГ=0"), "");
	КонецЕсли;
	//
	//// Назначаем новый номер добавленной строке

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат((КолСтрок + 1), "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// СпециальногоУдаленияСтроки
//
Процедура СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти)

	//Сохраним координаты правых полей

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист07" Тогда
		// сохраним имеющиеся настройки правой присоединяющейся части (((

		//верх //лево         //низ   //.право
		Ч1Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Верх;
		Ч1Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Лево;
		Ч1Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Низ;
		Ч1Право = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Право;

	КонецЕсли;

	// Параметры бокового дисперсионного отступа
	РазмерПоОсиХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиХ");
	РазмерПоОсиУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиУ");

	НазваниеМногострочнаяЧасть = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НазваниеМногострочнаяЧасть");

	// Координата страницы
	НомерГраницыСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницыСтр");
	ОсновнаяЧастьУСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУСтр");

	ШиринаСтрокиМногострочнойЧасти = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ШиринаСтрокиМногострочнойЧасти");

	// Подразумевается, что состоит из одной строчки
	Если ШиринаСтрокиМногострочнойЧасти = 0 Или ШиринаСтрокиМногострочнойЧасти = 1 Тогда
		ШиринаСтрокиМногострочнойЧасти = 1;
	КонецЕсли;

	// Параметры для объединения
	НомерГраницы = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницы");

	ОсновнаяЧастьУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУ");

	// Название Пустойстроки с индексом
	ОсновнаяЧасть = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧасть");

	ФормаКНД = "НазваниеКНД" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, РазмерПоОсиХ, НомерВерхЯчейкиОбласти + ШиринаСтрокиМногострочнойЧасти - 1, РазмерПоОсиУ);
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали,);

	//возврат;
	// Определим область удаляемой строки
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);

	// непосредственно удаляем область строки табличного документа
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// НомерГраницы - Ширина объединения ячейки с номером КНД
	Если НомерГраницы > 0 Тогда
		// Режим объединения
		Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ФормаКНД].Верх, ОсновнаяЧастьУ, ТекТабличноеПоле.Области[ФормаКНД].Верх + НомерГраницы, ОсновнаяЧастьУ);
		Область.Объединить();
	КонецЕсли;

	Если НомерГраницыСтр <> Неопределено Тогда

		Если НомерГраницыСтр > 0 Тогда
			Страница = "Страница" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");
			// Режим объединения
			Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[Страница].Верх, ОсновнаяЧастьУСтр, ТекТабличноеПоле.Области[Страница].Верх + НомерГраницыСтр, ОсновнаяЧастьУСтр);
			Область.Объединить();
		КонецЕсли;

	КонецЕсли;

	// Определим область удаляемой строки, Выравним позицию
	УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх, РазмерПоОсиХ , ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх + ШиринаСтрокиМногострочнойЧасти - 1, РазмерПоОсиУ);

	// непосредственно удаляем область строки табличного документа
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// КонецСпециального режима удаления

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист07" Тогда

		УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители"].Верх + 1,,1 + ТекТабличноеПоле.Области["Ограничители"].Верх + 10);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		УдаляемаяОбласть = ТекТабличноеПоле.Область(,53,, 500);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	КонецЕсли;

	// Восстановим координаты правых полей
	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист07" Тогда
		//Восстановим
		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение1";

		ТекТабличноеПоле.Области[НазваниеМногострочнаяЧасть].Имя = "";
		МногострочнаяЧастьОбл = ТекТабличноеПоле.Область(25, , 40,);
		МногострочнаяЧастьОбл.Имя = НазваниеМногострочнаяЧасть;

		Если ШиринаСтрокиМногострочнойЧасти > 0 Тогда
			ОпределениеВысотыСтрокиМногострочнойЧасти = "ОпределениеВысотыСтрокиМногострочнойЧасти";
			Если ТекТабличноеПоле.Области.Найти(ОпределениеВысотыСтрокиМногострочнойЧасти) <> Неопределено Тогда
				ТекТабличноеПоле.Области[ОпределениеВысотыСтрокиМногострочнойЧасти].Имя = "";
			КонецЕсли;

			СледующаяЧасть = ТекТабличноеПоле.Область(25, 46, 26, 46);
			СледующаяЧасть.Имя = ОпределениеВысотыСтрокиМногострочнойЧасти;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // СпециальногоУдаленияСтроки

// СпециальногоДобавленияСтроки
//
Процедура СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти)

	//Сохраним координаты правых полей

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист07" Тогда
		// сохраним имеющиеся настройки правой присоединяющейся части (((

		//верх //лево         //низ   //.право
		Ч1Верх  = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Верх;
		Ч1Лево  = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Лево;
		Ч1Низ   = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Низ;
		Ч1Право = ТекТабличноеПоле.Области["ПравоеПрисоединение1"].Право;

	КонецЕсли;

	РазмерПоОсиХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиХ");
	РазмерПоОсиУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиУ");

	// Параметры для объединения
	НомерГраницы = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницы");
	//ОсновнаяЧастьХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьХ");
	ОсновнаяЧастьУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУ");

	// Название Пустойстроки с индексом
	ОсновнаяЧасть = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧасть");

	// Координата страницы
	НомерГраницыСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницыСтр");
	ОсновнаяЧастьУСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУСтр");

	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// Необходимо отыскивать номер координаты области ПустаяСтрока
	ВставляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх, РазмерПоОсиХ, ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх, РазмерПоОсиУ);
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали, ЛОжь);

	// Удалим часть, все состыкуется
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, РазмерПоОсиХ, НомерВерхЯчейкиОбласти, РазмерПоОсиУ);
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	ФормаКНД = "НазваниеКНД" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

	// НомерГраницы - Ширина объединения ячейки с номером КНД
	Если НомерГраницы > 0 Тогда
		// Режим объединения
		Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ФормаКНД].Верх, ОсновнаяЧастьУ, ТекТабличноеПоле.Области[ФормаКНД].Верх + НомерГраницы, ОсновнаяЧастьУ);
		ТекТабличноеПоле.Области[ФормаКНД].Имя = "";
		Область.Объединить();
		Область.Имя = ФормаКНД;
	КонецЕсли;

	Если НомерГраницыСтр <> Неопределено Тогда

		Если НомерГраницыСтр > 0 Тогда
			Страница = "Страница" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");
			// Режим объединения
			Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[Страница].Верх, ОсновнаяЧастьУСтр, ТекТабличноеПоле.Области[Страница].Верх + НомерГраницыСтр, ОсновнаяЧастьУСтр);
			ТекТабличноеПоле.Области[Страница].Имя = "";
			Область.Объединить();
			Область.Имя = Страница;
		КонецЕсли;

	КонецЕсли;

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист07" Тогда

		УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители"].Верх + 1,,1 + ТекТабличноеПоле.Области["Ограничители"].Верх + 10);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		УдаляемаяОбласть = ТекТабличноеПоле.Область(,53,, 500);
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	КонецЕсли;

	// Восстановим координаты правых полей
	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаЛист07" Тогда

		ПравПрисоед = "ПравоеПрисоединение" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");
		//Восстановим
		Если ТекТабличноеПоле.Области.Найти(ПравПрисоед) <> Неопределено Тогда
			ТекТабличноеПоле.Области[ПравПрисоед].Имя = "";
		КонецЕсли;

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
		СледующаяЧасть.Имя = ПравПрисоед;

	КонецЕсли;

КонецПроцедуры // СпециальногоДобавленияСтроки

// ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций
// Функция возвращает значение из таблицы настроек к операциям с доп. строками
//
// Параметры:
//
// РазделДекларации        - раздел декларации, указывается с ПолеТабличногоДокумента ...
// НомерМногострочнойЧасти - номер многострочной части в разделе (мИд)
// ТребуемыйПараметр - название колонки таблицы, где хранится требуемое значений настройки
//
// Возврат:
//
// Значение параметра, если такого нет в таблице - неопределено
//
Функция ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(РазделДекларации, НомерМногострочнойЧасти, ТребуемыйПараметр)

	Если Найти(РазделДекларации, "ПолеТабличногоДокумента") > 0 Тогда
		Раздел = СтрЗаменить(РазделДекларации, "ПолеТабличногоДокумента", "");
	Иначе
		Раздел = РазделДекларации;
	КонецЕсли;

	// Если многострочности нет в таблице настройки, то выходим
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, Раздел, "МногострочностьВРазделе") = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПоисковаяСтруктура = Новый Структура;
	ПоисковаяСтруктура.Вставить("РазделДекларации", "ПолеТабличногоДокумента" + Раздел);
	ПоисковаяСтруктура.Вставить("мИдГруппы"       , НомерМногострочнойЧасти);

	Результат = мТаблицаНастроекРежимаДляВставкиСтрок.НайтиСтроки(ПоисковаяСтруктура);

	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Результат[0][ТребуемыйПараметр];

КонецФункции

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// предварительно обновим структуру многострочного раздела
	ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		// Запустим единую процедуру удаляющая строку по специальному алгоритму
		// Используется в: ОчиститьТабличноеПоле(), ЗаполнитьРаздел2()
		СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + Формат(НСтр, "ЧГ=0");
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + Формат((НСтр - 1), "ЧГ=0");

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Формат(Макс(СтарыйНомер - 1, 0), "ЧГ=0");
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;

				//// Назначаем новый номер сдвигаемой строке
				//// (данный фрагмент используется в отдельных формах).
				//
				//Шаг   = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
				//Сдвиг = (НСтр - НомУдаляемойСтроки - 1) * Шаг;
				//
				//НомерСтрокиСдвигОбласть  = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг, 2, НомерНижнЯчейкиОбласти + Сдвиг, 2);

				//ПоследнийНомер           = НомерСтрокиСдвигОбласть.Текст;
				//НовыйПорядковыйНомер     = "";
				//
				//Если Не ПустаяСтрока(ПоследнийНомер) Тогда
				//	НовыйПорядковыйНомер = Число(ПоследнийНомер) - 1;
				//Иначе
				//	Если Не (НСтр - 1) > ИсходноеКоличествоСтрокГруппы Тогда
				//		ОбластьПредыдущийНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг - Шаг, 2, НомерНижнЯчейкиОбласти + Сдвиг - Шаг, 2);
				//		НовыйПорядковыйНомер   = Число(ОбластьПредыдущийНомер.Текст) + 1;
				//	КонецЕсли;
				//КонецЕсли;

				//НомерСтрокиСдвигОбласть.Текст = НовыйПорядковыйНомер;
				//
				//// Назначаем новый номер сдвигаемой строке

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Формат(ПервыйНомерВГруппе + НомерСтрокиВТаблице, "ЧГ=0");

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомТекущейСтроки, "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()	

// ЗаполнениеЗначенийВКвадратиках
//
Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт

	Если Найти(ИмяСтраницы, "ПолеТабличногоДокумента") > 0 Тогда
		ИмяСтраницыП = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");
	Иначе
		ИмяСтраницыП = ИмяСтраницы;
	КонецЕсли;

	Если ИмяСтраницыП = "Раздел1_1" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаДоплФед_", 15, мСуммаДоплФедРаздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаУменФед_", 15, мСуммаУменФедРаздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаПерехФед_", 15, мСуммаПерехФедРаздел1_1, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаДоплСуб_", 15, мСуммаДоплСубРаздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаУменСуб", 15, мСуммаУменСубРаздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаПерехСуб", 15, мСуммаПерехСубРаздел1_1, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаПерехМест", 15, мСуммаПерехМестРаздел1_1, Истина);

	ИначеЕсли ИмяСтраницыП = "Раздел1_2" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаФедПоСроку1_", 15, мСуммаФедПоСроку1Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаФедПоСроку2_", 15, мСуммаФедПоСроку2Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаФедПоСроку3_", 15, мСуммаФедПоСроку3Раздел1_2, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаСубПоСроку1_", 15, мСуммаСубПоСроку1Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаСубПоСроку2_", 15, мСуммаСубПоСроку2Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаСубПоСроку3_", 15, мСуммаСубПоСроку3Раздел1_2, Истина);

	ИначеЕсли ИмяСтраницыП = "Раздел1_3" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалога1_", 15, мСуммаНалога1Раздел1_3, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалога2_", 15, мСуммаНалога2Раздел1_3, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалога3_", 15, мСуммаНалога3Раздел1_3, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалога4_", 15, мСуммаНалога4Раздел1_3, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяСтраницыП, "СуммаНалога5_", 15, мСуммаНалога5Раздел1_3, Истина);

	КонецЕсли;

КонецПроцедуры // ЗаполнениеЗначенийВКвадратиках

// Возвращает модуль (положительное значение) заданного числа.
//
// Параметры:
//   ИсхЧисло - число - заданное число.
//
// Возвращаемое значение: число.
//
Функция Модуль(ИсхЧисло)
	
	Если НЕ ЗначениеЗаполнено(ИсхЧисло) Тогда
		Возврат 0;
	КонецЕсли;

	Если ТипЗнч(ИсхЧисло) <> Тип("Число") Тогда
		ИсхЧисло = Число(ИсхЧисло);
	КонецЕсли;	

	Мод = Макс(ИсхЧисло, ИсхЧисло * (-1));

	Возврат Мод;

КонецФункции // Модуль()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
				Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
			Иначе
				Дельта = 0;
			КонецЕсли;

			НайденнаяСтрока.Дельта = Дельта;

			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;

	// Включим видимость флажка проверки, по умолчанию - выключено.
	ФормаНастройкиОтчета.мПараметры.ПроверкаСоотношений = Истина;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ТабличныеДокументы = Неопределено)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// В случае, если в многостраничном блоке находится 1 страница, то не следует ещё раз запускать ПоказатьСтраницуМногостраничногоРаздела
	// т.к. листов в разделе общее ко-во 1.

	Если мСтруктураМногостраничныхРазделов[ИмяСтраницы].Количество() <> 1 Тогда
		// вывод в форму данных исходной (активной) страницы
		ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	КонецЕсли;

КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат(НомНовойСтроки, "ЧГ=0");

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Формат(НовыйПорядковыйНомер, "ЧГ=0");
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант, Показатель = Неопределено)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	Если Показатель = Неопределено Тогда
		ИмяПоказателя   = ТекущаяОбласть.Имя;
	Иначе
		ИмяПоказателя = Показатель;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		// общее название элементов для всех страниц
		//ЭлементыФормы["ПолеВводаЗначениеКорректировки" + "Лист02"].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
		Иначе
			Дельта = 0;
		КонецЕсли;

		НайденнаяСтрока.Дельта                                = Дельта;
		
		// общее название элементов для всех страниц
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		//ЭлементыФормы["ПолеВводаЗначениеКорректировки" + "Лист02"].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		// общее название элементов для всех страниц
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		//ЭлементыФормы["ПолеВводаЗначениеКорректировки" + "Лист02"].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		//ЭлементыФормы["ПолеВводаКомментарий"           + "Лист02"].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		РасчетЗависимыхРазделовДекларации(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий1;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, ИмяЛиста = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если ИмяЛиста = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели    = ИмяЛиста;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;
	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт
	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.

	ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ВыбТабличноеПоле);
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		// Поле табличного документа содержит многострочный раздел.

		// Получим таблицу значений, содержащую данные дополнительных строк.
		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

		ИсходноеКоличествоСтрокГруппы = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.

			НСтр = ПромТаблицаДопСтрокРаздела.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

				ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + Формат(НСтр, "ЧГ=0");

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				СпециальногоУдаленияСтроки(ВыбТабличноеПоле, ИмяГруппыДопСтрок, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);

				// удаляем из структуры многострочного раздела соответствующую строку
				ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Имя <> "П002000015003" И ТекущаяОбласть.Имя <> "П002000016003" И ТекущаяОбласть.Имя <> "П002000017003" Тогда
			ТекущаяОбласть.Очистить();
		КонецЕсли;

	КонецЦикла;

	ИмяСтраницыПанели = СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", "");
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяСтраницыПанели);

	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);
		Расчет(ИмяСтраницыПанели);
	КонецЕсли;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	// Функция Проверки, можно использовать возвращенный массив с ошибками.
	ПроверкаВводаДанных(Истина, "");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияВОтчете(ЭтаФорма, мСохраненныйДок, мБезОткрытияФормы);
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	мРежимПечати = Истина;
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;

	мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	// Сохраняем все текущие страницы многостраничных разделов в структуру
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);

	// Обновим многостраничные разделы декларации.
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;
		Если НЕ МногостраничностьВРазделе Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + НазваниеСтраницы;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;
	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", мПроверятьСоотношенияПриПечатиИВыгрузки);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	// Сохраним признак наличия или отсутствия обособленных подразделений.
	СписокСохранения.Вставить("ЕстьОбособленныеПодразделения", мЕстьОбособленныеПодразделения);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоСтраницОтчета();

	Модифицированность = Ложь;

	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	Перем РешенияОВыплатахДивидендов;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

		КонецЦикла;

	КонецЕсли;

	// ДанныеВариановАвтоЗаполнения - всегда восстанавливаем первее чем Данные Многостраничных Разделов
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда

		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			ИмяСтраницы = ЭлементСтруктуры.Ключ;

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);

			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);

		КонецЦикла;

	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", мПроверятьСоотношенияПриПечатиИВыгрузки);
	Если мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено Тогда
		// По умолчанию выключим процедуры проверки.
		мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Если СписокСохранения.Свойство("ЕстьОбособленныеПодразделения") Тогда
		мЕстьОбособленныеПодразделения = СписокСохранения.ЕстьОбособленныеПодразделения;
	Иначе
		мЕстьОбособленныеПодразделения = Ложь;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	// СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ИмяЛиста = СтрЗаменить(ТекТабличноеПоле.Имя,"ПолеТабличногоДокумента","");

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяЛиста, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл

			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;
	КонецЦикла;

	// Восстановим признак V в приложении 5 листа 02. Если не было отключен режим
	Если мРаздел2_Прил5.Области.П002050015003.Значение = "0" Тогда
		мРаздел2_Прил5.Области.П002050015003.Значение = "";
	Иначе
		мРаздел2_Прил5.Области.П002050015003.Значение = "V";
	КонецЕсли;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	мДокументВосстановлен = Истина;

	Модифицированность = Ложь;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	// Титульный лист
	//
	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	// Для листов 09, на форме показателей нет, но в отчет на дискету должны входить и в составе показателей они есть!
	ИначеЕсли (ИмяПоказателя = "П002160000500")
	 Или (ИмяПоказателя = "П002160027500")
	 Или (ИмяПоказателя = "П002160013500")
	 Или (ИмяПоказателя = "П002160029500") Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	ИначеЕсли ИмяПоказателя = "КодОкатоРаздел1_1" Тогда
		мКодОкатоРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплатыРаздел1_1" Тогда
		мСрокУплатыРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКвФБРаздел1_1" Тогда
		мКБКвФБРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаДоплФедРаздел1_1" Тогда
		мСуммаДоплФедРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаУменФедРаздел1_1" Тогда
		мСуммаУменФедРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаПерехФедРаздел1_1" Тогда
		мСуммаПерехФедРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКвБСРаздел1_1" ТОгда
		мКБКвБСРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаДоплСубРаздел1_1" Тогда
		мСуммаДоплСубРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаУменСубРаздел1_1" Тогда
		мСуммаУменСубРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаПерехСубРаздел1_1" Тогда
		мСуммаПерехСубРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКвМБРаздел1_1" Тогда
		мКБКвМБРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаПерехМестРаздел1_1" Тогда
		мСуммаПерехМестРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодОкатоРаздел1_2" Тогда
		мКодОкатоРаздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплаты1Раздел1_2" Тогда
		мСрокУплаты1Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплаты2Раздел1_2" Тогда
		мСрокУплаты2Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплаты3Раздел1_2" Тогда
		мСрокУплаты3Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКвФБРаздел1_2" Тогда
		мКБКвФБРаздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаФедПоСроку1Раздел1_2" Тогда
		мСуммаФедПоСроку1Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаФедПоСроку2Раздел1_2" Тогда
		мСуммаФедПоСроку2Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаФедПоСроку3Раздел1_2" Тогда
		мСуммаФедПоСроку3Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКвБСРаздел1_2" Тогда
		мКБКвБСРаздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаСубПоСроку1Раздел1_2" Тогда
		мСуммаСубПоСроку1Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаСубПоСроку2Раздел1_2" Тогда
		мСуммаСубПоСроку2Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаСубПоСроку3Раздел1_2" Тогда
		мСуммаСубПоСроку3Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодОкатоРаздел1_3" Тогда
		мКодОкатоРаздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1_3" Тогда
		мКБКРаздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалога1Раздел1_3" Тогда
		мСуммаНалога1Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплаты1Раздел1_3" Тогда
		мСрокУплаты1Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалога2Раздел1_3" Тогда
		мСуммаНалога2Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплаты2Раздел1_3" Тогда
		мСрокУплаты2Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалога3Раздел1_3" Тогда
		мСуммаНалога3Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалога4Раздел1_3" Тогда
		мСуммаНалога4Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаНалога5Раздел1_3" Тогда
		мСуммаНалога5Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплаты3Раздел1_3" Тогда
		мСрокУплаты3Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплаты4Раздел1_3" Тогда
		мСрокУплаты4Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СрокУплаты5Раздел1_3" Тогда
		мСрокУплаты5Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ЯвляетсяСельхоз" Тогда
		мЯвляетсяСельхоз = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ЯвляетсяСельхозПрил5Лист02" Тогда
		мЯвляетсяСельхозПрил5Лист02 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ЯвляетсяСельхозПрил3Лист02" Тогда
		мЯвляетсяСельхозПрил3Лист02 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ЯвляетсяСельхозПрил1Лист02" Тогда
		мЯвляетсяСельхозПрил1Лист02 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ЯвляетсяСельхозПрил2Лист02" Тогда
		мЯвляетсяСельхозПрил2Лист02 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ЯвляетсяСельхозПрил4Лист02" Тогда
		мЯвляетсяСельхозПрил4Лист02 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СобранныеДанные3901Лист2" Тогда
		мСобранныеДанные3901Лист2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "МесяцЗптГодРаздел2" Тогда
		мМесяцЗптГодРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	// Лист 03 Реестр
	ИначеЕсли ИмяПоказателя = "ФамилияРаздел3Реестр" Тогда
		мФамилияРаздел3Реестр = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяРаздел3Реестр" Тогда
		мИмяРаздел3Реестр = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоРаздел3Реестр" Тогда
		мОтчествоРаздел3Реестр = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФИОДляВыгрузкиРаздел3Реестр" Тогда
		мФИОДляВыгрузкиРаздел3Реестр = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	//ИначеЕсли ИмяПоказателя = "МесяцОтчетаЛист03" Тогда
	//	мМесяцОтчетаЛист03 = ЗначениеПоказателя;
	//	ИзмененияПроизошли = Истина;
	//ИначеЕсли ИмяПоказателя = "ГодОтчетаЛист03" Тогда
	//	мГодОтчетаЛист03 = ЗначениеПоказателя;
	//	ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Функция вычисляет итоговую сумму по конкретной графе по всем строкам
// многострочного раздела.
//
// Параметры:
// 	 Парам - строка  - показатель ячейки, по которой суммируются значения
//                     по всем строкам многострочного раздела.
//
// Возвращаемое значение:
//   число.
//
Функция РасчетСуммМногострочнойЧасти(Парам, НомерКолонки) 
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	СуммаПоГрафе = 0; 
	
	// идентификатор многострочного раздела
	ИмяГруппы = Лев(Парам, 11);
	
	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	Для Инд = 1 по КолСтрок Цикл
		ИмяЯчейкиСтроки = СтруктураГруппы.Колонки[НомерКолонки - 1].Имя + "_" + Формат(Инд, "ЧГ=0");
		ОбластьЯчейки 	= ТекТабличноеПоле.Области[ИмяЯчейкиСтроки];
		СуммаПоГрафе 	= СуммаПоГрафе + ОкруглитьЧислоПоФормату(ОбластьЯчейки.Значение);
	КонецЦикла;

	Возврат СуммаПоГрафе;				
	
КонецФункции  // РасчетСуммМнч()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяСтраницы) Экспорт

	Страница = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");

	Если Страница = "Титульный" Тогда

		мПредставительФизЛицо = Неопределено;
		мНазваниеПредставителя = "";
		мДокументПредставителя = "";

		мФамилияПредставителя = "";
		мИмяПредставителя = "";
		мОтчествоПредставителя = "";

	ИначеЕсли Страница = "Раздел1_1" Тогда

		мКодОкатоРаздел1_1 = "";
		мСрокУплатыРаздел1_1 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мКБКвФБРаздел1_1 = "";
		мСуммаДоплФедРаздел1_1 = 0;
		мСуммаУменФедРаздел1_1 = 0;
		мСуммаПерехФедРаздел1_1 = 0;
		мКБКвБСРаздел1_1 = "";
		мСуммаДоплСубРаздел1_1 = 0;
		мСуммаУменСубРаздел1_1 = 0;
		мСуммаПерехСубРаздел1_1 = 0;
		мКБКвМБРаздел1_1 = "";
		мСуммаПерехМестРаздел1_1 = 0;

	ИначеЕсли Страница = "Раздел1_2" Тогда

		мКодОкатоРаздел1_2 = "";
		мСрокУплаты1Раздел1_2 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мСрокУплаты2Раздел1_2 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мСрокУплаты3Раздел1_2 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мКБКвФБРаздел1_2 ="";
		мСуммаФедПоСроку1Раздел1_2 = 0;
		мСуммаФедПоСроку2Раздел1_2 = 0;
		мСуммаФедПоСроку3Раздел1_2 = 0;
		мКБКвБСРаздел1_2 = "";
		мСуммаСубПоСроку1Раздел1_2 = 0;
		мСуммаСубПоСроку2Раздел1_2 = 0;
		мСуммаСубПоСроку3Раздел1_2 = 0;

	ИначеЕсли Страница = "Раздел1_3" Тогда

		мКодОкатоРаздел1_3 = "";
		мКБКРаздел1_3 = "";
		мСуммаНалога1Раздел1_3 = 0;
		мСрокУплаты1Раздел1_3 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мСуммаНалога2Раздел1_3 = 0;
		мСрокУплаты2Раздел1_3 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мСуммаНалога3Раздел1_3 = 0;
		мСуммаНалога4Раздел1_3 = 0;
		мСуммаНалога5Раздел1_3 = 0;
		мСрокУплаты3Раздел1_3 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мСрокУплаты4Раздел1_3 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мСрокУплаты5Раздел1_3 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));

	ИначеЕсли Страница = "Лист02" Тогда

		мЯвляетсяСельхоз = "";
		мСобранныеДанные3901Лист2 = "";
		мМесяцЗптГодРаздел2 = "";

	ИначеЕсли Страница = "Лист02_Прил1" Тогда

		мЯвляетсяСельхозПрил1Лист02 = "";

	ИначеЕсли Страница = "Лист02_Прил2" Тогда

		мЯвляетсяСельхозПрил2Лист02 = "";

	ИначеЕсли Страница = "Лист02_Прил4" Тогда

		мЯвляетсяСельхозПрил4Лист02 = "";

	ИначеЕсли Страница = "Лист02_Прил3" Тогда

		мЯвляетсяСельхозПрил3Лист02 = "";

	ИначеЕсли Страница = "Лист02_Прил5" Тогда

		мЯвляетсяСельхозПрил5Лист02 = "";

	ИначеЕсли Страница = "Лист03Реестр" Тогда

		мФамилияРаздел3Реестр = "";
		мИмяРаздел3Реестр = "";
		мОтчествоРаздел3Реестр = "";
		мФИОДляВыгрузкиРаздел3Реестр = "";

	КонецЕсли;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу

// ПроставитьСрокУплПодраздел1_1
//
Процедура ПроставитьСрокУплПодраздел1_1()
	Если Месяц(мДатаКонцаПериодаОтчета) = 12 Тогда
		СледГод = Год(мДатаКонцаПериодаОтчета + 86400);
		СрокУпл = Дата(СледГод, 3, 28);
	Иначе
		ТекГод = Год(мДатаКонцаПериодаОтчета);
		СледМесяц = Месяц(мДатаКонцаПериодаОтчета + 86400);
		СрокУпл = Дата(ТекГод, СледМесяц, 28);
	КонецЕсли;

	ДатаПоСтатье61 = РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(СрокУпл);
	Если ДатаПоСтатье61 = Неопределено Тогда
		Возврат;
	КонецЕсли;

	мСрокУплатыРаздел1_1 = ДатаПоСтатье61;

	стрУказаннаяДата = Формат(мСрокУплатыРаздел1_1, "ДФ=""ддММгггг""");
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1", "СрокУплаты_", 8, стрУказаннаяДата);

КонецПроцедуры // ПроставитьСрокУплПодраздел1_1

// ПроставитьДатыВРазделе1_2
//
Процедура ПроставитьДатыВРазделе1_2(ОчиститьСроки)

	// В случае, если отчет составляется за налоговый период, то даты в подразделе 1.2
	// по строка 020,030,040 не заполняются.
	Если ОчиститьСроки Или ЭтоНалоговыйПериод(Организация, ДатаПодписи, мДатаКонцаПериодаОтчета) Тогда

		мСрокУплаты1Раздел1_2 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мСрокУплаты2Раздел1_2 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
		мСрокУплаты3Раздел1_2 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СрокУплаты1", 8, "        ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СрокУплаты2", 8, "        ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СрокУплаты3", 8, "        ");

	Иначе
		НомерКвартала = мРаздел2_Прил5.Области.П002050012001.Значение;
		ГодАвансов    = Год(КонецКвартала(мДатаКонцаПериодаОтчета) + 1);

		СрокУплаты1Раздел1_2 = Дата(ГодАвансов, (НомерКвартала * 3) - 2, 28);
		СрокУплаты2Раздел1_2 = Дата(ГодАвансов, (НомерКвартала * 3) - 1, 28);
		СрокУплаты3Раздел1_2 = Дата(ГодАвансов, (НомерКвартала * 3),28);

		СледРабДата = РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(СрокУплаты1Раздел1_2);
		Если СледРабДата <> Неопределено Тогда
			мСрокУплаты1Раздел1_2 = СледРабДата;
			стрУказаннаяДата1 = Формат(мСрокУплаты1Раздел1_2, "ДФ=""ддММгггг""");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СрокУплаты1", 8, стрУказаннаяДата1);
		КонецЕсли;

		СледРабДата = РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(СрокУплаты2Раздел1_2, Ложь);
		Если СледРабДата <> Неопределено Тогда
			мСрокУплаты2Раздел1_2 = СледРабДата;
			стрУказаннаяДата2 = Формат(мСрокУплаты2Раздел1_2, "ДФ=""ддММгггг""");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СрокУплаты2", 8, стрУказаннаяДата2);
		КонецЕсли;

		СледРабДата = РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(СрокУплаты3Раздел1_2, Ложь);
		Если СледРабДата <> Неопределено Тогда
			мСрокУплаты3Раздел1_2 = СледРабДата;
			стрУказаннаяДата3 = Формат(мСрокУплаты3Раздел1_2, "ДФ=""ддММгггг""");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2", "СрокУплаты3", 8, стрУказаннаяДата3);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроставитьДатыВРазделе1_2

// РасчетВСтруктуре
// Параметры:
//  ИмяЛиста              - Имя листа.
//  РассчитатьСПризнакомСх - Какой из листов нужно перерассчитывать, с признаком с/х или без. Булево.
//
Процедура РасчетВСтруктуре(ИмяЛиста, РассчитатьСПризнакомСх = Неопределено)

	// Расчет осуществляется по структуре многостраничных разделов декларации.
	ТаблицаРаздела = мСтруктураМногостраничныхРазделов[ИмяЛиста];

	Если ИмяЛиста = "Лист02" Или ИмяЛиста = "Лист02_Прил4" Тогда
		// Не изменяемые показатели, или показатели находящиеся в обычных разделов, для оптимизации сразу получим.
		П002110053003 = мРаздел6.Области.П002110053003.Значение;

		// Используемв в приложении 4 к листу 02.
		П002110041003 = мРаздел6.Области.П002110041003.Значение;
		П002110045003 = мРаздел6.Области.П002110045003.Значение;
		П002110049003 = мРаздел6.Области.П002110049003.Значение;

		// Убытки
		П002110043003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110043003.Значение);
		П002110047003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110047003.Значение);
		П002110051003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110051003.Значение);
	КонецЕсли;

	Для Каждого Страница Из ТаблицаРаздела Цикл

		// Получим признак с/х для листа.
		Сельхоз = ?(Страница.Данные[мСтруктураПризнаковСх[ИмяЛиста]] = "V", Истина, Ложь);

		ИндексСтраницыВСтруктуреМногостраничногоРаздела = ТаблицаРаздела.Индекс(Страница);

		Если РассчитатьСПризнакомСх <> Неопределено Тогда
			// Если Неопределено, то в этом случае, расчет проиходит обоих листов. С пометкой V и без.
			// Для приложение 5 к листу 02 рассчитывать показатели всегда, т.к. на листах есть данные относящиеся к организации в целом.
			Если (РассчитатьСПризнакомСх <> Сельхоз) И (НЕ ИмяЛиста = "Лист02_Прил5") Тогда
				// Данный лист не требует расчета в структуре.
				Продолжить;
			КонецЕсли;

		КонецЕсли;

		//Если Страница.АктивнаяСтраница Тогда
		//	мСтруктураПерепоказаСтраниц.Вставить(ИмяЛиста, Истина);
		//КонецЕсли;

		Если ИмяЛиста = "Лист02" Тогда
			// Начали рассчитывать Лист02.

			// Стр. 010
			П002000001003 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил1", "П002010004003", Истина, Новый Структура("Ключ, Значение","П002010000100", ?(Сельхоз, "V", "")), Ложь);
			ЗаписатьПоказательВСтруктуру("Лист02", "П002000001003", П002000001003, Страница);

			// Стр. 020
			П002000002003 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил1", "П002010010003", Истина, Новый Структура("Ключ, Значение","П002010000100", ?(Сельхоз, "V", "")), Ложь);
			ЗаписатьПоказательВСтруктуру("Лист02", "П002000002003", П002000002003, Страница);

			// Строка 030 листа 02
			// Необходимо выполнить условие по звездочке, Кроме доходов, расходов и убытков, отраженных в Листах 05 и06
			П002000003003 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил2", "П002020011003", Истина, Новый Структура("Ключ, Значение","П002020000100", ?(Сельхоз, "V", "")), Ложь);
			ЗаписатьПоказательВСтруктуру("Лист02", "П002000003003", П002000003003, Страница);

			// Строка 040 листа 02
			// Необходимо выполнить условие по звездочке, Кроме доходов, расходов и убытков, отраженных в Листах 05 и06
			П002000004003_1 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил2", "П002020020003", Истина, Новый Структура("Ключ, Значение","П002020000100", ?(Сельхоз, "V", "")), Ложь);
			П002000004003_2 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил2", "П002020030003", Истина, Новый Структура("Ключ, Значение","П002020000100", ?(Сельхоз, "V", "")), Ложь);
			П002000004003 = П002000004003_1 + П002000004003_2;
			ЗаписатьПоказательВСтруктуру("Лист02", "П002000004003", П002000004003, Страница);

			// Строка 050 листа 02
			// Необходимо выполнить условие по звездочке, Кроме доходов, расходов и убытков, отраженных в Листах 05 и06
			П002000005003 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил3", "П002030029003", Ложь, Новый Структура("Ключ, Значение","П002030000100", ?(Сельхоз, "V", "")), Ложь);
			ЗаписатьПоказательВСтруктуру("Лист02", "П002000005003", П002000005003, Страница);

			// Строка 060 листа 02
			П002000006003 = П002000001003 + П002000002003 - П002000003003 - П002000004003 + П002000005003;
			ЗаписатьПоказательВСтруктуру("Лист02", "П002000006003", П002000006003, Страница);

			// Строка 100
			П002000010003 = П002000006003
			              - ОкруглитьЧислоПоФормату(Страница.Данные.П002000007003)
			              - ОкруглитьЧислоПоФормату(Страница.Данные.П002000008003)
			              - ОкруглитьЧислоПоФормату(Страница.Данные.П002000009003);
			ЗаписатьПоказательВСтруктуру("Лист02", "П002000010003", П002000010003, Страница);

			// Строка 110
			СуммаПоСтроке150Приложения4 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил4", "П002040015003", Истина, Новый Структура("Ключ, Значение","П002040000100", ?(Сельхоз, "V", "")), Ложь);
			П002000011003 = СуммаПоСтроке150Приложения4;
			ЗаписатьПоказательВСтруктуру("Лист02", "П002000011003", П002000011003, Страница);

			// Строка 120
			СуммаПоСтроке100Листов05 = СуммаПоказателяПоВсемСтраницамСпец("Лист05", "П002100010003", Ложь, Неопределено, Ложь);
			П002000012003 = Макс(((П002000010003 - П002000011003) + СуммаПоСтроке100Листов05 + П002110053003), 0);
			ЗаписатьПоказательВСтруктуру("Лист02", "П002000012003", П002000012003, Страница);

			// Строка 140
			П002000014003 = Страница.Данные.П002000015003 + Страница.Данные.П002000016003 + Страница.Данные.П002000017003;
			ЗаписатьПоказательВСтруктуру("Лист02", "П002000014003", П002000014003, Страница);

			// Строка 190
			П002000019003 = Макс(ОкруглитьЧислоПоФормату(П002000012003 * Страница.Данные.П002000015003 / 100), 0);
			ЗаписатьПоказательВСтруктуру("Лист02", "П002000019003", П002000019003, Страница);

			СуммаПоСтроке070Приложения5ВсеКромеЛиквидированных = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил5", "П002050007003", Ложь, Новый Структура("Ключ, Значение","П002050000100", ?(Сельхоз, "V", "")), Ложь));

			Если СуммаПоСтроке070Приложения5ВсеКромеЛиквидированных > 0 Тогда
				// Если заполненные листы приложения 5 по обособленным подразделениям.
				// Строка 200
				П002000020003 = СуммаПоСтроке070Приложения5ВсеКромеЛиквидированных;
			Иначе

				// Листов приложения 5 к листу 02 по обособленным нет, тогда по обычной формуле.
				// ВНИМАНИЕ: по формуле, которая на табличном поле, в инструкции по заполнению приведена другая формулировка.
				// Строка 200
				П002000020003 = ОкруглитьЧислоПоФормату(((П002000012003 - ОкруглитьЧислоПоФормату(Страница.Данные.П002000013003)) * Страница.Данные.П002000016003 / 100))
				   +   ОкруглитьЧислоПоФормату((ОкруглитьЧислоПоФормату(Страница.Данные.П002000013003) * Страница.Данные.П002000017003 / 100));
			КонецЕсли;

			ЗаписатьПоказательВСтруктуру("Лист02", "П002000020003", П002000020003, Страница);

			// Строка 180
			П002000018003 = П002000019003 + П002000020003;
			ЗаписатьПоказательВСтруктуру("Лист02", "П002000018003", П002000018003, Страница);

			// Соберем все показатели по строке 080 прил. 5, к листу 02, кроме ликвидированным в периоде.
			П002050008003 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил5", "П002050008003", Истина, Новый Структура("Ключ, Значение","П002050000100", ?(Сельхоз, "V", "")), Ложь);
			// Полученный результат попытаемся установить в строку 230 листа 02.
			Если П002050008003 <> 0 Тогда
				// Если есть данные в прил. 5 к листу 02 по обособленным подразделениям, тогда запишем на лист.
				УстановитьЗначениеПоказателяВСтруктуреДанныхСучетомВариантаЗаполнения("Лист02", "П002000023003", П002050008003, ИндексСтраницыВСтруктуреМногостраничногоРаздела, Страница);
			КонецЕсли;

			// Строка 210
			П002000021003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002000022003) + ОкруглитьЧислоПоФормату(Страница.Данные.П002000023003);
			ЗаписатьПоказательВСтруктуру("Лист02", "П002000021003", П002000021003, Страница);

			// Строка 240
			П002000024003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002000025003) + ОкруглитьЧислоПоФормату(Страница.Данные.П002000026003);
			ЗаписатьПоказательВСтруктуру("Лист02", "П002000024003", П002000024003, Страница);

			// Строка 270
			П002000027003 = Макс(П002000018003 - П002000021003 - П002000024003, 0);
			ЗаписатьПоказательВСтруктуру("Лист02", "П002000027003", П002000027003, Страница);

			// Строка 280
			П002000028003 = Макс(П002000021003 + П002000024003 - П002000018003, 0);
			ЗаписатьПоказательВСтруктуру("Лист02", "П002000028003", П002000028003, Страница);

			// Строка 360
			ОкрП002000032003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002000032003);
			ОкрП002000033003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002000033003);
			ОкрП002000034003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002000034003);
			КолвоСроковУплаты = Страница.Данные.П002000035003;
			//ОкрП002000036003 = ?(КолвоСроковУплаты <> 0, ОкруглитьЧислоПоФормату((ОкрП002000032003
			//   + ОкрП002000033003
			//   + ОкрП002000034003) / КолвоСроковУплаты), 0);
			// В 2007 г. показатель по строке 360 заполняться не должен.
			// ЗаписатьПоказательВСтруктуру("Лист02", "П002000036003", ОкрП002000036003, Страница);

		ИначеЕсли ИмяЛиста = "Лист02_Прил1" Тогда

			СуммаПоСтроке270Приложения3 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил3", "П002030027003", Ложь
			   , Новый Структура("Ключ, Значение","П002030000100", ?(Сельхоз, "V", "")), Ложь);
			П002030027003 = СуммаПоСтроке270Приложения3;

			// строка 010
			ОкрП002010001103 = ОкруглитьЧислоПоФормату(Страница.Данные.П002010001103);
			ОкрП002010001203 = ОкруглитьЧислоПоФормату(Страница.Данные.П002010001203);
			ОкрП002010001303 = ОкруглитьЧислоПоФормату(Страница.Данные.П002010001303);
			ОкрП002010001403 = ОкруглитьЧислоПоФормату(Страница.Данные.П002010001403);

			П002010001003 = ОкрП002010001103
			              + ОкрП002010001203
			              + ОкрП002010001303
			              + ОкрП002010001403;
			ЗаписатьПоказательВСтруктуру("Лист02_Прил1", "П002010001003", П002010001003, Страница);

			ЗаписатьПоказательВСтруктуру("Лист02_Прил1", "П002010003003", П002030027003, Страница);

			// строка 040
			ОкрП002010002003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002010002003);
			ОкрП002010003003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002010003003);

			П002010004003 = П002010001003 + ОкрП002010002003 + ОкрП002010003003;
			ЗаписатьПоказательВСтруктуру("Лист02_Прил1", "П002010004003", П002010004003, Страница);

		ИначеЕсли ИмяЛиста = "Лист02_Прил2" Тогда

			// Строка 080
			СуммаПоСтроке280Приложения3 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил3", "П002030028003", Ложь
			   , Новый Структура("Ключ, Значение","П002030000100", ?(Сельхоз, "V", "")), Ложь);

			ЗаписатьПоказательВСтруктуру("Лист02_Прил2", "П002020008003", СуммаПоСтроке280Приложения3, Страница);

			// Строка 110
			П002020011003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002020001003)
			              + ОкруглитьЧислоПоФормату(Страница.Данные.П002020002003)
			              + ОкруглитьЧислоПоФормату(Страница.Данные.П002020004003)
			              + ОкруглитьЧислоПоФормату(Страница.Данные.П002020005003)
			              + ОкруглитьЧислоПоФормату(Страница.Данные.П002020006003)
			              + ОкруглитьЧислоПоФормату(Страница.Данные.П002020007003)
			              + ОкруглитьЧислоПоФормату(Страница.Данные.П002020008003)
			              + ОкруглитьЧислоПоФормату(Страница.Данные.П002020009003)
			              + ОкруглитьЧислоПоФормату(Страница.Данные.П002020010003);
			ЗаписатьПоказательВСтруктуру("Лист02_Прил2", "П002020011003", П002020011003, Страница);

			ОкрСуммаПоСтроке170Приложения3 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил3", "П002030017003", Истина
			   , Новый Структура("Ключ, Значение","П002030000100", ?(Сельхоз, "V", "")), Ложь);

			// Стр. 203
			ЗаписатьПоказательВСтруктуру("Лист02_Прил2", "П002020020303", ОкрСуммаПоСтроке170Приложения3, Страница);

			ОкрП002020020103 = ОкруглитьЧислоПоФормату(Страница.Данные.П002020020103);
			ОкрП002020020203 = ОкруглитьЧислоПоФормату(Страница.Данные.П002020020203);
			ОкрП002020020303 = ОкруглитьЧислоПоФормату(Страница.Данные.П002020020303);

			// Применяется такой метом, т.к. показатель в строке 200 может быть не обязательно суммой из 3-х строк (201, 202 и 203) поэтому
			// автоматически заполнется, но можно скорректировать.

			П20003 = ОкрП002020020103 + ОкрП002020020203 + ОкрП002020020303;
	//		УстановитьЗначениеПоказателяВСтруктуреДанныхСучетомВариантаЗаполнения(ИмяЛиста, "П002020020003", П20003, ИндексСтраницыВСтруктуреМногостраничногоРаздела, Страница);

			ОкрП002020030103 = ОкруглитьЧислоПоФормату(Страница.Данные.П002020030103);
			ОкрП002020030203 = ОкруглитьЧислоПоФормату(Страница.Данные.П002020030203);

			// Применяется такой метом, т.к. показатель в строке 300 может быть не обязательно суммой из 2-х строк (301 и 302) поэтому
			// автоматически заполнется, но можно скорректировать.

			П30003 = ОкрП002020030103 + ОкрП002020030203;
			УстановитьЗначениеПоказателяВСтруктуреДанныхСучетомВариантаЗаполнения(ИмяЛиста, "П002020030003", П30003, ИндексСтраницыВСтруктуреМногостраничногоРаздела, Страница);

		ИначеЕсли ИмяЛиста = "Лист02_Прил3" Тогда

			ОкрП002030024003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002030024003);
			ОкрП002030021003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002030021003);
			ОкрП002030018003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002030018003);
			ОкрП002030011003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002030011003);
			ОкрП002030007003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002030007003);
			ОкрП002030008003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002030008003);
			ОкрП002030025003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002030025003);
			ОкрП002030022003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002030022003);
			ОкрП002030019003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002030019003);
			ОкрП002030013003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002030013003);

			// Строка 090
			П002030009003 = Макс(ОкрП002030008003
			              - ОкрП002030007003, 0);
			ЗаписатьПоказательВСтруктуру("Лист02_Прил3", "П002030009003", П002030009003, Страница);

			// Строка 160
			П002030016003 = Макс(ОкрП002030013003
			              - ОкрП002030011003, 0);
			ЗаписатьПоказательВСтруктуру("Лист02_Прил3", "П002030016003", П002030016003, Страница);

			// Строка 200
			П002030020003 = Макс(ОкрП002030019003
			              - ОкрП002030018003, 0);
			ЗаписатьПоказательВСтруктуру("Лист02_Прил3", "П002030020003", П002030020003, Страница);

			// Строка 230
			П002030023003 = Макс(ОкрП002030022003
			                                              - ОкрП002030021003, 0);
			ЗаписатьПоказательВСтруктуру("Лист02_Прил3", "П002030023003", П002030023003, Страница);

			// Строка 260
			П002030026003 = Макс(ОкрП002030025003
			              - ОкрП002030024003, 0);
			ЗаписатьПоказательВСтруктуру("Лист02_Прил3", "П002030026003", П002030026003, Страница);

			// Строка 270
			П002030027003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002030003003)
			              + ОкрП002030007003
			              + ОкруглитьЧислоПоФормату(Страница.Данные.П002030010003)
			              + ОкрП002030011003
			              + ОкрП002030018003
			              + ОкрП002030021003
			              + ОкрП002030024003;
			ЗаписатьПоказательВСтруктуру("Лист02_Прил3", "П002030027003", П002030027003, Страница);

			// Строка 280
			П002030028003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002030004003)
			              + ОкрП002030008003
			              + ОкруглитьЧислоПоФормату(Страница.Данные.П002030012003)
			              + ОкрП002030013003
			              + ОкрП002030019003
			              + ОкрП002030022003
			              + ОкрП002030025003;
			ЗаписатьПоказательВСтруктуру("Лист02_Прил3", "П002030028003", П002030028003, Страница);

			// Строка 290
			П002030029003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002030006003)
			              + П002030009003
			              + ОкруглитьЧислоПоФормату(Страница.Данные.П002030015003)
			              + П002030016003
			              + П002030020003
			              + П002030023003
			              + П002030026003;
			ЗаписатьПоказательВСтруктуру("Лист02_Прил3", "П002030029003", П002030029003, Страница);

		ИначеЕсли ИмяЛиста = "Лист02_Прил4" Тогда

			// Необходимо рассчитывать только показатели, зависящие от показателей текущего раздела, а в том случае, если показатель
			// по строке 010 заполнен, то брать данные и из других разделов декларации, считая, что приложение 4 должно представляться.

			// строка 030
			ОкрП002040004003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002040004003);
			ОкрП002040005003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002040005003);
			ОкрП002040006003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002040006003);
			ОкрП002040007003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002040007003);
			ОкрП002040008003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002040008003);
			ОкрП002040009003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002040009003);
			ОкрП002040010003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002040010003);
			ОкрП002040011003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002040011003);
			ОкрП002040012003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002040012003);
			ОкрП002040013003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002040013003);
			ОкрП002040015003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002040015003);

			ОкрП002040003003 = ОкрП002040004003
				             + ОкрП002040005003
				             + ОкрП002040006003
				             + ОкрП002040007003
				             + ОкрП002040008003
				             + ОкрП002040009003
				             + ОкрП002040010003
				             + ОкрП002040011003
				             + ОкрП002040012003
				             + ОкрП002040013003;

			// Строка 030
			ЗаписатьПоказательВСтруктуру("Лист02_Прил4", "П002040003003", ОкрП002040003003, Страница);

			// Строка 010
			ОкрП002040002003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002040002003);
			ОкрП002040001003 = ОкрП002040002003 + ОкрП002040003003;

			// Строка 010
			ЗаписатьПоказательВСтруктуру("Лист02_Прил4", "П002040001003", ОкрП002040001003, Страница);


			// Если Приложение 4 заполнено или будет заполнятся, то переносим данные из других листов.
			// Т.к. приложение 4 заполняется не для всех организаций, то выберем показатель строки 010 для определения заполненности
			// этого приложения.

			Если Страница.Данные.П002040001003 <> 0 Тогда
				П002000010003 = СуммаПоказателяПоВсемСтраницамСпец("Лист02", "П002000010003", Истина
				   , Новый Структура("Ключ, Значение","П002000000100", ?(Сельхоз, "V", "")));

				П002100010003 = СуммаПоказателяПоВсемСтраницамСпец("Лист05", "П002100010003", Ложь);
				П002100006003 = СуммаПоказателяПоВсемСтраницамСпец("Лист05", "П002100006003", Ложь);
				П002100008003 = СуммаПоказателяПоВсемСтраницамСпец("Лист05", "П002100008003", Истина);

				// В 2006 году совокупная сумма переносимого убытка ни в каком отчетном периоде и в целом за налоговый период не может превышать 50
				// процентов налоговой базы (за исключением налогоплательщиков – организаций, имеющих статус резидента промышленно-производственной
				// особой экономической зоны). В связи с этим строка 140 в Декларациях 2006 года рассчитывается в следующем порядке: определяется 50
				// процентов от суммы налоговой базы, исчисленной как совокупность показателей строки 100 Листа 02,  строки 060 Листов 05,  строк 410,
				// 450 и 490 Листа 06; из полученной суммы исключаются убытки, зачтенные в уменьшение налоговой базы по строке 080 Листов 05, строкам
				// 430, 470 и 510 Листа 06.
				// Строка 140

				Если Год(мДатаНачалаПериодаОтчета) = 2006 Тогда
					// Для 2006 г. 50%
					Коэф = 0.5;
				ИначеЕсли Год(мДатаНачалаПериодаОтчета) > 2006 Тогда
					Коэф = 1;
				КонецЕсли;

				П002040014003 = ОкруглитьЧислоПоФормату(((П002000010003 + П002100006003 + П002110041003 + П002110045003 + П002110049003) * Коэф))
				              - (П002100008003
				              + П002110043003
				              + П002110047003
				              + П002110051003);

				// Показатель по строке 140 отрицательным быть не может.
				П002040014003 = Макс(П002040014003, 0);

				УстановитьЗначениеПоказателяВСтруктуреДанныхСучетомВариантаЗаполнения("Лист02_Прил4", "П002040014003", П002040014003, ИндексСтраницыВСтруктуреМногостраничногоРаздела, Страница);

				// Блок сбора данных с других разделов.
				П002000006003 = СуммаПоказателяПоВсемСтраницамСпец("Лист02", "П002000006003", Ложь
				   , Новый Структура("Ключ, Значение","П002000000100", ?(Сельхоз, "V", "")));

				// 9.3. Строки 160 - 180 заполняются при составлении Декларации за налоговый период.
				// Строка 160
				Если Месяц(мДатаКонцаПериодаОтчета) = 12 Тогда
					ЗаписатьПоказательВСтруктуру("Лист02_Прил4", "П002040016003", ОкрП002040001003 - ОкрП002040015003
					                                         - Мин(П002000006003 + (П002100010003 + П002110053003), 0), Страница);

					// 9.3. Строки 160 - 180 заполняются при составлении Декларации за налоговый период.
					// Строка 170
					ОкрП002040002003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002040002003);
					ЗаписатьПоказательВСтруктуру("Лист02_Прил4", "П002040017003", ОкрП002040002003 - Мин(ОкрП002040002003, ОкрП002040015003), Страница);

					// Строка 180
					ЗаписатьПоказательВСтруктуру("Лист02_Прил4", "П002040018003", Страница.Данные.П002040016003 - Страница.Данные.П002040017003, Страница);

				Иначе

					ЗаписатьПоказательВСтруктуру("Лист02_Прил4", "П002040016003", 0, Страница);

					ЗаписатьПоказательВСтруктуру("Лист02_Прил4", "П002040017003", 0, Страница);
					ЗаписатьПоказательВСтруктуру("Лист02_Прил4", "П002040018003", 0, Страница);

				КонецЕсли;

			Иначе
				// Считаем, что лист представляться не должен.
				ЗаписатьПоказательВСтруктуру("Лист02_Прил4", "П002040014003", 0, Страница);

				ЗаписатьПоказательВСтруктуру("Лист02_Прил4", "П002040016003", 0, Страница);
				ЗаписатьПоказательВСтруктуру("Лист02_Прил4", "П002040017003", 0, Страница);
				ЗаписатьПоказательВСтруктуру("Лист02_Прил4", "П002040018003", 0, Страница);

			КонецЕсли;

		ИначеЕсли ИмяЛиста = "Лист02_Прил5" Тогда

			Если (НЕ мЕстьОбособленныеПодразделения) И (мПоМестуНахожденияОрганизации) Тогда
				// В данном случае, у предприятия нет обособленных подразделений. Приложение 5 к листу 02 не заполняется.
				Возврат;
			КонецЕсли;

			// показатель по строке 030 - из листа 02, но в случае, заполнения обособл. подразделением, лист 02 не заполняется, и чтобы можно было
			// ввести необходимое значение делаем через вариант заполнения.

			П002050003003 = СуммаПоказателяПоВсемСтраницамСпец("Лист02", "П002000012003", Ложь, Новый Структура("Ключ, Значение","П002000000100", ?(Сельхоз, "V", "")), Ложь);
			УстановитьЗначениеПоказателяВСтруктуреДанныхСучетомВариантаЗаполнения("Лист02_Прил5", "П002050003003", П002050003003, ИндексСтраницыВСтруктуреМногостраничногоРаздела, Страница);
			П002050003003 = Страница.Данные.П002050003003;

			// Соберем сумму налоговой базы по ликвидированным предприятиям, без учета является ли сельскохозяйственным товаропроизводит. или нет
			БазаПоЛиквидированнымОП = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил5", "П002050005003", Ложь, Новый Структура("Ключ, Значение","П002050000100", ?(Сельхоз, "V", "")), Ложь, "Ликвидированные");

			// по строке 031 указывается налоговая база в целом по организации без учета налоговой базы, приходящейся на ликвидированные обособленные
			// подразделения. Разность между показателями строк 030 и 031 должна соответствовать сумме показателей по строкам 050 Приложений № 5 с
			// кодом «3» по строке 002 по ликвидированным обособленным подразделениям.  

			ЭтоЛиквидированноеПодразделение = ?(Страница.Данные.П002050000200 = "3", Истина, Ложь);
			НалоговаяБазаВсего = П002050003003 - БазаПоЛиквидированнымОП;

			П002050003103 = ОкруглитьЧислоПоФормату(Страница.Данные.П002050003103);

			// 10.11. При составлении Приложений № 5 с кодом «3» по строке 002 по ликвидированному обособленному подразделению в Декларациях за
			// последующие отчетные периоды и текущий налоговый период по строке 040 указывается доля налоговой базы, а по строке 050 - налоговая база
			//  в размерах, исчисленных и отраженных в Декларациях за отчетный период, предшествующий кварталу, в котором оно было ликвидировано.
			// При снижении налоговой базы в целом по организации (строка 120 Листа 02) по сравнению с предыдущим отчетным периодом, подлежит
			// уменьшению ранее исчисленный налог на прибыль как в целом по организации, так и по обособленным подразделениям, включая
			// ликвидированные обособленные подразделения. Строка 050 Приложения № 5 по ликвидированному обособленному подразделению в данном случае
			// определяется путем умножения показателя по строке 040 на показатель строки 030.

			//Если (НалоговаяБазаВсего <> 0) И (НЕ ЭтоЛиквидированноеПодразделение) Тогда
			Если БазаПоЛиквидированнымОП = 0 Тогда

				// Данные строки 050 определяются путем умножения показателя строки 030 (или строки 031 при наличии у организации ликвидированных
				// обособленных подразделений) на данные строки 040.
				
				//Если заполнена строка 031, то стр.050  =  стр.031 х стр.040
				//Иначе стр.050  =  стр.030 х стр.040
				Множитель = ?(П002050003103 <> 0, П002050003103, П002050003003);
				П002050005003 = ОкруглитьЧислоПоФормату(Множитель * Страница.Данные.П002050004003 / 100);
			Иначе
				П002050005003 = ОкруглитьЧислоПоФормату(П002050003103 * Страница.Данные.П002050004003 / 100);
			КонецЕсли;

			// Показатель 050 работает через систему ВариантовЗаполнения. Текст из инструкции
			// ЗаписатьПоказательВСтруктуру("Лист02_Прил5", "П002050005003", П002050005003, Страница);
			// Запишем через УстановитьЗначение не смотря на то, что в составе показателей стоит по умолчанию 4.
			// Параметр автозаполнения меняется, при изменении статуса обособленного подразделения.
			УстановитьЗначениеПоказателяВСтруктуреДанныхСучетомВариантаЗаполнения("Лист02_Прил5", "П002050005003", П002050005003, ИндексСтраницыВСтруктуреМногостраничногоРаздела, Страница);

			ОкрП002050007003 =ОкруглитьЧислоПоФормату(
				 ОкруглитьЧислоПоФормату(Страница.Данные.П002050005003)
			   * Страница.Данные.П002050006003 / 100);

			// Строка 070
			ЗаписатьПоказательВСтруктуру("Лист02_Прил5", "П002050007003", ОкрП002050007003, Страница);

			ОкрП002050008003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002050008003);
			ОкрП002050009003 = ОкруглитьЧислоПоФормату(Страница.Данные.П002050009003);

			// Строка 100
			ЗаписатьПоказательВСтруктуру("Лист02_Прил5", "П002050010003", Макс(ОкрП002050007003 - ОкрП002050008003 - ОкрП002050009003, 0), Страница);

			// Строка 110
			ЗаписатьПоказательВСтруктуру("Лист02_Прил5", "П002050011003", Макс((ОкрП002050008003 + ОкрП002050009003) - ОкрП002050007003, 0), Страница);

		КонецЕсли;

	КонецЦикла; // Конец перебора страниц многостраничного раздела

КонецПроцедуры // РасчетВСтруктуре

// ВариантЗаполненияДляНалоговойБазы
// Процедура проставит вариант заполнения для требуемого показателя.
// Обязательно показатель должен быть в структуре вариантов заполнения.
//
//Процедура ВариантЗаполненияДляНалоговойБазы(ИмяЛиста, Показатель, Вариант)

//	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяЛиста);
//	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(Показатель, "КодПоказателя");
//	// НайденнаяСтрока[Показатель].ВариантЗаполнения

//КонецПроцедуры // ВариантЗаполненияДляНалоговойБазы

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Функция УстановитьЗначениеПоказателяВСтруктуреДанныхСучетомВариантаЗаполнения(ИмяСтраницыПанели, ИмяПоказателя, Знач ЗначениеПоказателя, ИндексВариантовЗаполнения, СтраницаДанные)
	Перем МассивВариантовЗаполненияСтраниц;

	// Получим массив
	мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц);
	ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[ИндексВариантовЗаполнения];

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда

		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		// В случае, если предлагаемое значение не числовое и второй тип (с корректировкой)
		// тогда принимаем предложенное значение за 0.
		Если (НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя)) И (ВариантЗаполнения = 2) Тогда
			ЗначениеПоказателя = 0;
		КонецЕсли;

		Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя) Тогда
			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;
		КонецЕсли;

		Если ВариантЗаполнения = 1 Тогда
			// заполняется только вручную
			Возврат 0; // Переданное значение не установлено
		ИначеЕсли ВариантЗаполнения = 2 Тогда
			// автоматически, с возможностью ручной корректировки
			Дельта             = НайденнаяСтрока.Дельта;
			ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			Результат = 2; // Переданное значение установлено, но с корректировкой
		Иначе
			Результат = 1; // Переданное значение установлено
		КонецЕсли;

	КонецЕсли;

	ЗаписатьПоказательВСтруктуру(ИмяСтраницыПанели, ИмяПоказателя, ЗначениеПоказателя, СтраницаДанные);
	Возврат Результат;

КонецФункции // УстановитьЗначениеПоказателя()

// ДобавитьПризнакВхожденияОрганизацииВГруппуОП
//
Процедура ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(Знач Признак, СниматьРанееУстановленныеПризнаки)

	ДанныеАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Лист02_Прил5.Найти(Истина, "АктивнаяСтраница").Данные;

	Если ТипЗнч(ДанныеАктивнойСтраницы) <> Тип("Структура") Тогда
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_Прил5", Ложь);
	КонецЕсли;

	ДанныеАктивнойСтраницы.Вставить("ВГруппуОПВходитОрганизация", Признак);
	Если СниматьРанееУстановленныеПризнаки Тогда
		// Если флаг был возведен и на других листах декларации, тогда снимем его.
		Для каждого Страница Из мСтруктураМногостраничныхРазделов.Лист02_Прил5 Цикл
			Если Страница.Данные.Свойство("ВГруппуОПВходитОрганизация") Тогда
				Если (Страница.Данные.ВГруппуОПВходитОрганизация) И (НЕ Страница.АктивнаяСтраница) И (Признак) Тогда
					// Страница.Данные.ВГруппуОПВходитОрганизация = НЕ Признак; // Противоположный признак.
					Сообщить("Уже введен экземпляр приложения 5 к листу 02 с признаком вхождения организации в группу обособленных подразделений.", СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; // СниматьРанееУстановленныеПризнаки

КонецПроцедуры // ДобавитьПризнакВхожденияОрганизацииВГруппуОП

// ЭтоНалоговыйПериод
// Данная функция определяет тип периода отчета: налоговый или отчетный.
// Функция экспортная, т.к. вызывается из обработки контрольных соотношений при проверки декларации по УСН
//
// Параметры:
//  Организация    - ссылка на справочник организаций
//  ДатаПодписания - дата подписания отчета, важно для анализа по регистру учетной политики
//
// Возвращаемое значение:
//  Истина         - если период налоговый. Анализируется номер квартала и записи в регистре учетной политике.
//  Ложь           - если период отчетный
//
Функция ЭтоНалоговыйПериод(Организация, ДатаПодписанияОтчета, ДатаКонцаПериодаОтчета) Экспорт

	Если Месяц(ДатаКонцаПериодаОтчета) = 12 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ЭтоНалоговыйПериод

// Функция РАСЧЕТ ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "", ЯвляетсяСельхозТовароПроизводителем = Неопределено) Экспорт

	Если ФлажокОтклАвтоРасчет Или мРежимПечати Или мИсключитьЗапускРасчета Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1_1" Тогда

		СуммаНалогаФедерал = 0;
		СуммаНалогаСубъект = 0;
		СуммаАвансовФедерал = 0;
		СуммаАвансовСубъект = 0;
		СуммаЗасчитФедерал = 0;
		СуммаЗасчитСубъект = 0;
		СуммаПереходФедерал = 0;
		СуммаПереходСубъект = 0;
		СуммаПереходМестный = 0;

		// 4.2.2. По строке 040 указывается сумма налога на прибыль к доплате в федеральный бюджет, определяемая путем вычитания из строки 190
		// показателей строк 220 и 250 Листа 02. Данный показатель указывается, если показатель строки 190 превышает сумму строк 220 и 250 Листа 02
		// (строка  190 - строка 220 - строка 250, если строка 190 больше суммы строк 220 и 250)

		СуммаНалогаФедерал = СуммаПоказателяПоВсемСтраницамСпец("Лист02", "П002000019003", Ложь, ,Ложь);
		СуммаНалогаСубъект = СуммаПоказателяПоВсемСтраницамСпец("Лист02", "П002000020003", Ложь, ,Ложь);
		СуммаАвансовФедерал = СуммаПоказателяПоВсемСтраницамСпец("Лист02", "П002000022003", Ложь, ,Ложь);
		СуммаАвансовСубъект = СуммаПоказателяПоВсемСтраницамСпец("Лист02", "П002000023003", Ложь, ,Ложь);
		СуммаЗасчитФедерал = СуммаПоказателяПоВсемСтраницамСпец("Лист02", "П002000025003", Ложь, ,Ложь);
		СуммаЗасчитСубъект = СуммаПоказателяПоВсемСтраницамСпец("Лист02", "П002000026003", Ложь, ,Ложь);
		СуммаПереходФедерал = СуммаПоказателяПоВсемСтраницамСпец("Лист02", "П002000032003", Истина, ,Ложь);
		СуммаПереходСубъект = СуммаПоказателяПоВсемСтраницамСпец("Лист02", "П002000033003", Истина, ,Ложь);
		СуммаПереходМестный = СуммаПоказателяПоВсемСтраницамСпец("Лист02", "П002000034003", Истина, ,Ложь);

		Если мПоМестуНахожденияОрганизации Тогда

			// Рассмотрим ситуацию, когда отчет по месту нахождения организации, но есть обособленные подразделения.
			Если мЕстьОбособленныеПодразделения Тогда

				// Соберем суммы по приложению 5 к листу 02, Все листы с признаком 1.
				П002050010003_1 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил5", "П002050010003", Ложь, ,Ложь, "3");
				П002050011003_1 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил5", "П002050011003", Ложь, ,Ложь, "3");
				П002050013003_1 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил5", "П002050013003", Истина, ,Ложь, "3");
				П002050014003_1 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил5", "П002050014003", Истина, ,Ложь, "3");

				П002050010003Обособ = П002050010003_1;
				П002050011003Обособ = П002050011003_1;
				П002050013003Обособ = П002050013003_1;
				П002050014003Обособ = П002050014003_1;

			КонецЕсли;

		Иначе

			// Возьмем из приложения 5 с признаками 2 и 4
			П002050010003Только2и4 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил5", "П002050010003", Ложь, ,Ложь, "Только2и4");
			П002050011003Только2и4 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил5", "П002050011003", Ложь, ,Ложь, "Только2и4");
			П002050013003Только2и4 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил5", "П002050013003", Истина, ,Ложь, "Только2и4");
			П002050014003Только2и4 = СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил5", "П002050014003", Истина, ,Ложь, "Только2и4");

			П002050010003Обособ = П002050010003Только2и4;
			П002050011003Обособ = П002050011003Только2и4;
			П002050013003Обособ = П002050013003Только2и4;
			П002050014003Обособ = П002050014003Только2и4;

		КонецЕсли;

		Если (мПоМестуНахожденияОрганизации И мЕстьОбособленныеПодразделения) Или (НЕ мПоМестуНахожденияОрганизации) Тогда
			// Сумма налога к доплате в бюджет субъекта РФ 
			СуммаНалогаДоплСубъект = П002050010003Обособ;

			// Сумма налога к уменьшению в бюджет субъекта РФ 
			СуммаНалогаУменьшСубъект = П002050011003Обособ;

			// Сумма налога с налоговой базы переходного периода в бюджет субъекта РФ
			СуммаНалогаПерехСубъект  = П002050013003Обособ;

			// Сумма налога с налоговой базы переходного периода в местный бюджет
			СуммаНалогаПерехМестный  = П002050014003Обособ;
		КонецЕсли;

// ************************************************

		// Кол-во сроков уплаты всегда забито жестко на обоих листах 02, менять нельзя.
		КолвоСроковУплаты = мРаздел2.Области.П002000035003.Значение;

		// Стр. 040
		мСуммаДоплФедРаздел1_1 = Макс(СуммаНалогаФедерал - СуммаАвансовФедерал - СуммаЗасчитФедерал, 0);

		// Стр. 050
		мСуммаУменФедРаздел1_1 = Макс(СуммаАвансовФедерал + СуммаЗасчитФедерал - СуммаНалогаФедерал, 0);

		Если НЕ (Месяц(мДатаКонцаПериодаОтчета) = 12) Тогда
			// Стр. 051
			мСуммаПерехФедРаздел1_1 = ?(КолвоСроковУплаты <> 0, ОкруглитьЧислоПоФормату(СуммаПереходФедерал / КолвоСроковУплаты), 0);
		КонецЕсли;

		Если НЕ ((мПоМестуНахожденияОрганизации И мЕстьОбособленныеПодразделения) Или (НЕ мПоМестуНахожденияОрганизации)) Тогда
			// Стр. 070
			мСуммаДоплСубРаздел1_1 = Макс(СуммаНалогаСубъект - СуммаАвансовСубъект - СуммаЗасчитСубъект, 0);

			// Стр. 080
			мСуммаУменСубРаздел1_1 = Макс(СуммаАвансовСубъект + СуммаЗасчитСубъект - СуммаНалогаСубъект, 0);

			Если НЕ (Месяц(мДатаКонцаПериодаОтчета) = 12) Тогда
				// Стр. 081
				мСуммаПерехСубРаздел1_1 = ?(КолвоСроковУплаты <> 0, ОкруглитьЧислоПоФормату(СуммаПереходСубъект / КолвоСроковУплаты), 0);

				// Стр. 091
				мСуммаПерехМестРаздел1_1 = ?(КолвоСроковУплаты <> 0, ОкруглитьЧислоПоФормату(СуммаПереходМестный / КолвоСроковУплаты), 0);
			КонецЕсли;

		Иначе

			// Стр. 070
			мСуммаДоплСубРаздел1_1 = Макс(СуммаНалогаДоплСубъект - СуммаНалогаУменьшСубъект, 0);

			// Стр. 080
			мСуммаУменСубРаздел1_1 = Макс(СуммаНалогаУменьшСубъект - СуммаНалогаДоплСубъект, 0);

			Если НЕ (Месяц(мДатаКонцаПериодаОтчета) = 12) Тогда

				// Стр. 081
				мСуммаПерехСубРаздел1_1 = СуммаНалогаПерехСубъект;

				// Стр. 091
				мСуммаПерехМестРаздел1_1 = СуммаНалогаПерехМестный;

			КонецЕсли;

		КонецЕсли;

		ЗаполнениеЗначенийВКвадратиках("Раздел1_1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_2" Тогда

		// Показатели строк 020, 030 и 040 заполняются автоматически при открытии декларации.

		СуммаАвансовФедеральный = 0;
		СуммаАвансовСубъект = 0;

		// Комментарий, сумма по субъекту берем из приложение 5 к листу 02, она должна совпадать с листом 02, строка 310.
		СуммаАвансовФедеральный = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницамСпец("Лист02", "П002000030003", Ложь, ,Ложь));
		СуммаАвансовСубъект = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницамСпец("Лист02", "П002000031003", Ложь,, Ложь));

		// Для организаций, отчитывающихся за себя, у которых нет обособленных подразделений.
		Если НЕ мПоМестуНахожденияОрганизации Тогда
			// Суммы налога, подлежащие к доплате / к уменьшению
			// в бюджет субъекта определяем по конкретному
			// обособленному подразделению.			
			               
			// Авансовые платежи по части, зачисляемой в федеральный бюджет,
			// осуществляются по месту нахождения организации.


			// Организацией, имеющей в своем составе обособленные подразделения, при представлении Декларации, в том числе по месту
			// нахождения этих обособленных подразделений (ответственных обособленных подразделений), суммы ежемесячных авансовых платежей,
			// подлежащих уплате в бюджет субъекта Российской Федерации, указываются соответственно по строкам 220 - 240 и сумма их должна
			// соответствовать строкам 120 Приложений № 5 к Листу 02.

			СуммаАвансовФедеральный = 0;
			Строка120 = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил5", "П002050012003", Ложь, , Ложь, "Только2и4"));
			СуммаАвансовСубъект     = Строка120;

		ИначеЕсли мЕстьОбособленныеПодразделения Тогда
			// Для организаций, которые отчитываются за обособленное подразделение или за организацию, но с имеющимися обособленныеми подразделениями.
			// СуммаАвансовФедеральный = 0;
			Строка120 = ОкруглитьЧислоПоФормату(СуммаПоказателяПоВсемСтраницамСпец("Лист02_Прил5", "П002050012003", Ложь, , Ложь, "3"));
			СуммаАвансовСубъект     = Строка120;
		КонецЕсли;

		// Заполним строки 120, 130, 140 раздела 1.2
		мСуммаФедПоСроку1Раздел1_2 = ОкруглитьЧислоПоФормату(СуммаАвансовФедеральный / 3);
		мСуммаФедПоСроку2Раздел1_2 = ОкруглитьЧислоПоФормату(СуммаАвансовФедеральный / 3);
		мСуммаФедПоСроку3Раздел1_2 = Макс( СуммаАвансовФедеральный - (мСуммаФедПоСроку1Раздел1_2 + мСуммаФедПоСроку2Раздел1_2), 0 );

		// Заполняем строки 220 - 240

		мСуммаСубПоСроку1Раздел1_2 = ОкруглитьЧислоПоФормату(СуммаАвансовСубъект / 3);
		мСуммаСубПоСроку2Раздел1_2 = ОкруглитьЧислоПоФормату(СуммаАвансовСубъект / 3);
		мСуммаСубПоСроку3Раздел1_2 = Макс( СуммаАвансовСубъект - (мСуммаСубПоСроку1Раздел1_2 + мСуммаСубПоСроку2Раздел1_2), 0 );

		ЗаполнениеЗначенийВКвадратиках("Раздел1_2");

		// Если подраздел 1.2 должен быть заполнен, тогда проставим даты сроков уплат.
		Если (мСуммаФедПоСроку1Раздел1_2 + мСуммаФедПоСроку2Раздел1_2 + мСуммаФедПоСроку3Раздел1_2
		    + мСуммаСубПоСроку1Раздел1_2 + мСуммаСубПоСроку2Раздел1_2 + мСуммаСубПоСроку3Раздел1_2) <> 0 Тогда
			ПроставитьДатыВРазделе1_2(Ложь);
		Иначе
			ПроставитьДатыВРазделе1_2(Истина);
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_3" Тогда
		// Данный раздел не заполняется в автоматическом режиме.
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02" Тогда

		// Если декларация представляется по месту нахождения обособленного подразделения,
		// то Лист 02 не заполняется и не представляется.
		Если НЕ мПоМестуНахожденияОрганизации Тогда
			Возврат;
		КонецЕсли;

		РасчетВСтруктуре("Лист02", ЯвляетсяСельхозТовароПроизводителем);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил1" Тогда

		РасчетВСтруктуре("Лист02_Прил1", ЯвляетсяСельхозТовароПроизводителем);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил2" Тогда

		РасчетВСтруктуре("Лист02_Прил2", ЯвляетсяСельхозТовароПроизводителем);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил3" Тогда

		РасчетВСтруктуре("Лист02_Прил3", ЯвляетсяСельхозТовароПроизводителем);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил4" Тогда

		РасчетВСтруктуре("Лист02_Прил4", ЯвляетсяСельхозТовароПроизводителем);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил5" Тогда

		РасчетВСтруктуре("Лист02_Прил5", ЯвляетсяСельхозТовароПроизводителем);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист03" Тогда

		ОкрП002060003003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П002060003003.Значение);
		ОкрП002060004003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П002060004003.Значение);
		ОкрП002060005003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П002060005003.Значение);
		ОкрП002060006003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П002060006003.Значение);

		// Строка 020
		П002060002003 = ОкрП002060003003 + ОкрП002060004003 + ОкрП002060005003 + ОкрП002060006003;
		мРаздел3.Области.П002060002003.Значение = П002060002003;
		// Сразу сохраним показатель в структуре.
		ЗаписатьПоказательВСтруктуру("Лист03", "П002060002003", П002060002003);

		РазницаСтрок = ОкруглитьЧислоПоФормату(мРаздел3.Области.П002060001003.Значение)
		             - ОкруглитьЧислоПоФормату(мРаздел3.Области.П002060003003.Значение)
		             - ОкруглитьЧислоПоФормату(мРаздел3.Области.П002060004003.Значение);

		// Строка 080
		П002060008003 = 0;
		Если РазницаСтрок <> 0 Тогда
			П002060008003 = (ОкруглитьЧислоПоФормату(мРаздел3.Области.П002060007003.Значение) / РазницаСтрок) * 100;
			мРаздел3.Области.П002060008003.Значение = П002060008003;
			ЗаписатьПоказательВСтруктуру("Лист03", "П002060008003", П002060008003);
		Иначе
			мРаздел3.Области.П002060008003.Значение = 0;
			ЗаписатьПоказательВСтруктуру("Лист03", "П002060008003", 0);
		КонецЕсли;

		П002060009003 = ОкруглитьЧислоПоФормату(мРаздел3.Области.П002060001003.Значение) - П002060002003;
		мРаздел3.Области.П002060009003.Значение = П002060009003;
		ЗаписатьПоказательВСтруктуру("Лист03", "П002060009003", П002060009003);

		П002060010003 = ОкруглитьЧислоПоФормату((П002060009003 * П002060008003) / 100);
		мРаздел3.Области.П002060010003.Значение = П002060010003;
		ЗаписатьПоказательВСтруктуру("Лист03", "П002060010003", П002060010003);

		П14003 = ОкруглитьЧислоПоФормату(П002060010003 * мРаздел3.Области.П002060013003.Значение / 100);
		мРаздел3.Области.П002060014003.Значение = П14003;
		ЗаписатьПоказательВСтруктуру("Лист03", "П002060014003", П14003);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист03Продолжение" Тогда

		П002070000600 = мРаздел3Продолжение.Области.П002070000600.Значение;
		Если П002070000600 = "1" Тогда
			П002070002003 = 15;
		ИначеЕсли П002070000600 = "2" Тогда
			П002070002003 = 9;
		Иначе
			П002070002003 = 0;
		КонецЕсли;

		// Строка 020
		мРаздел3Продолжение.Области.П002070002003.Значение = П002070002003;
		ЗаписатьПоказательВСтруктуру("Лист03Продолжение", "П002070002003", П002070002003);

		// Строка 030
		П002070003003 = ОкруглитьЧислоПоФормату(мРаздел3Продолжение.Области.П002070001003.Значение
		   * мРаздел3Продолжение.Области.П002070002003.Значение / 100);
		мРаздел3Продолжение.Области.П002070003003.Значение = П002070003003;

		ЗаписатьПоказательВСтруктуру("Лист03Продолжение", "П002070003003", П002070003003);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист04" Тогда

		П4003 = (ОкруглитьЧислоПоФормату(мРаздел4.Области.П002090001003.Значение) -
		                                            ОкруглитьЧислоПоФормату(мРаздел4.Области.П002090002003.Значение)) *
		                                            мРаздел4.Области.П002090003003.Значение / 100;
		П4003 = ОкруглитьЧислоПоФормату(П4003);
		П4003 = Макс(П4003, 0);

		мРаздел4.Области.П002090004003.Значение = П4003;
		ЗаписатьПоказательВСтруктуру("Лист04", "П002090004003", П4003);

		// Суммы начисленного налога за предыдущие отчетные периоды отражаются по строке 070, а в последнем квартале (месяце)
		// отчетного (налогового) периода  - по строке 080.
		Если (мПериодичность = Перечисления.Периодичность.Квартал) ИЛИ
		   (мПериодичность = Перечисления.Периодичность.Месяц
		   И (Месяц(мДатаКонцаПериодаОтчета) = 3
		    Или Месяц(мДатаКонцаПериодаОтчета) = 6
		    Или Месяц(мДатаКонцаПериодаОтчета) = 9
		    Или Месяц(мДатаКонцаПериодаОтчета) = 12)) Тогда

			П8003 = П4003
			   - ОкруглитьЧислоПоФормату(мРаздел4.Области.П002090005003.Значение)
			   - ОкруглитьЧислоПоФормату(мРаздел4.Области.П002090006003.Значение)
			   - ОкруглитьЧислоПоФормату(мРаздел4.Области.П002090007003.Значение);
			П8003 = Макс(П8003, 0);

			мРаздел4.Области.П002090008003.Значение = П8003;
			ЗаписатьПоказательВСтруктуру("Лист04", "П002090008003", П8003);

		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист05" Тогда

		// Строка 040
		ОкрП002100004003 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П002100001003.Значение)
		   + ОкруглитьЧислоПоФормату(мРаздел5.Области.П002100002003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел5.Области.П002100003003.Значение);
		мРаздел5.Области.П002100004003.Значение = ОкрП002100004003;
		ЗаписатьПоказательВСтруктуру("Лист05", "П002100004003", ОкрП002100004003);

		// Строка 060
		// Строка 060 может быть меньше 0, тк. в стр. 090, есть условия, что может быть 060 менее 0. Оператор Макс, убран.
		ОкрП002100006003 =  мРаздел5.Области.П002100004003.Значение
		   - ОкруглитьЧислоПоФормату(мРаздел5.Области.П002100005003.Значение);
		мРаздел5.Области.П002100006003.Значение = ОкрП002100006003;
		ЗаписатьПоказательВСтруктуру("Лист05", "П002100006003", ОкрП002100006003);

		// Строка 090
		Если Месяц(мДатаКонцаПериодаОтчета) = 12 И ОкрП002100006003 < 0 Тогда
			ОкрП002100009003 = Модуль(ОкрП002100006003) + ОкруглитьЧислоПоФормату(мРаздел5.Области.П002100007003.Значение);
		Иначе
			ОкрП002100009003 = ОкруглитьЧислоПоФормату(мРаздел5.Области.П002100007003.Значение)
			   - ОкруглитьЧислоПоФормату(мРаздел5.Области.П002100008003.Значение);
		КонецЕсли;

		// Запишем результат расчета строки 090.
		мРаздел5.Области.П002100009003.Значение = ОкрП002100009003;
		ЗаписатьПоказательВСтруктуру("Лист05", "П002100009003", ОкрП002100009003);

		// Положительная сумма по строке 100 отражается по строкам 120, 130  Листа 02 Декларации.
		// Строка 100
		ОкрП002100010003 = мРаздел5.Области.П002100006003.Значение
		  - ОкруглитьЧислоПоФормату(мРаздел5.Области.П002100008003.Значение);
		мРаздел5.Области.П002100010003.Значение = Макс(ОкрП002100010003, 0);
		ЗаписатьПоказательВСтруктуру("Лист05", "П002100010003", Макс(ОкрП002100010003, 0));

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист06" Тогда

		ОкрП002110025003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110025003.Значение);
		ОкрП002110026003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110026003.Значение);
		ОкрП002110027003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110027003.Значение);
		ОкрП002110028003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110028003.Значение);
		ОкрП002110029003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110029003.Значение);
		ОкрП002110030003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110030003.Значение);
		ОкрП002110031003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110031003.Значение);
		ОкрП002110032003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110032003.Значение);

		ОкрП002110020003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110020003.Значение);
		ОкрП002110021003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110021003.Значение);
		ОкрП002110022003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110022003.Значение);

		ОкрП002110002003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110002003.Значение);
		ОкрП002110003003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110003003.Значение);
		ОкрП002110004003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110004003.Значение);
		ОкрП002110005003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110005003.Значение);
		ОкрП002110006003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110006003.Значение);
		ОкрП002110007003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110007003.Значение);
		ОкрП002110008003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110008003.Значение);
		ОкрП002110009003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110009003.Значение);
		ОкрП002110010003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110010003.Значение);
		ОкрП002110011003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110011003.Значение);
		ОкрП002110012003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110012003.Значение);
		ОкрП002110013003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110013003.Значение);

		ОкрП002110047003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110047003.Значение);
		ОкрП002110051003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110051003.Значение);

		// Строка 010
		П1003 = ОкрП002110002003
		      + ОкрП002110003003
		      + ОкрП002110004003
		      + ОкрП002110005003
		      + ОкрП002110006003
		      + ОкрП002110007003
		      + ОкрП002110008003
		      + ОкрП002110009003
		      + ОкрП002110010003
		      + ОкрП002110011003;

		мРаздел6.Области.П002110001003.Значение = П1003;
		// ЗаписатьПоказательВСтруктуру("Лист06", "П002110001003", П1003);

		// ({(строка 020 + строка 030 - строка 200 (кроме прочих расходов)): [положит. знач. (строка 020 + строка 030 -
		// строка 200 (кроме прочих расходов)) + положит. знач. (строка 040 + строка 050 - строка 210 (кроме прочих расходов))
		// + строка 060 + строка 070+ строка 080 + строка 090 + строка 100  + положит. знач. (строка110 - строка 220 (кроме прочих расходов)]} х
		// строка 130 )

		// Показатели строк 140, 150, 160, 170 и 180 раннее рассчитывались и имели статус автозаполнения равный 4.
		// Т.к. в инструкции по заполнению указывается, что в расчете основного показателя Знач1 в скобках "кроме прочих расходов".
		// Такие расходы отдельной строкой не выделены, поэтому посчитать точное значение показателей не представляется возможным.

		//Знач1 = Модуль(ОкрП002110002003
		//   + ОкрП002110003003
		//   - ОкрП002110020003)
		//   + Модуль(ОкрП002110004003
		//   + ОкрП002110005003
		//   - ОкрП002110021003)
		//   + ОкрП002110006003
		//   + ОкрП002110007003
		//   + ОкрП002110008003
		//   + ОкрП002110009003
		//   + ОкрП002110010003 + Модуль(
		//   ОкрП002110011003 - ОкрП002110022003);

		//мРаздел6.Области.П002110014003.Значение = ?(Знач1 <> 0, 
		//	ОкруглитьЧислоПоФормату(((ОкрП002110002003
		//   + ОкрП002110003003
		//   - ОкрП002110020003
		//	 ) / Знач1) * ОкрП002110013003), 0);

		// ({(строка 040 + строка 050 - строка 210 (кроме прочих расходов)): [положит. знач. (строка 020 + строка 030 -
		// строка 200 (кроме прочих расходов)) + положит. знач. (строка 040 + строка 050 - строка 210 (кроме прочих расходов)) + строка 060
		// + строка 070+ строка 080 + строка 090 + строка 100  + положит. знач. (строка110 - строка 220 (кроме прочих расходов)]} х строка 130 )
		//мРаздел6.Области.П002110015003.Значение = ?(Знач1 <> 0, ОкруглитьЧислоПоФормату(
		//	((ОкрП002110004003
		//   + ОкрП002110005003
		//   - ОкрП002110021003
		//	 ) / Знач1) * ОкрП002110013003), 0);

		// ({строка 060): [положит. знач. (строка 020 + строка 030 - строка 200 (кроме прочих расходов)) + положит. знач. (строка 040 + строка 050
		// - строка 210 (кроме прочих расходов)) + строка 060 + строка 070+ строка 080 + строка 090 + строка 100  + положит. знач. (строка110 -
		// строка 220 (кроме прочих расходов)]} х строка 130 ).
		//мРаздел6.Области.П002110016003.Значение = ?(Знач1 <> 0,
		//	ОкруглитьЧислоПоФормату(((ОкрП002110006003 / Знач1) * ОкрП002110013003)), 0);

		// ({строка 070: [положит. знач. (строка 020 + строка 030 - строка 200 (кроме прочих расходов)) + положит. знач. (строка 040 + строка 050
		// - строка 210 (кроме прочих расходов)) + строка 060 + строка 070+ строка 080 + строка 090 + строка 100  + положит. знач. (строка110 -
		// строка 220 (кроме прочих расходов)]} х строка 130 ).
		//мРаздел6.Области.П002110017003.Значение = Знач1 * ОкрП002110013003;

		// ({(строка 110 - строка 220 (кроме прочих расходов)): [положит. знач. (строка 020 + строка 030 - строка 200 (кроме прочих расходов))
		// + положит. знач. (строка 040 + строка 050 - строка 210 (кроме прочих расходов)) + строка 060 + строка 070+ строка 080 + строка 090
		// + строка 100  + положит. знач. (строка110 - строка 220 (кроме прочих расходов)]} х строка 130 ).
		//мРаздел6.Области.П002110018003.Значение = ?(Знач1 <> 0,
		//	ОкруглитьЧислоПоФормату(((ОкрП002110011003 - ОкрП002110022003) / Знач1) * ОкрП002110013003), 0);

		// Строка 190
		П19003 = ОкрП002110020003
		       + ОкрП002110021003
		       + ОкрП002110022003;
		мРаздел6.Области.П002110019003.Значение = П19003;
		// ЗаписатьПоказательВСтруктуру("Лист06", "П002110019003", П19003);

		// Строка 240
		П24003 = ОкрП002110025003
		       + ОкрП002110026003
		       + ОкрП002110027003
		       + ОкрП002110028003
		       + ОкрП002110029003
		       + ОкрП002110030003
		       + ОкрП002110031003
		       + ОкрП002110032003;
		мРаздел6.Области.П002110024003.Значение = П24003;
		// ЗаписатьПоказательВСтруктуру("Лист06", "П002110024003", П24003);

		// Стр. 330
		мРаздел6.Области.П002110033003.Значение = ОкрП002110002003
		                                        + ОкрП002110003003
		                                         - мРаздел6.Области.П002110014003.Значение
		                                         - ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110020003.Значение)
		                                         - ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110025003.Значение);

		// Строка 350
		мРаздел6.Области.П002110035003.Значение = ОкрП002110004003
		   + ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110005003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110015003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110021003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110026003.Значение);

		// Строка 370
		// По строке 370 отражается доход в виде процентов по государственным и муниципальным ценным бумагам (строка 060 - строка 160 - строка 270)
		мРаздел6.Области.П002110037003.Значение = Макс(ОкрП002110006003
		   - мРаздел6.Области.П002110016003.Значение
		   - ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110027003.Значение), 0);

		// Строка 380
		// (строка 070 - строка 170 - строка 280)
		мРаздел6.Области.П002110038003.Значение = Макс(ОкрП002110007003
		                                        - мРаздел6.Области.П002110017003.Значение
		                                        - ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110028003.Значение), 0);

		// По строке 390 отражается прибыль от осуществления других инвестиций (строка 110 - строка 180 - строка 220 - строка 320).
		// Если по строке 390 получен убыток, рассчитанный как строка 110 - строка 180 - строка 220 - строка 320, налоговая база признается
		// равной нулю, а сумма убытка, выраженная отрицательным значением строки 390, подлежит переносу в порядке, установленном статьей 283 НК.

		мРаздел6.Области.П002110039003.Значение = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110011003.Значение)
		                                        - мРаздел6.Области.П002110018003.Значение
		                                        - ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110022003.Значение)
		                                        - ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110032003.Значение);

		// Строка 410
		П002110041003 = Макс(
		     ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110033003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110034003.Значение)
		   , 0);
		мРаздел6.Области.П002110041003.Значение = П002110041003;
		// ЗаписатьПоказательВСтруктуру("Лист06", "П002110041003", П002110041003);

		ОкрП002110042003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110042003.Значение);

		// Строка 430 - автоматически не рассчитываем.
		// сумма убытка, признаваемая в отчетном периоде
		П002110043003 = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110043003.Значение);

		// Строка 440
		П44003 = ОкрП002110042003 - П002110043003;
		мРаздел6.Области.П002110044003.Значение = П44003;
		// ЗаписатьПоказательВСтруктуру("Лист06", "П002110044003", П44003);

		П002110045003 = Макс(
		     ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110035003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110036003.Значение)
		   , 0);
		// Строка 450
		мРаздел6.Области.П002110045003.Значение = П002110045003;
		// ЗаписатьПоказательВСтруктуру("Лист06", "П002110045003", П002110045003);

		// Строка 470 - Автоматически не рассчитываем.
		// сумма убытка, признаваемая в отчетном периоде
		// В  2006 году данная сумма не должна превышать 50 процентов налоговой базы, показанной по строке 450 Листа 06 Декларации.
		// мРаздел6.Области.П002110047003.Значение = Мин( ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110045003.Значение * 0.5), ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110046003.Значение) );

		// Строка 480
		мРаздел6.Области.П002110048003.Значение = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110046003.Значение) - ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110047003.Значение);

		П002110049003 = Макс(
		     ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110039003.Значение)
		   - ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110040003.Значение)
		   , 0);

		// Строка 490
		мРаздел6.Области.П002110049003.Значение = П002110049003;
		// ЗаписатьПоказательВСтруктуру("Лист06", "П002110049003", П002110049003);

		// Строка 510 - автоматически не рассчитываем.
		// сумма убытка, признаваемая в отчетном периоде
		// мРаздел6.Области.П002110051003.Значение = Мин( ОкруглитьЧислоПоФормату(П002110045003 * 0.5), ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110050003.Значение));

		// Строка 520
		мРаздел6.Области.П002110052003.Значение = ОкруглитьЧислоПоФормату(мРаздел6.Области.П002110050003.Значение) - мРаздел6.Области.П002110051003.Значение;

		// Строка 530
		П53003 = П002110041003
		       - П002110043003
		       +    П002110045003
		       - ОкрП002110047003
		       +    П002110049003
		       - ОкрП002110051003;

		мРаздел6.Области.П002110053003.Значение = Макс(П53003, 0);
		// ЗаписатьПоказательВСтруктуру("Лист06", "П002110053003", П53003);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист07" Тогда

		// идентификатор многострочного раздела
		ИмяГруппы = "П0021200010";

		МаксимальноеКоличествоСтрокГруппы = 0;

		// Исходное количество строк группы
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

		СтруктураГруппы = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		КолСтрок = СтруктураГруппы.Количество();

		Итог9 = 0;
		ОбщийИтогоКолонки9 = 0;
		Для ИндСтр = 1 по КолСтрок Цикл
			мРаздел7.Области["П002120001009_" + Формат(ИндСтр, "ЧГ=0")].Значение = ОкруглитьЧислоПоФормату(мРаздел7.Области["П002120001005_" + Формат(ИндСтр, "ЧГ=0")].Значение
																	             - мРаздел7.Области["П002120001007_" + Формат(ИндСтр, "ЧГ=0")].Значение
																	             - мРаздел7.Области["П002120001008_" + Формат(ИндСтр, "ЧГ=0")].Значение);
		КонецЦикла;

		мРаздел7.Области.П002120002005.Значение = РасчетСуммМногострочнойЧасти("П002120001005", 5);
		мРаздел7.Области.П002120002007.Значение = РасчетСуммМногострочнойЧасти("П002120001007", 7);
		мРаздел7.Области.П002120002008.Значение = РасчетСуммМногострочнойЧасти("П002120001008", 8);
		мРаздел7.Области.П002120002009.Значение = РасчетСуммМногострочнойЧасти("П002120001009", 9);

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда

		// В этом режиме перерассчитаем все показатели на листах в обратном порядке.

		Расчет("Лист07");
		Расчет("Лист06");
		Расчет("Лист05");
		Расчет("Лист04");
		Расчет("Лист03Продолжение");
		Расчет("Лист03");
		Расчет("Лист02_Прил5");
		Расчет("Лист02_Прил4");
		Расчет("Лист02_Прил3");
		Расчет("Лист02_Прил2");
		Расчет("Лист02_Прил1");
		Расчет("Лист02");
		Расчет("Лист02_Прил4");
		Расчет("Лист02_Прил5");
		Расчет("Лист02");
		Расчет("Раздел1_2");
		Расчет("Раздел1_1");

	КонецЕсли;

КонецПроцедуры // Расчет()

// СпециальныеОперацииПослеОчисткиЛиста
// Процедура вызывается из модуля РО. При удалении листа любого раздела отчета.
// Вызов происходит в том случае, если в св-вах раздела установлен реквизит ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина
// если в св-вах такого реквизита нет, то после удаления листа запускается расчет этого листа.
//
// В подобных процедурах должны выполняться действия, которые следуют за удалением доп. страниц. пересчет номеров, закрашивание ячеек и т.д.
// Если в разделе в св-вах нет ключа СпециальныеОперацииПослеОчисткиЛиста = Ложь или нет для многостраничного раздела
// тогда не вызывается эта процедура.
//
// Параметры:
//  ИмяСтраницы    - имся страницы раздела декларации
//  УдалениДопЭкз  - Булево. Имеет смысл только для многостраничных разделов. Если Истина, то выбрана очистка всего раздела "насквозь" включая
//                 удаление всех доп страниц. Если Ложь - то очистка только текущего табличного поля.
//
Процедура СпециальныеОперацииПослеОчисткиЛиста(ИмяСтраницы, УдалениДопЭкз) Экспорт

	Если ИмяСтраницы = "Лист02_Прил5" Тогда
		ВГруппуОПВходитОрганизация = Ложь;
		ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Ложь;

		Если мПоМестуНахожденияОрганизации Тогда
			УстановитьПризнакАвтозаполненияПоСтроке030Прил5КЛисту02();
		Иначе
			СнятьПризнакАвтозаполненияПоСтроке030Прил5КЛисту02();
		КонецЕсли;

	КонецЕсли;

	// Удалим расшифровку по выбранному разделу.
	СпП = ВырезатьВТаблицеРасшифровкиНеобходимыйРаздел(ИмяСтраницы).Скопировать();

	// Сохраним раздел.
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяСтраницы, Ложь);

	РасчетЗависимыхРазделовДекларации(ИмяСтраницы);

КонецПроцедуры // СпециальныеОперацииПослеОчисткиЛиста

// ВырезатьВТаблицеРасшифровкиНеобходимыйРаздел
// Функция оставит в таблице расшифровки все строки за исключением строк, относящихся к разделму ИмяРаздела.
//
// Параметры:
//  ИмяРаздела     - имя раздела декларации.
//
// Возвращаемое значение:
//  Таблица        - клон таблицы СпП, без нужного раздела.
//
Функция ВырезатьВТаблицеРасшифровкиНеобходимыйРаздел(ИмяРаздела)
	Табл = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(СпП);
	Для каждого Зап Из СпП Цикл
		Если (Зап.Раздел = ИмяРаздела) Или (Зап.Страница = ИмяРаздела) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТаблицыПриемника = Табл.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, Зап);
	КонецЦикла;
	Возврат Табл;
КонецФункции // ВырезатьВТаблицеРасшифровкиНеобходимыйРаздел

// ОперацииВыполняемыеПриКопированииОтчета
// Процедура выполняет операции перепростановки данных в декларации, в случае её копирования
// по клавише F9.
// Перерисовываются параметры в зависимости от периода отчета, перепроставляются признаки и т.д.
// Параметры:
//  Нет.
//
Процедура ОперацииВыполняемыеПриКопированииОтчета()

	// 1. Обновим признак, есть ли у организации обособленные подразделения на данный момент.
	// Если, в основной форме при F9 перевыбрана организация, тогда запускается ЗаполнитьСведенияОбОрганизации и там признак мЕстьОбособленныеПодразделения
	// будет пересобран.
	// В случае, если организация не изменена, тогда данный признак не обновляем.
	//ПолучитьИННКПП();

	Если КонецДня(мДатаКонцаПериодаОтчета) <> КонецДня(мСохраненныйДок.ДатаОкончания)
	      Или НачалоДня(мДатаНачалаПериодаОтчета) <> НачалоДня(мСохраненныйДок.ДатаНачала)
	      Или мСохраненныйДок.Периодичность <> мПериодичность
	      Или мВПрограммеИзмененаОрганизация Тогда
		// Возведем признак модифицированности.
		Модифицированность = Истина;
	Иначе
		// В случае, если отчет просто копируется, без изменения организации, периодичности, сроков, тогда
		// ничего выходим.
		Возврат;
	КонецЕсли;

	// В случае перевыбора периода на основной форме, придется перевводить значения во все листы и во все доп. листы многостраничных разделов.
	ДатаКонцаСледующегоКвартала = КонецКвартала(мДатаКонцаПериодаОтчета) + 1;
	НомерКварталаСтр = Формат(ДатаКонцаСледующегоКвартала, "ДФ=к");

	Если ЭтоНалоговыйПериод(Организация, ДатаПодписи, мДатаКонцаПериодаОтчета) Тогда
		// Для налогового периода значение не должно указываться.
		мРаздел2_Прил5.Области.П002050012001.Значение = "";
	Иначе
		мРаздел2_Прил5.Области.П002050012001.Значение = РегламентированнаяОтчетность.ДополнитьСтроку(НомерКварталаСтр, 2, "0"); // Поставим на активном листе.
	КонецЕсли;

	Для Каждого Страница из мСтруктураМногостраничныхРазделов.Лист02_Прил5 Цикл
		Если ЭтоНалоговыйПериод(Организация, ДатаПодписи, мДатаКонцаПериодаОтчета) Тогда
			Страница.Данные.Вставить("П002050012001", "");
		Иначе
			Страница.Данные.Вставить("П002050012001", РегламентированнаяОтчетность.ДополнитьСтроку(НомерКварталаСтр, 2, "0"));
		КонецЕсли;
	КонецЦикла;

	// Если в основной форме
	//Если мСохраненныйДок.Периодичность = Перечисления.Периодичность.Квартал И мПериодичность = Перечисления.Периодичность.Месяц Тогда

	//	// периодичность была квартальная - стало, ежемесячная, перерисуем раздел 1.2
	//	Если мПериодичность = Перечисления.Периодичность.Месяц Тогда
	//		ПроставитьДатыВРазделе1_2();
	//	КонецЕсли;

	//КонецЕсли;

	// Заполняем дату аванса на листе 02.

	// Блок, заполняющий строку 360 для декларации 2007 закоментирован.

	//Если КонецДня(мДатаКонцаПериодаОтчета) <> КонецДня(КонецГода (мДатаКонцаПериодаОтчета)) Тогда
	//	П002000036001 = Дата(Год(мДатаКонцаПериодаОтчета), Месяц(мДатаКонцаПериодаОтчета) + 1, 28);
	//Иначе
	//	П002000036001 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
	//КонецЕсли;

	//мРаздел2.Области.П002000036001.Значение = П002000036001;

	// Определяем периодичность
	Если мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СрокиУплаты = 3;
	Иначе
		СрокиУплаты = 11;
	КонецЕсли;

	мРаздел2.Области.П002000035003.Значение = СрокиУплаты;

	ДатаКонцаСледующегоКвартала = КонецКвартала(мДатаКонцаПериодаОтчета) + 1;
	НомерКварталаСтр = Формат(ДатаКонцаСледующегоКвартала, "ДФ=к");
	ГодАвансов       = Формат(КонецКвартала(мДатаКонцаПериодаОтчета) + 1, "ДФ=гг");

	локП002000029001 = НомерКварталаСтр;
	локП002000038500 = Сред(ГодАвансов, 2, 1);

	мРаздел2.Области.П002000029001.Значение = локП002000029001;
	мРаздел2.Области.П002000038500.ЗНачение =локП002000038500;

	ПроставитьСрокУплПодраздел1_1();

	Для Каждого Страница Из мСтруктураМногостраничныхРазделов.Лист02 Цикл

		// Сохраним в структуре листа 02, для каждого листа, параметры, зависящие от даты начала и конца отчета.
		локП002000029001 = РегламентированнаяОтчетность.ДополнитьСтроку(локП002000029001, 2, "0");
		мСобранныеДанные3901Лист2 = локП002000029001 + "," + "200" + локП002000038500;

		// Блок, отрабатывающий строку 360 отключаем.

		//Если П002000036001 <> ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")) Тогда
		//	локП002000036001НомерМесяца = Формат(П002000036001, "ДФ=М");
		//	Если СтрДлина(локП002000036001НомерМесяца) = 1 Тогда
		//		локП002000036001НомерМесяца = "0" + локП002000036001НомерМесяца;
		//	КонецЕсли;

		//	локП002000036001НомерГода = Формат(П002000036001, "ДФ=гггг");

		//	мМесяцЗптГодРаздел2 = локП002000036001НомерМесяца + "," + локП002000036001НомерГода;
		//Иначе
		//	мМесяцЗптГодРаздел2 = ",";
		//КонецЕсли;

		//Страница.Данные.Вставить("МесяцЗптГодРаздел2", мМесяцЗптГодРаздел2);
		Страница.Данные.Вставить("П002000035003", СрокиУплаты);
		//Страница.Данные.Вставить("П002000036001", П002000036001);
		Страница.Данные.Вставить("СобранныеДанные3901Лист2", мСобранныеДанные3901Лист2);

	КонецЦикла;

КонецПроцедуры // ОперацииВыполняемыеПриКопированииОтчета

Процедура ВставитьРасшифровкуКосвенныхРасходов(ИмяПоказателя, ВидРасходовНУ = "")
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	СчетаКосвенныхЗатрат = Новый Массив;
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыОсновногоПроизводства);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыВспомогательныхПроизводств);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеОбщепроизводственныеРасходы);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыОбслуживающихПроизводств);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеОбщехозяйственныеРасходы);
	СчетаКосвенныхЗатрат.Добавить(ПС.РасходыНаПродажу);
	
	Запрос.УстановитьПараметр("Счет",           СчетаКосвенныхЗатрат);
	
	КорСчета = Новый Массив;
	КорСчета.Добавить(ПС.Продажи_РасходыНаПродажу);
	КорСчета.Добавить(ПС.Продажи_УправленческиеРасходы);
	Запрос.УстановитьПараметр("КорСчет",        КорСчета);
	Запрос.УстановитьПараметр("ВидСубконто",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОбороты.Счет,
	|	НалоговыйОбороты.КорСчет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет В ИЕРАРХИИ (&Счет),
	|		&ВидСубконто,
	|		Организация = &Организация
	|			И ВидУчета = &ВидУчета,
	|		КорСчет В ИЕРАРХИИ (&КорСчет),
	|		) КАК НалоговыйОбороты
	|ГДЕ
	|	НалоговыйОбороты.Субконто1.ВидРасходовНУ <> &ТранспортныеРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Счет,
	|	НалоговыйОбороты.КорСчет";
	
	Если  ВидРасходовНУ <> "" Тогда
    	Запрос.УстановитьПараметр("ВидРасходовНУ", ВидРасходовНУ);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"НалоговыйОбороты.Субконто1.ВидРасходовНУ <> &ТранспортныеРасходы", "НалоговыйОбороты.Субконто1.ВидРасходовНУ <> &ТранспортныеРасходы И НалоговыйОбороты.Субконто1.ВидРасходовНУ = &ВидРасходовНУ"); 
	КонецЕсли;
	ВыборкаКосвЗатрат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из ВыборкаКосвЗатрат Цикл
		Если  ВидРасходовНУ = "" Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "!КО", Выборка.КО, Выборка.Счет, Выборка.КорСчет, , , "Лист02_Прил2");
		Иначе
			КодСчетаЗатрат = Лев(Выборка.Счет.Код, 2);
			Если КодСчетаЗатрат = "20" Или КодСчетаЗатрат = "23" Тогда
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "!КО", Выборка.КО, Выборка.Счет, Выборка.КорСчет, , , "Лист02_Прил2", , , , , ,мБухИтогиНайти("СписокЗатрат", ВидРасходовНУ, СписокСтатейЗатрат));
			ИначеЕсли КодСчетаЗатрат = "25" Или КодСчетаЗатрат = "26" Тогда
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "!КО", Выборка.КО, Выборка.Счет, Выборка.КорСчет, , , "Лист02_Прил2", , , , , мБухИтогиНайти("СписокЗатрат", ВидРасходовНУ, СписокСтатейЗатрат));
			Иначе		
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "!КО", Выборка.КО, Выборка.Счет, Выборка.КорСчет, , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", ВидРасходовНУ, СписокСтатейЗатрат));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьСтрокуРасшифровки(Форма, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого, Знач Сумма, Счет = Неопределено, КорСчет = Неопределено, Сдвиг = Неопределено, ПраваяГраница = Неопределено, ИмяРаздела = Неопределено, НомерЛиста = Неопределено, МнЧ = Неопределено, НомерСтроки = Неопределено, Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено) Экспорт
	
	Если  Субконто1 = 0 И Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Субконто1 = ?(Субконто1 = 0, Неопределено, Субконто1);
	Субконто2 = ?(Субконто2 = 0, Неопределено, Субконто2);
	Субконто3 = ?(Субконто3 = 0, Неопределено, Субконто3);
	
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(Форма, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого, Сумма, Счет, КорСчет, Сдвиг, ПраваяГраница, ИмяРаздела, НомерЛиста, МнЧ, НомерСтроки, Субконто1, Субконто2, Субконто3);
	
КонецПроцедуры

// СнятьПризнакАвтозаполненияПоСтроке030Прил5КЛисту02
// Процедура снимает признак (устанавливает равным 1) по показателю по стр. 030 Приложения 5 к Листу 02.
//
Процедура СнятьПризнакАвтозаполненияПоСтроке030Прил5КЛисту02()
	ИзменитьПризнакПоСтроке030Прил5КЛисту02(Ложь);
КонецПроцедуры // СнятьПризнакАвтозаполненияПоСтроке030Прил5КЛисту02

// УстановитьПризнакАвтозаполненияПоСтроке030Прил5КЛисту02
// Процедура устанавливает признак (устанавливает равным 3) по показателю по стр. 030 Приложения 5 к Листу 02.
//
Процедура УстановитьПризнакАвтозаполненияПоСтроке030Прил5КЛисту02()
	ИзменитьПризнакПоСтроке030Прил5КЛисту02(Истина);
КонецПроцедуры // УстановитьПризнакАвтозаполненияПоСтроке030Прил5КЛисту02

// ИзменитьПризнакПоСтроке030Прил5КЛисту02
// Процедура предназначена для смены признака автозаполнения в прил. 5 к листу 02 для показателя по строке 030.
// Параметры:
//  ИзменитьНаАвтоЗаполняемый - флаг булево, если Истина, означает, что необходимо поменять вариант заполнения
//                 - показателя с 1 на 3, если Ложь, то с 3 на 1.
//
Процедура ИзменитьПризнакПоСтроке030Прил5КЛисту02(Знач ИзменитьНаАвтоЗаполняемый)
	Если НЕ мСтруктураВариантыЗаполнения.Свойство("Лист02_Прил5") Тогда
		Возврат;
	КонецЕсли;
	ИзмененияПрошли = Ложь;
	Для каждого ЛистЭкземпляра Из мСтруктураВариантыЗаполнения.Лист02_Прил5 Цикл
		Если ТипЗнч(ЛистЭкземпляра) <> Тип("ТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		НайденнаяСтрока = ЛистЭкземпляра.Найти("П002050003003", "КодПоказателя");
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ВариантЗаполненияПоказателя = НайденнаяСтрока.ВариантЗаполнения;
		Если ВариантЗаполненияПоказателя = ?(ИзменитьНаАвтоЗаполняемый, 1, 3) Тогда
			НайденнаяСтрока.ВариантЗаполнения = ?(ИзменитьНаАвтоЗаполняемый, 3, 1);
			ИзмененияПрошли = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ИзмененияПрошли Тогда
		УстановитьЦветФонаЯчейки("П002050003003", ?(ИзменитьНаАвтоЗаполняемый, 3, 1), "Лист02_Прил5");
	КонецЕсли;

КонецПроцедуры // ИзменитьПризнакПоСтроке030Прил5КЛисту02

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто() Экспорт

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли;

	СтруктураПараметров = ПолучитьПараметрыДляОбработкиЗапросов();
	// Если организация отчитывается за обособленное подразделение или является налоговым агентом, тогда
	// лист 02 и приложения не заполняются и не входят в состав декларации.
	Если (НЕ мПоМестуНахожденияОрганизации) Или (мТитульный.Области.ТипОрг3.Значение = "V") Тогда
		Пояснение = ?(НЕ мПоМестуНахожденияОрганизации, "за обособленное подразделение", "от лица налогового агента");
		Сообщить("При заполнении отчета " + Пояснение + " Лист 02 и Приложения № 1, 2, 3 и 4 к Листу 02 не формируются.", СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;

	СпП.Очистить();	
	Модифицированность = Истина;

	// Начало модуля автозаполнения.

	ПС = ПланыСчетов["Налоговый"];
	
	// таблица итогов по всем счетам без анлитики
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОбороты.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , , , Организация = &Организация И ВидУчета = &ВидУчета, , ) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Счет
	|
	|ИТОГИ СУММА(ДО), СУММА(КО) ПО
	|	Счет ИЕРАРХИЯ";	
	мБухИтоги = Запрос.Выполнить().Выгрузить();
	
	// таблица итогов по всем счетам косвенных затрат с рабивкой по виду затрат
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	СчетаКосвенныхЗатрат = Новый Массив;
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыОсновногоПроизводства);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыВспомогательныхПроизводств);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеОбщепроизводственныеРасходы);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыОбслуживающихПроизводств);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеОбщехозяйственныеРасходы);
	СчетаКосвенныхЗатрат.Добавить(ПС.РасходыНаПродажу);
	СчетаКосвенныхЗатрат.Добавить(ПС.КосвенныеРасходыПоВыявленномуБраку);
	
	Запрос.УстановитьПараметр("Счет",           СчетаКосвенныхЗатрат);
	
	КорСчета = Новый Массив;
	КорСчета.Добавить(ПС.Продажи_РасходыНаПродажу);
	КорСчета.Добавить(ПС.Продажи_УправленческиеРасходы);
	Запрос.УстановитьПараметр("КорСчет",        КорСчета);
	Запрос.УстановитьПараметр("ВидСубконто",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1.ВидРасходовНУ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА НалоговыйОбороты.Субконто2.ВидРасходовНУ
	|				ИНАЧЕ НалоговыйОбороты.Субконто3.ВидРасходовНУ
	|			КОНЕЦ
	|	КОНЕЦ КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет В ИЕРАРХИИ (&Счет),
	|		,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета,
	|		КорСчет В ИЕРАРХИИ (&КорСчет),
	|		) КАК НалоговыйОбороты
	|ГДЕ
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1.ВидРасходовНУ <> &ТранспортныеРасходы
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА НалоговыйОбороты.Субконто2.ВидРасходовНУ <> &ТранспортныеРасходы
	|				ИНАЧЕ НалоговыйОбороты.Субконто3.ВидРасходовНУ <> &ТранспортныеРасходы
	|			КОНЕЦ
	|	КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1.ВидРасходовНУ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА НалоговыйОбороты.Субконто2.ВидРасходовНУ
	|				ИНАЧЕ НалоговыйОбороты.Субконто3.ВидРасходовНУ
	|			КОНЕЦ
	|	КОНЕЦ";
	
	мБухИтогиКосвЗатрат = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	Запрос.УстановитьПараметр("Счет",         ПС.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("СчетЕН",       ПС.РасходыПоДеятельностиЕНВД);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОбороты.Счет КАК Счет,
	|	СУММА(ВЫБОР
	|			КОГДА НалоговыйОбороты.КорСчет = &СчетЕН
	|				ТОГДА НалоговыйОбороты.СуммаОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЕНВД
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			,
	|			Организация = &Организация
	|				И ВидУчета = &ВидУчета,
	|			,
	|			) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Счет";
	
	мБухИтоги912 = Запрос.Выполнить().Выгрузить();	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	Запрос.УстановитьПараметр("Счет",         ПС.ВыручкаОтРеализацииПрочегоИмуществаРаботУслуг);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация И ВидУчета = &ВидУчета, , ) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов
	|";
	
	мБухИтоги9104 = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	Запрос.УстановитьПараметр("Счет",         ПС.РасходыСвязанныеСРеализациейПрочегоИмущества);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация И ВидУчета = &ВидУчета, , ) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов
	|";
	
	мБухИтоги9204 = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	Запрос.УстановитьПараметр("Счет",         ПС.ВыручкаОтРеализацииИмущественныхПрав);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация И ВидУчета = &ВидУчета, , ) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов
	|";
	
	мБухИтоги9105 = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	Запрос.УстановитьПараметр("Счет",         ПС.РасходыСвязанныеСРеализациейИмущественныхПрав);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация И ВидУчета = &ВидУчета, , ) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов
	|";
	
	мБухИтоги9205 = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	Запрос.УстановитьПараметр("Счет",         ПС.ВнереализационныеДоходы);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет, , Организация = &Организация И ВидУчета = &ВидУчета, , ) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов
	|";
	
	мБухИтоги911 = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	Запрос.УстановитьПараметр("Счет",         ПС.ВнереализационныеРасходы);
	Запрос.УстановитьПараметр("КорСчет",      ПС.РасходыПоДеятельностиЕНВД);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО,
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет = &Счет,
	|		,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета,
	|		,
	|		) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(-НалоговыйОбороты.СуммаОборотКт),
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет = &Счет,
	|		,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета,
	|		КорСчет = &КорСчет,
	|		) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов";
	
	мБухИтоги91027 = Запрос.Выполнить().Выгрузить();
	Счет91027      = ПС.ВнереализационныеРасходы;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	Запрос.УстановитьПараметр("Счет",         ПС.ВнереализационныеРасходы);
	Запрос.УстановитьПараметр("КорСчет",      ПС.ВыбытиеОС);
	Запрос.УстановитьПараметр("Ликвидация",   Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ДО
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет = &Счет,
	|		,
	|		Организация = &Организация
	|			И ВидУчета = &ВидУчета
	|			И Субконто1.ВидПрочихДоходовИРасходов = &Ликвидация,
	|		КорСчет = &КорСчет,
	|		) КАК НалоговыйОбороты";
	
	Результат = Запрос.Выполнить().Выгрузить();
	БухИтоги91027_019Ликвидация = Результат.Итог("ДО");
	
	// Состав справочников "Статьи затрат" и "Прочие доходы и расходы" по видам затрат для расшифровки 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Ссылка,
	|	СтатьиЗатрат.ВидРасходовНУ КАК ВидЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ИТОГИ ПО
	|	ВидЗатрат,
	|	Ссылка";
	Результат = Запрос.Выполнить();
	СписокСтатейЗатрат = Новый ТаблицаЗначений;
    СписокСтатейЗатрат.Колонки.Добавить("Счет");
	СписокСтатейЗатрат.Колонки.Добавить("СписокЗатрат");
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидЗатрат");
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		СтрокаСписокСтатейЗатрат = СписокСтатейЗатрат.Добавить();
		СтрокаСписокСтатейЗатрат.Счет = ВыборкаВидовЗатрат.ВидЗатрат;
		СтрокаСписокСтатейЗатрат.СписокЗатрат = Новый СписокЗначений;
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока Выборка.Следующий() Цикл
			СтрокаСписокСтатейЗатрат.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК Ссылка,
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов КАК ВидПрочихДоходовИРасходов
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ИТОГИ ПО
	|	ВидПрочихДоходовИРасходов,
	|	Ссылка";
	Результат = Запрос.Выполнить();
	СписокПрочихДоходовИРасходов = Новый ТаблицаЗначений;
    СписокПрочихДоходовИРасходов.Колонки.Добавить("Счет");
	СписокПрочихДоходовИРасходов.Колонки.Добавить("СписокЗатрат");
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидПрочихДоходовИРасходов");
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		СтрокаСписокПрочихДоходовИРасходов = СписокПрочихДоходовИРасходов.Добавить();
		СтрокаСписокПрочихДоходовИРасходов.Счет = ВыборкаВидовЗатрат.ВидПрочихДоходовИРасходов;
		СтрокаСписокПрочихДоходовИРасходов.СписокЗатрат = Новый СписокЗначений;
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока Выборка.Следующий() Цикл
			СтрокаСписокПрочихДоходовИРасходов.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;	
	
	
	// лист 2 приложение 1
	Счет90011 = ПС.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;
	Счет91015 = ПС.ВыручкаОтРеализацииИмущественныхПрав;
	Счет91014 = ПС.ВыручкаОтРеализацииПрочегоИмуществаРаботУслуг;
	Счет90012 = ПС.ВыручкаОтРеализацииПокупныхТоваров;;
	Счет91011 = ПС.ВыручкаОтРеализацииОсновныхСредств;
	Счет91012 = ПС.ВыручкаОтРеализацииНематериальныхАктивов;
	Счет91013 = ПС.ВыручкаОтРеализацииОбъектовСтроительства;
	Счет91016 = ПС.ВыручкаОтРеализацииЦенныхБумаг;
	Счет91026 = ПС.РасходыСвязанныеСРеализациейЦенныхБумаг;

	// Строка 011 - выручка от реализации товаров (работ, услуг) собственного производства
    П002010001103 = мБухИтогиНайти("КО", Счет90011, мБухИтоги);	
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010001103", П002010001103); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010001103", "Строка 011 ""Выручка от реализации товаров (работ, услуг) собственного производства""", "+", "!КО", П002010001103, Счет90011, , , , "Лист02_Прил1");
	
	// Строка 012 - выручка от реализации покупных товаров
	П002010001203 = мБухИтогиНайти("КО", Счет90012, мБухИтоги);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010001203", П002010001203);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010001203", "Строка 012 ""Выручка от реализации покупных товаров""", "+", "!КО", П002010001203, Счет90012, , , , "Лист02_Прил1");
	
   // Строка 013 - выручка от реализации имущественных прав, за исключением доходов от реализации права требования
	П002010001303 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования, мБухИтоги9105);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010001303", П002010001303);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010001303", "Строка 013 ""Выручка от реализации имущественных прав, за исключением доходов от реализации права требования""", "+", "!КО", П002010001303, ПС.ВыручкаОтРеализацииИмущественныхПрав, , , , "Лист02_Прил1", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования, СписокПрочихДоходовИРасходов));
	                                                                         
	// Строка 014 - выручка от реализации прочего имущества
	П0020300180032 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, мБухИтоги9104); 
	П002010001403 = мБухИтогиНайти("КО", Счет91014, мБухИтоги) + мБухИтогиНайти("КО", Счет91013, мБухИтоги) - П0020300180032;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010001403", П002010001403);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010001403", "Строка 014 ""Выручка от реализации прочего имущества""", "+", "!КО", мБухИтогиНайти("КО", Счет91014, мБухИтоги), Счет91014, , , , "Лист02_Прил1");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010001403", "", "+", "!КО", мБухИтогиНайти("КО", Счет91013, мБухИтоги), Счет91013, , , , "Лист02_Прил1");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010001403", "", "-", "!КО", - П0020300180032, ПС.ВыручкаОтРеализацииПрочегоИмуществаРаботУслуг, , , , "Лист02_Прил1", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, СписокПрочихДоходовИРасходов));
	// Строка 020 - выручка от реализации ценных бумаг профессиональных участников рынка
	П002010002003 = мБухИтогиНайти("КО", Счет91016, мБухИтоги);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010002003", П002010002003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010002003", "Строка 020 ""Выручка от реализации ценных бумаг профессиональных участников рынка""", "+", "!КО", П002010002003, Счет91016, , , , "Лист02_Прил1");
	
	// Строка 100 - Внереализационные доходы всего
	П002010010003 = мБухИтогиНайти("КО", ПС.ВнереализационныеДоходы, мБухИтоги);
	
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010010003", П002010010003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010010003", "Строка 100 ""Внереализационные доходы всего""", "+", "!КО", П002010010003, ПС.ВнереализационныеДоходы, , , , "Лист02_Прил1");
	
	// Строка 101 - В виде дохода прошлых лет, выявленного в отчетном (налоговом) периоде
	П002010010103 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, мБухИтоги911);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010010103", П002010010103);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010010103", "Строка 101 ""Доходы в виде дохода прошлых лет, выявленного в отчетном (налоговом) периоде""", "+", "!КО", П002010010103, ПС.ВнереализационныеДоходы, , , , "Лист02_Прил1", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, СписокПрочихДоходовИРасходов));
	
	// Строка 102 - доходы от ликвидации основных средств
	П002010010203 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств, мБухИтоги911);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002010010203", П002010010203);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002010010203", "Строка 102 ""Доходы от ликвидации основных средств""", "+", "!КО", П002010010203, ПС.ВнереализационныеДоходы, , , , "Лист02_Прил1", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств, СписокПрочихДоходовИРасходов));
	
	// лист 2 приложение 2
	// Строка 010 - Прямые расходы, относящиеся к реализованным товарам,
	//              работам, услугам
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("Счет",         ПС.СебестоимостьПродаж);
	ПокупныеТовары = Новый Массив;
	ПокупныеТовары.Добавить(ПС.Товары);
	ПокупныеТовары.Добавить(ПС.ПокупныеТоварыОтгруженные);
	ПокупныеТовары.Добавить(ПС.ПоступлениеИВыбытиеИмуществаРаботУслугПрав);
	Запрос.УстановитьПараметр("ПокупныеТовары", ПокупныеТовары);
	Запрос.УстановитьПараметр("Товары", ПС.Товары);
	Запрос.УстановитьПараметр("ПокупныеТоварыОтгруженные", ПС.ПокупныеТоварыОтгруженные);
	Запрос.УстановитьПараметр("ПоступлениеИВыбытиеИмуществаРаботУслугПрав", ПС.ПоступлениеИВыбытиеИмуществаРаботУслугПрав);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК СебестоимостьПродаж,
	|	0 КАК Товары,
	|	0 КАК ПокупныеТоварыОтгруженные,
	|	0 КАК ПоступлениеИВыбытиеИмуществаРаботУслугПрав
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет = &Счет,
	|		,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета,
	|		,
	|		) КАК НалоговыйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	СУММА(НалоговыйОбороты.СуммаОборотДт),
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет = &Счет,
	|		,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета,
	|		КорСчет В ИЕРАРХИИ (&Товары),
	|		) КАК НалоговыйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	СУММА(НалоговыйОбороты.СуммаОборотДт),
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет = &Счет,
	|		,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета,
	|		КорСчет В ИЕРАРХИИ (&ПокупныеТоварыОтгруженные),
	|		) КАК НалоговыйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	СУММА(НалоговыйОбороты.СуммаОборотДт)
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет = &Счет,
	|		,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета,
	|		КорСчет В ИЕРАРХИИ (&ПоступлениеИВыбытиеИмуществаРаботУслугПрав),
	|		) КАК НалоговыйОбороты";
	мБухИтоги902 = Запрос.Выполнить().Выгрузить();
	
	СебестоимостьПродаж                        = мБухИтоги902.Итог("СебестоимостьПродаж");
	Товары                                     = мБухИтоги902.Итог("Товары");
	ПокупныеТоварыОтгруженные                  = мБухИтоги902.Итог("ПокупныеТоварыОтгруженные");
	ПоступлениеИВыбытиеИмуществаРаботУслугПрав = мБухИтоги902.Итог("ПоступлениеИВыбытиеИмуществаРаботУслугПрав");
	ПокупныеТовары                             = Товары + ПокупныеТоварыОтгруженные + ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
	П002020001003 = СебестоимостьПродаж - ПокупныеТовары;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020001003", П002020001003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020001003", "Строка 010 ""Прямые расходы, относящиеся к реализованным товарам, работам, услугам""", "+", "!ДО", СебестоимостьПродаж, ПС.СебестоимостьПродаж, , , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020001003", "", "-", "!ДО", - Товары, ПС.СебестоимостьПродаж, ПС.Товары, , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020001003", "", "-", "!ДО", - ПокупныеТоварыОтгруженные, ПС.СебестоимостьПродаж, ПС.ПокупныеТоварыОтгруженные, , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020001003", "", "-", "!ДО", - ПоступлениеИВыбытиеИмуществаРаботУслугПрав, ПС.СебестоимостьПродаж, ПС.ПоступлениеИВыбытиеИмуществаРаботУслугПрав, , , "Лист02_Прил2");
	
	// Строка 020 - Прямые расходы налогоплательщиков, осуществляющих оптовую,
	//              мелкооптовую и розничную  торговлю в текущем  отчетном
	//              (налоговом) периоде
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("Счет44",       ПС.РасходыНаПродажу);
	Запрос.УстановитьПараметр("Счет90",       ПС.Продажи_РасходыНаПродажу);	
	Запрос.УстановитьПараметр("ВидЗатрат",    Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НалоговыйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет В ИЕРАРХИИ (&Счет44),
	|		,
	|		Организация = &Организация
	|			И ВидУчета = &ВидУчета,
	|		КорСчет = &Счет90,
	|		) КАК НалоговыйОбороты
	|ГДЕ
	|	НалоговыйОбороты.Субконто1.ВидРасходовНУ = &ВидЗатрат";
	мБухИтоги44 = Запрос.Выполнить().Выгрузить();                                                                                                                                                                                                                                       
	П002020002003 = мБухИтоги44.Итог("СуммаОборотКт") + ПокупныеТовары;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020002003", П002020002003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020002003", "Строка 020 ""Прямые расходы налогоплательщиков, осуществляющих оптовую, мелкооптовую и розничную  торговлю в текущем  отчетном (налоговом) периоде""", "+", "!КО", мБухИтоги44.Итог("СуммаОборотКт"), ПС.РасходыНаПродажу, ПС.Продажи_РасходыНаПродажу, , , "Лист02_Прил2", , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы, СписокСтатейЗатрат));
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020002003", "", "+", "!ДО", Товары, ПС.СебестоимостьПродаж, ПС.Товары, , , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020002003", "", "+", "!ДО", ПокупныеТоварыОтгруженные, ПС.СебестоимостьПродаж, ПС.ПокупныеТоварыОтгруженные, , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020002003", "", "+", "!ДО", ПоступлениеИВыбытиеИмуществаРаботУслугПрав, ПС.СебестоимостьПродаж, ПС.ПоступлениеИВыбытиеИмуществаРаботУслугПрав, , , "Лист02_Прил2");
	
	// Строка 030 - Стоимость реализованных покупных товаров
	П002020003003 = ПокупныеТовары;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020003003",  П002020003003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020003003", "Строка 030 ""Стоимость реализованных покупных товаров""", "+", "!ДО", Товары, ПС.СебестоимостьПродаж, ПС.Товары, , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020003003", "", "+", "!ДО", ПокупныеТоварыОтгруженные, ПС.СебестоимостьПродаж, ПС.ПокупныеТоварыОтгруженные, , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020003003", "", "+", "!ДО", ПоступлениеИВыбытиеИмуществаРаботУслугПрав, ПС.СебестоимостьПродаж, ПС.ПоступлениеИВыбытиеИмуществаРаботУслугПрав, , , "Лист02_Прил2");
	
	// обороты счета 91.02.9 - Прочие косвенные расходы (налог на землю, налог на имущество и т.д.)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("Счет",         ПланыСчетов.Налоговый.ПрочиеКосвенныеРасходы);
	Запрос.УстановитьПараметр("КорСчет",      ПС.РасходыПоДеятельностиЕНВД);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Массив =Новый Массив;
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы);
	Запрос.УстановитьПараметр("ВидПрочихДоходовИРасходов",  Массив);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов В ИЕРАРХИИ (&ВидПрочихДоходовИРасходов)
	|			ТОГДА НалоговыйОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПрочиеОперационныеРасходы,
	|	НалоговыйОбороты.СуммаОборотДт КАК ДО
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет = &Счет,
	|			&ВидСубконто,
	|			Организация = &Организация
	|				И ВидУчета = &ВидУчета,
	|			,
	|			) КАК НалоговыйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	-НалоговыйОбороты.СуммаОборотКт,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет = &Счет,
	|			&ВидСубконто,
	|			Организация = &Организация
	|				И ВидУчета = &ВидУчета,
	|			КорСчет = &КорСчет,
	|			) КАК НалоговыйОбороты";
	
	
	мБухИтоги91029 = Запрос.Выполнить().Выгрузить();
	
	// Строка 040 - Косвенные расходы
	КосвенныеРасходы = мБухИтогиКосвЗатрат.Итог("КО");
	ПрочиеОперационныеРасходы = мБухИтоги91029.Итог("ПрочиеОперационныеРасходы");
	П002020004003 = КосвенныеРасходы + ПрочиеОперационныеРасходы;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020004003",  П002020004003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020004003", "Строка 040 ""Косвенные расходы""", "+", "", 0, , , , ,"Лист02_Прил2");
	ВставитьРасшифровкуКосвенныхРасходов("П002020004003");
	
	СписокПрочихКосвенных = мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы, СписокПрочихДоходовИРасходов);
	Если СписокПрочихКосвенных <> 0 Тогда
		СписокПрочихКосвенных.Добавить(мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы, СписокПрочихДоходовИРасходов));
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020004003", "", "+", "!ДО", ПрочиеОперационныеРасходы, ПланыСчетов.Налоговый.ПрочиеКосвенныеРасходы, , , , "Лист02_Прил2", , , , СписокПрочихКосвенных);
	КонецЕсли;
		
	// Строка 041 - Суммы налогов и сборов, начисленные в порядке, установленном законодательством Российской
	//              Федерации о налогах и сборах, за исключением ЕСН, а также налогов, перечисленных в статье 270 НК																	
	
	НалогиИСборы =  мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.НалогиИСборы, мБухИтогиКосвЗатрат);
	
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020004103",  НалогиИСборы + ПрочиеОперационныеРасходы );         
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020004103", "Строка 041 ""Суммы налогов и сборов""", "+", "", 0, , , , ,"Лист02_Прил2");
    ВставитьРасшифровкуКосвенныхРасходов("П002020004103", Перечисления.ВидыРасходовНУ.НалогиИСборы);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020004103", "", "+", "!ДО", ПрочиеОперационныеРасходы, ПланыСчетов.Налоговый.ПрочиеКосвенныеРасходы, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы, СписокПрочихДоходовИРасходов));
	
	// Строка 042 - Расходы на НИОКР  
	П002020004203 = мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.НИОКР, мБухИтогиКосвЗатрат);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020004203", П002020004203);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020004203", "Строка 042 ""Расходы на НИОКР""", "+", "", 0, , , , , "Лист02_Прил2");
    ВставитьРасшифровкуКосвенныхРасходов("П002020004203", Перечисления.ВидыРасходовНУ.НИОКР);
	
	// Строка 044 - Расходы на капитальные вложения размере не более 10%         
    П002020004403 = мБухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.АмортизационнаяПремия, мБухИтогиКосвЗатрат);	
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020004403", П002020004403);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020004403", "Строка 044 ""Расходы на капитальные вложения размере не более 10%""", "+", "", 0, , , , ,"Лист02_Прил2");
	ВставитьРасшифровкуКосвенныхРасходов("П002020004403", Перечисления.ВидыРасходовНУ.АмортизационнаяПремия);
	
	// Строка 050 - Стоимость имущественных прав
	ОказаниеФинансовыхУслуг      = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, мБухИтоги9205);
	ПослеНаступленияСрокаПлатежа = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, мБухИтоги9205);
	ДоНаступленияСрокаПлатежа    = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, мБухИтоги9205);
	СтоимостьВсехИмущественныхПрав = мБухИтогиНайти("ДО", ПС.РасходыСвязанныеСРеализациейИмущественныхПрав, мБухИтоги);
    СтоимостьИмущественныхПравОбслПроизвдств = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, мБухИтоги9205);
	П002020005003 = СтоимостьВсехИмущественныхПрав 
	              - ОказаниеФинансовыхУслуг
				  - ДоНаступленияСрокаПлатежа
				  - ПослеНаступленияСрокаПлатежа
				  - СтоимостьИмущественныхПравОбслПроизвдств;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020005003", П002020005003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020005003", "Строка 050 ""Стоимость имущественных прав""", "+", "!ДО", СтоимостьВсехИмущественныхПрав, ПС.РасходыСвязанныеСРеализациейИмущественныхПрав, , , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020005003", "", "-", "!ДО", -ОказаниеФинансовыхУслуг, ПС.РасходыСвязанныеСРеализациейИмущественныхПрав, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020005003", "", "-", "!ДО", -ДоНаступленияСрокаПлатежа, ПС.РасходыСвязанныеСРеализациейИмущественныхПрав, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020005003", "", "-", "!ДО", -ПослеНаступленияСрокаПлатежа, ПС.РасходыСвязанныеСРеализациейИмущественныхПрав, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	
	// Строка 060 - Цена приобретения реализованного прочего имущества и расходы,
	//              связанные с его реализацией
	П0020300190032 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, мБухИтоги9204); 
	П002020006003 = мБухИтогиНайти("ДО", ПС.РасходыСвязанныеСРеализациейПрочегоИмущества, мБухИтоги) + мБухИтогиНайти("ДО", ПС.РасходыСвязанныеСРеализациейОбъектовСтроительства, мБухИтоги) - П0020300190032;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020006003", П002020006003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020006003", "Строка 060 ""Цена приобретения реализованного прочего имущества""", "+", "!ДО",  мБухИтогиНайти("ДО", ПС.РасходыСвязанныеСРеализациейПрочегоИмущества, мБухИтоги), ПС.РасходыСвязанныеСРеализациейПрочегоИмущества, , , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020006003", "", "+", "!ДО", мБухИтогиНайти("ДО", ПС.РасходыСвязанныеСРеализациейОбъектовСтроительства, мБухИтоги), ПС.РасходыСвязанныеСРеализациейОбъектовСтроительства, , , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020006003", "", "-", "!ДО", - П0020300190032, ПС.РасходыСвязанныеСРеализациейПрочегоИмущества, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, СписокПрочихДоходовИРасходов));
	// Строка 070 - Расходы, связанные с приобретением и реализацией (выбытием, в т.ч. погашением)
	//              ценных бумаг профессиональными участниками рынка ценных бумаг
	П002020007003 = мБухИтогиНайти("ДО", ПС.РасходыСвязанныеСРеализациейЦенныхБумаг, мБухИтоги);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020007003", П002020007003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020007003", "Строка 070 ""Расходы, связанные с приобретением и реализацией (выбытием, в т.ч. погашением) ценных бумаг профессиональными участниками рынка ценных бумаг""", "+", "!ДО", П002020007003, ПС.РасходыСвязанныеСРеализациейЦенныхБумаг, , , , "Лист02_Прил2");
	
	// Строка 090 - Суммы убытков прошлых лет по объектам обслуживающих производств и хозяйств, включая объекты жилищно - коммунальной и социально - культурной сферы, учитываемые в уменьшение прибыли текущего отчетного (налогового) периода, полученной по указанным видам деятельности																	
	П002020009003 = мБухИтогиНайти("КО", ПС.УбыткиПрошлыхЛетОбслуживающихПроизводств, мБухИтоги);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020009003", П002020009003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020009003", "Строка 090 ""Суммы убытков прошлых лет по объектам обслуживающих производств и хозяйств""", "+", "!КО", П002020009003, ПС.РасходыСвязанныеСРеализациейИмущественныхПрав, ПС.УбыткиПрошлыхЛетОбслуживающихПроизводств, , , "Лист02_Прил2");
	
	// Строка 100 - часть убытка от реализации амортизируемого имущества,
	//              относящаяся к расходам текущего отчетного (налогового) периода
	П002020010003 = мБухИтогиНайти("КО", ПС.ОтрицательныйРезультатОтРеализацииАмортизируемогоИмущества, мБухИтоги);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020010003", П002020010003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020010003", "Строка 100 ""часть убытка от реализации амортизируемого имущества, относящаяся к расходам текущего отчетного (налогового) периода""", "+", "!КО", П002020010003, ПС.ОтрицательныйРезультатОтРеализацииАмортизируемогоИмущества, , , , "Лист02_Прил2");
	
	// Строка 201 - Расходы ввиде процентов по долговым обязательствам
	П002020020103 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате, мБухИтоги91027);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020020103", П002020020103);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020103", "Строка 201 ""Расходы ввиде процентов по долговым обязательствам""", "+", "!ДО", П002020020103, Счет91027, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате, СписокПрочихДоходовИРасходов));
	
	// Строка 301 - Убытки прошлых налоговых периодов, выявленные в текущем отчетном (налоговом) периоде
	П002020030103 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, мБухИтоги91027);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020030103", П002020030103);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020030103", "Строка 301 ""Убытки прошлых налоговых периодов, выявленные в текущем отчетном (налоговом) периоде""", "+", "!ДО", П002020030103, Счет91027, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, СписокПрочихДоходовИРасходов));
	
	// Строка 302 - Суммы безнадежных долгов, а в случае, если налогоплательщик
	//              принял решение о создании резерва по сомнительным долгам,
	//              суммы безнадежных долгов, не покрытые за счет средств резерва
	П002020030203 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, мБухИтоги91027);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020030203", П002020030203);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020030203", "Строка 302 ""Суммы безнадежных долгов""", "+", "!ДО", П002020030203, Счет91027, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, СписокПрочихДоходовИРасходов));
	
	// Строка 200 - Внереализационные расходы
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	СчетРаспределяемыхВнерализационныхРасходовСуществует = (ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА");
	
	П002020020003 = мБухИтоги91027.Итог("ДО") + ?(СчетРаспределяемыхВнерализационныхРасходовСуществует, мБухИтогиНайти("ДО", ПС.ВнереализационныеРасходыРаспределяемые, мБухИтоги912),0) - П002020030103 - П002020030203 - ?(СчетРаспределяемыхВнерализационныхРасходовСуществует, мБухИтогиНайти("ЕНВД", ПС.ВнереализационныеРасходыРаспределяемые, мБухИтоги912),0);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020020003", П002020020003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020003", "Строка 200 ""Внереализационные расходы""", "+", "!ДО", мБухИтоги91027.Итог("ДО"), ПС.ВнереализационныеРасходы, , , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020003", "", "-", "!ДО", -П002020030103, Счет91027, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020003", "", "-", "!ДО", -П002020030203, Счет91027, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, СписокПрочихДоходовИРасходов));
	Если СчетРаспределяемыхВнерализационныхРасходовСуществует Тогда
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020003", "", "+", "!ДО", мБухИтогиНайти("ДО", ПС.ВнереализационныеРасходыРаспределяемые, мБухИтоги912), ПС.ВнереализационныеРасходыРаспределяемые, , , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, СписокПрочихДоходовИРасходов));
		ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020020003", "", "-", "!КО", -мБухИтогиНайти("ЕНВД", ПС.ВнереализационныеРасходыРаспределяемые, мБухИтоги912), ПС.ВнереализационныеРасходыРаспределяемые, ПС.РасходыПоДеятельностиЕНВД, , , "Лист02_Прил2", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, СписокПрочихДоходовИРасходов));
	КонецЕсли;
	
	// Строка 400 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего
	АмортизацияОсновныхСредств       = мБухИтогиНайти("КО", ПС.АмортизацияОсновныхСредств, мБухИтоги);
    АмортизацияНематериальныхАктивов = мБухИтогиНайти("КО", ПС.АмортизацияНематериальныхАктивов, мБухИтоги);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020040003", АмортизацияОсновныхСредств + АмортизацияНематериальныхАктивов);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020040003", "Строка 400 ""Сумма начисленной амортизации, за отчетный (налоговый) период""", "+", "!КО", АмортизацияОсновныхСредств, ПС.АмортизацияОсновныхСредств, , , , "Лист02_Прил2");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020040003", "", "+", "!КО", АмортизацияНематериальныхАктивов, ПС.АмортизацияНематериальныхАктивов, , , , "Лист02_Прил2");
	
	// Строка 401 - Сумма начисленной амортизации по нематериальным активам
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002020040103", АмортизацияНематериальныхАктивов);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002020040103", "Строка 401 ""Сумма начисленной амортизации по нематериальным активам""", "+", "!КО", АмортизацияНематериальныхАктивов, ПС.АмортизацияНематериальныхАктивов, , , , "Лист02_Прил2");
	
	// лист 2 приложение 3
	
	// Строка 030 - выручка от реализации амортизируемого имущества
	ВыручкаОтРеализацииОС  = мБухИтогиНайти("КО", Счет91011, мБухИтоги);
	ВыручкаОтРеализацииНМА = мБухИтогиНайти("КО", Счет91012, мБухИтоги);
	П002030003003 = ВыручкаОтРеализацииОС + ВыручкаОтРеализацииНМА;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030003003", П002030003003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030003003", "Строка 030 ""Выручка от реализации амортизируемого имущества""", "+", "!КО", ВыручкаОтРеализацииОС, Счет91011, , , , "Лист02_Прил3");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030003003", "", "+", "!КО", ВыручкаОтРеализацииНМА, Счет91012, , , , "Лист02_Прил3");
	
	// Строка 040 - Остаточная стоимость реализованного амортизируемого имущества
	//              и расходы, связанные с его реализацией
	РасходыПоОС = мБухИтогиНайти("ДО", ПС.РасходыСвязанныеСРеализациейОсновныхСредств, мБухИтоги);  
	РасходыПОНМА =  мБухИтогиНайти("ДО", ПС.РасходыСвязанныеСРеализациейНематериальныхАктивов, мБухИтоги);
	П002030004003 = РасходыПоОС + РасходыПОНМА;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030004003", П002030004003);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030004003", "Строка 040 ""Остаточная стоимость реализованного амортизируемого имущества и расходы, связанные с его реализацией""", "+", "!ДО", РасходыПоОС, ПС.РасходыСвязанныеСРеализациейОсновныхСредств, , , , "Лист02_Прил3");
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030004003", "", "+", "!ДО", РасходыПОНМА, ПС.РасходыСвязанныеСРеализациейНематериальныхАктивов, , , , "Лист02_Прил3");
				
	// Строка 050 - Прибыль от реализации амортизируемого имущества (без учета сделок, по которым получены убытки)																
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030005003", ПрибылиИУбытки(ПС.ВыручкаОтРеализацииОсновныхСредств, ПС.РасходыСвязанныеСРеализациейОсновныхСредств, , "Прибыль")); 
	
	// Строка 060 - Убытки от реализации амортизируемого имущества (без учета сделок, по которым получена прибыль)														
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030006003", ПрибылиИУбытки(ПС.ВыручкаОтРеализацииОсновныхСредств, ПС.РасходыСвязанныеСРеализациейОсновныхСредств, , "Убыток")); 
	
	ДоходыОказаниеФинансовыхУслуг      = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, мБухИтоги9105);
	ДоходыПослеНаступленияСрокаПлатежа = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, мБухИтоги9105);
	ДоходыДоНаступленияСрокаПлатежа    = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, мБухИтоги9105);
	
	// Строка 070 - выручка от реализации права требования как реализации финансовых услуг
	П002030007003 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, мБухИтоги9105);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030007003", П002030007003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030007003", "Строка 070 ""Выручка от реализации права требования как реализации финансовых услуг""", "+", "!КО", П002030007003, ПС.ВыручкаОтРеализацииИмущественныхПрав, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, СписокПрочихДоходовИРасходов));
	
	// Строка 080 - Стоимость реализованного права требования при  его реализации как финансовой услуги
	П002030008003 = ДоходыОказаниеФинансовыхУслуг;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030008003", П002030008003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030008003", "Строка 080 ""Стоимость реализованного права требования при  его реализации как финансовой услуги""", "+", "!ДО", П002030008003, ПС.ВыручкаОтРеализацииИмущественныхПрав, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, СписокПрочихДоходовИРасходов));
	
	// Строка 100 - Выручка от реализации права требования до наступления срока платежа (п.1 ст. 279 НК)
	П002030010003 = ДоходыДоНаступленияСрокаПлатежа;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030010003", П002030010003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030010003", "Строка 100 ""Выручка от реализации права требования до наступления срока платежа (п.1 ст. 279 НК)""", "+", "!КО", П002030010003, ПС.ВыручкаОтРеализацииИмущественныхПрав, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	
	// Строка 110 - Выручка от реализации права требования после наступления срока платежа (п.1 ст. 279 НК)
	П002030011003 = ДоходыПослеНаступленияСрокаПлатежа;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030011003", П002030011003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030011003", "Строка 110 ""Выручка от реализации права требования после наступления срока платежа (п.1 ст. 279 НК)""", "+", "!КО", П002030011003, ПС.ВыручкаОтРеализацииИмущественныхПрав, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	
	// Строка 120 - Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)																													
	П002030012003 =  мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, мБухИтоги9205);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030012003", П002030012003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030012003", "Строка 120 ""Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)""", "+", "!ДО", П002030012003, ПС.РасходыСвязанныеСРеализациейИмущественныхПрав, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	
	// Строка 130 - Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)
	П002030013003 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, мБухИтоги9205);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030013003", П002030013003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030013003", "Строка 130 ""Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)""", "+", "!ДО", П002030013003, ПС.РасходыСвязанныеСРеализациейИмущественныхПрав, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, СписокПрочихДоходовИРасходов));
	
	// Строка 140 - Убыток от реализации права требования в соответствии со статьей 279 НК:
    // по п. 1: – размер убытка, соответствующий сумме 
    //               процентов, исчисленных в соответствии со 
    //                статьей 269 НК
	П002030014003 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269, мБухИтоги9205);
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030014003", П002030014003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030014003", "Строка 140 ""Убыток от реализации права требования в соответствии со статьей 279 НК""", "+", "!ДО", П002030014003, ПС.РасходыСвязанныеСРеализациейИмущественныхПрав, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269, СписокПрочихДоходовИРасходов));
	
	// Строка 150 - размер убытка, превышающий сумму процентов, исчисленных в соответствии со статьей 269 НК (строка 120-строка 100-строка 140, если строка 120>строки 100)																									
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030015003", ?(П002030012003 > П002030010003, (П002030012003 - П002030010003 - П002030014003), 0)); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("Счет",         ПС.ВнереализационныеРасходы);
	Запрос.УстановитьПараметр("КорСчет",      ПС.РасходыСвязанныеСРеализациейИмущественныхПрав);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОбороты.СуммаОборотДт
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет = &Счет,
	|		,
	|		Организация = &Организация
	|			И ВидУчета = &ВидУчета,
	|		КорСчет = &КорСчет,
	|		) КАК НалоговыйОбороты";
	мБухИтоги170 = Запрос.Выполнить().Выгрузить();
	
	// Строка 170 - убыток от реализации права требования, относящийся к внереализационным расходам текущего отчетного (налогового) периода (включается в строку 200 Приложения № 2 к Листу 02)			
	П002030017003 = мБухИтоги170.Итог("СуммаОборотДт");
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030017003", П002030017003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030017003", "Строка 170 ""Убыток от реализации права требования, относящийся к внереализационным расходам текущего отчетного (налогового) периода""", "+", "!ДО", П002030017003, ПС.ВнереализационныеРасходы, ПС.РасходыСвязанныеСРеализациейИмущественныхПрав, , , "Лист02_Прил3");
	
	// Строка 180 - Выручка от реализации товаров (работ, услуг), имущественных прав по			
    //              объектам обслуживающих производств и хозяйств, включая объекты жилищно-коммунальной и социально-культурной сферы			
	П0020300180031 = мБухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, мБухИтоги9105); 
	П002030018003 =  П0020300180031 + П0020300180032;
	
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030018003", П002030018003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030018003", "Строка 180 ""Выручка от реализации товаров (работ, услуг), имущественных прав по объектам обслуживающих производств и хозяйств""", "+", "!КО", П0020300180031, ПС.ВыручкаОтРеализацииИмущественныхПрав, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030018003", "", "+", "!КО", П0020300180032, ПС.ВыручкаОтРеализацииПрочегоИмуществаРаботУслуг, , , , "Лист02_Прил3", , , ,мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, СписокПрочихДоходовИРасходов));
	
	// Строка 190 - Расходы, понесенные обслуживающими производствами и хозяйствами при реализации ими товаров (работ, услуг), имущественных прав в текущем отчетном (налоговом) периоде																	
	
	П0020300190031 = мБухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, мБухИтоги9205); 
	П002030019003 = П0020300190031 + П0020300190032;
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030019003", П002030019003); 
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030019003", "Строка 190 ""Расходы, понесенные обслуживающими производствами и хозяйствами""", "+", "!ДО", П0020300190031, ПС.РасходыСвязанныеСРеализациейИмущественныхПрав, , , , "Лист02_Прил3", , , , мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002030019003", "", "+", "!ДО", П0020300190032, ПС.РасходыСвязанныеСРеализациейПрочегоИмущества, , , , "Лист02_Прил3", , , ,мБухИтогиНайти("СписокЗатрат", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, СписокПрочихДоходовИРасходов));
	
	// Строка 200 - Сумма убытков текущего отчетного (налогового) периода по объектам обслуживающих производств и хозяйств, включая объекты жилищно-коммунальной и социально-культурной сферы (строка 190-строка 180, если строка 190>строки 180)																	
	// Строка 200 заполняется через процедуру Расчет().
	//РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002030020003", ?(Показатель190 > Показатель180, Показатель190 - Показатель180, 0)); 
	
	// лист 2 приложение 4
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("Счет",         ПС.УбыткиПрошлыхЛет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОстаткиИОбороты.СуммаОборотКт) КАК КО,
	|	НалоговыйОстаткиИОбороты.Субконто1 КАК Субконто1,
	|	СУММА(НалоговыйОстаткиИОбороты.СуммаНачальныйОстатокДт) КАК СуммаНачальныйОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		,
	|		Счет = &Счет,
	|		,
	|		Организация = &Организация
	|		    И ВидУчета = &ВидУчета) КАК НалоговыйОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОстаткиИОбороты.Субконто1";
	УбыткиПрошлыхЛет = Запрос.Выполнить().Выгрузить();
	
	П1997 = 0;
	П1998 = 0;
    П1999 = 0;
    П2000 = 0;
    П2001 = 0;
    П2002 = 0;
    П2003 = 0;
    П2004 = 0;
    П2005 = 0;
    П2006 = 0;
    П2007 = 0;
    П2008 = 0;
    П2009 = 0;
	
	Для Каждого УбытокПрошлыхЛет Из УбыткиПрошлыхЛет Цикл
		
	ГодУбытка = Год(УбытокПрошлыхЛет.Субконто1.ДатаНачалаСписания) - 1;
	СуммаСписанногоУбытка = УбытокПрошлыхЛет.СуммаНачальныйОстатокДт;
	Если ГодУбытка = 1997 Тогда
	П1997 = ?(ГодУбытка = 1997, СуммаСписанногоУбытка, 0); РБП1997 = УбытокПрошлыхЛет.Субконто1;
	ИначеЕсли ГодУбытка = 1998 Тогда
	П1998 = СуммаСписанногоУбытка; РБП1998 = УбытокПрошлыхЛет.Субконто1;
	ИначеЕсли ГодУбытка = 1999 Тогда
	П1999 = СуммаСписанногоУбытка; РБП1999 = УбытокПрошлыхЛет.Субконто1;
	ИначеЕсли ГодУбытка = 2000 Тогда
	П2000 = СуммаСписанногоУбытка; РБП2000 = УбытокПрошлыхЛет.Субконто1;
	ИначеЕсли ГодУбытка = 2001 Тогда
	П2001 = СуммаСписанногоУбытка; РБП2001 = УбытокПрошлыхЛет.Субконто1;
	ИначеЕсли ГодУбытка = 2002 Тогда
	П2002 = СуммаСписанногоУбытка; РБП2002 = УбытокПрошлыхЛет.Субконто1;
	ИначеЕсли ГодУбытка = 2003 Тогда
	П2003 = СуммаСписанногоУбытка; РБП2003 = УбытокПрошлыхЛет.Субконто1;
	ИначеЕсли ГодУбытка = 2004 Тогда
	П2004 = СуммаСписанногоУбытка; РБП2004 = УбытокПрошлыхЛет.Субконто1;
	ИначеЕсли ГодУбытка = 2005 Тогда
	П2005 = СуммаСписанногоУбытка; РБП2005 = УбытокПрошлыхЛет.Субконто1;
	ИначеЕсли ГодУбытка = 2006 Тогда
	П2006 = СуммаСписанногоУбытка; РБП2006 = УбытокПрошлыхЛет.Субконто1;
	ИначеЕсли ГодУбытка = 2007 Тогда
	П2007 = СуммаСписанногоУбытка; РБП2007 = УбытокПрошлыхЛет.Субконто1;
	ИначеЕсли ГодУбытка = 2008 Тогда
	П2008 = СуммаСписанногоУбытка; РБП2008 = УбытокПрошлыхЛет.Субконто1;
	ИначеЕсли ГодУбытка = 2009 Тогда
	П2009 = СуммаСписанногоУбытка; РБП2009 = УбытокПрошлыхЛет.Субконто1;
КонецЕсли;

КонецЦикла;

	// Строка 020 -     убытка, полученного до 1 января 2002 года																
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040002003", П1997+П1998+П1999+П2000+П2001);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040002003", "убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1997 году - сальдо начальное по дебету счета 97.11", П1997, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП1997);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040002003", "убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1998 году - сальдо начальное по дебету счета 97.11", П1998, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП1998);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040002003", "убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 1999 году - сальдо начальное по дебету счета 97.11", П1999, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП1999);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040002003", "убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 2000 году - сальдо начальное по дебету счета 97.11", П2000, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2000);
	ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040002003", "убытка, полученного до 1 января 2002 года", "+", "Сумма убытка, полученного в 2001 году - сальдо начальное по дебету счета 97.11", П2001, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2001);
	
	
	Если П2002 <> 0 Тогда
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040004001", "2002");
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040004003", П2002);
	    ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040004003", "Сумма убытка, полученного в 2002 году", "+", "!СНД", П2002, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2002);
	КонецЕсли;
	
	Если П2003 <> 0 Тогда
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040005001", "2003");
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040005003", П2003);
	    ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040005003", "Сумма убытка, полученного в 2003 году", "+", "!СНД", П2002, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2003);
	КонецЕсли;

	Если П2004 <> 0 Тогда
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040006001", "2004");
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040006003", П2004);
	    ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040006003", "Сумма убытка, полученного в 2004 году", "+", "!СНД", П2004, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2004);
	КонецЕсли;
	
	Если П2005 <> 0 Тогда
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040007001", "2005");
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040007003", П2005);
	    ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040007003", "Сумма убытка, полученного в 2005 году", "+", "!СНД", П2005, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2005);
	КонецЕсли;
	
	Если П2006 <> 0 Тогда
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040008001", "2006");
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040008003", П2006);
	    ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040008003", "Сумма убытка, полученного в 2006 году", "+", "!СНД", П2006, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2006);
	КонецЕсли;
	
	Если П2007 <> 0 Тогда
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040009001", "2007");
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040009003", П2007);
	    ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040009003", "Сумма убытка, полученного в 2007 году", "+", "!СНД", П2007, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2007);
	КонецЕсли;
	
	Если П2008 <> 0 Тогда
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040010001", "2008");
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040010003", П2008);
	    ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040010003", "Сумма убытка, полученного в 2008 году", "+", "!СНД", П2008, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2008);
	КонецЕсли;

	Если П2009 <> 0 Тогда
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040011001", "2009");
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040011003", П2009);
	    ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040011003", "Сумма убытка, полученного в 2009 году", "+", "!СНД", П2009, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4", , , , РБП2009);
	КонецЕсли;


	// Строка 150 - Сумма убытка или части убытка, уменьшающего   
	//              налоговую базу за отчетный  (налоговый)  период
	СуммаПоСтроке050Листа02 = 0;
	СуммаПоСтроке140Листа02 = 0;
	СуммаПоСтроке120Листа05 = 0;
	СуммаПоСтроке120Листа06 = 0;
	СуммаПоСтроке230Листа07 = 0;
	СуммаПоСтроке110Листа08 = 0;
	СуммаПоСтроке590Листа09 = 0;

	//Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП"
	//   И РегламентированнаяОтчетность.РедакцияКонфигурации() = "1.5" Тогда
	    П002040015003 =  УбыткиПрошлыхЛет.Итог("КО");
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040015003", П002040015003);
	    ДобавитьСтрокуРасшифровки(ЭтаФорма, "П002040015003", "Сумма убытка или части убытка, уменьшающего налоговую базу за отчетный (налоговый) период", "+", "!КО", П002040015003, ПС.УбыткиПрошлыхЛет, , , , "Лист02_Прил4");
	//Иначе
	//	Если мРаздел2_Прил4.Области.П002030009003.Значение > 0 Тогда 
	//		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040015003", Мин(мРаздел2_Прил4.Области.П002030001003.Значение,мРаздел2_Прил4.Области.П002030009003.Значение*3/10));
	//		
	//	Иначе
	//		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П002040015003", 0);
	//	КонецЕсли;
	//КонецЕсли;
	
	// обновим ставки
	ПолучитьСтавкиНалога();
	
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);

    // Конец автозаполнения.
	// Операции, необходимые после процедуры автозаполнения.
	Расчет("");

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьАвто()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

///////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// ПолеТабличногоДокументаЛист06Выбор
//
Процедура ПолеТабличногоДокументаЛист06Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаЛист06Выбор

// ПолеТабличногоДокументаЛист02П002000036001ПриИзменении
//
Процедура ПолеТабличногоДокументаЛист02П002000036001ПриИзменении(Элемент)
	ПустоеЗначениеДаты = '00010101000000';
	Если Элемент.Значение <> ПустоеЗначениеДаты Тогда
		Если (Месяц(Элемент.Значение) = 1) Или (День(Элемент.Значение) <> 28) Тогда
			Сообщить("Возможно указать только 28-ое число месяца с февраля по декабрь.", СтатусСообщения.Важное);
			Элемент.Значение = ПустоеЗначениеДаты;
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаЛист02П002000036001ПриИзменении

// КоманднаяПанельФормыПроверкаПоказателей
//
Процедура КоманднаяПанельФормыПроверкаПоказателей(Кнопка)
	РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияВОтчете(ЭтаФорма, мСохраненныйДок, Ложь, Истина);
КонецПроцедуры // КоманднаяПанельФормыПроверкаПоказателей

// ВГруппуОПВходитОрганизацияПриИзменении
//
Процедура ВГруппуОПВходитОрганизацияПриИзменении(Элемент)

	ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(ВГруппуОПВходитОрганизация, Истина);
	РасчетЗависимыхРазделовДекларации("Лист02_Прил5");

КонецПроцедуры // ВГруппуОПВходитОрганизацияПриИзменении

// КнопкаПерейтиНаСтраницуЛист05Нажатие
//
Процедура КнопкаПерейтиНаСтраницуЛист05Нажатие(Элемент)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист05");

КонецПроцедуры // КнопкаПерейтиНаСтраницуЛист05Нажатие

// КнопкаУдалитьДопСтраницуЛист05Нажатие
//
Процедура КнопкаУдалитьДопСтраницуЛист05Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Лист05");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Лист05");
	РасчетЗависимыхРазделовДекларации("Лист05");

КонецПроцедуры // КнопкаУдалитьДопСтраницуЛист05Нажатие

// КнопкаДобавитьДопСтраницуЛист05Нажатие
//
Процедура КнопкаДобавитьДопСтраницуЛист05Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Лист05");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Лист05");
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист05", Ложь);

КонецПроцедуры // КнопкаДобавитьДопСтраницуЛист05Нажатие

// КнопкаСледующаяСтраницаЛист05Нажатие
//
Процедура КнопкаСледующаяСтраницаЛист05Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, "Лист05");

КонецПроцедуры // КнопкаСледующаяСтраницаЛист05Нажатие

// КнопкаПредыдущаяСтраницаЛист05Нажатие
//
Процедура КнопкаПредыдущаяСтраницаЛист05Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, "Лист05");

КонецПроцедуры // КнопкаПредыдущаяСтраницаЛист05Нажатие

// ПолеТабличногоДокументаЛист03РеестрВыбор
//
Процедура ПолеТабличногоДокументаЛист03РеестрВыбор(Элемент, Область, СтандартнаяОбработка)

	ИмяЯчейки = Область.Имя;

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если (Найти(ИмяЯчейки, "ПочтИнд") > 0)
	   Или (ИмяЯчейки = "СубъектРФ") // Субъект
	   Или (ИмяЯчейки = "Район") // район
	   Или (ИмяЯчейки = "Город") // город
	   Или (ИмяЯчейки = "Суб1") // коды субъекта
	   Или (ИмяЯчейки = "Суб2")
	   Или (ИмяЯчейки = "НасПункт") // НП
	   Или (ИмяЯчейки = "Улица") // Улица
	   Или (ИмяЯчейки = "Дом") // дом
	   Или (ИмяЯчейки = "Корпус") // корпус
	   Или (ИмяЯчейки = "Квартира") Тогда // кв

		СтандартнаяОбработка = Ложь;
		ФормаВводаАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		СтруктураАдресныхДанных = Новый Структура;

		ПочтИндекс = "";
		Для Инд = 1 По 6 Цикл
			ПочтИндекс = ПочтИндекс + мРаздел3Реестр.Области["ПочтИнд" + Строка(Инд)].Значение;
		КонецЦикла;

		СубъектРФОб = мРаздел3Реестр.Области.СубъектРФ;
		СубъектРФНом = мРаздел3Реестр.Области.Суб1.Значение + мРаздел3Реестр.Области.Суб2.Значение;
		РайонОб     = мРаздел3Реестр.Области.Район;
		ГородОб     = мРаздел3Реестр.Области.Город;
		НПОб        = мРаздел3Реестр.Области.НасПункт;
		УлицаОб     = мРаздел3Реестр.Области.Улица;
		ДомаОб      = мРаздел3Реестр.Области.Дом;
		КорпусОб    = мРаздел3Реестр.Области.Корпус;
		КвартираОб  = мРаздел3Реестр.Области.Квартира;

		СтруктураАдресныхДанных.Вставить("Индекс", ПочтИндекс); // индекс
		СтруктураАдресныхДанных.Вставить("Регион", СубъектРФНом); // код
		СтруктураАдресныхДанных.Вставить("НазваниеРегиона", СубъектРФОб.Значение);
		СтруктураАдресныхДанных.Вставить("Район", РайонОб.Значение);
		СтруктураАдресныхДанных.Вставить("Город", ГородОб.Значение);
		СтруктураАдресныхДанных.Вставить("НаселенныйПункт", НПОб.Значение);
		СтруктураАдресныхДанных.Вставить("Улица", УлицаОб.Значение);
		СтруктураАдресныхДанных.Вставить("Дом", ДомаОб.Значение);
		СтруктураАдресныхДанных.Вставить("Корпус", КорпусОб.Значение);
		СтруктураАдресныхДанных.Вставить("Квартира", КвартираОб.Значение);

		ФормаВводаАдреса.НачальноеЗначениеВыбора = СтруктураАдресныхДанных;

		Если ФормаВводаАдреса.ОткрытьМодально() Тогда

			Индекс = "";
			Регион = "";
			НазваниеРегиона = "";
			Район = "";
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Дом = "";
			Корпус = "";
			Квартира = "";

			Индекс = ФормаВводаАдреса.НачальноеЗначениеВыбора.Индекс;
			Регион = ФормаВводаАдреса.НачальноеЗначениеВыбора.Регион;

			СубъектРФОб.Значение = ФормаВводаАдреса.НачальноеЗначениеВыбора.НазваниеРегиона;
			РайонОб.Значение = ФормаВводаАдреса.НачальноеЗначениеВыбора.Район;
			ГородОб.Значение = ФормаВводаАдреса.НачальноеЗначениеВыбора.Город;
			НПОб.Значение = ФормаВводаАдреса.НачальноеЗначениеВыбора.НаселенныйПункт;
			УлицаОб.Значение = ФормаВводаАдреса.НачальноеЗначениеВыбора.Улица;
			ДомаОб.Значение = ФормаВводаАдреса.НачальноеЗначениеВыбора.Дом;
			КорпусОб.Значение = ФормаВводаАдреса.НачальноеЗначениеВыбора.Корпус;
			КвартираОб.Значение = ФормаВводаАдреса.НачальноеЗначениеВыбора.Квартира;

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Лист03Реестр", "ПочтИнд", 6, Индекс);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Лист03Реестр", "Суб", 2, Регион);
			Модифицированность = Истина;

		КонецЕсли;

	// Строка 030, ввод ФИО.
	ИначеЕсли ИмяЯчейки = "П002080003003" Тогда
		ВводЗначений = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ФормаВводаФИО");

		СтруктураПараметров = Новый Структура;

		СтруктураПараметров.Вставить("Фамилия",  мФамилияРаздел3Реестр);
		СтруктураПараметров.Вставить("Имя",      мИмяРаздел3Реестр);
		СтруктураПараметров.Вставить("Отчество", мОтчествоРаздел3Реестр);

		ВводЗначений.НачальноеЗначениеВыбора = СтруктураПараметров;
		СтандартнаяОбработка = Ложь;

		Если ВводЗначений.ОткрытьМодально() Тогда

			Модифицированность = Истина;
			мФамилияРаздел3Реестр = СокрЛП(ВводЗначений.НачальноеЗначениеВыбора.Фамилия);
			мИмяРаздел3Реестр = СокрЛП(ВводЗначений.НачальноеЗначениеВыбора.Имя);
			мОтчествоРаздел3Реестр = СокрЛП(ВводЗначений.НачальноеЗначениеВыбора.Отчество);

			ФИО = мФамилияРаздел3Реестр + " " + мИмяРаздел3Реестр + " " + мОтчествоРаздел3Реестр;
			мФИОДляВыгрузкиРаздел3Реестр = мФамилияРаздел3Реестр + "," + мИмяРаздел3Реестр + "," + мОтчествоРаздел3Реестр;
			мРаздел3Реестр.Области.П002080003003.Значение = ФИО;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаЛист03РеестрВыбор

// ПолеТабличногоДокументаЛист03РеестрПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаЛист03РеестрПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист03Реестр");

КонецПроцедуры // ПолеТабличногоДокументаЛист03РеестрПриАктивизацииОбласти

// КнопкаПерейтиНаСтраницуЛист03РеестрНажатие
//
Процедура КнопкаПерейтиНаСтраницуЛист03РеестрНажатие(Элемент)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист03Реестр");

КонецПроцедуры // КнопкаПерейтиНаСтраницуЛист03РеестрНажатие

// КнопкаУдалитьДопСтраницуЛист03РеестрНажатиеКнопкаУдалитьДопСтраницуЛист03РеестрНажатие\
//
Процедура КнопкаУдалитьДопСтраницуЛист03РеестрНажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Лист03Реестр");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Лист03Реестр");

КонецПроцедуры // КнопкаУдалитьДопСтраницуЛист03РеестрНажатие

// КнопкаДобавитьДопСтраницуЛист03РеестрНажатие
//
Процедура КнопкаДобавитьДопСтраницуЛист03РеестрНажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Лист03Реестр");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Лист03Реестр");
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист03Реестр", Ложь);

КонецПроцедуры // КнопкаДобавитьДопСтраницуЛист03РеестрНажатие

// КнопкаСледующаяСтраницаЛист03РеестрНажатие
//
Процедура КнопкаСледующаяСтраницаЛист03РеестрНажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, "Лист03Реестр");

КонецПроцедуры // КнопкаСледующаяСтраницаЛист03РеестрНажатие

// КнопкаПредыдущаяСтраницаЛист03РеестрНажатие
//
Процедура КнопкаПредыдущаяСтраницаЛист03РеестрНажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, "Лист03Реестр");

КонецПроцедуры // КнопкаПредыдущаяСтраницаЛист03РеестрНажатие

// ПолеТабличногоДокументаЛист03ПродолжениеПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаЛист03ПродолжениеПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист03Продолжение");

КонецПроцедуры // ПолеТабличногоДокументаЛист03ПродолжениеПриАктивизацииОбласти

// ПолеТабличногоДокументаЛист03ПродолжениеВыбор
//
Процедура ПолеТабличногоДокументаЛист03ПродолжениеВыбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если (Область.Имя = "П002070000600") И (НЕ мАвтоВыборКодов) Тогда

		СтандартнаяОбработка = Ложь;
		Список = Новый СписокЗначений;

		// Список.Добавить("","Пустое значение");
		Список.Добавить("1","1 (доход в виде процентов по государственным и муниципальным ценным бумагам, удерживаемого налоговым агентом)");
		Список.Добавить("2","2 (доход в виде процентов по муниципальным ценным бумагам, эмитированным на срок не менее трех лет до 1 января 2007 года)");
		Список.Добавить("-1","Пустое значение");

		НайденнаяСтрока = Список.НайтиПоЗначению(Область.Значение);

		Если НайденнаяСтрока = Неопределено Тогда
			СписокЭлемент = ВыбратьИзСписка(Список);
		Иначе
			СписокЭлемент = ВыбратьИзСписка(Список,, НайденнаяСтрока);
		КонецЕсли;

		Если СписокЭлемент <> Неопределено  Тогда

			Если (Область.Значение = СписокЭлемент.Значение) Или (СписокЭлемент.Значение = "-1") Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = СписокЭлемент.Значение;
			КонецЕсли;

			Модифицированность = Истина;
			РасчетЗависимыхРазделовДекларации("Лист03Продолжение");

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаЛист03ПродолжениеВыбор

// ПолеТабличногоДокументаЛист03Выбор
//
Процедура ПолеТабличногоДокументаЛист03Выбор(Элемент, Область, СтандартнаяОбработка)
	Перем ЦветФона;

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если (Область.Имя = "П002060000200") И (НЕ мАвтоВыборКодов) Тогда

		СтандартнаяОбработка = Ложь;
		Список = Новый СписокЗначений;
		Список.Добавить("1","1 (промежуточные дивиденды)");
		Список.Добавить("2","2 (по результатам финансового года)");
		Список.Добавить("-1","Пустое значение");

		НайденнаяСтрока = Список.НайтиПоЗначению(Область.Значение);

		Если НайденнаяСтрока = Неопределено Тогда
			СписокЭлемент = ВыбратьИзСписка(Список);
		Иначе
			СписокЭлемент = ВыбратьИзСписка(Список,, НайденнаяСтрока);
		КонецЕсли;

		Если СписокЭлемент <> Неопределено  Тогда

			Если (Область.Значение = СписокЭлемент.Значение) Или (СписокЭлемент.Значение = "-1") Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = СписокЭлемент.Значение;
			КонецЕсли;

			// Запишем признак в структуру данных листа
			ЗаписатьПоказательВСтруктуру("Лист03", "П002060000200", мРаздел3.Области.П002060000200.Значение);
			Если РегламентированнаяОтчетность.ПустоеЗначение(Область.Значение) Тогда
				// обнулим год
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Лист03","ГодЛист03_", 4, "");

				ЗаписатьПоказательВСтруктуру("Лист03", "ГодЛист03_1", "");
				ЗаписатьПоказательВСтруктуру("Лист03", "ГодЛист03_2", "");
				ЗаписатьПоказательВСтруктуру("Лист03", "ГодЛист03_3", "");
				ЗаписатьПоказательВСтруктуру("Лист03", "ГодЛист03_4", "");

				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Лист03","МесяцЛист03_", 2, "");
				ЗаписатьПоказательВСтруктуру("Лист03", "МесяцЛист03_1", "");
				ЗаписатьПоказательВСтруктуру("Лист03", "МесяцЛист03_2", "");

				мРаздел3.Области.П002060000300.Значение = "";
				ЗаписатьПоказательВСтруктуру("Лист03", "П002060000300", "");

			КонецЕсли;

			Модифицированность = Истина;
		КонецЕсли;
	
	ИначеЕсли ((Область.Имя = "МесяцЛист03_1") Или (Область.Имя = "МесяцЛист03_2")) Тогда

		СтандартнаяОбработка = Ложь;
		// Тогда ячейка желтая и доступная для ввода
		НачЗначение = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Лист03", "МесяцЛист03_");
		Если мАвтоВыборКодов Тогда

			СтруктураКонтроля = Новый Структура;
			СтруктураКонтроля.Вставить("СтрокаТолькоИзЧисел", Истина);
			СтруктураКонтроля.Вставить("КонтролируемаяДлинаСтроки", 2);

			Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
											   , "Лист03"                   // Название раздела.
											   , "МесяцЛист03_"             // Имя ячейки для записи.
											   , СокрЛП(НачЗначение) // Первоначальное значение.
											   , 2                          // РазмерностьЦ - возможная длинна ИННа.
											   , 0                          // РазмерностьД - требуемый тип ввода ИНН.
											   , Ложь                       // Это сумма?
											   , "Номер месяца"             // Текст ввода.
											   , ""                         // Текст выбора из таблицы значений.
											   , Неопределено               // Таблица выбора значений.
											   , Неопределено               // Строка доп. ввода.
											   , СтандартнаяОбработка       // Стандартная обработка.
											   , 2                          // Кол-во квадратиков, если в квадратах
											   ,                            // Колонка поиска, если ТаблицаЗначений
											   , СтруктураКонтроля          // Структура требований ручного ввода
											   );

			Если Результат.ЗначениеВведено Тогда
				ЗаписатьПоказательВСтруктуру("Лист03", "МесяцЛист03_1", Сред(Результат.Значение, 1, 1));
				ЗаписатьПоказательВСтруктуру("Лист03", "МесяцЛист03_2", Сред(Результат.Значение, 2, 1));
			КонецЕсли;

			Модифицированность = Истина;
			Возврат;
		КонецЕсли;

		НайденнаяСтрока = мСписокМесяцев.НайтиПоЗначению(НачЗначение);

		Если НайденнаяСтрока = Неопределено Тогда
			СписокЭлемент = ВыбратьИзСписка(мСписокМесяцев);
		Иначе
			СписокЭлемент = ВыбратьИзСписка(мСписокМесяцев,, НайденнаяСтрока);
		КонецЕсли;

		Если СписокЭлемент <> Неопределено  Тогда

			// Возведем признак модифицированности.
			Модифицированность = Истина;

			Если (НачЗначение = СписокЭлемент.Значение) Или (СписокЭлемент.Значение = "-1") Тогда

				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Лист03","МесяцЛист03_", 2, "  ");
				ЗаписатьПоказательВСтруктуру("Лист03", "МесяцЛист03_1", "");
				ЗаписатьПоказательВСтруктуру("Лист03", "МесяцЛист03_2", "");
			Иначе

				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Лист03","МесяцЛист03_", 2, СписокЭлемент.Значение);
				ЗаписатьПоказательВСтруктуру("Лист03", "МесяцЛист03_1", Сред(СписокЭлемент.Значение, 1, 1));
				ЗаписатьПоказательВСтруктуру("Лист03", "МесяцЛист03_2", Сред(СписокЭлемент.Значение, 2, 1));
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(Область.Имя, "ГодЛист03_") > 0 Тогда

		СтандартнаяОбработка = Ложь;

		НачЗначение = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Лист03", "ГодЛист03_");

		СтруктураКонтроля = Новый Структура;
		СтруктураКонтроля.Вставить("СтрокаТолькоИзЧисел", Истина);
		СтруктураКонтроля.Вставить("КонтролируемаяДлинаСтроки", 4);

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Лист03"                   // Название раздела.
										   , "ГодЛист03_"               // Имя ячейки для записи.
										   , СокрЛП(НачЗначение) // Первоначальное значение.
										   , 4                          // РазмерностьЦ - возможная длинна ИННа.
										   , 0                          // РазмерностьД - требуемый тип ввода ИНН.
										   , Ложь                       // Это сумма?
										   , "Отчетный год"             // Текст ввода.
										   , ""                         // Текст выбора из таблицы значений.
										   , Неопределено               // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   , 4                          // Кол-во квадратиков, если в квадратах
										   ,                            // Колонка поиска, если ТаблицаЗначений
										   , СтруктураКонтроля          // Структура требований ручного ввода
										   );

		Если Результат.ЗначениеВведено Тогда
			ЗаписатьПоказательВСтруктуру("Лист03", "ГодЛист03_1", Сред(Результат.Значение, 1, 1));
			ЗаписатьПоказательВСтруктуру("Лист03", "ГодЛист03_2", Сред(Результат.Значение, 2, 1));
			ЗаписатьПоказательВСтруктуру("Лист03", "ГодЛист03_3", Сред(Результат.Значение, 3, 1));
			ЗаписатьПоказательВСтруктуру("Лист03", "ГодЛист03_4", Сред(Результат.Значение, 4, 1));

			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли (Область.Имя = "П002060000300") И (НЕ мАвтоВыборКодов) Тогда
		СтандартнаяОбработка = Ложь;
		Список = Новый СписокЗначений;
		Список.Добавить("1","1 (ежемесячно)");
		Список.Добавить("3","3 (квартал)");
		Список.Добавить("6","6 (полугодие)");
		Список.Добавить("9","9 (9 месяцев)");
		Список.Добавить("0","0 (год)");
		Список.Добавить("-1","Пустое значение"); // -1 - чтобы не позиционировалось на Пустом значении изначально если пустая ячейка.

		НайденнаяСтрока = Список.НайтиПоЗначению(Область.Значение);

		Если НайденнаяСтрока = Неопределено Тогда
			СписокЭлемент = ВыбратьИзСписка(Список);
		Иначе
			СписокЭлемент = ВыбратьИзСписка(Список,, НайденнаяСтрока);
		КонецЕсли;

		Если СписокЭлемент <> Неопределено  Тогда

			Если (Область.Значение = СписокЭлемент.Значение) Или (СписокЭлемент.Значение = "-1") Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = СписокЭлемент.Значение;
			КонецЕсли;

			// Запишем признак в структуру данных листа
			ЗаписатьПоказательВСтруктуру("Лист03", "П002060000300", Область.Значение);
			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаЛист03Выбор

// КнопкаПерейтиНаСтраницуЛист03ПродолжениеНажатие
//
Процедура КнопкаПерейтиНаСтраницуЛист03ПродолжениеНажатие(Элемент)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист03Продолжение");

КонецПроцедуры // КнопкаПерейтиНаСтраницуЛист03ПродолжениеНажатие

// КнопкаУдалитьДопСтраницуЛист03ПродолжениеНажатие
//
Процедура КнопкаУдалитьДопСтраницуЛист03ПродолжениеНажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Лист03Продолжение");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Лист03Продолжение");

КонецПроцедуры // КнопкаУдалитьДопСтраницуЛист03ПродолжениеНажатие

// КнопкаДобавитьДопСтраницуЛист03ПродолжениеНажатие
//
Процедура КнопкаДобавитьДопСтраницуЛист03ПродолжениеНажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Лист03Продолжение");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Лист03Продолжение");
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист03Продолжение", Ложь);

КонецПроцедуры // КнопкаДобавитьДопСтраницуЛист03ПродолжениеНажатие

// КнопкаСледующаяСтраницаЛист03ПродолжениеНажатие
//
Процедура КнопкаСледующаяСтраницаЛист03ПродолжениеНажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, "Лист03Продолжение");

КонецПроцедуры // КнопкаСледующаяСтраницаЛист03ПродолжениеНажатие

// КнопкаПредыдущаяСтраницаЛист03ПродолжениеНажатие
//
Процедура КнопкаПредыдущаяСтраницаЛист03ПродолжениеНажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, "Лист03Продолжение");

КонецПроцедуры // КнопкаПредыдущаяСтраницаЛист03ПродолжениеНажатие

// КнопкаПерейтиНаСтраницуЛист03Нажатие
//
Процедура КнопкаПерейтиНаСтраницуЛист03Нажатие(Элемент)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист03");

КонецПроцедуры // КнопкаПерейтиНаСтраницуЛист03Нажатие

// КнопкаУдалитьДопСтраницуЛист03Нажатие
//
Процедура КнопкаУдалитьДопСтраницуЛист03Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Лист03");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Лист03");

КонецПроцедуры // КнопкаУдалитьДопСтраницуЛист03Нажатие

// КнопкаДобавитьДопСтраницуЛист03Нажатие
//
Процедура КнопкаДобавитьДопСтраницуЛист03Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Лист03");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Лист03");
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист03", Ложь);

КонецПроцедуры // КнопкаДобавитьДопСтраницуЛист03Нажатие

// КнопкаСледующаяСтраницаЛист03Нажатие
//
Процедура КнопкаСледующаяСтраницаЛист03Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, "Лист03");

КонецПроцедуры // КнопкаСледующаяСтраницаЛист03Нажатие

// КнопкаПредыдущаяСтраницаЛист03Нажатие
//
Процедура КнопкаПредыдущаяСтраницаЛист03Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, "Лист03");

КонецПроцедуры // КнопкаПредыдущаяСтраницаЛист03Нажатие

// КнопкаУдалитьДопСтрокиЛист07Нажатие
//
Процедура КнопкаУдалитьДопСтрокиЛист07Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();
	РасчетЗависимыхРазделовДекларации("Лист07");

КонецПроцедуры // КнопкаУдалитьДопСтрокиЛист07Нажатие

// КнопкаДобавитьДопСтрокиЛист07Нажатие
//
Процедура КнопкаДобавитьДопСтрокиЛист07Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиЛист07Нажатие

// ПолеТабличногоДокументаЛист05Выбор
//
Процедура ПолеТабличногоДокументаЛист05Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если (Область.Имя = "П002100000200") И (НЕ мАвтоВыборКодов) Тогда

		СтандартнаяОбработка = Ложь;
		Список = Новый СписокЗначений;
		// Список.Добавить("","Пустое значение");
		Список.Добавить("1","1 (с ценными бумагами,  обращающимися на организованном  рынке ценных бумаг)");
		Список.Добавить("2","2 (с ценными бумагами,  не обращающимися на организованном рынке ценных бумаг)");
		Список.Добавить("3","3 (с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке ценных бумаг)");
		Список.Добавить("4","4 (по операциям с ценными бумагами, обращающимися и не обращающимися на организованном рынке ценных бумаг, полученными первичными владельцами государственных ценных бумаг в результате новации)");
		Список.Добавить("-1","Пустое значение");

		НайденнаяСтрока = Список.НайтиПоЗначению(Область.Значение);

		Если НайденнаяСтрока = Неопределено Тогда
			СписокЭлемент = ВыбратьИзСписка(Список);
		Иначе
			СписокЭлемент = ВыбратьИзСписка(Список,, НайденнаяСтрока);
		КонецЕсли;

		Если СписокЭлемент <> Неопределено  Тогда
			Если (Область.Значение = СписокЭлемент.Значение) Или (СписокЭлемент.Значение = "-1") Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = СписокЭлемент.Значение;
			КонецЕсли;

			Модифицированность = Истина;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаЛист05Выбор

// КнопкаПерейтиНаСтраницуЛист04Нажатие
//
Процедура КнопкаПерейтиНаСтраницуЛист04Нажатие(Элемент)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист04");

КонецПроцедуры // КнопкаПерейтиНаСтраницуЛист04Нажатие

// КнопкаУдалитьДопСтраницуЛист04Нажатие
//
Процедура КнопкаУдалитьДопСтраницуЛист04Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Лист04");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Лист04");

КонецПроцедуры // КнопкаУдалитьДопСтраницуЛист04Нажатие

// КнопкаДобавитьДопСтраницуЛист04Нажатие
//
Процедура КнопкаДобавитьДопСтраницуЛист04Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Лист04");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Лист04");
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист04", Ложь);

КонецПроцедуры // КнопкаДобавитьДопСтраницуЛист04Нажатие

// КнопкаСледующаяСтраницаЛист04Нажатие
//
Процедура КнопкаСледующаяСтраницаЛист04Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, "Лист04");

КонецПроцедуры // КнопкаСледующаяСтраницаЛист04Нажатие

// КнопкаПредыдущаяСтраницаЛист04Нажатие
//
Процедура КнопкаПредыдущаяСтраницаЛист04Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, "Лист04");

КонецПроцедуры // КнопкаПредыдущаяСтраницаЛист04Нажатие

// КнопкаПерейтиНаСтраницуЛист02_Прил4Нажатие
//
Процедура КнопкаПерейтиНаСтраницуЛист02_Прил4Нажатие(Элемент)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист02_Прил4");

КонецПроцедуры // КнопкаПерейтиНаСтраницуЛист02_Прил4Нажатие

// КнопкаПерейтиНаСтраницуЛист02_Прил5Нажатие
//
Процедура КнопкаПерейтиНаСтраницуЛист02_Прил5Нажатие(Элемент)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист02_Прил5");

	// Восстановим признак V в приложении 5 листа 02. Если не было отключен режим
	Если мРаздел2_Прил5.Области.П002050015003.Значение = "0" Тогда
		мРаздел2_Прил5.Области.П002050015003.Значение = "";
	Иначе
		мРаздел2_Прил5.Области.П002050015003.Значение = "V";
	КонецЕсли;

	Если мРаздел2_Прил5.Области.П002050000200.Значение = "4" Тогда
		ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Истина;

		// прочитаем признак
		ДанныеАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Лист02_Прил5.Найти(Истина, "АктивнаяСтраница").Данные;

		Если ТипЗнч(ДанныеАктивнойСтраницы) <> Тип("Структура") Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_Прил5", Ложь);
		КонецЕсли;

		Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
			ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
		Иначе
			ВГруппуОПВходитОрганизация = Ложь;
		КонецЕсли;

	Иначе

		ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Ложь;
		ВГруппуОПВходитОрганизация = Ложь;

	КонецЕсли;

КонецПроцедуры // КнопкаПерейтиНаСтраницуЛист02_Прил5Нажатие

// КнопкаУдалитьДопСтраницуЛист02_Прил4Нажатие
//
Процедура КнопкаУдалитьДопСтраницуЛист02_Прил4Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Лист02_Прил4");
	// Возведем признак отключения авторасчета после вставки.
	мИсключитьЗапускРасчета = Истина;
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Лист02_Прил4");
	мИсключитьЗапускРасчета = Ложь;
	РасчетЗависимыхРазделовДекларации("Лист02_Прил4");

КонецПроцедуры // КнопкаУдалитьДопСтраницуЛист02_Прил4Нажатие

// КнопкаУдалитьДопСтраницуЛист02_Прил5Нажатие
//
Процедура КнопкаУдалитьДопСтраницуЛист02_Прил5Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Лист02_Прил5");
	// Возведем признак отключения авторасчета после вставки.
	мИсключитьЗапускРасчета = Истина;
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Лист02_Прил5");
	мИсключитьЗапускРасчета = Ложь;

	// Восстановим признак V в приложении 5 листа 02. Если не было отключен режим
	Если мРаздел2_Прил5.Области.П002050015003.Значение = "0" Тогда
		мРаздел2_Прил5.Области.П002050015003.Значение = "";
	Иначе
		мРаздел2_Прил5.Области.П002050015003.Значение = "V";
	КонецЕсли;

	Если мРаздел2_Прил5.Области.П002050000200.Значение = "4" Тогда
		ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Истина;

		// прочитаем признак
		ДанныеАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Лист02_Прил5.Найти(Истина, "АктивнаяСтраница").Данные;

		Если ТипЗнч(ДанныеАктивнойСтраницы) <> Тип("Структура") Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_Прил5", Ложь);
		КонецЕсли;

		Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
			ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
		Иначе
			ВГруппуОПВходитОрганизация = Ложь;
		КонецЕсли;

	Иначе

		ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Ложь;
		ВГруппуОПВходитОрганизация = Ложь;

	КонецЕсли;

	РасчетЗависимыхРазделовДекларации("Лист02_Прил5");

КонецПроцедуры // КнопкаУдалитьДопСтраницуЛист02_Прил5Нажатие

// КнопкаДобавитьДопСтраницуЛист02_Прил4Нажатие
//
Процедура КнопкаДобавитьДопСтраницуЛист02_Прил4Нажатие(Элемент)

	Если НЕ ФлажокОтклАвтоРасчет Тогда
		Если мСтруктураМногостраничныхРазделов.Лист02_Прил4.Количество() >= 2 Тогда
			Сообщить("В приложении 4 к листу 02 может быть не более 2-х дополнительных листов.", СтатусСообщения.Важное);
		Иначе

			СельхозТовароПроизводитель = мРаздел2_Прил4.Области.П002040000100.Значение;
			ИзменитьТаблицуПараметровАвтозаполнения(1, "Лист02_Прил4");
			// Возведем признак отключения авторасчета после вставки.
			мИсключитьЗапускРасчета = Истина;
			РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Лист02_Прил4");
			мИсключитьЗапускРасчета = Ложь;

			Если СельхозТовароПроизводитель = "V" Тогда
				мРаздел2_Прил4.Области.П002040000100.Значение = "";
				мЯвляетсяСельхозПрил4Лист02 = "";
			Иначе
				мРаздел2_Прил4.Области.П002040000100.Значение = "V";
				мЯвляетсяСельхозПрил4Лист02 = "1";
			КонецЕсли;

			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_Прил4", Ложь);
			РасчетЗависимыхРазделовДекларации("Лист02_Прил4", ?(СельхозТовароПроизводитель = "V", Ложь, Истина));

		КонецЕсли;
	Иначе

		ИзменитьТаблицуПараметровАвтозаполнения(1, "Лист02_Прил4");
		РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Лист02_Прил4");
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_Прил4", Ложь);

	КонецЕсли;

КонецПроцедуры // КнопкаДобавитьДопСтраницуЛист02_Прил4Нажатие

// КнопкаДобавитьДопСтраницуЛист02_Прил5Нажатие
//
Процедура КнопкаДобавитьДопСтраницуЛист02_Прил5Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1, "Лист02_Прил5");

	// Сохраним базу без ликвидированных организаций, чтобы после вставки листа, записать (повторить) на новый лист.
	П002050003103 = мРаздел2_Прил5.Области.П002050003103.Значение;
	
	// Возведем признак отключения авторасчета после вставки.
	мИсключитьЗапускРасчета = Истина;
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Лист02_Прил5");
	мИсключитьЗапускРасчета = Ложь;
	мРаздел2_Прил5.Области.П002050003103.Значение = П002050003103;

	Если мПоМестуНахожденияОрганизации Тогда
		УстановитьПризнакАвтозаполненияПоСтроке030Прил5КЛисту02();
	Иначе
		СнятьПризнакАвтозаполненияПоСтроке030Прил5КЛисту02();
	КонецЕсли;

	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_Прил5", Ложь);

	// Добавим в структуру снятый признак вхождения ОП
	ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(Ложь, Ложь);
	// Снимем флаг.
	ВГруппуОПВходитОрганизация = Ложь;
	// Скроем элемент, отображаем только если признак будет введен равный 4.
	ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Ложь;

	// Последний параметр всегда ложь, т.к. добавленная страница всегда чистая будет.
	РасчетЗависимыхРазделовДекларации("Лист02_Прил5", Ложь);

КонецПроцедуры // КнопкаДобавитьДопСтраницуЛист02_Прил5Нажатие

// КнопкаСледующаяСтраницаЛист02_Прил4Нажатие
//
Процедура КнопкаСледующаяСтраницаЛист02_Прил4Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, "Лист02_Прил4");

КонецПроцедуры // КнопкаСледующаяСтраницаЛист02_Прил4Нажатие

// КнопкаСледующаяСтраницаЛист02_Прил5Нажатие
//
Процедура КнопкаСледующаяСтраницаЛист02_Прил5Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(1, "Лист02_Прил5");

КонецПроцедуры // КнопкаСледующаяСтраницаЛист02_Прил5Нажатие

// КнопкаПредыдущаяСтраницаЛист02_Прил4Нажатие
//
Процедура КнопкаПредыдущаяСтраницаЛист02_Прил4Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, "Лист02_Прил4");

КонецПроцедуры // КнопкаПредыдущаяСтраницаЛист02_Прил4Нажатие

// КнопкаПредыдущаяСтраницаЛист02_Прил5Нажатие
//
Процедура КнопкаПредыдущаяСтраницаЛист02_Прил5Нажатие(Элемент)

	ПоказатьСтраницуМногостраничногоРаздела(-1, "Лист02_Прил5");

КонецПроцедуры // КнопкаПредыдущаяСтраницаЛист02_Прил5Нажатие

// КнопкаПерейтиНаСтраницуЛист02_Прил2Нажатие
//
Процедура КнопкаПерейтиНаСтраницуЛист02_Прил2Нажатие(Элемент)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист02_Прил2");

КонецПроцедуры // КнопкаПерейтиНаСтраницуЛист02_Прил2Нажатие

// КнопкаУдалитьДопСтраницуЛист02_Прил2Нажатие
//
Процедура КнопкаУдалитьДопСтраницуЛист02_Прил2Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Лист02_Прил2");
	// Возведем признак отключения авторасчета после вставки.
	мИсключитьЗапускРасчета = Истина;
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Лист02_Прил2");
	мИсключитьЗапускРасчета = Ложь;
	РасчетЗависимыхРазделовДекларации("Лист02_Прил2");

КонецПроцедуры // КнопкаУдалитьДопСтраницуЛист02_Прил2Нажатие

// КнопкаДобавитьДопСтраницуЛист02_Прил2Нажатие
//
Процедура КнопкаДобавитьДопСтраницуЛист02_Прил2Нажатие(Элемент)

	Если НЕ ФлажокОтклАвтоРасчет Тогда
		Если мСтруктураМногостраничныхРазделов.Лист02_Прил2.Количество() >= 2 Тогда
			Сообщить("В приложении 2 к листу 02 может быть не более 2-х дополнительных листов.", СтатусСообщения.Важное);
		Иначе

			СельхозТовароПроизводитель = мРаздел2_Прил2.Области.П002020000100.Значение;
			ИзменитьТаблицуПараметровАвтозаполнения(1, "Лист02_Прил2");
			// Возведем признак отключения авторасчета после вставки.
			мИсключитьЗапускРасчета = Истина;
			РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Лист02_Прил2");
			мИсключитьЗапускРасчета = Ложь;

			Если СельхозТовароПроизводитель = "V" Тогда
				мРаздел2_Прил2.Области.П002020000100.Значение = "";
				мЯвляетсяСельхозПрил2Лист02 = "";
			Иначе
				мРаздел2_Прил2.Области.П002020000100.Значение = "V";
				мЯвляетсяСельхозПрил2Лист02 = "1";
			КонецЕсли;

			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_Прил2", Ложь);
			РасчетЗависимыхРазделовДекларации("Лист02_Прил2", ?(СельхозТовароПроизводитель = "V", Ложь, Истина));

		КонецЕсли;
	Иначе

		ИзменитьТаблицуПараметровАвтозаполнения(1, "Лист02_Прил2");
		РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Лист02_Прил2");
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_Прил2", Ложь);

	КонецЕсли;

КонецПроцедуры // КнопкаДобавитьДопСтраницуЛист02_Прил2Нажатие

// КнопкаСледующаяСтраницаЛист02_Прил2Нажатие
//
Процедура КнопкаСледующаяСтраницаЛист02_Прил2Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, "Лист02_Прил2");

КонецПроцедуры // КнопкаСледующаяСтраницаЛист02_Прил2Нажатие

// КнопкаПредыдущаяСтраницаЛист02_Прил2Нажатие
//
Процедура КнопкаПредыдущаяСтраницаЛист02_Прил2Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, "Лист02_Прил2");

КонецПроцедуры // КнопкаПредыдущаяСтраницаЛист02_Прил2Нажатие

// КнопкаПерейтиНаСтраницуЛист02_Прил1Нажатие
//
Процедура КнопкаПерейтиНаСтраницуЛист02_Прил1Нажатие(Элемент)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист02_Прил1");

КонецПроцедуры // КнопкаПерейтиНаСтраницуЛист02_Прил1Нажатие

// КнопкаУдалитьДопСтраницуЛист02_Прил1Нажатие
//
Процедура КнопкаУдалитьДопСтраницуЛист02_Прил1Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Лист02_Прил1");
	// Возведем признак отключения авторасчета после вставки.
	мИсключитьЗапускРасчета = Истина;
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Лист02_Прил1");
	мИсключитьЗапускРасчета = Ложь;
	РасчетЗависимыхРазделовДекларации("Лист02_Прил1");

КонецПроцедуры // КнопкаУдалитьДопСтраницуЛист02_Прил1Нажатие

// КнопкаДобавитьДопСтраницуЛист02_Прил1Нажатие
//
Процедура КнопкаДобавитьДопСтраницуЛист02_Прил1Нажатие(Элемент)

	Если НЕ ФлажокОтклАвтоРасчет Тогда

		Если мСтруктураМногостраничныхРазделов.Лист02_Прил1.Количество() >= 2 Тогда
			Сообщить("В приложении 1 к листу 02 может быть не более 2-х дополнительных листов.", СтатусСообщения.Важное);
		Иначе

			СельхозТовароПроизводитель = мРаздел2_Прил1.Области.П002010000100.Значение;
			ИзменитьТаблицуПараметровАвтозаполнения(1, "Лист02_Прил1");
			// Возведем признак отключения авторасчета после вставки.
			мИсключитьЗапускРасчета = Истина;
			РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Лист02_Прил1");
			мИсключитьЗапускРасчета = Ложь;

			Если СельхозТовароПроизводитель = "V" Тогда
				мРаздел2_Прил1.Области.П002010000100.Значение = "";
				мЯвляетсяСельхозПрил1Лист02 = "";
			Иначе
				мРаздел2_Прил1.Области.П002010000100.Значение = "V";
				мЯвляетсяСельхозПрил1Лист02 = "1";
			КонецЕсли;

			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_Прил1", Ложь);
			РасчетЗависимыхРазделовДекларации("Лист02_Прил1", ?(СельхозТовароПроизводитель = "V", Ложь, Истина));

		КонецЕсли;

	Иначе

		ИзменитьТаблицуПараметровАвтозаполнения(1, "Лист02_Прил1");
		РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Лист02_Прил1");
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_Прил1", Ложь);

	КонецЕсли;

КонецПроцедуры // КнопкаДобавитьДопСтраницуЛист02_Прил1Нажатие

// КнопкаСледующаяСтраницаЛист02_Прил1Нажатие
//
Процедура КнопкаСледующаяСтраницаЛист02_Прил1Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, "Лист02_Прил1");

КонецПроцедуры // КнопкаСледующаяСтраницаЛист02_Прил1Нажатие

// КнопкаПредыдущаяСтраницаЛист02_Прил1Нажатие
//
Процедура КнопкаПредыдущаяСтраницаЛист02_Прил1Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, "Лист02_Прил1");

КонецПроцедуры // КнопкаПредыдущаяСтраницаЛист02_Прил1Нажатие

// ПолеТабличногоДокументаЛист02_Прил3Выбор
//
Процедура ПолеТабличногоДокументаЛист02_Прил3Выбор(Элемент, Область, СтандартнаяОбработка)

	Ячейка = Элемент.ТекущаяОбласть.Имя;

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если  Ячейка = "П002030000100" Тогда

		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;

		Если мРаздел2_Прил3.Области.П002030000100.Значение = "V" Тогда
			мРаздел2_Прил3.Области.П002030000100.Значение = "";
			мЯвляетсяСельхозПрил3Лист02 = "";
		Иначе
			мРаздел2_Прил3.Области.П002030000100.Значение = "V";
			мЯвляетсяСельхозПрил3Лист02 = "1";
		КонецЕсли;

		ИзменитьПризнакСельхозПроизводителяНаПротивоположномЛисте("Лист02_Прил3", "П002030000100", мРаздел2_Прил3.Области.П002030000100.Значение);
		РасчетЗависимыхРазделовДекларации("Лист02_Прил3");

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаЛист02_Прил3Выбор

// ПолеТабличногоДокументаЛист02_Прил3ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаЛист02_Прил3ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист02");

КонецПроцедуры // ПолеТабличногоДокументаЛист02_Прил3ПриАктивизацииОбласти

// КнопкаПерейтиНаСтраницуЛист02_Прил3Нажатие
//
Процедура КнопкаПерейтиНаСтраницуЛист02_Прил3Нажатие(Элемент)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист02_Прил3");

КонецПроцедуры // КнопкаПерейтиНаСтраницуЛист02_Прил3Нажатие

// КнопкаУдалитьДопСтраницуЛист02_Прил3Нажатие
//
Процедура КнопкаУдалитьДопСтраницуЛист02_Прил3Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Лист02_Прил3");
	// Возведем признак отключения авторасчета после вставки.
	мИсключитьЗапускРасчета = Истина;
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Лист02_Прил3");
	мИсключитьЗапускРасчета = Ложь;
	РасчетЗависимыхРазделовДекларации("Лист02_Прил3");

КонецПроцедуры // КнопкаУдалитьДопСтраницуЛист02_Прил3Нажатие

// КнопкаДобавитьДопСтраницуЛист02_Прил3Нажатие
//
Процедура КнопкаДобавитьДопСтраницуЛист02_Прил3Нажатие(Элемент)

	Если НЕ ФлажокОтклАвтоРасчет Тогда
		Если мСтруктураМногостраничныхРазделов.Лист02_Прил3.Количество() >= 2 Тогда
			Сообщить("В приложении 3 к листу 02 может быть не более 2-х дополнительных листов.", СтатусСообщения.Важное);
		Иначе

			СельхозТовароПроизводитель = мРаздел2_Прил3.Области.П002030000100.Значение;
			ИзменитьТаблицуПараметровАвтозаполнения(1, "Лист02_Прил3");
			// Возведем признак отключения авторасчета после вставки.
			мИсключитьЗапускРасчета = Истина;
			РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Лист02_Прил3");
			мИсключитьЗапускРасчета = Ложь;

			Если СельхозТовароПроизводитель = "V" Тогда
				мРаздел2_Прил3.Области.П002030000100.Значение = "";
				мЯвляетсяСельхозПрил3Лист02 = "";
			Иначе
				мРаздел2_Прил3.Области.П002030000100.Значение = "V";
				мЯвляетсяСельхозПрил3Лист02 = "1";
			КонецЕсли;

			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_Прил3", Ложь);
			РасчетЗависимыхРазделовДекларации("Лист02_Прил3", ?(СельхозТовароПроизводитель = "V", Ложь, Истина));

		КонецЕсли;
	Иначе

		ИзменитьТаблицуПараметровАвтозаполнения(1, "Лист02_Прил3");
		РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Лист02_Прил3");
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_Прил3", Ложь);

	КонецЕсли;

КонецПроцедуры // КнопкаДобавитьДопСтраницуЛист02_Прил3Нажатие

// КнопкаСледующаяСтраницаЛист02_Прил3Нажатие
//
Процедура КнопкаСледующаяСтраницаЛист02_Прил3Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, "Лист02_Прил3");

КонецПроцедуры // КнопкаСледующаяСтраницаЛист02_Прил3Нажатие

// КнопкаПредыдущаяСтраницаЛист02_Прил3Нажатие
//
Процедура КнопкаПредыдущаяСтраницаЛист02_Прил3Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, "Лист02_Прил3");

КонецПроцедуры // КнопкаПредыдущаяСтраницаЛист02_Прил3Нажатие

// ПолеВыбораВариантЗаполненияЛист02_Прил3ПриИзменении
//
Процедура ПолеВыбораВариантЗаполненияЛист02_Прил3ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист02_Прил3ПриИзменении

// ПолеВводаЗначениеКорректировкиЛист02_Прил3ПриИзменении
//
Процедура ПолеВводаЗначениеКорректировкиЛист02_Прил3ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист02_Прил3ПриИзменении

// ПолеВводаКомментарийЛист02_Прил3ПриИзменении
//
Процедура ПолеВводаКомментарийЛист02_Прил3ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийЛист02_Прил3ПриИзменении

// КнопкаПерейтиНаСтраницуЛист02Нажатие
//
Процедура КнопкаПерейтиНаСтраницуЛист02Нажатие(Элемент)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Лист02");

КонецПроцедуры // КнопкаПерейтиНаСтраницуЛист02Нажатие

// КнопкаУдалитьДопСтраницуЛист02Нажатие
//
Процедура КнопкаУдалитьДопСтраницуЛист02Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Лист02");

	// Возведем признак отключения авторасчета после вставки.
	мИсключитьЗапускРасчета = Истина;
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Лист02");
	мИсключитьЗапускРасчета = Ложь;

	РасчетЗависимыхРазделовДекларации("Лист02");

КонецПроцедуры // КнопкаУдалитьДопСтраницуЛист02Нажатие

// КнопкаДобавитьДопСтраницуЛист02Нажатие
//
Процедура КнопкаДобавитьДопСтраницуЛист02Нажатие(Элемент)

	Если НЕ ФлажокОтклАвтоРасчет Тогда

		Если мСтруктураМногостраничныхРазделов.Лист02.Количество() >= 2 Тогда
			Сообщить("На листе 02 может быть не более 2-х дополнительных листов.", СтатусСообщения.Важное);
		Иначе
			СельхозТовароПроизводитель = мРаздел2.Области.П002000000100.Значение;
			ИзменитьТаблицуПараметровАвтозаполнения(1, "Лист02");

			// Возведем признак отключения авторасчета после вставки.
			мИсключитьЗапускРасчета = Истина;
			РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Лист02");
			мИсключитьЗапускРасчета = Ложь;

			// Заполним ставки на новом листе.
			ПолучитьСтавкиНалога();
			Если СельхозТовароПроизводитель = "V" Тогда
				мРаздел2.Области.П002000000100.Значение = "";
				мЯвляетсяСельхоз = "";
			Иначе
				мРаздел2.Области.П002000000100.Значение = "V";
				мЯвляетсяСельхоз = "1";
			КонецЕсли;

			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02", Ложь);
			РасчетЗависимыхРазделовДекларации("Лист02", ?(СельхозТовароПроизводитель = "V", Ложь, Истина));

		КонецЕсли;

	Иначе

		ИзменитьТаблицуПараметровАвтозаполнения(1, "Лист02");
		РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Лист02");
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02", Ложь);

	КонецЕсли;

КонецПроцедуры // КнопкаДобавитьДопСтраницуЛист02Нажатие

// КнопкаСледующаяСтраницаЛист02Нажатие
//
Процедура КнопкаСледующаяСтраницаЛист02Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, "Лист02");

КонецПроцедуры // КнопкаСледующаяСтраницаЛист02Нажатие

// КнопкаПредыдущаяСтраницаЛист02Нажатие
//
Процедура КнопкаПредыдущаяСтраницаЛист02Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, "Лист02");

КонецПроцедуры // КнопкаПредыдущаяСтраницаЛист02Нажатие

// КнопкаПредыдущаяСтраницаРаздел1_3Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел1_3Нажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(-1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел1_3Нажатие

// КнопкаСледующаяСтраницаРаздел1_3Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел1_3Нажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(1, ИмяТекущейСтраницыПанели);

КонецПроцедуры // КнопкаСледующаяСтраницаРаздел1_3Нажатие

// ПолеТабличногоДокументаЛист02_Прил5ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаЛист02_Прил5ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист02_Прил5");

КонецПроцедуры // ПолеТабличногоДокументаЛист02_Прил5ПриАктивизацииОбласти

// ПолеТабличногоДокументаЛист03ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаЛист03ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист03");

КонецПроцедуры // ПолеТабличногоДокументаЛист03ПриАктивизацииОбласти

// КнопкаДобавитьДопСтраницуРаздел1_3Нажатие
// 
Процедура КнопкаДобавитьДопСтраницуРаздел1_3Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(1);
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел1_3");

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел1_3Нажатие

// КнопкаУдалитьДопСтраницуРаздел1_3Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел1_3Нажатие(Элемент)

	ИзменитьТаблицуПараметровАвтозаполнения(-1);
	УдалитьДополнительнуюСтраницу();

КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел1_3Нажатие

// КнопкаПерейтиНаСтраницуРаздел1_3Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел1_3Нажатие(Элемент)

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел1_3");

КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел1_3Нажатие

// Инициализация
//
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	мБезОткрытияФормы = БезОткрытияФормы;

	///////////////////////////////////////////////////////////////////////////////
	//	ПЕРЕНЕСЕНО ИЗ ПРОЦЕДУРЫ ПЕРЕОТКРЫТИЕМ
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		РегламентированнаяОтчетность.УдалитьКнопкуЗаполненияПоДаннымИБ(ЭтаФорма);
		РегламентированнаяОтчетность.УдалитьКнопкуРасшифровки(ЭтаФорма, "Расшифровка");
	КонецЕсли;
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	
	// ФормируемСтруктуруСтраницОтчета
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();
	
	///////////////////////////////////////////////////////////////////////////////
	//	ПЕРЕНЕСЕНО ИЗ ПРОЦЕДУРЫ ПРИОТКРЫТИИ

	мВПрограммеИзмененаОрганизация = Ложь;
	мДокументВосстановлен = Ложь;

	мТитульный          = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1_1          = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_1;
	мРаздел1_2          = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_2;
	мРаздел1_3          = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_3;
	мРаздел2            = ЭлементыФормы.ПолеТабличногоДокументаЛист02;
	мРаздел2_Прил1      = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил1;
	мРаздел2_Прил2      = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил2;
	мРаздел2_Прил3      = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил3;
	мРаздел2_Прил4      = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил4;
	мРаздел2_Прил5      = ЭлементыФормы.ПолеТабличногоДокументаЛист02_Прил5;
	мРаздел3            = ЭлементыФормы.ПолеТабличногоДокументаЛист03;
	мРаздел3Продолжение = ЭлементыФормы.ПолеТабличногоДокументаЛист03Продолжение;
	мРаздел3Реестр      = ЭлементыФормы.ПолеТабличногоДокументаЛист03Реестр;
	мРаздел4            = ЭлементыФормы.ПолеТабличногоДокументаЛист04;
	мРаздел5            = ЭлементыФормы.ПолеТабличногоДокументаЛист05;
	мРаздел6            = ЭлементыФормы.ПолеТабличногоДокументаЛист06;
	мРаздел7            = ЭлементыФормы.ПолеТабличногоДокументаЛист07;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;
	мРежимПечати = Ложь;

	// ФлОтклВыборЗначений
	мАвтоВыборКодов = Ложь;
	мИсключитьЗапускРасчета = Ложь;

	Тип18_15 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 15));
	мРаздел3.Области.П002060008003.ТипЗначения = Тип18_15;

	Если НЕ БезОткрытияФормы Тогда

		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

		// Инициализируем все переменные хранящиеся в квадратных значениях
		РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

		// Получаем список налоговых, кодов КБК и КБК 2005	
		ЗагрузитьПоказателиИзМакета("КодыКБК2005");
		ЗагрузитьПоказателиИзМакета("КодыКБК2006");
		ЗагрузитьПоказателиИзМакета("ПрибыльКодыВидовПоступлений");
		ЗагрузитьПоказателиИзМакета("КодыКБК2005Раздел1_3");
		ЗагрузитьПоказателиИзМакета("КодыКБК2007");

		РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);

		// Маски ввода
		мРаздел1_3.Области.П001030001000.ЭлементУправления.Маска = "9";

		мРаздел5.Области.П002100000200.ЭлементУправления.Маска = "9";
		мРаздел3Продолжение.Области.П002070000600.ЭлементУправления.Маска = "9";
		мРаздел3.Области.П002060000200.ЭлементУправления.Маска = "9";
		мРаздел3.Области.П002060000300.ЭлементУправления.Маска = "9";
		мРаздел2_Прил5.Области.П002050000200.ЭлементУправления.Маска = "9";
		мРаздел3.Области.МесяцЛист03_1.ЭлементУправления.Маска = "9";
		мРаздел3.Области.МесяцЛист03_2.ЭлементУправления.Маска = "9";
		мРаздел4.Области.П002090000200.ЭлементУправления.Маска = "9";

		мРаздел2_Прил5.Области.П002050002003.ЭлементУправления.Маска = "999999999";

		мРаздел2_Прил4.Области.П002040004001.ЭлементУправления.Маска = "9999";
		мРаздел2_Прил4.Области.П002040005001.ЭлементУправления.Маска = "9999";
		мРаздел2_Прил4.Области.П002040006001.ЭлементУправления.Маска = "9999";
		мРаздел2_Прил4.Области.П002040007001.ЭлементУправления.Маска = "9999";
		мРаздел2_Прил4.Области.П002040008001.ЭлементУправления.Маска = "9999";
		мРаздел2_Прил4.Области.П002040009001.ЭлементУправления.Маска = "9999";
		мРаздел2_Прил4.Области.П002040010001.ЭлементУправления.Маска = "9999";
		мРаздел2_Прил4.Области.П002040011001.ЭлементУправления.Маска = "9999";
		мРаздел2_Прил4.Области.П002040012001.ЭлементУправления.Маска = "9999";
		мРаздел2_Прил4.Области.П002040013001.ЭлементУправления.Маска = "9999";

		// Установим маски на ввод только чисел.
		РегламентированнаяОтчетность.СтандратныеОперацииПоУстановкамМасок(ЭтаФорма);

	КонецЕсли;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован

			ВосстановитьСохраненныеДанные();

		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			Если НЕ мБезОткрытияФормы Тогда
				// Для нового док-та установим возведенный флаг проверки соотношений.
				мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;

			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			мТитульный.Области.ВидДок.Значение = 1;

			// По умолчанию - выбраны все листы
			// при восстановлении - сохраненные ранее
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

			// В связи с изменениями ставки налога на прибыль по доходам в виде дивидендов с 01.01.2005,
			// по строке 090 Листа 03 Декларации указывается сумма налога в виде дивидендов, исчисленная
			// по ставке 6 процентов по выплатам, осуществленным до 01.01.2005, и сумма налога в виде дивидендов
			// по ставке 9 процентов по выплатам, осуществленным начиная с 1 января 2005 года.
			//мРаздел3_А.Области.П002080008003.Значение = 9;
			Если ЭтоНалоговыйПериод(Организация, ДатаПодписи, мДатаКонцаПериодаОтчета) Тогда
				мРаздел2_Прил5.Области.П002050012001.Значение = "";
			Иначе
				ДатаКонцаСледующегоКвартала = КонецКвартала(мДатаКонцаПериодаОтчета) + 1;
				НомерКварталаСтр = Формат(ДатаКонцаСледующегоКвартала, "ДФ=к");
				мРаздел2_Прил5.Области.П002050012001.Значение = РегламентированнаяОтчетность.ДополнитьСтроку(НомерКварталаСтр, 2, "0");
			КонецЕсли;

			//Если мПериодичность = Перечисления.Периодичность.Месяц Тогда
			//	ПроставитьДатыВРазделе1_2();
			//КонецЕсли;

			// Заполняем дату аванса на листе 02.

			// Блок, заполняющий строку 360 для декларации 2007 закоментирован.

			//Если КонецДня(мДатаКонцаПериодаОтчета) <> КонецДня(КонецГода (мДатаКонцаПериодаОтчета)) Тогда
			//	П002000036001 = Дата(Год(мДатаКонцаПериодаОтчета), Месяц(мДатаКонцаПериодаОтчета) + 1, 28);
			//Иначе
			//	П002000036001 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
			//КонецЕсли;

			//мРаздел2.Области.П002000036001.Значение = П002000036001;

			// Определяем периодичность
			Если мПериодичность = Перечисления.Периодичность.Квартал Тогда
				мРаздел2.Области.П002000035003.Значение = 3;
			Иначе
				мРаздел2.Области.П002000035003.Значение = 11;
			КонецЕсли;

			ДатаКонцаСледующегоКвартала = КонецКвартала(мДатаКонцаПериодаОтчета) + 1;
			НомерКварталаСтр = Формат(ДатаКонцаСледующегоКвартала, "ДФ=к");
			ГодАвансов       = Формат(КонецКвартала(мДатаКонцаПериодаОтчета) + 1, "ДФ=гг");

			мРаздел2.Области.П002000029001.Значение = НомерКварталаСтр;
			мРаздел2.Области.П002000038500.ЗНачение = Сред(ГодАвансов, 2, 1);

			ПроставитьСрокУплПодраздел1_1();
			РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);

			// Ставки.
			ПолучитьСтавкиНалога();
		КонецЕсли;

	Иначе

		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		Если мСкопированаФорма <> Неопределено Тогда
			ОперацииВыполняемыеПриКопированииОтчета();
		КонецЕсли;

	КонецЕсли;

	ПоказатьПериод();

	// Определим переменную мПоследнийПериод

	Если (мПериодичность = Перечисления.Периодичность.Квартал И Месяц(мДатаКонцаПериодаОтчета) = 9)
	   Или (мПериодичность = Перечисления.Периодичность.Месяц И Месяц(мДатаКонцаПериодаОтчета) = 11) Тогда
		мПоследнийПериод = Истина;
	Иначе
		мПоследнийПериод = Ложь;
	КонецЕсли;

	Если мТитульный.Области.ТипОрг2.Значение = "V" Тогда
		мПоМестуНахожденияОрганизации = Ложь;
	Иначе
		мПоМестуНахожденияОрганизации = Истина;
	КонецЕсли;

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		Если НЕ мБезОткрытияФормы Тогда
			УправлениеЛистами();
		КонецЕсли;

		ПолучитьИННКПП();

	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если НазваниеСтраницы = "Титульный" Тогда
			Продолжить;
		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда
			Продолжить;
		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

	Если НЕ мБезОткрытияФормы Тогда
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма);
	КонецЕсли;

	// Если документ новый и открыт стандартным способом.
	Если (НЕ мДокументВосстановлен) И (НЕ мБезОткрытияФормы) Тогда
		Если НЕ мПоМестуНахожденияОрганизации Тогда
			// Очистим ставки в листе 02. Лист 02 в этом случае не заполняется.
			мРаздел2.Области.П002000015003.Значение = 0;
			мРаздел2.Области.П002000016003.Значение = 0;
			мРаздел2.Области.П002000014003.Значение = 0;
		КонецЕсли;
	КонецЕсли;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // Инициализация

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры // ПередЗакрытием()

Процедура СохранитьДеревоСтраницОтчета()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
    СохранитьДеревоСтраницОтчета();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВпрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВпрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;
	Перем ТаблицаМногостраничногоДокумента;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе", 0) > 0 Тогда
		ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИдГруппы <> Неопределено Тогда
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
			ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
		КонецЕсли;
		// управляем доступностью кнопок "Добавить" и "Удалить"
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма, ТекущаяОбласть, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Лист02_Прил5" Тогда
		Если мРаздел2_Прил5.Области.П002050000200.Значение = "4" Тогда
			ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Истина;

			// прочитаем признак
			ДанныеАктивнойСтраницы = мСтруктураМногостраничныхРазделов.Лист02_Прил5.Найти(Истина, "АктивнаяСтраница").Данные;

			Если ТипЗнч(ДанныеАктивнойСтраницы) <> Тип("Структура") Тогда
				РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_Прил5", Ложь);
			КонецЕсли;

			Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
				ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
			Иначе
				ВГруппуОПВходитОрганизация = Ложь;
			КонецЕсли;

		Иначе
			ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Ложь;
			ВГруппуОПВходитОрганизация = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе", Ложь) Тогда

		//Если мСтруктураПерепоказаСтраниц.Свойство(ИмяТекущейСтраницыПанели) Тогда
		//	ПеречитатьИзСтруктуры = мСтруктураПерепоказаСтраниц[ИмяТекущейСтраницыПанели];
		//Иначе
		//	ПеречитатьИзСтруктуры = Ложь;
		//КонецЕсли;

		//Если ПеречитатьИзСтруктуры Тогда

		//	// Перепокажем страницу из структуры, не сохраняя текущего набора данных в активном таблично поле.

		//	мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаМногостраничногоДокумента);
		//	АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
		//	ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
		//	ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ИмяТекущейСтраницыПанели);

		//	// Уберем признак перепоказа.
		//	мСтруктураПерепоказаСтраниц.Вставить(ИмяТекущейСтраницыПанели, Ложь);

		//КонецЕсли;

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым", Ложь) Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист02ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист02");

КонецПроцедуры // ПолеТабличногоДокументаЛист02ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист02_Прил1ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист02_Прил1");

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист02_Прил2ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист02_Прил2");

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист02_Прил4ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист02_Прил4");

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист04ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист04");

КонецПроцедуры // ПолеТабличногоДокументаЛист04ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист05ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист05");

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист06ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист06");

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице "Раздел 2.1"
// основной панели формы. Определяет текущую область табличного документа и вызывает
// процедуру управления доступностью полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаЛист07ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Лист07");

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Лист 02" основной панели.
//
Процедура ПолеВыбораВариантЗаполненияЛист02ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист02ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Лист 02" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист02ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист02ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Лист 02" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист02ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийЛист02ПриИзменении()

Процедура ПолеВыбораВариантЗаполненияЛист02_Прил1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист02_Прил1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Прил.1 к Листу 02" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист02_Прил1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист02_Прил1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Прил.1 к Листу 02" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист02_Прил1ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийЛист02_Прил1ПриИзменении()

// Процедура - обработчик события "ПриИзменении"
// ПолеВыбораВариантЗаполненияЛист02_Прил2ПриИзменении
//
Процедура ПолеВыбораВариантЗаполненияЛист02_Прил2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист02_Прил2ПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Прил.2 к Листу 02" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист02_Прил2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист02_Прил2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Прил.2 к Листу 02" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист02_Прил2ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийЛист02_Прил2ПриИзменении()

// Процедура обработчик "Выбор"
//
Процедура ПолеВыбораВариантЗаполненияЛист02_Прил4ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист02_Прил4ПриИзменении

// Процедура обработчик "Выбор"
//
Процедура ПолеВыбораВариантЗаполненияЛист02_Прил5ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	Если мРаздел2_Прил5.Области.П002050000200.Значение = "3" И (Элемент.Значение = 2 Или Элемент.Значение = 3) Тогда
		Сообщить("Для ликвидированного обособленного подразделения, не рекомендуется устанавливать авторасчет к данному показателю.", СтатусСообщения.Важное);
	КонецЕсли;

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист02_Прил5ПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице Прил.4 к Листу 02" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист02_Прил4ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист02_Прил4ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице Прил.4 к Листу 02" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист02_Прил5ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист02_Прил5ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Прил.4 к Листу 02" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист02_Прил4ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийЛист02_Прил4ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Прил.4 к Листу 02" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист02_Прил5ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийЛист02_Прил5ПриИзменении()

// Процедура ПолеВыбораВариантЗаполненияЛист04ПриИзменении
//
Процедура ПолеВыбораВариантЗаполненияЛист04ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист04ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Лист 04 (Раздел А)" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист04ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист04ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Лист 04 (Раздел А)" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист04ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийЛист04ПриИзменении()

Процедура ПолеВыбораВариантЗаполненияЛист05ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист05ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Лист 05" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист05ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист05ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Лист 05" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист05ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийЛист05ПриИзменении()

Процедура ПолеВыбораВариантЗаполненияЛист06ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист06ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Лист 06" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист06ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист06ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Лист 06" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректировкой].
//
Процедура ПолеВводаКомментарийЛист06ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийЛист06ПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	РегламентированнаяОтчетность.роУстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Загружает данные по КБК, льготам и другим выборкам из Макетов
//
Процедура ЗагрузитьПоказателиИзМакета (РазделВМакете)

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("Списки2007Кв1");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда	
	
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе

				Если РазделВМакете = "КодыКБК2005" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2005.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2006" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2006.Добавить();
				ИначеЕсли РазделВМакете = "ПрибыльКодыВидовПоступлений" Тогда
					НовСтрока = мПрибыльКодыВидовПоступлений.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2005Раздел1_3" Тогда
					НовСтрока = мКодыКБК2005Раздел1_3.Добавить();
				ИначеЕсли РазделВМакете = "КодыКБК2007" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2007.Добавить();
				КонецЕсли;

				НовСтрока.Код= КодПоказателя;
				НовСтрока.Название = Название;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ЗагрузитьПоказателиИзМакета

////////////////////////////////////////////////////////////////////////////////
//   ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки()

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//

		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() 

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_1";
	СтрокаУровня1.Представление            = "Подраздел 1.1 Раздела 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_2";
	СтрокаУровня1.Представление            = "Подраздел 1.2 Раздела 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_3";
	СтрокаУровня1.Представление            = "Подраздел 1.3 Раздела 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02";
	СтрокаУровня1.Представление            = "Лист 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил1";
	СтрокаУровня1.Представление            = "Приложение 1 к Листу 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02_Прил1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил2";
	СтрокаУровня1.Представление            = "Приложение 2 к Листу 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02_Прил2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил3";
	СтрокаУровня1.Представление            = "Приложение 3 к Листу 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02_Прил3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил4";
	СтрокаУровня1.Представление            = "Приложение 4 к Листу 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02_Прил4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист02_Прил5";
	СтрокаУровня1.Представление            = "Приложение 5 к Листу 02";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист02_Прил5";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист03";
	СтрокаУровня1.Представление            = "Лист 03 (Раздел А)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист03";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист03Продолжение";
	СтрокаУровня1.Представление            = "Лист 03 (Раздел Б)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист03Продолжение";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист03Реестр";
	СтрокаУровня1.Представление            = "Лист 03 (Реестр)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист03Реестр";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист04";
	СтрокаУровня1.Представление            = "Лист 04";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист04";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист05";
	СтрокаУровня1.Представление            = "Лист 05";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист05";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист06";
	СтрокаУровня1.Представление            = "Лист 06";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист06";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Лист07";
	СтрокаУровня1.Представление            = "Лист 07";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЛист07";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// Процедура ПолеТабличногоДокументаРаздел1_1Выбор
//
Процедура ПолеТабличногоДокументаРаздел1_1Выбор(Элемент, Область, СтандартнаяОбработка)

	Ячейка = Элемент.ТекущаяОбласть;

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("КБК1", мКБКвФБРаздел1_1);
	СтруктураПроверки.Вставить("КБК2", мКБКвБСРаздел1_1);
	СтруктураПроверки.Вставить("КБК3", мКБКвМБРаздел1_1);

	СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_1);
	СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
	СтруктураПроверки.Вставить("КПП", мКППЮЛ);

	// Строка 010.
	Если Найти(Ячейка.Имя,"КодОКАТО_1_")>0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мКодОкатоРаздел1_1;
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1_1", "КодОКАТО_1_", ПервоначальноеЗначение, 11, 0, Ложь, "Введите код ОКАТО", "", Неопределено, Неопределено,СтандартнаяОбработка, 11);
		Если Результат.ЗначениеВведено Тогда
			мКодОкатоРаздел1_1 = Результат.Значение;
		КонецЕсли;

	ИначеЕсли (Найти(Ячейка.Имя,"КБКвФБ_") > 0)
	Или (Найти(Ячейка.Имя,"КБКвБС_") > 0)
	Или (Найти(Ячейка.Имя,"КБКвМБ_") > 0) Тогда

		СтандартнаяОбработка = Ложь;

		Если Найти(Ячейка.Имя,"КБКвФБ_") > 0 Тогда
			ТекКБК = мКБКвФБРаздел1_1;
			КодПоСтруктуре = "КБКвФБРаздел1_1";
		ИначеЕсли Найти(Ячейка.Имя,"КБКвБС_") > 0 Тогда
			ТекКБК = мКБКвБСРаздел1_1;
			КодПоСтруктуре = "КБКвБСРаздел1_1";
		ИначеЕсли Найти(Ячейка.Имя,"КБКвМБ_") > 0 Тогда
			ТекКБК = мКБКвМБРаздел1_1;
			КодПоСтруктуре = "КБКвМБРаздел1_1";
		КонецЕсли;

		Если Год(ДатаПодписи) <= 2005 Тогда
			ТЗДляВыбораКБК = мКодыБюджетнойКлассификации2005;
		ИначеЕсли Год(ДатаПодписи) = 2006 Тогда
			ТЗДляВыбораКБК = мКодыБюджетнойКлассификации2006;
		ИначеЕсли Год(ДатаПодписи) >= 2007 Тогда
			ТЗДляВыбораКБК = мКодыБюджетнойКлассификации2007;
		КонецЕсли;

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1_1", РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Ячейка.Имя), ТекКБК, 20, 0, Ложь, "Введите КБК (20 знаков)", "Выбор КБК", ТЗДляВыбораКБК, Неопределено,СтандартнаяОбработка, 20);
		Если НЕ Результат.ЗначениеВведено Тогда
			Возврат;
		КонецЕсли;

		ИтРезультат = Результат.Значение;

		Если ОбновитьПеременныеМодуля(КодПоСтруктуре, ИтРезультат) Тогда

			СтруктураПроверки = Новый Структура;
			СтруктураПроверки.Вставить("КБК", ИтРезультат);
			СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_1);
			СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
			СтруктураПроверки.Вставить("КПП", мКППЮЛ);

			Если ВозможнаОшибкаВвода(мСуммаДоплФедРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 040 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаУменФедРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 050 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаПерехФедРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 060 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаДоплСубРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 080 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаУменСубРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 090 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаПерехСубРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 100 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаПерехМестРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 140 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		КонецЕсли;

	// Строка 020. Срок уплаты.
	ИначеЕсли Найти(Ячейка.Имя,"СрокУплаты_")>0 Тогда
		СтандартнаяОбработка = Ложь;
		НачЗначение = мСрокУплатыРаздел1_1;

		Если ВвестиДату (НачЗначение,"Выберите дату",ЧастиДаты.Дата) Тогда

			мСрокУплатыРаздел1_1 = НачЗначение;
			стрВыбДата = Формат(НачЗначение, "ДФ=""ддММгггг""");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_1","СрокУплаты_",8, стрВыбДата);
			Модифицированность = Истина;

		КонецЕсли;

	// Строка 040.
	ИначеЕсли (Найти(Ячейка.Имя, "СуммаДоплФед") > 0) И (ФлажокОтклАвтоРасчет) Тогда
		СтандартнаяОбработка = Ложь;

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1_1", "СуммаДоплФед_", мСуммаДоплФедРаздел1_1, 17, 2, Истина, "Сумма налога к доплате", "", Неопределено, Неопределено,СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСуммаДоплФедРаздел1_1 = Результат.Значение;
			Если ВозможнаОшибкаВвода(мСуммаДоплФедРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 040 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;

	// Строка 050.
	ИначеЕсли (Найти(Ячейка.Имя, "СуммаУменФед") > 0) И (ФлажокОтклАвтоРасчет) Тогда
		СтандартнаяОбработка = Ложь;

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1_1", "СуммаУменФед_", мСуммаУменФедРаздел1_1, 17, 2, Истина, "Сумма налога к уменьшению", "", Неопределено, Неопределено,СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСуммаУменФедРаздел1_1 = Результат.Значение;
			Если ВозможнаОшибкаВвода(мСуммаУменФедРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 050 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;

	// Строка 051.
	ИначеЕсли (Найти(Ячейка.Имя, "СуммаПерехФед") > 0) И (ФлажокОтклАвтоРасчет) Тогда
		СтандартнаяОбработка = Ложь;

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1_1", "СуммаПерехФед_", мСуммаПерехФедРаздел1_1, 17, 2, Истина, "Сумма налога с НБ переходного периода", "", Неопределено, Неопределено,СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСуммаПерехФедРаздел1_1 = Результат.Значение;
			Если ВозможнаОшибкаВвода(мСуммаПерехФедРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 051 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;

	// Строка 070.
	ИначеЕсли (Найти(Ячейка.Имя, "СуммаДоплСуб") > 0) И (ФлажокОтклАвтоРасчет) Тогда
		СтандартнаяОбработка = Ложь;

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1_1", "СуммаДоплСуб_", мСуммаДоплСубРаздел1_1, 17, 2, Истина, "Сумма налога к доплате", "", Неопределено, Неопределено,СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСуммаДоплСубРаздел1_1 = Результат.Значение;
			Если ВозможнаОшибкаВвода(мСуммаДоплСубРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 070 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;

	// Строка 080.
	ИначеЕсли (Найти(Ячейка.Имя, "СуммаУменСуб") > 0) И (ФлажокОтклАвтоРасчет) Тогда
		СтандартнаяОбработка = Ложь;

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1_1", "СуммаУменСуб", мСуммаУменСубРаздел1_1, 17, 2, Истина, "Сумма налога к уменьшению", "", Неопределено, Неопределено,СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСуммаУменСубРаздел1_1 = Результат.Значение;
			Если ВозможнаОшибкаВвода(мСуммаУменСубРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 080 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;

	// Строка 081.
	ИначеЕсли (Найти(Ячейка.Имя, "СуммаПерехСуб") > 0) И (ФлажокОтклАвтоРасчет) Тогда
		СтандартнаяОбработка = Ложь;

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1_1", "СуммаПерехСуб", мСуммаПерехСубРаздел1_1, 17, 2, Истина, "Сумма налога с НБ переходного периода", "", Неопределено, Неопределено,СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСуммаПерехСубРаздел1_1 = Результат.Значение;
			Если ВозможнаОшибкаВвода(мСуммаПерехСубРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 081 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;

	// Строка 091.
	ИначеЕсли (Найти(Ячейка.Имя, "СуммаПерехМест") > 0) И (ФлажокОтклАвтоРасчет) Тогда
		СтандартнаяОбработка = Ложь;

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1_1", "СуммаПерехМест", мСуммаПерехМестРаздел1_1, 17, 2, Истина, "Сумма налога с НБ переходного периода", "", Неопределено, Неопределено,СтандартнаяОбработка, 15);
		Если Результат.ЗначениеВведено Тогда
			мСуммаПерехМестРаздел1_1 = Результат.Значение;
			Если ВозможнаОшибкаВвода(мСуммаПерехМестРаздел1_1, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 091 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура ПолеТабличногоДокументаРаздел1_3Выбор
//
Процедура ПолеТабличногоДокументаРаздел1_3Выбор(Элемент, Область, СтандартнаяОбработка)

	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("КБК", мКБКРаздел1_3);

	СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_3);
	СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
	СтруктураПроверки.Вставить("КПП", мКППЮЛ);

	Ячейка = Элемент.ТекущаяОбласть.Имя;

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если (Ячейка = "П001030001000") И (НЕ мАвтоВыборКодов) Тогда

		СтандартнаяОбработка = Ложь;
		Список = Новый СписокЗначений;
		Список.Добавить("1","1 (налог с доходов от долевого участия в др. орг., созданных на территории РФ)");
		Список.Добавить("2","2 (налог с доходов в виде процентов по гос. и муниципальным ценным бумагам)");
		Список.Добавить("3","3 (организации, самостоятельно уплачивающие налог с доходов в виде процентов)");
		Список.Добавить("4","4 (налог с доходов от долевого участия в иностранных организациях)");
		Список.Добавить("-1","Пустое значение");

		НайденнаяСтрока = Список.НайтиПоЗначению(Область.Значение);

		Если НайденнаяСтрока = Неопределено Тогда
			СписокЭлемент = ВыбратьИзСписка(Список);
		Иначе
			СписокЭлемент = ВыбратьИзСписка(Список,, НайденнаяСтрока);
		КонецЕсли;

		Если СписокЭлемент <> Неопределено  Тогда

			Если (Область.Значение = СписокЭлемент.Значение) Или (СписокЭлемент.Значение = "-1") Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = СписокЭлемент.Значение;
			КонецЕсли;

			Модифицированность = Истина;

		КонецЕсли;

	ИначеЕсли Найти(Ячейка,"КодОКАТО_1_") > 0 Тогда

		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мКодОкатоРаздел1_3;
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1_3", "КодОКАТО_1_", ПервоначальноеЗначение, 11, 0, Ложь, "Введите код ОКАТО", "", Неопределено, Неопределено,СтандартнаяОбработка, 11);
		Если Результат.ЗначениеВведено Тогда
			мКодОкатоРаздел1_3 = Результат.Значение;
		КонецЕсли;

	ИначеЕсли Найти(Ячейка, "КБК") > 0 Тогда

		СтандартнаяОбработка = Ложь;

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1_3", РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Ячейка), мКБКРаздел1_3, 20, 0, Ложь, "Введите КБК (20 знаков)", "Выбор КБК", мКодыКБК2005Раздел1_3, Неопределено,СтандартнаяОбработка, 20);
		Если НЕ Результат.ЗначениеВведено Тогда
			Возврат;
		КонецЕсли;

		Значение = Результат.Значение;
		мКБКРаздел1_3 = Значение;

		СтруктураПроверки = Новый Структура;
		СтруктураПроверки.Вставить("КБК", мКБКРаздел1_3);
		СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_3);
		СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
		СтруктураПроверки.Вставить("КПП", мКППЮЛ);

		Если ВозможнаОшибкаВвода(мСуммаНалога1Раздел1_3, СтруктураПроверки) Тогда
			Сообщить("Внимание! Возможно, вместо суммы налога по строке 040 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
		КонецЕсли;

		Если ВозможнаОшибкаВвода(мСуммаНалога2Раздел1_3, СтруктураПроверки) Тогда
			Сообщить("Внимание! Возможно, вместо суммы налога по строке 060 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
		КонецЕсли;

		Если ВозможнаОшибкаВвода(мСуммаНалога3Раздел1_3, СтруктураПроверки) Тогда
			Сообщить("Внимание! Возможно, вместо суммы налога по строке 080 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
		КонецЕсли;

		Если ВозможнаОшибкаВвода(мСуммаНалога4Раздел1_3, СтруктураПроверки) Тогда
			Сообщить("Внимание! Возможно, вместо суммы налога по строке 100 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
		КонецЕсли;

		Если ВозможнаОшибкаВвода(мСуммаНалога5Раздел1_3, СтруктураПроверки) Тогда
			Сообщить("Внимание! Возможно, вместо суммы налога по строке 120 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
		КонецЕсли;

	ИначеЕсли (Найти(Ячейка, "СуммаНалога") > 0) Тогда
		СтандартнаяОбработка = Ложь;
		КодПоказателяПоСтруктуре = Сред(Ячейка, 1, 12) + "Раздел1_3";
		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре);

		Если ВвестиЧисло(НачЗначение, "Сумма налога, подлежащая уплате", 14, 2) Тогда
			Если КодПоказателяПоСтруктуре = "СуммаНалога1Раздел1_3" Тогда
				мСуммаНалога1Раздел1_3 = НачЗначение;
				Строка1 = "040";
			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога2Раздел1_3" Тогда
				мСуммаНалога2Раздел1_3 = НачЗначение;
				Строка1 = "060";
			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога3Раздел1_3" Тогда
				мСуммаНалога3Раздел1_3 = НачЗначение;
				Строка1 = "080";
			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога4Раздел1_3" Тогда
				мСуммаНалога4Раздел1_3 = НачЗначение;
				Строка1 = "100";
			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаНалога5Раздел1_3" Тогда
				мСуммаНалога5Раздел1_3 = НачЗначение;
				Строка1 = "120";
			КонецЕсли;

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_3",Сред(Ячейка, 1, 13), 15, НачЗначение, Истина);
			Модифицированность = Истина;

			Если ВозможнаОшибкаВвода(НачЗначение, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке " + Строка1 + " указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (Найти(Ячейка, "СрокУплаты") > 0) Тогда
		СтандартнаяОбработка = Ложь;
		КодПоказателяПоСтруктуре = Сред(Ячейка, 1, 11) + "Раздел1_3";
		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре);

		Если ВвестиДату(НачЗначение, "По сроку", ЧастиДаты.Дата) Тогда
			Если КодПоказателяПоСтруктуре = "СрокУплаты1Раздел1_3" Тогда
				мСрокУплаты1Раздел1_3 = НачЗначение;
			ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты2Раздел1_3" Тогда
				мСрокУплаты2Раздел1_3 = НачЗначение;
			ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты3Раздел1_3" Тогда
				мСрокУплаты3Раздел1_3 = НачЗначение;
			ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты4Раздел1_3" Тогда
				мСрокУплаты4Раздел1_3 = НачЗначение;
			ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты5Раздел1_3" Тогда
				мСрокУплаты5Раздел1_3 = НачЗначение;
			КонецЕсли;

			НачЗначениеСтр = Формат(НачЗначение, "ДФ=""ддММгггг""");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_3",Сред(Ячейка, 1, 12), 8, НачЗначениеСтр);
			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_3Выбор

// ПолеТабличногоДокументаРаздел1_2Выбор
//
Процедура ПолеТабличногоДокументаРаздел1_2Выбор(Элемент, Область, СтандартнаяОбработка)

	Ячейка = Элемент.ТекущаяОбласть.Имя;

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("КБК1", мКБКвФБРаздел1_2);
	СтруктураПроверки.Вставить("КБК2", мКБКвБСРаздел1_2);

	СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_2);
	СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
	СтруктураПроверки.Вставить("КПП", мКППЮЛ);

	Если Найти(Ячейка, "СуммаСубПоСроку") > 0 Тогда

		КодПоказателяПоСтруктуре = Сред(Ячейка, 1, 16) + "Раздел1_2";
		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("Раздел1_2");

		Если ТаблицаВариантыЗаполнения <> Неопределено Тогда
			НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(КодПоказателяПоСтруктуре, "КодПоказателяПоСтруктуре");
		Иначе
			НайденнаяСтрока = Неопределено;
		КонецЕсли;

		Если НайденнаяСтрока <> Неопределено Тогда
			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
		Иначе
			ВариантЗаполнения = 0;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;

		Если ВариантЗаполнения = 4 Тогда
			Возврат;
		КонецЕсли;

		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре);

		Если ВвестиЧисло(НачЗначение, "Сумма ежемесячного авансового платежа", 14, 2) Тогда
			Если КодПоказателяПоСтруктуре = "СуммаСубПоСроку1Раздел1_2" Тогда
				мСуммаСубПоСроку1Раздел1_2 = НачЗначение;
				Строка1 = "220";
			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаСубПоСроку2Раздел1_2" Тогда
				мСуммаСубПоСроку2Раздел1_2 = НачЗначение;
				Строка1 = "230";
			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаСубПоСроку3Раздел1_2" Тогда
				мСуммаСубПоСроку3Раздел1_2 = НачЗначение;
				Строка1 = "240";
			КонецЕсли;

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2",Сред(Ячейка, 1, 17), 15, НачЗначение, Истина);
			Модифицированность = Истина;

			Если ВозможнаОшибкаВвода(НачЗначение, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке " + Строка1 + " указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	Если Найти(Ячейка, "СуммаФедПоСроку") > 0 Тогда
	//Если (Найти(Ячейка, "СуммаФедПоСроку") > 0) И (ФлажокОтклАвтоРасчет) Тогда

		КодПоказателяПоСтруктуре = Сред(Ячейка, 1, 16) + "Раздел1_2";

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("Раздел1_2");

		Если ТаблицаВариантыЗаполнения <> Неопределено Тогда
			НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(КодПоказателяПоСтруктуре, "КодПоказателяПоСтруктуре");
		Иначе
			НайденнаяСтрока = Неопределено;
		КонецЕсли;

		Если НайденнаяСтрока <> Неопределено Тогда
			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
		Иначе
			ВариантЗаполнения = 0;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;

		Если ВариантЗаполнения = 4 Тогда
			Возврат;
		КонецЕсли;

		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре);

		Если ВвестиЧисло(НачЗначение, "Сумма ежемесячного авансового платежа", 14, 2) Тогда
			Если КодПоказателяПоСтруктуре = "СуммаФедПоСроку1Раздел1_2" Тогда
				мСуммаФедПоСроку1Раздел1_2 = НачЗначение;
				Строка1 = "120";
			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаФедПоСроку2Раздел1_2" Тогда
				мСуммаФедПоСроку2Раздел1_2 = НачЗначение;
				Строка1 = "130";
			ИначеЕсли КодПоказателяПоСтруктуре = "СуммаФедПоСроку3Раздел1_2" Тогда
				мСуммаФедПоСроку3Раздел1_2 = НачЗначение;
				Строка1 = "140";
			КонецЕсли;

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2",Сред(Ячейка, 1, 17), 15, НачЗначение, Истина);
			Модифицированность = Истина;

			Если ВозможнаОшибкаВвода(НачЗначение, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке " + Строка1 + " указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	Если Найти(Ячейка, "СрокУплаты") > 0 Тогда
	//Если (Найти(Ячейка, "СрокУплаты") > 0) Тогда

		КодПоказателяПоСтруктуре = Сред(Ячейка, 1, 11) + "Раздел1_2";

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("Раздел1_2");

		Если ТаблицаВариантыЗаполнения <> Неопределено Тогда
			НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(КодПоказателяПоСтруктуре, "КодПоказателяПоСтруктуре");
			Если НайденнаяСтрока <> Неопределено Тогда
				ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
			Иначе
				ВариантЗаполнения = 0;
			КонецЕсли;
		Иначе
			ВариантЗаполнения = 0;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;

		Если ВариантЗаполнения = 4 Тогда
			Возврат;
		КонецЕсли;

		НачЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре);

		Если ВвестиДату(НачЗначение, "Введите срок уплаты", ЧастиДаты.Дата) Тогда
			Если КодПоказателяПоСтруктуре = "СрокУплаты1Раздел1_2" Тогда
				мСрокУплаты1Раздел1_2 = НачЗначение;
			ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты2Раздел1_2" Тогда
				мСрокУплаты2Раздел1_2 = НачЗначение;
			ИначеЕсли КодПоказателяПоСтруктуре = "СрокУплаты3Раздел1_2" Тогда
				мСрокУплаты3Раздел1_2 = НачЗначение;
			КонецЕсли;

			НачЗначениеСтр = Формат(НачЗначение, "ДФ=""ддММгггг""");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1_2",Сред(Ячейка, 1, 11), 8, НачЗначениеСтр);
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли Найти(Ячейка, "КодОКАТО_1_") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мКодОкатоРаздел1_2;
		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1_2", "КодОКАТО_1_", ПервоначальноеЗначение, 11, 0, Ложь, "Введите код ОКАТО", "", Неопределено, Неопределено,СтандартнаяОбработка, 11);
		Если Результат.ЗначениеВведено Тогда
			мКодОкатоРаздел1_2 = Результат.Значение;
		КонецЕсли;

	ИначеЕсли (Найти(Ячейка,"КБКвФБ_") > 0)
	Или (Найти(Ячейка,"КБКвБС_") > 0) Тогда

		СтандартнаяОбработка = Ложь;

		Если Найти(Ячейка,"КБКвФБ_") > 0 Тогда
			ТекКБК = мКБКвФБРаздел1_2;
			КодПоСтруктуре = "КБКвФБРаздел1_2";
		ИначеЕсли Найти(Ячейка,"КБКвБС_") > 0 Тогда
			ТекКБК = мКБКвБСРаздел1_2;
			КодПоСтруктуре = "КБКвБСРаздел1_2";
		КонецЕсли;

		Если Год(ДатаПодписи) <= 2005 Тогда
			ТЗДляВыбораКБК = мКодыБюджетнойКлассификации2005;
		ИначеЕсли Год(ДатаПодписи) = 2006 Тогда
			ТЗДляВыбораКБК = мКодыБюджетнойКлассификации2006;
		ИначеЕсли Год(ДатаПодписи) >= 2007 Тогда
			ТЗДляВыбораКБК = мКодыБюджетнойКлассификации2007;
		КонецЕсли;

		Результат = РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Раздел1_2", РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Ячейка), ТекКБК, 20, 0, Ложь, "Введите КБК (20 знаков)", "Выбор КБК", ТЗДляВыбораКБК, Неопределено,СтандартнаяОбработка, 20);
		Если НЕ Результат.ЗначениеВведено Тогда
			Возврат;
		КонецЕсли;

		ИтРезультат = Результат.Значение;

		Если ОбновитьПеременныеМодуля(КодПоСтруктуре, ИтРезультат) Тогда

			СтруктураПроверки = Новый Структура;
			СтруктураПроверки.Вставить("КБК", ИтРезультат);
			СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_2);
			СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
			СтруктураПроверки.Вставить("КПП", мКППЮЛ);

			Если ВозможнаОшибкаВвода(мСуммаФедПоСроку1Раздел1_2, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 120 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаФедПоСроку2Раздел1_2, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 130 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаФедПоСроку3Раздел1_2, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 140 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаСубПоСроку1Раздел1_2, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 220 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаСубПоСроку2Раздел1_2, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 230 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

			Если ВозможнаОшибкаВвода(мСуммаСубПоСроку3Раздел1_2, СтруктураПроверки) Тогда
				Сообщить("Внимание! Возможно, вместо суммы налога по строке 240 указан КБК, код ОКАТО, ИНН или КПП", СтатусСообщения.Важное);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2Выбор

// ИзменитьПризнакСельхозПроизводителяНаПротивоположномЛисте
//
Процедура ИзменитьПризнакСельхозПроизводителяНаПротивоположномЛисте(Лист, Параметр, ТекЗнач)
	Перем ТаблицаРаздела;

	// Получим таблицу разделов
	мСтруктураМногостраничныхРазделов.Свойство(Лист, ТаблицаРаздела);
	// Найдем активный лист
	АктивнаяСтраницаРаздела = ТаблицаРаздела.Найти(Истина, "АктивнаяСтраница");

	Если АктивнаяСтраницаРаздела.Данные = Неопределено Тогда
		// В случаях, если был отключен авторасчет, тогда в Данных может не быть структуры, тогда обновимся.
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, Лист, Ложь);
	КонецЕсли;

	// Запишем признак в структуру активного листа.
	АктивнаяСтраницаРаздела.Данные.Вставить(Параметр, ТекЗнач);

	// Получим номер активной страницы
	НомерТекущейСтраницы = ТаблицаРаздела.Индекс(АктивнаяСтраницаРаздела);
	// Получим противоположную страницу
	ПротивоположнаяСтраница = ?(НомерТекущейСтраницы = 0, 1, 0);
	// Есть ли противоположная страница?
	Если ПротивоположнаяСтраница > ТаблицаРаздела.Количество() - 1 Тогда
		// Противоположной страницы просто ещё нет.
		Возврат;
	Иначе
		// При отключенном авторасчете, нет надобности проставлять противоположный признак
		Если ФлажокОтклАвтоРасчет Тогда
			Возврат;
		КонецЕсли;

		ТаблицаРаздела[ПротивоположнаяСтраница].Данные[Параметр] = ?(ТекЗнач = "V", "", "V");
	КонецЕсли;

КонецПроцедуры // ИзменитьПризнакСельхозПроизводителяНаПротивоположномЛисте

// Процедура ПолеТабличногоДокументаЛист02Выбор
// Процедура-обработчик события "Выбор"
//
Процедура ПолеТабличногоДокументаЛист02Выбор(Элемент, Область, СтандартнаяОбработка)

	Ячейка = Элемент.ТекущаяОбласть.Имя;

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если ((Ячейка = "П002000029003") Или (Ячейка = "П002000030003") Или (Ячейка = "П002000031003"))
	   И (ЭтоНалоговыйПериод(Организация, ДатаПодписи, мДатаКонцаПериодаОтчета)) Тогда
		// Также не заполняются строки 120 Приложений N 5 в декларациях за налоговый период (п. 10.8 разд. 10 Порядка).
		// Таким образом, поскольку строки 290 - 310 листа 02 декларации по налогу на прибыль организаций за налоговый
		// период не заполняются, не заполняется и подраздел 1.2 разд. 1 в декларации за налоговый период.
		Сообщить("Строки 290-310 Листа 02 и строка 120 Приложения № 5 к Листу 02 за налоговый период не заполняются.", СтатусСообщения.Информация);
	КонецЕсли;

	Если  Найти(Ячейка, "П002000000100") > 0 Тогда
		СтандартнаяОбработка = Ложь;

		Модифицированность = Истина;
		Если мРаздел2.Области.П002000000100.Значение = "V" Тогда

			мРаздел2.Области.П002000000100.Значение = "";
			мЯвляетсяСельхоз = "";

		Иначе

			мРаздел2.Области.П002000000100.Значение = "V";
			мЯвляетсяСельхоз = "1";

		КонецЕсли;

		ИзменитьПризнакСельхозПроизводителяНаПротивоположномЛисте("Лист02", "П002000000100", мРаздел2.Области.П002000000100.Значение);
		РасчетЗависимыхРазделовДекларации("Лист02");

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаЛист02Выбор

// Процедура ПолеТабличногоДокументаТитульныйВыбор
// процедура обработчик "Выбор"
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;
	Если ОбластьИмя = "ТипОрг1" Тогда
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Область.Значение = "V";
		мТитульный.Области.ТипОрг2.Значение = "";
		мТитульный.Области.ТипОрг3.Значение = "";
		мТитульный.Области.ТипОрг4.Значение = "";
		мПоМестуНахожденияОрганизации = Истина;

	ИначеЕсли ОбластьИмя = "ТипОрг2" Тогда
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Область.Значение = "V";
		мТитульный.Области.ТипОрг1.Значение = "";
		мТитульный.Области.ТипОрг3.Значение = "";
		мТитульный.Области.ТипОрг4.Значение = "";
		мПоМестуНахожденияОрганизации = Ложь;

	ИначеЕсли ОбластьИмя = "ТипОрг3" Тогда
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Область.Значение = "V";
		мТитульный.Области.ТипОрг1.Значение = "";
		мТитульный.Области.ТипОрг2.Значение = "";
		мТитульный.Области.ТипОрг4.Значение = "";
		мПоМестуНахожденияОрганизации = Истина;

	ИначеЕсли ОбластьИмя = "ТипОрг4" Тогда
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Область.Значение = "V";
		мТитульный.Области.ТипОрг1.Значение = "";
		мТитульный.Области.ТипОрг2.Значение = "";
		мТитульный.Области.ТипОрг3.Значение = "";
		мПоМестуНахожденияОрганизации = Истина;

	ИначеЕсли Найти(ОбластьИмя, "ОКВЭД") > 0 Тогда
		РегламентированнаяОтчетность.УстановитьКодОКВЭДНаТитульномЛисте(ЭтаФорма, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

// Процедура ПолеТабличногоДокументаЛист07Выбор
// Процедура обработчика "Выбор"
//
Процедура ПолеТабличногоДокументаЛист07Выбор(Элемент, Область, СтандартнаяОбработка)

	Ячейка = Элемент.ТекущаяОбласть.Имя;

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	// выбор льготы
	Если (Найти(Ячейка, "П002120001002") > 0) Или (Найти(Ячейка, "П002120001003") > 0) Тогда

		СтандартнаяОбработка = Ложь;

		Если НЕ мАвтоВыборКодов Тогда

			Если Найти(Ячейка, "П002120001002") > 0 Тогда
				КолонкаПоиска = "Название";
			Иначе
				КолонкаПоиска = "Код";
			КонецЕсли;

			ПервоначальноеЗначение = Область.Значение;
			НайденнаяСтрока = мПрибыльКодыВидовПоступлений.Найти(ПервоначальноеЗначение, КолонкаПоиска);

			Если НайденнаяСтрока = Неопределено Тогда
				Результат = мПрибыльКодыВидовПоступлений.ВыбратьСтроку("Выбор кода");
			Иначе
				Результат = мПрибыльКодыВидовПоступлений.ВыбратьСтроку("Выбор кода", НайденнаяСтрока);
			КонецЕсли;

		Иначе

			СтандартнаяОбработка = Истина;
			Если Найти(Ячейка, "П002120001003") > 0 Тогда
				ВводКода(мРаздел7, Ячейка, Область.Значение, 3, "Код вида поступлений", СтандартнаяОбработка);
			КонецЕсли;

			Возврат;

		КонецЕсли;

		Если Результат <> Неопределено Тогда

			Значение1 = ?(мАвтоВыборКодов, Результат,Результат.Получить(0));

			//П002170001003_1
			Если НЕ мАвтоВыборКодов Тогда

				Значение2 = ?(мАвтоВыборКодов, Результат,Результат.Получить(1));

				Если ПустаяСтрока(Значение1) Тогда
					Значение2 = "";
				КонецЕсли;

				Если Найти(Ячейка, "П002120001002") > 0 Тогда

					ЯчейкаРядом = СтрЗаменить(Ячейка,"П002120001002", "П002120001003");
					мРаздел7.Области[Ячейка].Значение = Значение2;
					мРаздел7.Области[ЯчейкаРядом].Значение = Значение1;
					Модифицированность = Истина;

				Иначе

					ЯчейкаРядом = СтрЗаменить(Ячейка,"П002120001003","П002120001002");
					мРаздел7.Области[Ячейка].Значение = Значение1;
					мРаздел7.Области[ЯчейкаРядом].Значение = Значение2;
					Модифицированность = Истина;

				КонецЕсли;

			Иначе

				мРаздел7.Области[Ячейка].Значение = Значение1;
				Модифицированность = Истина;

			КонецЕсли;
		Конецесли;
	КонецЕсли; // Найти

КонецПроцедуры // ПолеТабличногоДокументаЛист07Выбор

// ПолеТабличногоДокументаЛист02_Прил5Выбор
//
Процедура ПолеТабличногоДокументаЛист02_Прил5Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если (Область.Имя = "П002050012003") И (ЭтоНалоговыйПериод(Организация, ДатаПодписи, мДатаКонцаПериодаОтчета)) Тогда
		// Также не заполняются строки 120 Приложений N 5 в декларациях за налоговый период (п. 10.8 разд. 10 Порядка).
		// Таким образом, поскольку строки 290 - 310 листа 02 декларации по налогу на прибыль организаций за налоговый
		// период не заполняются, не заполняется и подраздел 1.2 разд. 1 в декларации за налоговый период.
		Сообщить("Строки 290-320 Листа 02 и строка 120 Приложения № 5 к Листу 02 за налоговый период не заполняются.", СтатусСообщения.Информация);
	КонецЕсли;

	Если Область.Имя = "П002050000100" Тогда
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		Если мРаздел2_Прил5.Области.П002050000100.Значение = "V" Тогда
			мРаздел2_Прил5.Области.П002050000100.Значение = "";
			мЯвляетсяСельхозПрил5Лист02 = "";
		Иначе
			мРаздел2_Прил5.Области.П002050000100.Значение = "V";
			мЯвляетсяСельхозПрил5Лист02 = "1";
		КонецЕсли;

		// Запишем признак в структуру данных листа
		ЗаписатьПоказательВСтруктуру("Лист02_Прил5", "П002050000100", мРаздел2_Прил5.Области.П002050000100.Значение);

		РасчетЗависимыхРазделовДекларации("Лист02_Прил5");

	ИначеЕсли (Область.Имя = "П002050000200") И (НЕ мАвтоВыборКодов) Тогда

		СтандартнаяОбработка = Ложь;
		Список = Новый СписокЗначений;
		Список.Добавить("1","1 (по организации без входящих в нее обособленных подразделений)");
		Список.Добавить("2","2 (по обособленному подразделению)");
		Список.Добавить("3","3 (по обособленному подразделению, ликвидированному в течение текущего налогового периода)");
		Список.Добавить("4","4 (по группе обособленных подразделений, находящихся на территории одного субъекта РФ)");
		Список.Добавить("-1","Пустое значение");

		НайденнаяСтрока = Список.НайтиПоЗначению(Область.Значение);

		Если НайденнаяСтрока = Неопределено Тогда
			СписокЭлемент = ВыбратьИзСписка(Список);
		Иначе
			СписокЭлемент = ВыбратьИзСписка(Список,, НайденнаяСтрока);
		КонецЕсли;

		Если СписокЭлемент <> Неопределено  Тогда

			Если (Область.Значение = СписокЭлемент.Значение) Или (СписокЭлемент.Значение = "-1") Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = СписокЭлемент.Значение;
			КонецЕсли;

			// Запишем признак в структуру данных листа
			ЗаписатьПоказательВСтруктуру("Лист02_Прил5", "П002050000200", Область.Значение);
			Если Область.Значение = "3" Тогда
				// Стока 050 в этом случае не заполняется.
				ИзменитьВариантЗаполненияЯчейки(1, "П002050005003")
			Иначе
				Если НЕ ФлажокОтклАвтоРасчет Тогда
					// Строка 050 в этом случае заполняется автоматически в режиме 4.
					ИзменитьВариантЗаполненияЯчейки(4, "П002050005003");
				Иначе
					ИзменитьВариантЗаполненияЯчейки(3, "П002050005003");
				КонецЕсли;
			КонецЕсли;

			// Блок управление признаком вхождения организации в группу ОП.
			Если Область.Значение = "4" Тогда
				// Сделаем видимым флажек.
				ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Истина;
				// Запишем по умолчанию как выключенный флаг.
				ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(Ложь, Ложь);
			Иначе
				ЭлементыФормы.ВГруппуОПВходитОрганизация.Видимость = Ложь;
				// Запишем по умолчанию как выключенный флаг.
				ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(Ложь, Ложь);
			КонецЕсли;

			РасчетЗависимыхРазделовДекларации("Лист02_Прил5");
			Модифицированность = Истина;
		КонецЕсли;

	// Строка 020 (КПП обособленного подразделения)
	ИначеЕсли Область.Имя = "П002050002003" Тогда
		ПервоначальноеЗначение = Элемент.ТекущаяОбласть.Значение;
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Лист02_Прил5", Область.Имя, ПервоначальноеЗначение, 9, 0, Ложь, "Введите КПП", "", Неопределено, Неопределено, СтандартнаяОбработка);

	//ИначеЕсли (Область.Имя = "П002050015003") И (НЕ мАвтоВыборКодов) Тогда
	// Специально отключено мАвтовыборКодов, т.к. влияет на выгрузку при сохранении декларации.
	ИначеЕсли Область.Имя = "П002050015003" Тогда

		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		Если мРаздел2_Прил5.Области.П002050015003.Значение = "V" Тогда
			мРаздел2_Прил5.Области.П002050015003.Значение = "";
		Иначе
			мРаздел2_Прил5.Области.П002050015003.Значение = "V";
		КонецЕсли;

		// Запишем признак в структуру данных листа
		// В структуре данных сохраним в соответствии с выгрузкой.
		ЗаписатьПоказательВСтруктуру("Лист02_Прил5", "П002050015003", ?(мРаздел2_Прил5.Области.П002050015003.Значение = "V", "1", "0"));

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаЛист02_Прил5Выбор

// ПолеТабличногоДокументаЛист02_Прил1Выбор
//
Процедура ПолеТабличногоДокументаЛист02_Прил1Выбор(Элемент, Область, СтандартнаяОбработка)

	Ячейка = Элемент.ТекущаяОбласть.Имя;

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если Ячейка = "П002010000100" Тогда
		СтандартнаяОбработка = Ложь;

		Модифицированность = Истина;
		Если мРаздел2_Прил1.Области.П002010000100.Значение = "V" Тогда
			мРаздел2_Прил1.Области.П002010000100.Значение = "";
			мЯвляетсяСельхозПрил1Лист02 = "";
		Иначе
			мРаздел2_Прил1.Области.П002010000100.Значение = "V";
			мЯвляетсяСельхозПрил1Лист02 = "1";
		КонецЕсли;

		ИзменитьПризнакСельхозПроизводителяНаПротивоположномЛисте("Лист02_Прил1", "П002010000100", мРаздел2_Прил1.Области.П002010000100.Значение);
		РасчетЗависимыхРазделовДекларации("Лист02_Прил1")

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаЛист02_Прил1Выбор

// ПолеТабличногоДокументаЛист02_Прил2Выбор
//
Процедура ПолеТабличногоДокументаЛист02_Прил2Выбор(Элемент, Область, СтандартнаяОбработка)

	Ячейка = Элемент.ТекущаяОбласть.Имя;

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если  Найти(Ячейка, "П002020000100") > 0 Тогда
		СтандартнаяОбработка = Ложь;

		Модифицированность = Истина;
		Если мРаздел2_Прил2.Области.П002020000100.Значение = "V" Тогда
			мРаздел2_Прил2.Области.П002020000100.Значение = "";
			мЯвляетсяСельхозПрил2Лист02 = "";
		Иначе
			мРаздел2_Прил2.Области.П002020000100.Значение = "V";
			мЯвляетсяСельхозПрил2Лист02 = "1";
		КонецЕсли;

		ИзменитьПризнакСельхозПроизводителяНаПротивоположномЛисте("Лист02_Прил2", "П002020000100", мРаздел2_Прил2.Области.П002020000100.Значение);
		РасчетЗависимыхРазделовДекларации("Лист02_Прил2");

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаЛист02_Прил2Выбор

// ПолеТабличногоДокументаЛист02_Прил4Выбор
//
Процедура ПолеТабличногоДокументаЛист02_Прил4Выбор(Элемент, Область, СтандартнаяОбработка)

	Ячейка = Элемент.ТекущаяОбласть.Имя;

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если  Найти(Ячейка, "П002040000100") > 0 Тогда
		СтандартнаяОбработка = Ложь;

		Модифицированность = Истина;
		Если мРаздел2_Прил4.Области.П002040000100.Значение = "V" Тогда
			мРаздел2_Прил4.Области.П002040000100.Значение = "";
			мЯвляетсяСельхозПрил4Лист02 = "";
		Иначе
			мРаздел2_Прил4.Области.П002040000100.Значение = "V";
			мЯвляетсяСельхозПрил4Лист02 = "1";
		КонецЕсли;

		ИзменитьПризнакСельхозПроизводителяНаПротивоположномЛисте("Лист02_Прил4", "П002040000100", мРаздел2_Прил4.Области.П002040000100.Значение);
		РасчетЗависимыхРазделовДекларации("Лист02_Прил4");

	// Года
	ИначеЕсли (Ячейка = "П002040004001") Или (Ячейка = "П002040005001") Или (Ячейка = "П002040006001") Или (Ячейка = "П002040007001")
	 Или (Ячейка = "П002040008001") Или (Ячейка = "П002040009001") Или (Ячейка = "П002040010001") Или (Ячейка = "П002040011001")
	  Или (Ячейка = "П002040012001") Или (Ячейка = "П002040013001") Тогда
		ВводКода(мРаздел2_Прил4, Ячейка, Область.Значение, 4, "Введите год", СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаЛист02_Прил4Выбор

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Функция возвращает структуру с показателями титульного листа и листов раздела "ФизЛица"
//
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак вывода сообщений в окно сообщений
//
// Возвращаемое значение:
//	Структура - данные с титульного листа и листа "ФизЛица"
//
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
	
	СтруктураМногостраничныхРазделов = Неопределено;
	Если БратьИзФормы Тогда
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
		ПоказателиОтчета = Новый Структура();
		Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЦикла;
	Иначе
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	КонецЕсли;
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	
	Возврат СписокДляВозврата;
	
КонецФункции

// Процедура добавляет строку в таблицу сообщений, заполняемую по ходу проверки правильности 
// заполнения показателей перед выгрузкой
//
// Параметры:
//	Описание - строка, описание ошибки
//	Раздел - строка, имя раздела, при проверке которого произошла ошибка
//	ИмяЯчейки - строка, имя области табличного документа, соответвующей неверно заполненному показателю
//	ФИО - строка, ФИО физлица. Заполняется для раздела "ФизЛица"
//
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

// Функция проверяет правильность заполнения титульного листа и листов раздела "ФизЛица".
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Истина);
	ПоказателиТитульный = Инф.Получить(0).Значение;
		 
	ОргИНН = СокрЛП(Орг.ИНН);
	ДокПредставляется = 210;
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредставляется = 220;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг3) Тогда
		ДокПредставляется = 292;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг4) Тогда
		ДокПредставляется = 213;
	КонецЕсли;
	НаимОППол = СокрЛП(ПоказателиТитульный.ОбПодрНазв);
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргУП = СокрЛП(ПоказателиТитульный.ОргУП);
	
	Если ДокПредставляется = 220 Тогда
		Если ПустаяСтрока(НаимОППол) Тогда
			СообщитьВТС("Не задано наименование обособленного подразделения!", "Титульный", "ОбПодрНазв");  
			СтатусПроверки = 1;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(ОргНазв) Тогда
			СообщитьВТС("Не задано наименование организации!", "Титульный", "ОргНазв");
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли;
	Если РабочаяДата >= '20080101' Тогда
		Если ПустаяСтрока(ОргУП) И ПустаяСтрока(ОргДиректор) Тогда
			СообщитьВТС("Не заданы фамилия, имя, отчество руководителя организации!", "Титульный", "ОргДиректор");
			СтатусПроверки = 1;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(ОргДиректор) Тогда
			СообщитьВТС("Не заданы фамилия, имя, отчество руководителя организации!", "Титульный", "ОргДиректор");
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли;
	Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ОргИНН) Тогда
		Сообщить("Неверно задан ИНН организации!", СтатусСообщения.Важное);
		СтатусПроверки = 1;
	КонецЕсли;
	Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
		СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
		СтатусПроверки = 1;
	КонецЕсли;
	Если ПоказателиТитульный.ПредставительФизЛицо = Истина И НЕ ПустаяСтрока(ОргУП) И РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргУП, ",", "")) = 0 Тогда
		СообщитьВТС("Фамилия, имя или отчество представителя содержат недопустимые символы!", "Титульный", "ОргУП");
		СтатусПроверки = 1;
	КонецЕсли;
	Возврат (СтатусПроверки <> 1);
	
КонецФункции

// Процедура добавляет в текст c электронным представлением информацию о показателях титульного листа и 
// листов раздела "ФизЛица"
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который следует добавлять строки
//
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст)
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	ОКВЭД = СокрЛП(ПоказателиТитульный.ОКВЭД1 + ПоказателиТитульный.ОКВЭД2)
		+ "." + СокрЛП(ПоказателиТитульный.ОКВЭД3 + ПоказателиТитульный.ОКВЭД4)
		+ "." + СокрЛП(ПоказателиТитульный.ОКВЭД5 + ПоказателиТитульный.ОКВЭД6);
	
	ОргКПП = СокрЛП(ПоказателиТитульный.КПП1);
	ОргИНН = СокрЛП(Орг.ИНН);
	ДокПредставляется = 210;
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредставляется = 220;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг3) Тогда
		ДокПредставляется = 292;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг4) Тогда
		ДокПредставляется = 213;
	КонецЕсли;
	НаимОППол = СокрЛП(ПоказателиТитульный.ОбПодрНазв);
	ОргДиректор = СокрЛП(ПоказателиТитульный.ОргДиректор);
	УпПред = СокрЛП(ПоказателиТитульный.ОргУп);
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргТелефон = ВРЕГ(СокрЛП(Лев(ПоказателиТитульный.ТелОрганизации, 20)));
	ВидДок = ПоказателиТитульный.ВидДок;
	ПризнВидаДок = 1;
	Если НЕ ПустаяСтрока(ВидДок) Тогда
		ПризнВидаДок = Число(ВидДок);
	КонецЕсли;
	Попытка
		НомерКорректировки = Число(ПоказателиТитульный.НомКоррект); 
	Исключение
		НомерКорректировки = 0;
	Конецпопытки;
	РазницаМесяцев = Месяц(мСохраненныйДок.ДатаОкончания) - Месяц (мСохраненныйДок.ДатаНачала) + 1;
	ПризнОтчетногоПериода = 1;
	Если мСохраненныйДок.Периодичность = Перечисления.Периодичность.Месяц Тогда
		ПризнОтчетногоПериода = 1;
	ИначеЕсли РазницаМесяцев = 3 Тогда
		ПризнОтчетногоПериода = 3;
	ИначеЕсли РазницаМесяцев = 6 Тогда
		ПризнОтчетногоПериода = 6;
	ИначеЕсли РазницаМесяцев = 9 Тогда
		ПризнОтчетногоПериода = 9;
	ИначеЕсли РазницаМесяцев = 12 Тогда
		ПризнОтчетногоПериода = 0;
	КонецЕсли;
	НомерКварталаМесяца = ПоказателиТитульный.НомКвартал;
	//Определили основные показатели
	
	// Общие сведения служебной части
	Текст.ДобавитьСтроку("НаимЮЛПол:" + ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, ""))));
	Если Докпредставляется = 220 Тогда
		Текст.ДобавитьСтроку("НаимОППол:" + ВРег(СокрЛП(СтрЗаменить(НаимОППол, Символы.ПС, ""))));
	КонецЕсли;
	Текст.ДобавитьСтроку("ИННЮЛ:" + ОргИНН);  
	Текст.ДобавитьСтроку("КППЮЛ:" + ОргКПП);
	Текст.ДобавитьСтроку("ОКВЭД:"  + ?(ОКВЭД = "..", "-", СокрЛП(ОКВЭД)));
	Текст.ДобавитьСтроку("ТелНП:" + ОргТелефон);
	Текст.ДобавитьСтроку("###");
	Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор)); 
	Текст.ДобавитьСтроку("УпПред:" + ВРЕГ(СокрЛП(?(ПоказателиТитульный.ПредставительФизЛицо = Истина, РегламентированнаяОтчетность.СтрЗаменитьПробелы(УпПред), УпПред)))); 
	Если НЕ ПустаяСтрока(УпПред) Тогда
		Текст.ДобавитьСтроку("ДокУпПред:" + ?(ПустаяСтрока(ПоказателиТитульный.ДокументПредставителя), "-", ВРЕГ(СокрЛП(ПоказателиТитульный.ДокументПредставителя))));
	КонецЕсли;
	Текст.ДобавитьСтроку("###");
	
	Текст.ДобавитьСтроку("ПризФОтч:1");
	Текст.ДобавитьСтроку("КНД:" + КНД);
	Текст.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(НаименованиеОтчетаДляВыгрузки));
	Текст.ДобавитьСтроку("ВерФОтч:3.00007");
	Текст.ДобавитьСтроку("ПериодВерОтч:12.02.2007,24.06.2008");
	Текст.ДобавитьСтроку("ПризВидДок:" + ПризнВидаДок);
	Если ПризнВидаДок = 3 Тогда
		Текст.ДобавитьСтроку("НомерКорр:" + НомерКорректировки);
	Конецесли;     
	Текст.ДобавитьСтроку("ПризПериодОтч:" + ПризнОтчетногоПериода);
	Если НЕ ПустаяСтрока(НомерКварталаМесяца) И ПризнОтчетногоПериода = 1 Тогда
		Текст.ДобавитьСтроку("НомерПериодОтч:" + НомерКварталаМесяца);
	КонецЕсли;
	Текст.ДобавитьСтроку("ГодПериодОтч:" + Формат(Год(мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	Текст.ДобавитьСтроку("ДокПредст:" + ДокПредставляется);
	Текст.ДобавитьСтроку("ОКЕИ:383"); 
	Текст.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется 
	Текст.ДобавитьСтроку("###");
	
КонецПроцедуры

// Процедура формирует текст выгрузки в части предписанных показателей
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который выгружаются показатели
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	
	//Если (НЕ БратьИзФормы) Тогда
	//	ЗаполнитьНачальныеНастройки();
	//КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	//Показатели.ВыбратьСтроку("");
	ТекСостРазд = Неопределено;
	
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//Для Каждого Стр Из Разделы Цикл
	//	Если((Стр.Значение = "*") ИЛИ (Стр.Значение = "#")) И (мСтруктураМногостраничныхРазделов[Стр.Ключ].Количество()=0)Тогда
	//		ВставитьДополнительнуюСтраницу(Стр.Ключ);
	//		УдалитьДополнительнуюСтраницу(Стр.Ключ);
	//	КонецЕсли;
	//КонецЦикла;
	
	Если БратьИзФормы Тогда
		// обновляем структуру многострочных разделов
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);

		// обновляем структуру многостраничных разделов
		ОбновитьСтруктуруМногостраничныхРазделов();
	КонецЕсли;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		ПустойРаздел = РазделПуст(Разд, ПоказателиОтчета);
		
		Если ПустойРаздел И ОбязРазделов.НайтиПоЗначению(ИмяРаздела) = Неопределено Тогда
			//Если раздел пустой и необязательный для выгрузки, то продолжим
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//Продолжить;//не реализовано
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если (СтраницаПустая = 1) И (НЕ ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							СтрокаПустая = 1;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
								
							КонецЦикла;
							
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					
				КонецЦикла;
				
				Если (СтраницаПустая = 1) И (Не ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Текст.ДобавитьСтроку("###");
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						СтрокаПустая = 1;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
							
						КонецЦикла;
						
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
					Текст.ДобавитьСтроку("###");
					
				КонецЕсли;
				
			Конеццикла;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяРаздела]);
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Текст.ДобавитьСтроку("###");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет раздел на наличие в нем заполненных значимых показателей
// Параметры:
//	Разд - КлючИЗначение, описатель раздела (Ключ - имя, Значение - вид)
//	ПоказателиОтчета - структура, хранящая значения показателей
//
// Возвращаемое значение:
//	Булево - Истина означает, что раздел пуст; Ложь - раздел заполнен
//
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	
	СтраницаПустая = 1;
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		НомСтр = 0;
		
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			
			НомСтр = НомСтр + 1;
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла;
							КонецЕсли;
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						
					КонецЦикла;
					
				КонецЕсли;//многострочный или обычный подраздел
				
			Конеццикла;//по подразделам

		КонецЦикла;//по страницам
		
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		
		//выгрузка многостраничного раздела
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
			
			НомСтр = НомСтр + 1;
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
				
			КонецЦикла;
			
		КонецЦикла;
		//конец выгрузки многостраничного раздела
		
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
			//Продолжить;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
					
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				
				Пока Истина Цикл
					
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						
						Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
							Перейти ~ВыходИзДвойногоЦикла_;
						КонецЕсли;
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
							
					КонецЦикла;
					
					ном = ном + 1;
					
				КонецЦикла;
				
				~ВыходИзДвойногоЦикла_:
				
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
											
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Конеццикла;
		
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			//Продолжить;
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
		
	//Конец проверки на пустые разделы
	//*************************************************************************************************************************
	//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	
КонецФункции

// Функция находит и возвращает КлючИЗначение по переданному ключу
//
// Параметры:
//	Ключ - значение ключа
//	Разделы - структура, в которой ищется КлючИЗначение
//
// Возвращаемое значение:
//	КлючИЗначение - искомый объект
//	
Функция КлючИЗначениеПоКлючу(Ключ, Разделы)
	Для Каждого Эл Из Разделы Цикл
		Если Эл.Ключ = Ключ Тогда
			Возврат Эл;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Функция проверяет правильность заполнения разделов с предписанными показателями.
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//	ЧтоПроверять - строка. Если в строке присутствует "1" - проверять значения на заполненность, "2" - на корректность заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	
	ИмяРазделаПред = "";
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	Если БратьИзФормы Тогда
		ПоказателиОтчета = Новый Структура();

		Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

		КонецЦикла;
	Иначе
		
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если ДанныеОтчета = Неопределено Тогда
			Сообщить("Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		//мСтруктураМногострочныхРазделов = ДанныеОтчета.ДанныеМногострочныхРазделов;

		//мСтруктураМногостраничныхРазделов = ДанныеОтчета.ДанныеМногостраничныхРазделов;этот объект инициализируется раньше

		мСтруктураВариантыЗаполнения = ДанныеОтчета.ДанныеВариантовАвтоЗаполнения;
		
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
		
	КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	РазделыСп = Новый СписокЗначений;
	ПоказателиКопия = Показатели.Скопировать();
	ПоказателиКопия.Свернуть("ИмяПоляТаблДокумента", "");
		
	РазделыСп.ЗагрузитьЗначения(ПоказателиКопия.ВыгрузитьКолонку("ИмяПоляТаблДокумента"));
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
		ЭлРазделаСп = РазделыСп.НайтиПоЗначению(ИмяРаздела);
		Если ЭлРазделаСп = Неопределено Тогда
			ЭлРазделаСп = РазделыСп.Добавить(ИмяРаздела);
		КонецЕсли;
		СостояниеРаздела = Неопределено;
		Разделы.Свойство(ИмяРаздела, СостояниеРаздела);
		ЭлРазделаСп.Представление = СостояниеРаздела;
		
	КонецЦикла;
	
	Если БратьИзФормы Тогда
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
		ОбновитьСтруктуруМногостраничныхРазделов();
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Раздел Из РазделыСп Цикл
		
		Разд = Неопределено;
		Разделы.Свойство(Раздел.Значение, Разд);
		ИмяРаздела = Раздел.Значение;
		Призн = Разд;
		
		Если РазделПуст(КлючИЗначениеПоКлючу(ИмяРаздела, Разделы), ПоказателиОтчета) Тогда
			//Если ОбязРазделов.НайтиПоЗначению(ИмяРаздела) <> Неопределено Тогда
			//	СообщитьВТС("Обязательный к заполнению раздел пуст!", ИмяРаздела, "");
			//	СтатусПроверки = 1;
			//КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла;
							
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦиклаВ:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;

							//СтатусПроверки = Макс(ПроверитьПоказатель(СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр), СтатусПроверки);
							//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					Если Найти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					//СтатусПроверки = Макс(ПроверитьПоказатель(Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр), СтатусПроверки);
					//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						//проверка на то, что строка пустая
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						//конец проверки
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							//СтатусПроверки = Макс(ПроверитьПоказатель(ТекОписатель, ЗначениеПоля, ВыводитьСообщения), СтатусПроверки);
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_В:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если Найти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						Если Найти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						//СтатусПроверки = Макс(ПроверитьПоказатель(СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения), СтатусПроверки);
						//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
				КонецЕсли;
				
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				Если Найти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				Если Найти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				//СтатусПроверки = Макс(ПроверитьПоказатель(Стр3, ЗначениеЯчейки, ВыводитьСообщения), СтатусПроверки);
				//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;//цикл по разделам
	
	Если СтатусПроверки = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	ИзвлечьДанные();
	ТаблицаСообщений.Очистить();
	Возврат (ПроверитьТитульныйЛистИСведенияОФизЛицах(Ложь) И ПроверитьПредписанныеПоказатели(Ложь));
	
КонецФункции

Процедура Выгрузить() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;

	// Функция Проверки, можно использовать возвращенный массив с ошибками.
	ПроверкаВводаДанных(Истина, "");

	Если мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияВОтчете(ЭтаФорма, мСохраненныйДок, Ложь);
	КонецЕсли;

	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НЕ НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		//Сообщить("Не удалось выгрузить отчет!", СтатусСообщения.Внимание);
	Иначе
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициализирует переменные модуля, необходимые для выгрузки
//
// Параметры:
//	Нет.
//
Процедура ИзвлечьДанные()
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	мСтруктураМногоСтраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	
КонецПроцедуры

// Процедура обрабатывает результирующий текст выгрузки, 
// полученный после работы универсального процедур и функций
// В процедуре обрабатываются нестандартные ситуации, непредусмотренные универсальным механизмом выгрузки
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст выгрузки
//
Процедура ОбработатьРезультирующийТекстВыгрузки(Текст)
	
	КолСтрок = Текст.КоличествоСтрок();
	
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч + 1;
		ТекСтрока = Текст.ПолучитьСтроку(ТекИнд);
		Тек13Симв = Лев(ТекСтрока, 13);
		Если Тек13Симв = "П002080003003" И СокрЛП(ТекСтрока) <> "П002080003003:" Тогда // обработаем ФИО
			Текст.ЗаменитьСтроку(ТекИнд, "П002080003003:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(Сред(ТекСтрока, 15)));
		КонецЕсли;
		Если Тек13Симв = "П002120001002" Тогда // обрежем строку
			Текст.ЗаменитьСтроку(ТекИнд, СокрЛП(Лев(ТекСтрока, 13 + 1+ 254)));
		КонецЕсли;
		Если ТекСтрока = "П002050015003:" ИЛИ ТекСтрока = "П002060000300:" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, ТекСтрока + "0");
		КонецЕсли;
		Если Тек13Симв = "П002080004003" Тогда // обрежем строку
			Текст.ЗаменитьСтроку(ТекИнд, СокрЛП(Лев(ТекСтрока, 13 + 1 + 20)));
		КонецЕсли;
		Если Тек13Симв = "П002120001002" Тогда // обрежем строку
			Текст.ЗаменитьСтроку(ТекИнд, СокрЛП(Лев(ТекСтрока, 13 + 1 + 254)));
		КонецЕсли;
		Если ТекСтрока = "П002080002003:643,,,,,,,,," Тогда
			Текст.ЗаменитьСтроку(ТекИнд, "П002080002003:");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
		
	Орг = мСохраненныйДок.Организация;
		
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	//выводим общие сведения информационной части
	РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Орг, , мСохраненныйДок.КПП, мСохраненныйДок.ДатаНачала, мСохраненныйДок.КодИМНС);
	
	//выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, Истина);
	
	ОбработатьРезультирующийТекстВыгрузки(Текст);
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:"+РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;

	РегламентированнаяОтчетность.СтандартнаяПостобработкаТекстаВыгрузки(Текст);
	
	Возврат Истина;
	
КонецФункции

// Процедура заполняет переменную модуля мТаблицаСоставПоказателей из соответствующего макета отчета
// 
// Параметры:
//	Нет.
//
Процедура ИнициализацияСоставаПоказателей() Экспорт

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	// Таблица значений хранит состав показателей отчета.
	// В колонках таблицы хранятся следующие данные:
	//    - имя поля табличного документа;
	//    - код показатели по составу показателей;
	//    - код показателя по форме (имя области табличного документа);
	//    - признак многострочности;
	//    - тип данных показателя.
	//
	мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
	мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",		      ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",    	  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("НомерСтрокиВМакете");

	МакетСоставаПоказателей = ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// доп. описание показателя
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = ?(ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоСтруктуре, КодПоказателяПоФорме);
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.НомерСтрокиВМакете     = ном;

		КонецЦикла;

	КонецЦикла;
	
	мТаблицаСоставПоказателей.Сортировать("НомерСтрокиВМакете");
	
КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Попытка
		НомСтраницы = 0;
		Для Каждого СтрПан Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			НомСтраницы = НомСтраницы + 1;
			Если СтрПан.Имя = Ячейка.Раздел Тогда
				ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = СтрПан;
				ОсновнаяПанельПриСменеСтраницы(ЭлементыФормы.ОсновнаяПанель, НомСтраницы);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Если Ячейка.Раздел = "ФизЛица" Тогда
		Попытка
			НС = РегламентированнаяОтчетность.роНомерСтраницыПоФИОФизЛица(ЭтаФорма, Ячейка.Страница);
			ПоказатьСтраницуМногостраничногоРаздела(НС - 1, Ячейка.Раздел, Истина);
			ИмяСтраницы = НС;
		Исключение
		КонецПопытки;
	Иначе
		Попытка
			ПоказатьСтраницуМногостраничногоРаздела(Число(Ячейка.Страница) - 1, Ячейка.Раздел, Истина);
			ИмяСтраницы = Ячейка.Страница;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ПолеТД = ЭлементыФормы["ПолеТабличногоДокумента" + Ячейка.Раздел];
	
	Попытка
		ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки);
		ИмяОбласти = Ячейка.ИмяЯчейки;
	Исключение
		
		Если (Ячейка.СтрокаПП <> Неопределено) И (НЕ (ПустаяСтрока(Ячейка.СтрокаПП))) Тогда
			Попытка
				ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
				ИмяОбласти = Ячейка.ИмяЯчейки + Ячейка.СтрокаПП;
			Исключение
				Попытка
					ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
					ИмяОбласти = Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП;
				Исключение
				КонецПопытки;
			КонецПопытки;
		Иначе
			Попытка
				ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки + "1");
				ИмяОбласти = Ячейка.ИмяЯчейки + "1";
			Исключение
				Попытка
					ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки + "_1");
					ИмяОбласти = Ячейка.ИмяЯчейки + "_1";
				Исключение
					ПолеТД.ТекущаяОбласть = ПолеТД.Область(Ячейка.ИмяЯчейки);
				КонецПопытки;
			КонецПопытки;
		КонецЕсли;
	КонецПопытки;
	ТекущийЭлемент = ПолеТД;
	
КонецПроцедуры

// ПолеТабличногоДокументаЛист04Выбор
// Обработчик события "Выбор" для листа 04_РазделА
//
Процедура ПолеТабличногоДокументаЛист04Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если (Область.Имя = "П002090003003") И (НЕ ФлажокОтклАвтоРасчет) Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли (Область.Имя = "П002090000200") И (НЕ мАвтоВыборКодов) Тогда

		СтандартнаяОбработка = Ложь;
		Список = Новый СписокЗначений;
		// Список.Добавить("","Пустое значение");
		Список.Добавить("1","1 (доход в виде процентов, полученных (начисленных) по государственным и муниципальным ценным бумагам (ставка 15 процентов)");
		Список.Добавить("2","2 (доход в виде процентов по муниципальным ценным бумагам, эмитированным на срок не менее трех лет до 1 января 2007 года (ставка 9 процентов)");
		Список.Добавить("3","3 (доход в виде процентов по государственным и муниципальным облигациям, подлежащий налогообложению (ставка 0 процентов)");
		Список.Добавить("4","4 (доход в виде дивидендов (доходов от долевого участия в иностранных организациях)  (ставка 15 процентов)");
		Список.Добавить("-1","Пустое значение");

		НайденнаяСтрока = Список.НайтиПоЗначению(Область.Значение);

		Если НайденнаяСтрока = Неопределено Тогда
			СписокЭлемент = ВыбратьИзСписка(Список);
		Иначе
			СписокЭлемент = ВыбратьИзСписка(Список,, НайденнаяСтрока);
		КонецЕсли;

		Если СписокЭлемент <> Неопределено  Тогда
			Если (Область.Значение = СписокЭлемент.Значение) Или (СписокЭлемент.Значение = "-1") Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = СписокЭлемент.Значение;
			КонецЕсли;

			Если СписокЭлемент.Значение = "1" Тогда
				мРаздел4.Области.П002090003003.Значение = 15;
			ИначеЕсли СписокЭлемент.Значение = "2" Тогда
				мРаздел4.Области.П002090003003.Значение = 9;
			ИначеЕсли СписокЭлемент.Значение = "3" Тогда
				мРаздел4.Области.П002090003003.Значение = 0;
			ИначеЕсли СписокЭлемент.Значение = "4" Тогда
				мРаздел4.Области.П002090003003.Значение = 15;
			КонецЕсли;

			Если Область.Значение = "" Тогда
				мРаздел4.Области.П002090003003.Значение = 0;
			КонецЕсли;

			РасчетЗависимыхРазделовДекларации("Лист04");
			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаЛист04Выбор

// ЗаписатьПоказательВСтруктуру
// Параметры:
//  ИмяРаздела     - имя раздела.
//  Показатель     - показатель.
//  Значение       - значение показателя.
//  СтраницаДанные - в случае, если показатель рассчитан в расчете в структуре, то передается ссылка на страницу, которая подлежит расчету
//                 если эта активная страница, то помимо записи результата вычисления в структуру, произойдет запись в табличное поле.
//
Процедура ЗаписатьПоказательВСтруктуру(ИмяРаздела, Показатель, Значение, СтраницаДанные = Неопределено)
	Перем ТаблицаСтраницРаздела;

	Если СтраницаДанные = Неопределено Тогда
		Если мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела) Тогда
			СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
			Если ТипЗнч(СтрТаблицаСтраницы.Данные) <> Тип("Структура") Тогда
				РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяРаздела, Ложь);
			КонецЕсли;

			СтрТаблицаСтраницы.Данные[Показатель] = Значение;
		КонецЕсли;
		Возврат;
	КонецЕсли;

	// Сохраним данные в переданную структуру и покажем, если лист активный.
	// Вставляе данные.
	СтраницаДанные.Данные.Вставить(Показатель, Значение);

	// Если рассчитывается активный лист, то необходимо рассчитанное значение отобразить в табличном поле.
	Если СтраницаДанные.АктивнаяСтраница Тогда
		ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела].Области[Показатель].Значение = Значение;
	КонецЕсли;

КонецПроцедуры // ЗаписатьПоказательВСтруктуру

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	// Для всех многостраничных разделов будем сразу записывать данные в структуру.

	Если (Найти(ОбластьИмя, "R") > 0) И (Найти(ОбластьИмя, "C") > 0) Тогда
		// Определяем, что это выделение ячеек.
		Возврат;
	КонецЕсли;

	МногостраничностьЕсть = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе");
	Если МногостраничностьЕсть Тогда
		ЗаписатьПоказательВСтруктуру(ИмяТекущейСтраницыПанели, Элемент.ТекущаяОбласть.Имя, Элемент.ТекущаяОбласть.Значение)
	КонецЕсли;

	Если мСтруктураПризнаковСх.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Сельхоз1 = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[мСтруктураПризнаковСх[ИмяТекущейСтраницыПанели]].Значение;
		Сельхоз = ?(Сельхоз1 = "V", Истина, Ложь);
	Иначе
		Сельхоз = Неопределено;
	КонецЕсли;

	// Показатель 031 вставим во все листы приложения 5.
	//Если (ОбластьИмя = "П002050003103") И (НЕ ФлажокОтклАвтоРасчет) Тогда
	//	// Поменяем значение показателя на всех страницах многостраничного раздела приложения 5 к листу 02
	//	Для Каждого Стр Из мСтруктураМногостраничныхРазделов.Лист02_Прил5 Цикл
	//		Стр.Данные.П002050003103 = Элемент.ТекущаяОбласть.Значение;
	//	КонецЦикла;
	//КонецЕсли;

	РасчетЗависимыхРазделовДекларации(ИмяТекущейСтраницыПанели, Сельхоз, ИмяТекущейСтраницыПанели);

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ОбновитьПараметрыАвтозаполненияЯчейки();
	КонецЕсли;

	ВзаимныеПереходыПозиций(ОбластьИмя);

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

// ВзаимныеПереходыПозиций
//
Процедура ВзаимныеПереходыПозиций(ОбластьИмя)

	// Взаимные переходы
	Если ОбластьИмя = "П002000026003" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П002000027003", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П002000026003" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П002000029003", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П002020011003" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П002020020003", ОбластьИмя);
	ИначеЕсли (ОбластьИмя = "П002020010003") И (НЕ ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П002020020003", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П002030018003" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П002030019003", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П002110021003" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П002110022003", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П002060014003" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П002060015003", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П002060013003" И (НЕ ФлажокОтклАвтоРасчет) Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П002060015003", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П002110041003" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П002110042003", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П002110040003" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П002110042003", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П002120001009_3" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П002120001002_4", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П002120001009_4" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П002120001002_5", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П002120001008_3" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П002120001002_4", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П002120001008_4" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П002120001002_5", ОбластьИмя);

	КонецЕсли;

КонецПроцедуры // ВзаимныеПереходыПозиций

// ВводКода
//
Процедура ВводКода(Раздел, ОбластьИмя, ПервоначальноеЗнач, КолВоСимволов, ТекстВвода, СтандартнаяОбработка, КолВоСимволовВКвадратах = Неопределено)

	Название = СтрЗаменить(Раздел.Имя, "ПолеТабличногоДокумента", "");

	СтруктураКонтроля = Новый Структура;
	СтруктураКонтроля.Вставить("СтрокаТолькоИзЧисел", Истина);
	СтруктураКонтроля.Вставить("КонтролируемаяДлинаСтроки", КолВоСимволов);

	РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
									   , Название                   // Название раздела.
									   , ОбластьИмя                 // Имя ячейки для записи.
									   , СокрЛП(ПервоначальноеЗнач) // Первоначальное значение.
									   , КолВоСимволов              // РазмерностьЦ - возможная длинна ИННа.
									   , 0                          // РазмерностьД - требуемый тип ввода ИНН.
									   , Ложь                       // Это сумма?
									   , ТекстВвода                 // Текст ввода.
									   , ""                         // Текст выбора из таблицы значений.
									   , Неопределено               // Таблица выбора значений.
									   , Неопределено               // Строка доп. ввода.
									   , СтандартнаяОбработка       // Стандартная обработка.
									   , КолВоСимволовВКвадратах    // Кол-во квадратиков, если в квадратах
									   ,                            // Колонка поиска, если ТаблицаЗначений
									   , СтруктураКонтроля          // Структура требований ручного ввода
									   );

КонецПроцедуры // ВводКода

// РасчетЗависимыхРазделовДекларации
// Процедура рассчитывает зависимые листы декларации.
// Параметры:
//  ИмяТекущейСтраницыПанели - название раздела декларации
//  РазделВызвавшийПересчет - зарезервировано, пока не используется
//
Процедура РасчетЗависимыхРазделовДекларации(ИмяТекущейСтраницыПанели, Сельхоз = Неопределено, РазделВызвавшийПересчет = Неопределено)

	Если ИмяТекущейСтраницыПанели = "Лист02" Тогда
		Расчет("Лист02", Сельхоз);
		Расчет("Лист02_Прил5", Сельхоз);
		// Т.к. прил. 4 к листу 02 заполняется не во всех случаях, то данные в прил. 4 из листа 02 будем вставлять только
		// при изменении самого прил. 4, а не листа 02.
		Расчет("Лист02_Прил4", Сельхоз); // Строка 100 из Листа 02 в строку 140 приложения 4 листа 02.
		Расчет("Раздел1_2", Сельхоз);
		Расчет("Раздел1_1", Сельхоз);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил1" Тогда
		Расчет("Лист02_Прил1", Сельхоз);
		Расчет("Лист02", Сельхоз);
		Расчет("Лист02_Прил5", Сельхоз);
		Расчет("Раздел1_2", Сельхоз);
		Расчет("Раздел1_1", Сельхоз);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил2" Тогда
		Расчет("Лист02_Прил2", Сельхоз);
		Расчет("Лист02_Прил1", Сельхоз);
		Расчет("Лист02", Сельхоз);
		Расчет("Лист02_Прил5", Сельхоз);
		Расчет("Лист02", Сельхоз);
		Расчет("Раздел1_2", Сельхоз);
		Расчет("Раздел1_1", Сельхоз);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил3" Тогда
		Расчет("Лист02_Прил3", Сельхоз);
		Расчет("Лист02_Прил2", Сельхоз);
		Расчет("Лист02_Прил1", Сельхоз);
		Расчет("Лист02", Сельхоз);
		Расчет("Лист02_Прил5", Сельхоз);
		Расчет("Раздел1_2", Сельхоз);
		Расчет("Раздел1_1", Сельхоз);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил4" Тогда
		Расчет("Лист02_Прил4", Сельхоз);
		Расчет("Лист02", Сельхоз);
		Расчет("Лист02_Прил5", Сельхоз);
		Расчет("Раздел1_2", Сельхоз);
		Расчет("Раздел1_1", Сельхоз);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_Прил5" Тогда
		Расчет("Лист02_Прил5", Сельхоз);
		Расчет("Лист02", Сельхоз);
		Расчет("Лист02_Прил5", Сельхоз);
		Расчет("Раздел1_2", Сельхоз);
		Расчет("Раздел1_1", Сельхоз);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист05" Тогда
		Расчет("Лист05", Сельхоз);
		Расчет("Лист02", Сельхоз);
		Расчет("Лист02_Прил4", Сельхоз);
		Расчет("Лист02_Прил5", Сельхоз);
		Расчет("Раздел1_2", Сельхоз);
		Расчет("Раздел1_1", Сельхоз);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист06" Тогда
		Расчет("Лист06", Сельхоз);
		Расчет("Лист02_Прил4", Сельхоз);
		Расчет("Лист02", Сельхоз);
		Расчет("Лист02_Прил5", Сельхоз);
		Расчет("Раздел1_2", Сельхоз);
		Расчет("Раздел1_1", Сельхоз);

	ИначеЕсли ИмяТекущейСтраницыПанели <> "Титульный" Тогда

		Расчет(ИмяТекущейСтраницыПанели, Сельхоз);

	КонецЕсли;

КонецПроцедуры // РасчетЗависимыхРазделовДекларации

// ПолучитьИННКПП
//
Процедура ПолучитьИННКПП()

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ИННЮЛ, КППЮЛ, ТелОрганизации");

	ИННЮЛ = "";
	КППЮЛ = "";
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);

	Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, " ");
	Иначе
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, "0");
	КонецЕсли;

	КППЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(КППЮЛ, 9, " ");

	мИННЮЛ = ИННЮЛ;
	мКППЮЛ = КППЮЛ;

	мТелОрганизации = "";
	ОргСведения.Свойство("ТелОрганизации", мТелОрганизации);

КонецПроцедуры // ПолучитьИННКПП

// ВозможнаОшибкаВвода
//
Функция ВозможнаОшибкаВвода(Знач Сумма, Знач ТекстПараметр)

	Если НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(Сумма) Тогда
		Возврат Ложь;
	КонецЕсли;

	СтрокаФорматаЯчейки = СтрЗаменить(мСтрокаФормата, "; ЧН=-", "");
	СтрокаФорматаЯчейки = СтрокаФорматаЯчейки + "; ЧГ=0";
	СуммаКакНаЛистеДекларации = Формат(Сумма, СтрокаФорматаЯчейки);

	Сумма = Модуль(Сумма);
	СуммаЦелСтр = Строка(Цел(Сумма));
	СуммаЦелСтр = СтрЗаменить(СуммаЦелСтр, Символ(160), "");
	СуммаДрСтр = Сред(Строка(Сумма - Цел(Сумма)),3);
	СуммаОбщКакЕсть = СуммаЦелСтр + ?(СуммаДрСтр <> "0", СуммаДрСтр, "");

	СтруктураСумм = Новый Структура("Сумма1, Сумма2", СуммаОбщКакЕсть, СуммаКакНаЛистеДекларации);

	РезультатГлоб = Ложь;
	Для Каждого Стр Из СтруктураСумм Цикл

		СуммаОбщ = Стр.Значение;
		Если СтрДлина(СуммаОбщ) < 9 Тогда
			Продолжить; // Не проверяем такие показатели
		КонецЕсли;

		Если ТипЗнч(ТекстПараметр) = Тип("Строка") Тогда

			Если СтрДлина(ТекстПараметр) = 12 И Найти(ТекстПараметр, "00") = 1 Тогда
				// Делаем предположение, что данный параметр ИНН, с лидирующими нулями.
				ТекстПараметр = Сред(ТекстПараметр, 3);
			КонецЕсли;

			Если Найти(ТекстПараметр, СуммаОбщ) > 0 Тогда
				РезультатГлоб = Истина;
				Прервать;
			Иначе
				РезультатГлоб = Ложь;
			КонецЕсли;

		Иначеесли ТипЗнч(ТекстПараметр) = Тип("Структура") Тогда
			Результат = Ложь;
			Для Каждого Стр Из ТекстПараметр Цикл

				ЗначениеИзСтруктуры = Стр.Значение;

				Если (Найти(Стр.Ключ, "ИНН") > 0) И Найти(ЗначениеИзСтруктуры, "00") = 1 Тогда
					// Делаем предположение, что данный параметр ИНН, с лидирующими нулями.
					ЗначениеИзСтруктуры = Сред(ЗначениеИзСтруктуры, 3);
				КонецЕсли;
				
				Если Найти(ЗначениеИзСтруктуры, СуммаОбщ) > 0 Тогда
					Результат = Истина;
					РезультатГлоб = Истина;
					Прервать;
				Иначе
					Результат = Ложь;
					РезультатГлоб = Ложь;
				КонецЕсли;

			КонецЦикла;

			Если Результат Тогда
				Прервать;
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;

	Возврат РезультатГлоб;

КонецФункции // ВозможнаОшибкаВвода

// ПроверкаВводаДанных
//
// Параметры:
// ВыводитьСообщения - выводить сообщения
// НазваниеРаздела   - название раздела декларации или пусто - все листы
//
// Возвращаемое значение:
// Массив с текстами ошибок
//
Функция ПроверкаВводаДанных(ВыводитьСообщения, НазваниеРаздела = "")

	Результат = Новый Массив;

	ОбновитьСтруктуруМногостраничныхРазделов();

	Если НазваниеРаздела = "Раздел1_1" Или НазваниеРаздела = "" Тогда
		// Раздел не многостраничный!
		Результат = ПроверкаРаздела1_1(ВыводитьСообщения);
	КонецЕсли;

	Если НазваниеРаздела = "Раздел1_2" Или НазваниеРаздела = "" Тогда
		// Раздел не многостраничный!
		Ошибки = ПроверкаРаздела1_2(ВыводитьСообщения);

		Для каждого Стр из Ошибки Цикл
			Результат.Добавить(Стр);
		КонецЦикла;

	КонецЕсли;

	Если НазваниеРаздела = "Раздел1_3" Или НазваниеРаздела = "" Тогда
		// Раздел многостраничный!
		Ошибки = ПроверкаРаздела1_3(ВыводитьСообщения);

		Для каждого Стр из Ошибки Цикл
			Результат.Добавить(Стр);
		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверкаВводаДанных

// ПроверкаРаздела1_1
//
Функция ПроверкаРаздела1_1(ВыводитьСообщения)

	Результат = Новый Массив;

	// ***
	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("КБК1", мКБКвФБРаздел1_1);
	СтруктураПроверки.Вставить("КБК2", мКБКвБСРаздел1_1);
	СтруктураПроверки.Вставить("КБК3", мКБКвМБРаздел1_1);

	СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_1);
	СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
	СтруктураПроверки.Вставить("КПП", мКППЮЛ);

	Если ВозможнаОшибкаВвода(мСуммаДоплФедРаздел1_1, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, вместо суммы налога по строке 040 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаУменФедРаздел1_1, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, вместо суммы налога по строке 050 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаПерехФедРаздел1_1, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, вместо суммы налога по строке 051 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаДоплСубРаздел1_1, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, вместо суммы налога по строке 070 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаУменСубРаздел1_1, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, вместо суммы налога по строке 080 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаПерехСубРаздел1_1, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, вместо суммы налога по строке 081 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаПерехМестРаздел1_1, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, вместо суммы налога по строке 091 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВыводитьСообщения Тогда
		Для Каждого Стр Из Результат Цикл
			Сообщить(Стр, СтатусСообщения.Важное);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверкаРаздела1_1

// ПроверкаРаздела1_2
//
Функция ПроверкаРаздела1_2(ВыводитьСообщения)

	Результат = Новый Массив;

	// ***
	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("КБК1", мКБКвФБРаздел1_2);
	СтруктураПроверки.Вставить("КБК2", мКБКвБСРаздел1_2);
	СтруктураПроверки.Вставить("ОКАТО", мКодОкатоРаздел1_2);
	СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
	СтруктураПроверки.Вставить("КПП", мКППЮЛ);

	Если ВозможнаОшибкаВвода(мСуммаФедПоСроку1Раздел1_2, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, в разделе 1.2, вместо суммы налога по строке 120 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаФедПоСроку2Раздел1_2, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, в разделе 1.2, вместо суммы налога по строке 130 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаФедПоСроку3Раздел1_2, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, в разделе 1.2, вместо суммы налога по строке 140 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаСубПоСроку1Раздел1_2, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, в разделе 1.2, вместо суммы налога по строке 220 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаСубПоСроку2Раздел1_2, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, в разделе 1.2, вместо суммы налога по строке 230 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВозможнаОшибкаВвода(мСуммаСубПоСроку3Раздел1_2, СтруктураПроверки) Тогда
		Результат.Добавить("Внимание! Возможно, в разделе 1.2, вместо суммы налога по строке 240 указан КБК, код ОКАТО, ИНН или КПП");
	КонецЕсли;

	Если ВыводитьСообщения Тогда
		Для Каждого Стр Из Результат Цикл
			Сообщить(Стр, СтатусСообщения.Важное);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверкаРаздела1_2

// ПроверкаРаздела1_3
//
Функция ПроверкаРаздела1_3(ВыводитьСообщения)

	Результат = Новый Массив;

	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("ИНН", мИННЮЛ);
	СтруктураПроверки.Вставить("КПП", мКППЮЛ);

	НомерЛиста = 1;
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов.Раздел1_3 Цикл

		СтруктураПроверки.Вставить("КБК", Страница.Данные.КБКРаздел1_3);
		СтруктураПроверки.Вставить("ОКАТО", Страница.Данные.КодОкатоРаздел1_3);

		Если ВозможнаОшибкаВвода(Страница.Данные.СуммаНалога1Раздел1_3, СтруктураПроверки) Тогда
			Результат.Добавить("Внимание! Возможно, в разделе 1.3, страница " + Строка(НомерЛиста) + ", вместо суммы налога по строке 040  указан КБК, код ОКАТО, ИНН или КПП");
		КонецЕсли;

		Если ВозможнаОшибкаВвода(Страница.Данные.СуммаНалога2Раздел1_3, СтруктураПроверки) Тогда
			Результат.Добавить("Внимание! Возможно, в разделе 1.3, страница " + Строка(НомерЛиста) + ", вместо суммы налога по строке 060  указан КБК, код ОКАТО, ИНН или КПП");
		КонецЕсли;

		Если ВозможнаОшибкаВвода(Страница.Данные.СуммаНалога3Раздел1_3, СтруктураПроверки) Тогда
			Результат.Добавить("Внимание! Возможно, в разделе 1.3, страница " + Строка(НомерЛиста) + ", вместо суммы налога по строке 080  указан КБК, код ОКАТО, ИНН или КПП");
		КонецЕсли;

		Если ВозможнаОшибкаВвода(Страница.Данные.СуммаНалога4Раздел1_3, СтруктураПроверки) Тогда
			Результат.Добавить("Внимание! Возможно, в разделе 1.3, страница " + Строка(НомерЛиста) + ", вместо суммы налога по строке 100  указан КБК, код ОКАТО, ИНН или КПП");
		КонецЕсли;

		Если ВозможнаОшибкаВвода(Страница.Данные.СуммаНалога5Раздел1_3, СтруктураПроверки) Тогда
			Результат.Добавить("Внимание! Возможно, в разделе 1.3, страница " + Строка(НомерЛиста) + ", вместо суммы налога по строке 120  указан КБК, код ОКАТО, ИНН или КПП");
		КонецЕсли;

		НомерЛиста = НомерЛиста + 1;
	КонецЦикла;

	Если ВыводитьСообщения Тогда
		Для Каждого Стр Из Результат Цикл
			Сообщить(Стр, СтатусСообщения.Важное);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверкаРаздела1_3

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ СООТНООШЕНИЙ В ДЕКЛАРАЦИИ
///////////////////////////////////////////////////////////////////////////////

// ПроверитьСоотношенияПоказателей
// Функция перенаправляет вызовы от обработки соотношений.
//
Функция ПроверитьСоотношенияПоказателей(НазваниеОбработки, ОбъектКС, СтруктураПараметров) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);
	Результат = СтруктураРезультата;

	Если НазваниеОбработки = "ПрибыльПроверитьПоказательПоСтроке230Листа02" Тогда
		Результат = ПрибыльПроверитьПоказательПоСтроке230Листа02(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПрибыльПроверитьРаздел1ПоказателиВФБ" Тогда
		Результат = ПрибыльПроверитьРаздел1ПоказателиВФБ(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПрибыльПроверитьРаздел1Показатель070" Тогда
		Результат = ПрибыльПроверитьРаздел1Показатель070(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПрибыльПроверитьРаздел1Показатель080" Тогда
		Результат = ПрибыльПроверитьРаздел1Показатель080(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПрибыльПроверитьРаздел1Показатель081" Тогда
		Результат = ПрибыльПроверитьРаздел1Показатель081(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПрибыльПроверитьРаздел1Показатель091" Тогда
		Результат = ПрибыльПроверитьРаздел1Показатель091(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПрибыльПроверитьЛист02НаЗаполнение" Тогда
		Результат = ПрибыльПроверитьЛист02НаЗаполнение(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПрибыльПроверитьРаздел12НаЗаполнение" Тогда
		Результат = ПрибыльПроверитьРаздел12НаЗаполнение(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПрибыльПроверитьРаздел12ВсеПоказатели" Тогда
		Результат = ПрибыльПроверитьРаздел12ВсеПоказатели(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПрибыльПроверитьПриложение4НаЗаполнение" Тогда
		Результат = ПрибыльПроверитьПриложение4НаЗаполнение(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПрибыльПроверитьПриложение5НаЗаполнение" Тогда
		Результат = ПрибыльПроверитьПриложение5НаЗаполнение(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПрибыльПроверитьПриложение5Строка050" Тогда
		Результат = ПрибыльПроверитьПриложение5Строка050(ОбъектКС, СтруктураПараметров);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьСоотношенияПоказателей

// ПрибыльПроверитьПоказательПоСтроке230Листа02 -  ОткрытьРаздел
// Функция выполняет проверку листа 02 с признаком СХ и без.
// В случае, если в листе 02 нет проверяемого признака с левой стороны, формула пропускается
// Параметры:
//  ОтчетныйПериод   - структура, период отчета, датанач и датакон
//  ТаблицаПодоходящихДокументов - таблица документов для проверки.
//  Формула                      - формула, итоговая формула.
//  ОписаниеОшибки               - строка, описание ошибки.
//  СтрокаНастройки              - ссылка на таблицу формул.
//
// Возвращаемое значение:
//  Структура результата.
//
Функция ПрибыльПроверитьПоказательПоСтроке230Листа02(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ТребуемыйРаздел = "Лист02";
	КоммКОшибке = "Для налогоплательщиков, имеющих обособленные подразделения, показатель по строке 230 Листа 02 в целом по организации должен быть равен сумме показателей строк 080 Приложений № 5 к Листу 02 по каждому обособленному подразделению, по организации без входящих в нее обособленных подразделений или по группе обособленных подразделений, находящихся на территории одного субъекта РФ.";

	// Таблица условий
	ТаблСх = Новый ТаблицаЗначений;
	ТаблСх.Колонки.Добавить("Показатель");
	ТаблСх.Колонки.Добавить("ЛогическийЗнак");
	ТаблСх.Колонки.Добавить("ЗначениеПоказателя");

	// Стока условия для листа 02, с условием С/х.
	НовСтр = ТаблСх.Добавить();
	НовСтр.Показатель = "П002000000100";
	НовСтр.ЛогическийЗнак = "=";
	НовСтр.ЗначениеПоказателя = "V";

	// Стока условия для листа 02, БЕЗ условием С/х.
	ТаблНеCх = ТаблСх.Скопировать();
	ТаблНеCх[0].ЛогическийЗнак = "<>";

	// Стока условия для листа Приложение 5 к листу 02, с условием С/х И (вторая строка) РАСЧЕТ составлен всё кроме признака 3 - ликвидированные, по аналогии с расчетов в декларации.
	ТаблОбособСх = ТаблСх.Скопировать();
	ТаблОбособСх[0].Показатель = "П002050000100";
	ТаблОбособСх[0].ЛогическийЗнак = "=";
	ТаблОбособСх[0].ЗначениеПоказателя = "V";
	НовСтр = ТаблОбособСх.Добавить();
	НовСтр.Показатель = "П002050000200";
	НовСтр.ЛогическийЗнак = "<>";
	НовСтр.ЗначениеПоказателя = "3";

	// Стока условия для листа Приложение 5 к листу 02, с условием БЕЗ С/х И (вторая строка) РАСЧЕТ составлен всё кроме признака 3 - ликвидированные, по аналогии с расчетов в декларации.
	ТаблОбособ = ТаблОбособСх.Скопировать();
	ТаблОбособ[0].ЛогическийЗнак = "<>";

	// Стандартный цикл перебора документов.
	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;

		// Если выбран параметр По месту обособленного подразделения.
		Если Док.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.ТипОрг2 = "V" Тогда
			ПоМестуНахожденияОрганизации = Ложь;
		Иначе
			ПоМестуНахожденияОрганизации = Истина;
		КонецЕсли;

		// Лист 02 не заполняется
		Если НЕ ПоМестуНахожденияОрганизации Тогда
			Продолжить;
		КонецЕсли;

		ДанныеМногостраничныхРазделов = Неопределено;
		// Получим все многостраничные разделы этого документа.
		Если НЕ Док.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
			Возврат СтруктураРезультата;
		КонецЕсли;

		ТаблицаМногостраничногоДокумента = Неопределено;

		Если НЕ ДанныеМногостраничныхРазделов.Свойство(ТребуемыйРаздел, ТаблицаМногостраничногоДокумента) Тогда
			Возврат СтруктураРезультата;
		КонецЕсли;

		НомерЛиста = 0;

		Для Каждого Стр1 из ТаблицаМногостраничногоДокумента Цикл

			НомерЛиста = ТаблицаМногостраничногоДокумента.Индекс(Стр1) + 1;

			// СчетчикТипа = 1; -  Лист сельскохоз.
			// СчетчикТипа = 2; -  НеСельхоз.
			Для СчетчикТипа = 1 По 2 Цикл

				ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
				ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ОбработкаКС.ПолучитьНазваниеВыполняемойФормулы(СтрокаНастройки));

				КолвоНеНайденныхПоказателей = 0;
				ПрерватьВыполнениеФормулы = Ложь; // Признак прерывания формулы и выход на уровень вверх.
				// Причины прерывания формул: 1. Не найдено первое значение в формуле (левая часть) используется в декларации по прибыли.

				ПроверяетсяЛистСх = Ложь;

				Значение = ОбработкаКС.ПолучитьИзОпределенногоДокумента(Док
														  , "П002000023003"
														  , Ложь // поиск по обычным листам.
														  , Истина // поиска по многостраничным
														  , 1 // признак наличия условия
														  , Истина
														  , ?(СчетчикТипа = 1, ТаблСх, ТаблНеCх) // Таблица условий, для не сельхоз. листа
														  , "И"
														  , "Лист02" // название раздела многостраничного документа
														  , НомерЛиста - 1);

				ДополнительныеВозможности = Неопределено;
				Если Значение = Неопределено Тогда
					ДополнительныеВозможности = "ВывестиТекстОтчетНеОткрывать:Требуемый показатель в отчете отсутствует. Возможно, что необходимо получить значение показателя с условиями, которые не выполнены.";
					// Не будем обрабатывать вариант, когда в левой чсти условия показателя нет вообще на листе.
					Продолжить;
				КонецЕсли;

				Значение = ?(Значение = Неопределено, 0, Значение);

				Если СчетчикТипа = 1 Тогда
					ДляПоискаПредставления = "РегламентированныйОтчетПрибыль.П002000023003[П002000000100 = ""V""]";
				Иначе
					ДляПоискаПредставления = "РегламентированныйОтчетПрибыль.П002000023003[П002000000100 <> ""V""]";
				КонецЕсли;

				НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.мТекстыПоказателей.Найти(ДляПоискаПредставления, "Показатель").ЯвныйТекст);

				Если НомерЛиста >= 999 Тогда
					НомерСтр = Формат(НомерЛиста, "ЧГ=0");
				Иначе
					НомерСтр = Строка(НомерЛиста);
				КонецЕсли;

				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П002000023003", НазваниеПоказателя, Значение, Формула, Стр.СсылкаНаРО, "Лист02", ДополнительныеВозможности, НомерСтр);

				ЗначСтр = Формат(Значение, "ЧРД=.;ЧН=0");
				Если СчетчикТипа = 1 Тогда
					ТаблицаУслПрил5 = ТаблОбособСх.Скопировать();
				Иначе
					ТаблицаУслПрил5 = ТаблОбособ.Скопировать();
				КонецЕсли;

				РезультатПрил5КЛисту02 = 0;
				РезультатПрил5КЛисту02Стр = "";
				Для каждого СтраницаПриложения5 Из ДанныеМногостраничныхРазделов.Лист02_Прил5 Цикл
					Прил5Инд = ДанныеМногостраничныхРазделов.Лист02_Прил5.Индекс(СтраницаПриложения5) + 1;

					П002050008003 = ОбработкаКС.ПолучитьИзОпределенногоДокумента(Док
															  , "П002050008003"
															  , Ложь // поиск по обычным листам.
															  , Истина // поиска по многостраничным
															  , 1 // признак наличия условия
															  , Истина
															  , ТаблицаУслПрил5 // Таблица условий, для не сельхоз. листа
															  , "И"
															  , "Лист02_Прил5" // название раздела многостраничного документа
															  , Прил5Инд - 1);
					// Если значения нет, того преобразуем неопределено в 0. Как в расчете().

					ДополнительныеВозможности = Неопределено;
					Если П002050008003 = Неопределено Тогда
						ДополнительныеВозможности = "ВывестиТекстОтчетНеОткрывать:Требуемый показатель в отчете отсутствует. Возможно, что необходимо получить значение показателя с условиями, которые не выполнены.";
						Продолжить; // Также пропустим, чтобы в расшифровки не было лишних нулей, которые не о чем не свидетельствуют.
					КонецЕсли;

					П002050008003 = ?(П002050008003 = Неопределено, 0, П002050008003);
					П002050008003Стр = Формат(П002050008003, "ЧРД=.;ЧН=0");

					Если СчетчикТипа = 1 Тогда
						ДляПоискаПредставления = "РегламентированныйОтчетПрибыль.П002050008003[П002050000100 = ""V"" И П002050000200 <> ""3""]";
					Иначе
						ДляПоискаПредставления = "РегламентированныйОтчетПрибыль.П002050008003[П002050000100 <> ""V"" И П002050000200 <> ""3""]";
					КонецЕсли;

					НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.мТекстыПоказателей.Найти(ДляПоискаПредставления, "Показатель").ЯвныйТекст);

					Если Прил5Инд >= 999 Тогда
						НомерСтр = Формат(Прил5Инд, "ЧГ=0");
					Иначе
						НомерСтр = Строка(Прил5Инд);
					КонецЕсли;

					ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П002050008003", НазваниеПоказателя, П002050008003, Формула, Стр.СсылкаНаРО, "Лист02_Прил5", ДополнительныеВозможности, НомерСтр);

					РезультатПрил5КЛисту02 = РезультатПрил5КЛисту02 + П002050008003;
					РезультатПрил5КЛисту02Стр = РезультатПрил5КЛисту02Стр + ?(ПустаяСтрока(РезультатПрил5КЛисту02Стр), "", " + ") + ?(П002050008003 < 0, "(" + П002050008003Стр + ")", П002050008003Стр);

				КонецЦикла; // Перебор Приложения 5 к листу 02

				Если РезультатПрил5КЛисту02 <> 0 И Значение <> РезультатПрил5КЛисту02 Тогда
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					ЭтоОшибка = Истина;
				Иначе
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					ЭтоОшибка = Ложь;
				КонецЕсли;

				Расшифровка = ЗначСтр + " Итог [" + ЗначСтр + "] = " + ?(РезультатПрил5КЛисту02Стр = "", "0", РезультатПрил5КЛисту02Стр) + " Итог [" + Формат(РезультатПрил5КЛисту02, "ЧРД=.;ЧН=0") + "].";

				// Все проверяемые листы будут сорханяться результат проверки, для того чтобы была возможность отобразить соотношения в многостраничных
				// разделах, которые выполнялись без ошибок.

				Расшифровка = ОбработкаКС.УбратьСлужебныеОператоры(Расшифровка);
				СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОписаниеОшибки);
				СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
				СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
				СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
			КонецЦикла; // Сельхоз не сельхов.

		КонецЦикла; // По требуемой странице документа.

	КонецЦикла; // Перебор документов.

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПрибыльПроверитьПоказательПоСтроке230Листа02

// ПрибыльПроверитьРаздел1ПоказателиВФБ -  ОткрытьРаздел
// Функция выполняет проверку Раздела 1 декларации по налогу на прибыль.
// Параметры:
//  ОтчетныйПериод   - структура, период отчета, датанач и датакон
//  ТаблицаПодоходящихДокументов - таблица документов для проверки.
//  Формула                      - формула, итоговая формула.
//  ОписаниеОшибки               - строка, описание ошибки.
//  СтрокаНастройки              - ссылка на таблицу формул.
//
// Возвращаемое значение:
//  Структура результата.
//
Функция ПрибыльПроверитьРаздел1ПоказателиВФБ(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ТребуемыйРаздел = "Лист02";
	КоммКОшибке = "";

	СтруктураПроверяемыхПок = Новый Структура;

	// В данной структуре описываются показатели которые необходимо проверить и показатели, которые участвуют в проверки, а также названия формулы в целом.
	СтруктураПроверяемыхПок.Вставить("СуммаДоплФедРаздел1_1", Новый Структура("П002000019003, П002000022003, П002000025003, Название, НазвДляРасшифровки", 0,0,0, "Сумма налога к доплате в ФБ (Раздел 1.1, строка 040) должна быть равна", "ПроверкаСтроки040Раздела1"));
	СтруктураПроверяемыхПок.Вставить("СуммаУменФедРаздел1_1", Новый Структура("П002000022003, П002000025003, П002000019003, Название, НазвДляРасшифровки", 0,0,0, "Сумма налога к уменьшению в ФБ (Раздел 1.1, строка 050) должна быть равна", "ПроверкаСтроки050Раздела1"));
	СтруктураПроверяемыхПок.Вставить("СуммаПерехФедРаздел1_1", Новый Структура("П002000032003, Название, НазвДляРасшифровки", 0, "Сумма налога с налоговой базы переходного периода в ФБ (Раздел 1.1, строка 051) должна быть равна", "ПроверкаСтроки051Раздела1"));

	НП = ОбработкаКС.мФормаОтчета.ЭтоНалоговыйПериод(ОбработкаКС.СохраненныйДокумент.Организация, ОбработкаКС.Сохраненныйдокумент.ДатаПодписи, ОбработкаКС.Сохраненныйдокумент.ДатаОкончания);

	// Стандартный цикл перебора документов.
	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;

		Если Док.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.ТипОрг2 = "V" Тогда
			ПоМестуНахожденияОрганизации = Ложь;
		Иначе
			ПоМестуНахожденияОрганизации = Истина;
		КонецЕсли;

		// Признак есть обособленные подразделения или нет, берем из сохраненного параметра в декларации, как она была сохранена.
		ЕстьОбособленныеПодразделения = Док.ЕстьОбособленныеПодразделения;

		// Проверм 6 показателей в разделе 1.1.
		Для каждого Показатель Из СтруктураПроверяемыхПок Цикл
			// Зарегистрируем проверяемую формулу.
			ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
			НазваниеПроверяемыхСоотношений = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.мТекстыПоказателей.Найти(Показатель.Значение.НазвДляРасшифровки, "Показатель").ЯвныйТекст);
			ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(НазваниеПроверяемыхСоотношений);

			ЛеваяЧасть = Док.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1_1[Показатель.Ключ];
			ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0;ЧО=0");
			НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.ПолучитьНазваниеЧастногоПоказателя(Показатель.Ключ, "РегламентированныйОтчетПрибыль"));
			ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(Показатель.Ключ, НазваниеПоказателя, ЛеваяЧасть, Формула, Стр.СсылкаНаРО, "Раздел1_1");

			СуммаНалогаФедерал = 0;
			СуммаНалогаФедералРасш = "";

			СуммаАвансовФедерал = 0;
			СуммаАвансовФедералРасш = "";

			СуммаЗасчитФедерал = 0;
			СуммаЗасчитФедералРасш = "";

			СуммаПереходФедерал = 0;
			СуммаПереходФедералРасш = "";

			// Переменные, итоги по которым нужно собрать.
			СтруктураПеременныхУчаствующихВФормулеПоказателей = Показатель.Значение;
			Для Страница = 0 По Док.ДанныеМногостраничныхРазделов.Лист02.Количество() - 1 Цикл

				Для каждого Переменная Из СтруктураПеременныхУчаствующихВФормулеПоказателей Цикл
					Если Переменная.Ключ = "Название" Или Переменная.Ключ = "НазвДляРасшифровки" Тогда
						Продолжить;
					КонецЕсли;

					Значение = ОбработкаКС.ПолучитьИзОпределенногоДокумента(Док
														  , Переменная.Ключ
														  , Ложь // поиск по обычным листам.
														  , Истина // поиска по многостраничным
														  , 0 // признак наличия условия
														  , Истина
														  , Неопределено // Таблица условий, для не сельхоз. листа
														  , "И"
														  , "Лист02" // название раздела многостраничного документа
														  , Страница);

					НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.ПолучитьНазваниеЧастногоПоказателя(Переменная.Ключ, "РегламентированныйОтчетПрибыль"));
					ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(Переменная.Ключ, НазваниеПоказателя, Значение, Формула, Стр.СсылкаНаРО, "Лист02", Неопределено, Формат(Страница + 1, "ЧРД=.;ЧН=0"));

					Если Переменная.Ключ = "П002000019003" Тогда
						СуммаНалогаФедерал = СуммаНалогаФедерал + Значение;
						СуммаНалогаФедералРасш = ?(СуммаНалогаФедералРасш = "", "", СуммаНалогаФедералРасш + " + ") + Формат(Значение, "ЧРД=.;ЧН=0;ЧО=0");
					ИначеЕсли Переменная.Ключ = "П002000022003" Тогда
						СуммаАвансовФедерал = СуммаАвансовФедерал + Значение;
						СуммаАвансовФедералРасш = ?(СуммаАвансовФедералРасш = "", "", СуммаАвансовФедералРасш + " + ") + Формат(Значение, "ЧРД=.;ЧН=0;ЧО=0");
					ИначеЕсли Переменная.Ключ = "П002000025003" Тогда
						СуммаЗасчитФедерал = СуммаЗасчитФедерал + Значение;
						СуммаЗасчитФедералРасш = ?(СуммаЗасчитФедералРасш = "", "", СуммаЗасчитФедералРасш + " + ") + Формат(Значение, "ЧРД=.;ЧН=0;ЧО=0");
					ИначеЕсли Переменная.Ключ = "П002000032003" Тогда
						СуммаПереходФедерал = СуммаПереходФедерал + Значение;
						СуммаПереходФедералРасш = ?(СуммаПереходФедералРасш = "", "", СуммаПереходФедералРасш + " + ") + Формат(Значение, "ЧРД=.;ЧН=0;ЧО=0");
					КонецЕсли;
				КонецЦикла; // по структуре переменных
			КонецЦикла; // По страницам листа 02

			ТекстыФормул = Новый Структура;
			ТекстыФормул.Вставить("ПредставлениеФормулы", "");

			Если (Показатель.Ключ = "СуммаПерехФедРаздел1_1") И (НП) Тогда
				// В этом случае, проверка показателя НЕ осуществляется, а проверка на 0 осуществляется через стандартную формулу.
				Продолжить;
			КонецЕсли;

			// ПРОВЕРКА
			Если Показатель.Ключ = "СуммаДоплФедРаздел1_1" Тогда
				ПраваяЧасть = Макс(СуммаНалогаФедерал - СуммаАвансовФедерал - СуммаЗасчитФедерал, 0);
				ПраваяЧастьПолнРасш = СуммаНалогаФедералРасш + " - " + СуммаАвансовФедералРасш + " - " + СуммаЗасчитФедералРасш;
				ТекстыФормул.Вставить("Формула", "ПроверкаСтроки040Раздела1");
			ИначеЕсли Показатель.Ключ = "СуммаУменФедРаздел1_1" Тогда
				ПраваяЧасть = Макс(СуммаАвансовФедерал + СуммаЗасчитФедерал - СуммаНалогаФедерал, 0);
				ПраваяЧастьПолнРасш = СуммаАвансовФедералРасш + " + " + СуммаЗасчитФедералРасш + " - " + СуммаНалогаФедералРасш;
				ТекстыФормул.Вставить("Формула", "ПроверкаСтроки050Раздела1");
			ИначеЕсли Показатель.Ключ = "СуммаПерехФедРаздел1_1" Тогда
				Делитель = ?(ОбработкаКС.СохраненныйДокумент.Периодичность = Перечисления.Периодичность.Месяц, 11, 3);
				ПраваяЧасть = ОбработкаКС.ПростоеОкруглениеРезультатаОтТочности(СуммаПереходФедерал / Делитель);
				ПраваяЧастьПолнРасш = СуммаПереходФедералРасш + " / " + Строка(Делитель);
				ТекстыФормул.Вставить("Формула", "ПроверкаСтроки051Раздела1");
			КонецЕсли;

			// Стандартная часть.
			ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0;ЧО=0");

			Если ЛеваяЧасть <> ПраваяЧасть Тогда
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ЭтоОшибка = Истина;
			Иначе
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				ЭтоОшибка = Ложь;
			КонецЕсли;

			Расшифровка = ЛеваяЧастьСтр + " Итог [" + ЛеваяЧастьСтр + "] = " + ?(ОбработкаКС.ВСтрокеЕстьЦифры(ПраваяЧастьПолнРасш), ПраваяЧастьПолнРасш, "0") + " Итог [" + ПраваяЧастьСтр + "]";

			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОписаниеОшибки);
			СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
			СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
			СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
			СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), НазваниеПроверяемыхСоотношений);

		КонецЦикла; // По показателям

	КонецЦикла; // Перебор документов.

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПрибыльПроверитьРаздел1ПоказателиВФБ

// ПрибыльПроверитьРаздел1Показатель070
//
Функция ПрибыльПроверитьРаздел1Показатель070(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ТребуемыйРаздел = "Лист02";
	КоммКОшибке = "";

	//СтруктураПроверяемыхПок = Новый Структура;

	// Стандартный цикл перебора документов.
	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;

		Если Док.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.ТипОрг2 = "V" Тогда
			ПоМестуНахожденияОрганизации = Ложь;
		Иначе
			ПоМестуНахожденияОрганизации = Истина;
		КонецЕсли;

		// Признак есть обособленные подразделения или нет, берем из сохраненного параметра в декларации, как она была сохранена.
		ЕстьОбособленныеПодразделения = Док.ЕстьОбособленныеПодразделения;

		ТекстФормулы = "Проверка заполнения раздела 1.1. строки 070.";
		// Определим текст проверяемых соотношений
		Если ПоМестуНахожденияОрганизации Тогда
			ТекстФормулы = ТекстФормулы + " Проверяемая декларация представляется по месту нахождения организации.";
		Иначе
			ТекстФормулы = ТекстФормулы + " Проверяемая декларация представляется по месту нахождения обособленного подразделения.";
		КонецЕсли;

		Если ЕстьОбособленныеПодразделения Тогда
			ТекстФормулы = ТекстФормулы + " У организации есть обособленные подразделения.";
		Иначе
			ТекстФормулы = ТекстФормулы + " У организации нет обособленных подразделений.";
		КонецЕсли;

		// Зарегистрируем проверяемую формулу.
		ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
		ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ТекстФормулы);

		// Получим показатель. Левая часть формулы.
		ЛеваяЧасть = ОбработкаКС.ПростоеОкруглениеРезультатаОтТочности(Док.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1_1.СуммаДоплСубРаздел1_1);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0;ЧО=0");

		// Получим название показателя.
		НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.ПолучитьНазваниеЧастногоПоказателя("СуммаДоплСубРаздел1_1", "РегламентированныйОтчетПрибыль"));

		// Зарегистрируем показатель к формуле.
		ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("СуммаДоплСубРаздел1_1", НазваниеПоказателя, ЛеваяЧасть, Формула, Стр.СсылкаНаРО, "Раздел1_1");

		НазваниеПроверяемыхСоотношений = "";

		Если НЕ ((ПоМестуНахожденияОрганизации И ЕстьОбособленныеПодразделения) Или (НЕ ПоМестуНахожденияОрганизации)) Тогда
			// Стр. 070
			СуммаНалогаСубъект = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02", "П002000020003", Ложь, Истина, Истина, Стр.СсылкаНаРО, Неопределено);
			СуммаАвансовСубъект = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02", "П002000023003", Ложь, Истина, Истина, Стр.СсылкаНаРО, Неопределено);
			СуммаЗасчитСубъект = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02", "П002000026003", Ложь, Истина, Истина, Стр.СсылкаНаРО, Неопределено);

			ПраваяЧасть = Макс(СуммаНалогаСубъект.Значение - СуммаАвансовСубъект.Значение - СуммаЗасчитСубъект.Значение, 0);
			ПраваяЧастьПолнРасш = СуммаНалогаСубъект.Расшифровка + " - " + СуммаАвансовСубъект.Расшифровка + " - " + СуммаЗасчитСубъект.Расшифровка;
			НазваниеПроверяемыхСоотношений = "РегламентированныйОтчетПрибыль.СуммаДоплСубРаздел1_1 = РегламентированныйОтчетПрибыль.П002000020003 - РегламентированныйОтчетПрибыль.П002000023003 - РегламентированныйОтчетПрибыль.П002000026003";
			НазваниеПроверяемыхСоотношений = ОбработкаКС.ПолучитьТекстовоеПредставлениеФормулы(НазваниеПроверяемыхСоотношений, ОбработкаКС.СохраненныйДокумент.ИсточникОтчета);
		Иначе

			СуммаНалогаДоплСубъект = Новый Структура("Значение, Расшифровка", 0, "0");
			СуммаНалогаУменьшСубъект = Новый Структура("Значение, Расшифровка", 0, "0");

			Если ПоМестуНахожденияОрганизации Тогда
				Если ЕстьОбособленныеПодразделения Тогда
					П002050010003Обособ = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02_Прил5", "П002050010003", Ложь, Истина, Истина, Стр.СсылкаНаРО, СформироватьТаблицуУсловий("3"));
					П002050011003Обособ = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02_Прил5", "П002050011003", Ложь, Истина, Истина, Стр.СсылкаНаРО, СформироватьТаблицуУсловий("3"));
					НазваниеПроверяемыхСоотношений = "Сумма налога к доплате в бюджет субъекта РФ (Раздел 1.1, строка 070) должна быть равна разнице между суммой по строке 100 и 110 Приложения № 5 к листу 02 листов с кодом 1 по строке 002.";
				КонецЕсли;
			Иначе
				П002050010003Обособ = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02_Прил5", "П002050010003", Ложь, Истина, Истина, Стр.СсылкаНаРО, СформироватьТаблицуУсловий("Только2и4"), "ИЛИ");
				П002050011003Обособ = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02_Прил5", "П002050011003", Ложь, Истина, Истина, Стр.СсылкаНаРО, СформироватьТаблицуУсловий("Только2и4"), "ИЛИ");
				НазваниеПроверяемыхСоотношений = "Сумма налога к доплате в бюджет субъекта РФ (Раздел 1.1, строка 070) должна быть равна разнице между суммой по строке 100 и 110 Приложения № 5 к листу 02 листов с кодом 2 и 4 по строке 002.";
			КонецЕсли;

			Если (ПоМестуНахожденияОрганизации И ЕстьОбособленныеПодразделения) Или (НЕ ПоМестуНахожденияОрганизации) Тогда
				СуммаНалогаДоплСубъект = П002050010003Обособ;
				СуммаНалогаУменьшСубъект = П002050011003Обособ;

			КонецЕсли;

			ПраваяЧасть = Макс(СуммаНалогаДоплСубъект.Значение - СуммаНалогаУменьшСубъект.Значение, 0);
			ПраваяЧастьПолнРасш = СуммаНалогаДоплСубъект.Расшифровка + " - " + СуммаНалогаУменьшСубъект.Расшифровка;

		КонецЕсли;

		// Стандартная часть.
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0;ЧО=0");

		Если ЛеваяЧасть <> ПраваяЧасть Тогда
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ЭтоОшибка = Истина;
		Иначе
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ЭтоОшибка = Ложь;
		КонецЕсли;

		Расшифровка = ЛеваяЧастьСтр + " Итог [" + ЛеваяЧастьСтр + "] = " + ?(ОбработкаКС.ВСтрокеЕстьЦифры(ПраваяЧастьПолнРасш), ПраваяЧастьПолнРасш, "0") + " Итог [" + ПраваяЧастьСтр + "]";

		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОписаниеОшибки);
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстФормулы + " " + НазваниеПроверяемыхСоотношений);

		// Т.к. название проверяемой формулы генерируется после регистрации формулы с названием, то после формирования окончательного названия
		// заменим в таблице расшифровок не полное название на новое.
		НайденнаяСтрока = ОбработкаКС.СписокРасшифровкиФормулы.Найти(ОбработкаКС.мСчетчикФормулДляРасшифровок, "Номер");
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.ТекстовоеПредставлениеФормулы = НазваниеПроверяемыхСоотношений;
		КонецЕсли;
	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПрибыльПроверитьРаздел1Показатель070

// ПрибыльПроверитьРаздел1Показатель080
//
Функция ПрибыльПроверитьРаздел1Показатель080(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ТребуемыйРаздел = "Лист02";
	КоммКОшибке = "";

	СтруктураПроверяемыхПок = Новый Структура;

	// Стандартный цикл перебора документов.
	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;

		Если Док.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.ТипОрг2 = "V" Тогда
			ПоМестуНахожденияОрганизации = Ложь;
		Иначе
			ПоМестуНахожденияОрганизации = Истина;
		КонецЕсли;

		// Признак есть обособленные подразделения или нет, берем из сохраненного параметра в декларации, как она была сохранена.
		ЕстьОбособленныеПодразделения = Док.ЕстьОбособленныеПодразделения;

		ТекстФормулы = "Проверка заполнения раздела 1.1. строки 080.";
		// Определим текст проверяемых соотношений
		Если ПоМестуНахожденияОрганизации Тогда
			ТекстФормулы = ТекстФормулы + " Проверяемая декларация представляется по месту нахождения организации.";
		Иначе
			ТекстФормулы = ТекстФормулы + " Проверяемая декларация представляется по месту нахождения обособленного подразделения.";
		КонецЕсли;

		Если ЕстьОбособленныеПодразделения Тогда
			ТекстФормулы = ТекстФормулы + " У организации есть обособленные подразделения.";
		Иначе
			ТекстФормулы = ТекстФормулы + " У организации нет обособленных подразделений.";
		КонецЕсли;

		// Зарегистрируем проверяемую формулу.
		ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
		ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ТекстФормулы);

		// Получим показатель. Левая часть формулы.
		ЛеваяЧасть = ОбработкаКС.ПростоеОкруглениеРезультатаОтТочности(Док.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1_1.СуммаУменСубРаздел1_1);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0;ЧО=0");

		// Получим название показателя.
		НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.ПолучитьНазваниеЧастногоПоказателя("СуммаУменСубРаздел1_1", "РегламентированныйОтчетПрибыль"));

		// Зарегистрируем показатель к формуле.
		ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("СуммаУменСубРаздел1_1", НазваниеПоказателя, ЛеваяЧасть, Формула, Стр.СсылкаНаРО, "Раздел1_1");

		НазваниеПроверяемыхСоотношений = "";

		Если НЕ ((ПоМестуНахожденияОрганизации И ЕстьОбособленныеПодразделения) Или (НЕ ПоМестуНахожденияОрганизации)) Тогда
			// Стр. 080
			СуммаНалогаСубъект = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02", "П002000020003", Ложь, Истина, Истина, Стр.СсылкаНаРО, Неопределено);
			СуммаАвансовСубъект = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02", "П002000023003", Ложь, Истина, Истина, Стр.СсылкаНаРО, Неопределено);
			СуммаЗасчитСубъект = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02", "П002000026003", Ложь, Истина, Истина, Стр.СсылкаНаРО, Неопределено);

			ПраваяЧасть = Макс(СуммаАвансовСубъект.Значение + СуммаЗасчитСубъект.Значение - СуммаНалогаСубъект.Значение, 0);

			ПраваяЧастьПолнРасш = СуммаАвансовСубъект.Расшифровка + " + " + СуммаЗасчитСубъект.Расшифровка + " - " + СуммаНалогаСубъект.Расшифровка;
			НазваниеПроверяемыхСоотношений = "РегламентированныйОтчетПрибыль.СуммаУменСубРаздел1_1 = РегламентированныйОтчетПрибыль.П002000023003 + РегламентированныйОтчетПрибыль.П002000026003 - РегламентированныйОтчетПрибыль.П002000020003";
			НазваниеПроверяемыхСоотношений = ОбработкаКС.ПолучитьТекстовоеПредставлениеФормулы(НазваниеПроверяемыхСоотношений, ОбработкаКС.СохраненныйДокумент.ИсточникОтчета);
		Иначе

			СуммаНалогаДоплСубъект = Новый Структура("Значение, Расшифровка", 0, "0");
			СуммаНалогаУменьшСубъект = Новый Структура("Значение, Расшифровка", 0, "0");

			Если ПоМестуНахожденияОрганизации Тогда
				Если ЕстьОбособленныеПодразделения Тогда
					П002050011003Обособ = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02_Прил5", "П002050011003", Ложь, Истина, Истина, Стр.СсылкаНаРО, СформироватьТаблицуУсловий("3"));
					П002050010003Обособ = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02_Прил5", "П002050010003", Ложь, Истина, Истина, Стр.СсылкаНаРО, СформироватьТаблицуУсловий("3"));
					НазваниеПроверяемыхСоотношений = "Сумма налога к уменьшению в бюджет субъекта РФ (Раздел 1.1, строка 080) должна быть равна разнице между суммой по строке 110 и 100 Приложения № 5 к листу 02 листов с кодом 1 по строке 002.";
				КонецЕсли;
			Иначе
				П002050011003Обособ = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02_Прил5", "П002050011003", Ложь, Истина, Истина, Стр.СсылкаНаРО, СформироватьТаблицуУсловий("Только2и4"), "ИЛИ");
				П002050010003Обособ = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02_Прил5", "П002050010003", Ложь, Истина, Истина, Стр.СсылкаНаРО, СформироватьТаблицуУсловий("Только2и4"), "ИЛИ");
				НазваниеПроверяемыхСоотношений = "Сумма налога к уменьшению в бюджет субъекта РФ (Раздел 1.1, строка 080) должна быть равна разнице между суммой по строке 110 и 100 Приложения № 5 к листу 02 листов с кодом 2 и 4 по строке 002.";
			КонецЕсли;

			Если (ПоМестуНахожденияОрганизации И ЕстьОбособленныеПодразделения) Или (НЕ ПоМестуНахожденияОрганизации) Тогда
				СуммаНалогаУменьшСубъект = П002050011003Обособ;
				СуммаНалогаДоплСубъект = П002050010003Обособ;

			КонецЕсли;

			ПраваяЧасть = Макс(СуммаНалогаУменьшСубъект.Значение - СуммаНалогаДоплСубъект.Значение, 0);
			ПраваяЧастьПолнРасш = СуммаНалогаУменьшСубъект.Расшифровка + " - " + СуммаНалогаДоплСубъект.Расшифровка;

		КонецЕсли;

		// Стандартная часть.
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0;ЧО=0");

		Если ЛеваяЧасть <> ПраваяЧасть Тогда
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ЭтоОшибка = Истина;
		Иначе
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ЭтоОшибка = Ложь;
		КонецЕсли;

		Расшифровка = ЛеваяЧастьСтр + " Итог [" + ЛеваяЧастьСтр + "] = " + ?(ОбработкаКС.ВСтрокеЕстьЦифры(ПраваяЧастьПолнРасш), ПраваяЧастьПолнРасш, "0") + " Итог [" + ПраваяЧастьСтр + "]";

		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОписаниеОшибки);
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстФормулы + " " + НазваниеПроверяемыхСоотношений);

		// Т.к. название проверяемой формулы генерируется после регистрации формулы с названием, то после формирования окончательного названия
		// заменим в таблице расшифровок не полное название на новое.
		НайденнаяСтрока = ОбработкаКС.СписокРасшифровкиФормулы.Найти(ОбработкаКС.мСчетчикФормулДляРасшифровок, "Номер");
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.ТекстовоеПредставлениеФормулы = НазваниеПроверяемыхСоотношений;
		КонецЕсли;
	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПрибыльПроверитьРаздел1Показатель080

// ПрибыльПроверитьРаздел1Показатель081
//
Функция ПрибыльПроверитьРаздел1Показатель081(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ТребуемыйРаздел = "Лист02";
	КоммКОшибке = "";

	КолвоСроковУплаты = ?(ОбработкаКС.СохраненныйДокумент.Периодичность = Перечисления.Периодичность.Месяц, 11, 3);

	НП = ОбработкаКС.мФормаОтчета.ЭтоНалоговыйПериод(ОбработкаКС.СохраненныйДокумент.Организация, ОбработкаКС.Сохраненныйдокумент.ДатаПодписи, ОбработкаКС.Сохраненныйдокумент.ДатаОкончания);
	Если НП Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;

	// Стандартный цикл перебора документов.
	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;

		Если Док.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.ТипОрг2 = "V" Тогда
			ПоМестуНахожденияОрганизации = Ложь;
		Иначе
			ПоМестуНахожденияОрганизации = Истина;
		КонецЕсли;

		// Признак есть обособленные подразделения или нет, берем из сохраненного параметра в декларации, как она была сохранена.
		ЕстьОбособленныеПодразделения = Док.ЕстьОбособленныеПодразделения;

		ТекстФормулы = "Проверка заполнения раздела 1.1. строки 081.";
		// Определим текст проверяемых соотношений
		Если ПоМестуНахожденияОрганизации Тогда
			ТекстФормулы = ТекстФормулы + " Проверяемая декларация представляется по месту нахождения организации.";
		Иначе
			ТекстФормулы = ТекстФормулы + " Проверяемая декларация представляется по месту нахождения обособленного подразделения.";
		КонецЕсли;

		Если ЕстьОбособленныеПодразделения Тогда
			ТекстФормулы = ТекстФормулы + " У организации есть обособленные подразделения.";
		Иначе
			ТекстФормулы = ТекстФормулы + " У организации нет обособленных подразделений.";
		КонецЕсли;

		// Зарегистрируем проверяемую формулу.
		ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
		ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ТекстФормулы);

		// Получим показатель. Левая часть формулы.
		ЛеваяЧасть = ОбработкаКС.ПростоеОкруглениеРезультатаОтТочности(Док.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1_1.СуммаПерехСубРаздел1_1);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0;ЧО=0");

		// Получим название показателя.
		НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.ПолучитьНазваниеЧастногоПоказателя("СуммаПерехСубРаздел1_1", "РегламентированныйОтчетПрибыль"));

		// Зарегистрируем показатель к формуле.
		ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("СуммаПерехСубРаздел1_1", НазваниеПоказателя, ЛеваяЧасть, Формула, Стр.СсылкаНаРО, "Раздел1_1");

		НазваниеПроверяемыхСоотношений = "";

		Если НЕ ((ПоМестуНахожденияОрганизации И ЕстьОбособленныеПодразделения) Или (НЕ ПоМестуНахожденияОрганизации)) Тогда
			// Стр. 081
			СуммаПереходСубъект = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02", "П002000033003", Ложь, Истина, Истина, Стр.СсылкаНаРО, Неопределено);

			ПраваяЧасть = ОбработкаКС.ПростоеОкруглениеРезультатаОтТочности(СуммаПереходСубъект.Значение / КолвоСроковУплаты);

			ПраваяЧастьПолнРасш = СуммаПереходСубъект.Расшифровка + " / " + Строка(КолвоСроковУплаты);
			НазваниеПроверяемыхСоотношений = "РегламентированныйОтчетПрибыль.СуммаПерехСубРаздел1_1 = РегламентированныйОтчетПрибыль.П002000033003 / " + Строка(КолвоСроковУплаты);
			НазваниеПроверяемыхСоотношений = ОбработкаКС.ПолучитьТекстовоеПредставлениеФормулы(НазваниеПроверяемыхСоотношений, ОбработкаКС.СохраненныйДокумент.ИсточникОтчета);
		Иначе

			СуммаНалогаПерехСубъект = Новый Структура("Значение, Расшифровка", 0, "0");

			Если ПоМестуНахожденияОрганизации Тогда
				Если ЕстьОбособленныеПодразделения Тогда
					П002050013003Обособ = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02_Прил5", "П002050013003", Ложь, Истина, Истина, Стр.СсылкаНаРО, СформироватьТаблицуУсловий("3"));
					НазваниеПроверяемыхСоотношений = "Сумма налога с налоговой базы переходного периода в бюджет субъекта РФ (Раздел 1.1, строка 081) должна быть равна сумме по строке 130 Приложения № 5 к листу 02 листов с кодом 1 по строке 002.";

				КонецЕсли;
			Иначе
				П002050013003Обособ = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02_Прил5", "П002050013003", Ложь, Истина, Истина, Стр.СсылкаНаРО, СформироватьТаблицуУсловий("Только2и4"), "ИЛИ");
				НазваниеПроверяемыхСоотношений = "Сумма налога с налоговой базы переходного периода в бюджет субъекта РФ (Раздел 1.1, строка 081) должна быть равна сумме по строке 130 Приложения № 5 к листу 02 листов с кодом 2 и 4 по строке 002.";

			КонецЕсли;

			Если (ПоМестуНахожденияОрганизации И ЕстьОбособленныеПодразделения) Или (НЕ ПоМестуНахожденияОрганизации) Тогда
				СуммаНалогаПерехСубъект  = П002050013003Обособ;

			КонецЕсли;

			ПраваяЧасть = СуммаНалогаПерехСубъект.Значение;
			ПраваяЧастьПолнРасш = СуммаНалогаПерехСубъект.Расшифровка;

		КонецЕсли;

		// Стандартная часть.
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0;ЧО=0");

		Если ЛеваяЧасть <> ПраваяЧасть Тогда
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ЭтоОшибка = Истина;
		Иначе
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ЭтоОшибка = Ложь;
		КонецЕсли;

		Расшифровка = ЛеваяЧастьСтр + " Итог [" + ЛеваяЧастьСтр + "] = " + ?(ОбработкаКС.ВСтрокеЕстьЦифры(ПраваяЧастьПолнРасш), ПраваяЧастьПолнРасш, "0") + " Итог [" + ПраваяЧастьСтр + "]";

		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОписаниеОшибки);
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстФормулы + " " + НазваниеПроверяемыхСоотношений);

		// Т.к. название проверяемой формулы генерируется после регистрации формулы с названием, то после формирования окончательного названия
		// заменим в таблице расшифровок не полное название на новое.
		НайденнаяСтрока = ОбработкаКС.СписокРасшифровкиФормулы.Найти(ОбработкаКС.мСчетчикФормулДляРасшифровок, "Номер");
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.ТекстовоеПредставлениеФормулы = НазваниеПроверяемыхСоотношений;
		КонецЕсли;
	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПрибыльПроверитьРаздел1Показатель081

// ПрибыльПроверитьРаздел1Показатель091
//
Функция ПрибыльПроверитьРаздел1Показатель091(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ТребуемыйРаздел = "Лист02";
	КоммКОшибке = "";

	КолвоСроковУплаты = ?(ОбработкаКС.СохраненныйДокумент.Периодичность = Перечисления.Периодичность.Месяц, 11, 3);

	НП = ОбработкаКС.мФормаОтчета.ЭтоНалоговыйПериод(ОбработкаКС.СохраненныйДокумент.Организация, ОбработкаКС.Сохраненныйдокумент.ДатаПодписи, ОбработкаКС.Сохраненныйдокумент.ДатаОкончания);
	Если НП Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;

	// Стандартный цикл перебора документов.
	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;

		Если Док.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.ТипОрг2 = "V" Тогда
			ПоМестуНахожденияОрганизации = Ложь;
		Иначе
			ПоМестуНахожденияОрганизации = Истина;
		КонецЕсли;

		// Признак есть обособленные подразделения или нет, берем из сохраненного параметра в декларации, как она была сохранена.
		ЕстьОбособленныеПодразделения = Док.ЕстьОбособленныеПодразделения;

		ТекстФормулы = "Проверка заполнения раздела 1.1. строки 081.";
		// Определим текст проверяемых соотношений
		Если ПоМестуНахожденияОрганизации Тогда
			ТекстФормулы = ТекстФормулы + " Проверяемая декларация представляется по месту нахождения организации.";
		Иначе
			ТекстФормулы = ТекстФормулы + " Проверяемая декларация представляется по месту нахождения обособленного подразделения.";
		КонецЕсли;

		Если ЕстьОбособленныеПодразделения Тогда
			ТекстФормулы = ТекстФормулы + " У организации есть обособленные подразделения.";
		Иначе
			ТекстФормулы = ТекстФормулы + " У организации нет обособленных подразделений.";
		КонецЕсли;

		// Зарегистрируем проверяемую формулу.
		ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
		ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ТекстФормулы);

		// Получим показатель. Левая часть формулы.
		ЛеваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(Док.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1_1.СуммаПерехМестРаздел1_1);
		ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0;ЧО=0");

		// Получим название показателя.
		НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.ПолучитьНазваниеЧастногоПоказателя("СуммаПерехМестРаздел1_1", "РегламентированныйОтчетПрибыль"));

		// Зарегистрируем показатель к формуле.
		ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("СуммаПерехМестРаздел1_1", НазваниеПоказателя, ЛеваяЧасть, Формула, Стр.СсылкаНаРО, "Раздел1_1");

		НазваниеПроверяемыхСоотношений = "";

		Если НЕ ((ПоМестуНахожденияОрганизации И ЕстьОбособленныеПодразделения) Или (НЕ ПоМестуНахожденияОрганизации)) Тогда
			// Стр. 091
			СуммаПереходМестный = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02", "П002000034003", Ложь, Истина, Истина, Стр.СсылкаНаРО, Неопределено);

			ПраваяЧасть = ОбработкаКС.ПростоеОкруглениеРезультатаОтТочности(СуммаПереходМестный.Значение / КолвоСроковУплаты);

			ПраваяЧастьПолнРасш = СуммаПереходМестный.Расшифровка + " / " + Строка(КолвоСроковУплаты);
			НазваниеПроверяемыхСоотношений = "РегламентированныйОтчетПрибыль.СуммаПерехМестРаздел1_1 = РегламентированныйОтчетПрибыль.П002000034003 / " + Строка(КолвоСроковУплаты);
			НазваниеПроверяемыхСоотношений = ОбработкаКС.ПолучитьТекстовоеПредставлениеФормулы(НазваниеПроверяемыхСоотношений, ОбработкаКС.СохраненныйДокумент.ИсточникОтчета);
		Иначе

			СуммаНалогаПерехМестный = Новый Структура("Значение, Расшифровка", 0, "0");

			Если ПоМестуНахожденияОрганизации Тогда
				Если ЕстьОбособленныеПодразделения Тогда
					П002050014003Обособ = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02_Прил5", "П002050014003", Ложь, Истина, Истина, Стр.СсылкаНаРО, СформироватьТаблицуУсловий("3"));
					НазваниеПроверяемыхСоотношений = "Сумма налога с налоговой базы переходного периода в местный бюджет (Раздел 1.1, строка 091) должна быть равна сумме по строке 140 Приложения № 5 к листу 02 листов с кодом 1 по строке 002.";

				КонецЕсли;
			Иначе
				П002050014003Обособ = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02_Прил5", "П002050014003", Ложь, Истина, Истина, Стр.СсылкаНаРО, СформироватьТаблицуУсловий("Только2и4"), "ИЛИ");
				НазваниеПроверяемыхСоотношений = "Сумма налога с налоговой базы переходного периода в местный бюджет (Раздел 1.1, строка 091) должна быть равна сумме по строке 140 Приложения № 5 к листу 02 листов с кодом 2 и 4 по строке 002.";

			КонецЕсли;

			Если (ПоМестуНахожденияОрганизации И ЕстьОбособленныеПодразделения) Или (НЕ ПоМестуНахожденияОрганизации) Тогда
				СуммаНалогаПерехМестный  = П002050014003Обособ;

			КонецЕсли;

			ПраваяЧасть = СуммаНалогаПерехМестный.Значение;
			ПраваяЧастьПолнРасш = СуммаНалогаПерехМестный.Расшифровка;

		КонецЕсли;

		// Стандартная часть.
		ПраваяЧастьСтр = Формат(ПраваяЧасть, "ЧРД=.;ЧН=0;ЧО=0");

		Если ЛеваяЧасть <> ПраваяЧасть Тогда
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ЭтоОшибка = Истина;
		Иначе
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ЭтоОшибка = Ложь;
		КонецЕсли;

		Расшифровка = ЛеваяЧастьСтр + " Итог [" + ЛеваяЧастьСтр + "] = " + ?(ОбработкаКС.ВСтрокеЕстьЦифры(ПраваяЧастьПолнРасш), ПраваяЧастьПолнРасш, "0") + " Итог [" + ПраваяЧастьСтр + "]";

		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОписаниеОшибки);
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстФормулы + " " + НазваниеПроверяемыхСоотношений);

		// Т.к. название проверяемой формулы генерируется после регистрации формулы с названием, то после формирования окончательного названия
		// заменим в таблице расшифровок не полное название на новое.
		НайденнаяСтрока = ОбработкаКС.СписокРасшифровкиФормулы.Найти(ОбработкаКС.мСчетчикФормулДляРасшифровок, "Номер");
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.ТекстовоеПредставлениеФормулы = НазваниеПроверяемыхСоотношений;
		КонецЕсли;
	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПрибыльПроверитьРаздел1Показатель081

// ПрибыльПроверитьЛист02НаЗаполнение
// Для обособленных подразделений лист 02 заполнятся не должен
//
Функция ПрибыльПроверитьЛист02НаЗаполнение(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ТребуемыйРаздел = "Лист02";
	КоммКОшибке = "";

	//ТекстФормулы = "Проверка заполнения листа 02 для организаций, представляющих декларацию по месту нахождения обособленного подразделения.";

	// Стандартный цикл перебора документов.
	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;
		ВставитьОписание = Истина;

		Если Док.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.ТипОрг2 = "V" Тогда
			ПоМестуНахожденияОрганизации = Ложь;
		Иначе
			ПоМестуНахожденияОрганизации = Истина;
		КонецЕсли;

		// Зарегистрируем проверяемую формулу.
		ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
		ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ОбработкаКС.ПолучитьНазваниеВыполняемойФормулы(СтрокаНастройки));

		ЕстьОшибка = Ложь;
		Если ПоМестуНахожденияОрганизации Тогда
			ЕстьОшибка = Ложь;
		Иначе
			Для каждого СтраницаЛиста02 Из Док.ДанныеМногостраничныхРазделов.Лист02 Цикл
				Для каждого Показатель Из СтраницаЛиста02.Данные Цикл
					НазвПоказателя = Показатель.Ключ;
					Если (НазвПоказателя = "П002000035003")
					 Или (НазвПоказателя = "П002000029001")
					 Или (НазвПоказателя = "П002000036001")
					 Или (НазвПоказателя = "П002000038500")
					 Или (НазвПоказателя = "СобранныеДанные3901Лист2")
					 Или (НазвПоказателя = "МесяцЗптГодРаздел2")
					 Или (НазвПоказателя = "ЯвляетсяСельхоз")
					 Или (Найти(НазвПоказателя, "ИНН") > 0)
					 Или (Найти(НазвПоказателя, "КПП") > 0)
					 Или (Найти(НазвПоказателя, "НомСтр") > 0) Тогда
						Продолжить;
					КонецЕсли;

					ЗначПоказателя = Показатель.Значение;
					Если ЗначениеЗаполнено(ЗначПоказателя) Тогда
						ЕстьОшибка = Истина;
						Ном = Док.ДанныеМногостраничныхРазделов.Лист02.Индекс(СтраницаЛиста02);
						Ном = Ном + 1;
						ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(НазвПоказателя, ОбработкаКС.ПолучитьТекстовоеПредставлениеФормулы("РегламентированныйОтчетПрибыль." + НазвПоказателя, "РегламентированныйОтчетПрибыль"), ЗначПоказателя, Формула, Стр.СсылкаНаРО, "Лист02", Формат(Ном, "ЧГ=0"));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			// Если ошибок нет, проверим кол-во вставленных листов в листе 02
			Если НЕ ЕстьОшибка И Док.ДанныеМногостраничныхРазделов.Лист02.Количество() > 1 Тогда
				ЕстьОшибка = Истина;
				ВставитьОписание = Ложь;
				СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + 1 + ОбщееЧислоБезОшибок, "ЧГ=0"), "Обнаружены доп. экземпляры Листа 02, для организации являющейся обособленным подразделением.");
			КонецЕсли;
		КонецЕсли;

		Если ЕстьОшибка Тогда
			// регистрируем ошибку
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ЭтоОшибка = Истина;
		Иначе
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ЭтоОшибка = Ложь;
		КонецЕсли;

		Расшифровка = "";

		Если ВставитьОписание Тогда
			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОписаниеОшибки);
		КонецЕсли;

		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		//СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстФормулы + " " + НазваниеПроверяемыхСоотношений);

		// Т.к. название проверяемой формулы генерируется после регистрации формулы с названием, то после формирования окончательного названия
		// заменим в таблице расшифровок не полное название на новое.
		НайденнаяСтрока = ОбработкаКС.СписокРасшифровкиФормулы.Найти(ОбработкаКС.мСчетчикФормулДляРасшифровок, "Номер");
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.ТекстовоеПредставлениеФормулы = "Найдены заполненные показатели на листе 02";
		КонецЕсли;

	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПрибыльПроверитьРаздел1Показатель081

// ПрибыльПроверитьРаздел12НаЗаполнение
// Для обособленных подразделений лист 02 заполнятся не должен
//
Функция ПрибыльПроверитьРаздел12НаЗаполнение(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ТребуемыйРаздел = "Раздел1_2";
	КоммКОшибке = "";

	ПроверяемыеПоказатели = Новый Структура;
	ПроверяемыеПоказатели.Вставить("КодОкатоРаздел1_2");
	ПроверяемыеПоказатели.Вставить("СрокУплаты1Раздел1_2");
	ПроверяемыеПоказатели.Вставить("СрокУплаты2Раздел1_2");
	ПроверяемыеПоказатели.Вставить("СрокУплаты3Раздел1_2");
	ПроверяемыеПоказатели.Вставить("КБКвФБРаздел1_2");
	ПроверяемыеПоказатели.Вставить("СуммаФедПоСроку1Раздел1_2");
	ПроверяемыеПоказатели.Вставить("СуммаФедПоСроку2Раздел1_2");
	ПроверяемыеПоказатели.Вставить("СуммаФедПоСроку3Раздел1_2");
	ПроверяемыеПоказатели.Вставить("КБКвБСРаздел1_2");
	ПроверяемыеПоказатели.Вставить("СуммаСубПоСроку1Раздел1_2");
	ПроверяемыеПоказатели.Вставить("СуммаСубПоСроку2Раздел1_2");
	ПроверяемыеПоказатели.Вставить("СуммаСубПоСроку3Раздел1_2");

	// Стандартный цикл перебора документов.
	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;

		// Зарегистрируем проверяемую формулу.
		ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
		ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ОбработкаКС.ПолучитьНазваниеВыполняемойФормулы(СтрокаНастройки));

		ЕстьОшибка = Ложь;
		Строка300 = 0;
		Строка310 = 0;
		Для каждого ЭкзСтр Из Док.ДанныеМногостраничныхРазделов.Лист02 Цикл
			Строка300 = Строка300 + ЭкзСтр.Данные.П002000030003;
			Строка310 = Строка310 + ЭкзСтр.Данные.П002000031003;
		КонецЦикла;

		Строка120 = 0;
		Для каждого ЭкзСтр Из Док.ДанныеМногостраничныхРазделов.Лист02_Прил5 Цикл
			Строка120 = Строка120 + ЭкзСтр.Данные.П002050012003;
		КонецЦикла;

		Если Строка300 + Строка310 + Строка120 <> 0 Тогда
			// Если периодичность - МЕСЯЦ, то раздел 1.2 может заполнятся, иначе нет.
			ЕстьОшибка = Ложь;
		Иначе

			Для каждого Показатель Из ПроверяемыеПоказатели Цикл

				ЗначПоказателя = Док.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1_2[Показатель.Ключ];
				Если ЗначениеЗаполнено(ЗначПоказателя) Тогда
					ЕстьОшибка = Истина;
					ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(Показатель.Ключ, ОбработкаКС.ПолучитьТекстовоеПредставлениеФормулы("РегламентированныйОтчетПрибыль." + Показатель.Ключ, "РегламентированныйОтчетПрибыль"), ЗначПоказателя, Формула, Стр.СсылкаНаРО, "Раздел1_2");
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

		Если ЕстьОшибка Тогда
			// регистрируем ошибку
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			ЭтоОшибка = Истина;
		Иначе
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			ЭтоОшибка = Ложь;
		КонецЕсли;

		Расшифровка = "";

		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОписаниеОшибки);
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);

		// Т.к. название проверяемой формулы генерируется после регистрации формулы с названием, то после формирования окончательного названия
		// заменим в таблице расшифровок не полное название на новое.
		НайденнаяСтрока = ОбработкаКС.СписокРасшифровкиФормулы.Найти(ОбработкаКС.мСчетчикФормулДляРасшифровок, "Номер");
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.ТекстовоеПредставлениеФормулы = "Найдены заполненные показатели в разделе 1.2";
		КонецЕсли;

	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПрибыльПроверитьРаздел12НаЗаполнение

// ПрибыльПроверитьРаздел12ВсеПоказатели -  ОткрытьРаздел
// Функция выполняет проверку Раздела 1 декларации по налогу на прибыль.
// Параметры:
//  ОтчетныйПериод   - структура, период отчета, датанач и датакон
//  ТаблицаПодоходящихДокументов - таблица документов для проверки.
//  Формула                      - формула, итоговая формула.
//  ОписаниеОшибки               - строка, описание ошибки.
//  СтрокаНастройки              - ссылка на таблицу формул.
//
// Возвращаемое значение:
//  Структура результата.
//
Функция ПрибыльПроверитьРаздел12ВсеПоказатели(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ТребуемыйРаздел = "Раздел1_2";
	КоммКОшибке = "";

	// Стандартный цикл перебора документов.
	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;

		Если Док.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.ТипОрг2 = "V" Тогда
			ПоМестуНахожденияОрганизации = Ложь;
		Иначе
			ПоМестуНахожденияОрганизации = Истина;
		КонецЕсли;

		Строка300 = 0;
		Строка310 = 0;
		Для каждого ЭкзСтр Из Док.ДанныеМногостраничныхРазделов.Лист02 Цикл
			Строка300 = Строка300 + ЭкзСтр.Данные.П002000030003;
			Строка310 = Строка310 + ЭкзСтр.Данные.П002000031003;
		КонецЦикла;

		Строка120 = 0;
		Для каждого ЭкзСтр Из Док.ДанныеМногостраничныхРазделов.Лист02_Прил5 Цикл
			Строка120 = Строка120 + ЭкзСтр.Данные.П002050012003;
		КонецЦикла;

		ЕжемесПлатежи = Строка300 + Строка310 + Строка120;

		// Признак есть обособленные подразделения или нет, берем из сохраненного параметра в декларации, как она была сохранена.
		ЕстьОбособленныеПодразделения = Док.ЕстьОбособленныеПодразделения;

		ТекстФормулы1 = "Проверка заполнения подраздела 1.2 Раздела 1.";
		// Определим текст проверяемых соотношений
		Если ПоМестуНахожденияОрганизации Тогда
			ТекстФормулы1 = ТекстФормулы1 + " Проверяемая декларация представляется по месту нахождения организации.";
		Иначе
			ТекстФормулы1 = ТекстФормулы1 + " Проверяемая декларация представляется по месту нахождения обособленного подразделения.";
		КонецЕсли;

		Если ЕстьОбособленныеПодразделения Тогда
			ТекстФормулы1 = ТекстФормулы1 + " У организации есть обособленные подразделения.";
		Иначе
			ТекстФормулы1 = ТекстФормулы1 + " У организации нет обособленных подразделений.";
		КонецЕсли;

		ПроверкаДат = Ложь;
		// 6 показателей, 9 показателей, включая даты, строки 020, 030, 040
		Для Инд = 1 По 9 Цикл
			Если Инд >= 7 И ЕжемесПлатежи = 0  Тогда
				// Если суммы еж. платежей = 0 тогда не проверяем даты. Должны быть пустые. Если не пустые
				// То в другой проверки должна выдаваться ошибка по разделу 1.2
				Продолжить;
			КонецЕсли;
			ТекстФормулы = ТекстФормулы1;
			// Зарегистрируем счетчик проверяемых формул.
			ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
			Результат = ПолучитьЗначениеИзРаздела1_2(ОбработкаКС, Док, Стр.СсылкаНаРО, Инд);
			ЛеваяЧасть = Результат.Значение;
			ЛеваяЧастьСтр = Результат.Расшифровка;

			СуммаАвансовФедеральный = Новый Структура("Значение, Расшифровка", 0, "0");
			СуммаАвансовСубъект = Новый Структура("Значение, Расшифровка", 0, "0");

			Если Инд <= 3 Тогда
				СуммаАвансовФедеральный = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02", "П002000030003", Ложь, Истина, Истина, Стр.СсылкаНаРО, Неопределено);
				ТекстФормулы = "Проверка заполнения подраздела 1.2 Раздела 1. По строкам 120, 130, 140 подраздела 1.2 Раздела 1 отражаются суммы ежемесячных авансовых платежей, подлежащих уплате в федеральный бюджет, и определяемые как одна треть суммы, указанной по строке 300 Листа 02.";
			КонецЕсли;

			Если (Инд >= 4) И (Инд <= 6) И (ПоМестуНахожденияОрганизации) И (НЕ ЕстьОбособленныеПодразделения) Тогда
				СуммаАвансовСубъект = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02", "П002000031003", Ложь, Истина, Истина, Стр.СсылкаНаРО, Неопределено);
				ТекстФормулы = ТекстФормулы + " По строкам 220, 230, 240 отражаются суммы ежемесячных авансовых платежей, подлежащих уплате в бюджет субъекта Российской Федерации, и определяемые как одна треть суммы, указанной по строке 310 Листа 02.";
			КонецЕсли;

			Если (Инд >= 4) И (Инд <= 6) Тогда
				// Для организаций, отчитывающихся за себя, у которых нет обособленных подразделений.
				Если НЕ ПоМестуНахожденияОрганизации Тогда
					// Суммы налога, подлежащие к доплате / к уменьшению
					// в бюджет субъекта определяем по конкретному
					// обособленному подразделению.			
					               
					// Авансовые платежи по части, зачисляемой в федеральный бюджет,
					// осуществляются по месту нахождения организации.


					// Организацией, имеющей в своем составе обособленные подразделения, при представлении Декларации, в том числе по месту
					// нахождения этих обособленных подразделений (ответственных обособленных подразделений), суммы ежемесячных авансовых платежей,
					// подлежащих уплате в бюджет субъекта Российской Федерации, указываются соответственно по строкам 220 - 240 и сумма их должна
					// соответствовать строкам 120 Приложений № 5 к Листу 02.

					СуммаАвансовФедеральный = Новый Структура("Значение, Расшифровка", 0, "0");

					Строка120 = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02_Прил5", "П002050012003", Ложь, Истина, Истина, Стр.СсылкаНаРО, СформироватьТаблицуУсловий("Только2и4"), "ИЛИ");

					Если Строка120.Расшифровка = "" Тогда
						Строка120.Расшифровка = "0";
					КонецЕсли;

					СуммаАвансовСубъект     = Строка120;
					ТекстФормулы = ТекстФормулы + " Суммы ежемесячных авансовых платежей, подлежащих уплате в бюджет субъекта РФ, указываются соответственно по строкам 220 - 240 и сумма их должна соответствовать строкам 120 Приложений № 5 к Листу 02, с кодом по строке 002 равным 2 и 4.";

					ПоказыватьВРасшифровке = "Показатели по строке 120 Приложения № 5 к листу 02, с кодом по строке 002 равным 2 и 4.";

				ИначеЕсли ЕстьОбособленныеПодразделения Тогда
					// Для организаций, которые отчитываются за обособленное подразделение или за организацию, но с имеющимися обособленныеми подразделениями.
					// СуммаАвансовФедеральный = 0;
					Строка120 = ОбработкаКС.ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, "Лист02_Прил5", "П002050012003", Ложь, Истина, Истина, Стр.СсылкаНаРО, СформироватьТаблицуУсловий("3"), "И");
					Если Строка120.Расшифровка = "" Тогда
						Строка120.Расшифровка = "0";
					КонецЕсли;

					СуммаАвансовСубъект     = Строка120;
					ТекстФормулы = ТекстФормулы + " Суммы ежемесячных авансовых платежей, подлежащих уплате в бюджет субъекта РФ, указываются соответственно по строкам 220 - 240 и сумма их должна соответствовать строкам 120 Приложений № 5 к Листу 02, с кодом по строке 002 равным 1.";
					ПоказыватьВРасшифровке = "Показатели по строке 120 Приложения № 5 к листу 02, с кодом по строке 002 равным 1.";
				КонецЕсли;

			КонецЕсли;

			Если Инд <= 2 Тогда
				ПраваяЧасть = ОбработкаКС.ПростоеОкруглениеРезультатаОтТочности(СуммаАвансовФедеральный.Значение / 3);
				Если Инд = 1 Тогда
					ПраваяЧасть1 = ПраваяЧасть;
				Иначе
					ПраваяЧасть2 = ПраваяЧасть;
				КонецЕсли;
				РасшПравойЧасти = "(" + СуммаАвансовФедеральный.Расшифровка + ") / 3 Итог [" + Формат(ПраваяЧасть, "ЧРД=.;ЧН=0;ЧО=0") + "]";
				ПоказыватьВРасшифровке = "По строкам 120, 130, 140 отражаются суммы ежемесячных авансовых платежей, подлежащих уплате в федеральный бюджет, и определяемые как одна треть суммы, указанной по строке 300 Листа 02.";

			ИначеЕсли Инд = 3 Тогда
				ПраваяЧасть = Макс(СуммаАвансовФедеральный.Значение - (ПраваяЧасть1 + ПраваяЧасть2), 0 );
				РасшПравойЧасти = "(" + СуммаАвансовФедеральный.Расшифровка + ") - (" + Формат(ПраваяЧасть1, "ЧРД=.;ЧН=0;ЧО=0") + " + " + Формат(ПраваяЧасть2, "ЧРД=.;ЧН=0;ЧО=0") + ") Итог [" + Формат(ПраваяЧасть, "ЧРД=.;ЧН=0;ЧО=0") + "]";
				ПоказыватьВРасшифровке = "По строкам 120, 130, 140 отражаются суммы ежемесячных авансовых платежей, подлежащих уплате в федеральный бюджет, и определяемые как одна треть суммы, указанной по строке 300 Листа 02.";

			ИначеЕсли (Инд = 4) Или (Инд = 5) Тогда
				ПраваяЧасть = ОбработкаКС.ПростоеОкруглениеРезультатаОтТочности(СуммаАвансовСубъект.Значение / 3);
				РасшПравойЧасти = "(" + СуммаАвансовСубъект.Расшифровка + ") / 3 Итог [" + Формат(ПраваяЧасть, "ЧРД=.;ЧН=0;ЧО=0") + "]";

				Если Инд = 4 Тогда
					ПраваяЧасть4 = ПраваяЧасть;
				Иначе
					ПраваяЧасть5 = ПраваяЧасть;
				КонецЕсли;

			ИначеЕсли Инд = 6 Тогда
				ПраваяЧасть = Макс( СуммаАвансовСубъект.Значение - (ПраваяЧасть4 + ПраваяЧасть5), 0 );
				РасшПравойЧасти = "(" + СуммаАвансовСубъект.Расшифровка + ") - (" + Формат(ПраваяЧасть4, "ЧРД=.;ЧН=0;ЧО=0") + " + " + Формат(ПраваяЧасть5, "ЧРД=.;ЧН=0;ЧО=0") + ") Итог [" + Формат(ПраваяЧасть, "ЧРД=.;ЧН=0;ЧО=0") + "]";

			ИначеЕсли Инд = 7 Тогда
				ПоказыватьВРасшифровке = "Указанные периоды в подразделе 1.2 Раздела 1.";
				ДатаКонцаСледующегоКвартала = КонецКвартала(Стр.СсылкаНаРО.ДатаОкончания) + 1;
				НомерКвартала = Формат(ДатаКонцаСледующегоКвартала, "ДФ=к");
				ГодАвансов    = Год(КонецКвартала(Стр.СсылкаНаРО.ДатаОкончания) + 1);

				ПраваяЧасть = Формат(Дата(ГодАвансов, (НомерКвартала * 3) - 2, 28), "ДФ=дд.ММ.гггг");
				ПроверкаДат = Истина;
				ТекстФормулы = "Проверка строки 020 подраздела 1.2 Раздела 1. По строке 020 указывается, последний день каждого из трех сроков  уплаты ежемесячных авансовых платежей (данное сообщение не является ошибкой, в случае, если 28-е и следующие даты приходятся на выходной день).";
			ИначеЕсли Инд = 8 Тогда
				ПраваяЧасть = Формат(Дата(ГодАвансов, (НомерКвартала * 3) - 1, 28), "ДФ=дд.ММ.гггг");
				ПроверкаДат = Истина;
				ТекстФормулы = "Проверка строки 030 подраздела 1.2 Раздела 1. По строке 030 указывается, последний день каждого из трех сроков  уплаты ежемесячных авансовых платежей (данное сообщение не является ошибкой, в случае, если 28-е и следующие даты приходятся на выходной день).";
			ИначеЕсли Инд = 9 Тогда
				ПраваяЧасть = Формат(Дата(ГодАвансов, (НомерКвартала * 3),28), "ДФ=дд.ММ.гггг");
				ПроверкаДат = Истина;
				ТекстФормулы = "Проверка строка 040 подраздела 1.2 Раздела 1. По строке 040 указывается, последний день каждого из трех сроков  уплаты ежемесячных авансовых платежей (данное сообщение не является ошибкой, в случае, если 28-е и следующие даты приходятся на выходной день).";
			КонецЕсли;
			Если ПроверкаДат Тогда
				Если НЕ ЗначениеЗаполнено(ЛеваяЧасть) И ОбработкаКС.мЭтоНалоговыйПериод Тогда
					// В разделе 1.2, даты в строка 020, 030 и 040 не должны заполнятся за налоговый период. Поэтому, если они пустые, то не производим
					// сравнения с верной рассчитанной датой по 28-е число.
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			// Проверяем первые показатели.
			Если ЛеваяЧасть <> ПраваяЧасть Тогда
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ЭтоОшибка = Истина;
			Иначе
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				ЭтоОшибка = Ложь;
			КонецЕсли;

			Если ПроверкаДат Тогда
				Расшифровка = ?(НЕ ЗначениеЗаполнено(ЛеваяЧасть), "Не указана дата", ЛеваяЧасть) + " = " + ПраваяЧасть;
				Если ЭтоОшибка Тогда
					ОписаниеОшибки = "По строкам 020, 030, 040 указывается, соответственно, последний день каждого из трех сроков  уплаты ежемесячных авансовых платежей. Не позднее 28 числа с февраля по декабрь месяц.";
				Иначе
					ОписаниеОшибки = "";
				КонецЕсли;
			Иначе
				Расшифровка = ЛеваяЧастьСтр + " Итог [" + ЛеваяЧастьСтр + "] = " + РасшПравойЧасти;
			КонецЕсли;

			Расшифровка = ОбработкаКС.УбратьСлужебныеОператоры(Расшифровка);
			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОписаниеОшибки);
			СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
			СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
			СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
			СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстФормулы);

			ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ПоказыватьВРасшифровке);
			ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
		КонецЦикла;

	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;
КонецФункции // ПрибыльПроверитьРаздел12ВсеПоказатели

// ПрибыльПроверитьПриложение4НаЗаполнение
// Функция проверяет на заполненность приложение 4 к листу 02. Данное приложение
// должно заполнятся только за 1 квартал и налоговый период.
//
// Параметры:
//  ОтчетныйПериод   - структура, период отчета, датанач и датакон
//  ТаблицаПодоходящихДокументов - таблица документов для проверки.
//  Формула                      - формула, итоговая формула.
//  ОписаниеОшибки               - строка, описание ошибки.
//  СтрокаНастройки              - ссылка на таблицу формул.
//
// Возвращаемое значение:
//  Структура результата.
//
Функция ПрибыльПроверитьПриложение4НаЗаполнение(ОбработкаКС, СтруктураПараметров)
	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ТребуемыйРаздел = "Лист02_Прил4";

	Если ОбработкаКС.СохраненныйДокумент.Периодичность = Перечисления.Периодичность.Квартал Тогда
		ПервыйКвартал = Месяц(ОбработкаКС.СохраненныйДокумент.ДатаОкончания) = 3;
	Иначе
		// Если периодичность месяц - тогда, анализируем по первому месяцу.
		ПервыйКвартал = Месяц(ОбработкаКС.СохраненныйДокумент.ДатаОкончания) = 1;
	КонецЕсли;

	НП = ОбработкаКС.мЭтоНалоговыйПериод;

	// Стандартный цикл перебора документов.
	ЭтоОшибка = Ложь;
	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;
		Если НП Или ПервыйКвартал Тогда
			ЭтоОшибка = Ложь;
		Иначе
			// Проверим, есть ли заполненные показатели прилоежния 4 к листу 02, если есть, выдадим ошибку.
			Для каждого Прил4Лист02 Из Док.ДанныеМногостраничныхРазделов.Лист02_Прил4 Цикл
				Для каждого Показатель Из Прил4Лист02.Данные Цикл

					НазвПоказателя = Показатель.Ключ;

					Если (НазвПоказателя = "ЯвляетсяСельхозПрил4Лист02")
					 Или (Найти(НазвПоказателя, "ИНН") > 0)
					 Или (Найти(НазвПоказателя, "КПП") > 0)
					 Или (Найти(НазвПоказателя, "НомСтр") > 0) Тогда
						Продолжить;
					КонецЕсли;

					ЗначПоказателя = Показатель.Значение;
					Если ЗначениеЗаполнено(ЗначПоказателя) Тогда
						Если НЕ ЭтоОшибка Тогда
							// Увеличим счетчик регистрации формул, только в том случае, если точно есть ошибка.
							ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
							ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ОбработкаКС.ПолучитьНазваниеВыполняемойФормулы(СтрокаНастройки));
						КонецЕсли;
						ЭтоОшибка = Истина;
						Ном = Док.ДанныеМногостраничныхРазделов.Лист02_Прил4.Индекс(Прил4Лист02);
						Ном = Ном + 1;
						ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(НазвПоказателя, ОбработкаКС.ПолучитьТекстовоеПредставлениеФормулы("РегламентированныйОтчетПрибыль." + НазвПоказателя, "РегламентированныйОтчетПрибыль"), ЗначПоказателя, Формула, Стр.СсылкаНаРО, "Лист02_Прил4", Формат(Ном, "ЧГ=0"));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

		КонецЕсли;

		Если ЭтоОшибка Тогда
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;

		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОписаниеОшибки);
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "");
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);

		// Т.к. название проверяемой формулы генерируется после регистрации формулы с названием, то после формирования окончательного названия
		// заменим в таблице расшифровок не полное название на новое.
		НайденнаяСтрока = ОбработкаКС.СписокРасшифровкиФормулы.Найти(ОбработкаКС.мСчетчикФормулДляРасшифровок, "Номер");
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.ТекстовоеПредставлениеФормулы = "Найдены заполненные показатели в Приложении № 4 к Листу 02";
		КонецЕсли;

		ЭтоОшибка = Ложь;
	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПрибыльПроверитьПриложение4НаЗаполнение

// ПрибыльПроверитьПриложение5НаЗаполнение
// Функция проверяет на заполненность приложение 5 к листу 02. Данное приложение
// не должно заполнятся если нет обособленных подразделений и предприятие сдает декларацию по месту нахождения организации
//
// Параметры:
//  ОтчетныйПериод   - структура, период отчета, датанач и датакон
//  ТаблицаПодоходящихДокументов - таблица документов для проверки.
//  Формула                      - формула, итоговая формула.
//  ОписаниеОшибки               - строка, описание ошибки.
//  СтрокаНастройки              - ссылка на таблицу формул.
//
// Возвращаемое значение:
//  Структура результата.
//
Функция ПрибыльПроверитьПриложение5НаЗаполнение(ОбработкаКС, СтруктураПараметров)
	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ТребуемыйРаздел = "Лист02_Прил5";

	// Стандартный цикл перебора документов.
	ЭтоОшибка = Ложь;
	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;
		Комм1 = "";

		Если Док.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.ТипОрг2 = "V" Тогда
			ПоМестуНахожденияОрганизации = Ложь;
		Иначе
			ПоМестуНахожденияОрганизации = Истина;
		КонецЕсли;

		// Признак есть обособленные подразделения или нет, берем из сохраненного параметра в декларации, как она была сохранена.
		ЕстьОбособленныеПодразделения = Док.ЕстьОбособленныеПодразделения;
		Если (НЕ ЕстьОбособленныеПодразделения) И (ПоМестуНахожденияОрганизации) Тогда
			РазделЗаполнятсяНеДолжен = Истина;
		Иначе
			РазделЗаполнятсяНеДолжен = Ложь;
		КонецЕсли;

		Если НЕ РазделЗаполнятсяНеДолжен Тогда
			ЭтоОшибка = Ложь;
		Иначе
			// Проверим, есть ли заполненные показатели прилоежния 5 к листу 02, если есть, выдадим ошибку.
			Для каждого Прил5Лист02 Из Док.ДанныеМногостраничныхРазделов.Лист02_Прил5 Цикл
				Для каждого Показатель Из Прил5Лист02.Данные Цикл

					НазвПоказателя = Показатель.Ключ;
					ЗначПоказателя = Показатель.Значение;

					Если (НазвПоказателя = "ЯвляетсяСельхозПрил5Лист02")
					 Или (Найти(НазвПоказателя, "ИНН") > 0)
					 Или (Найти(НазвПоказателя, "КПП") > 0)
					 Или (Найти(НазвПоказателя, "НомСтр") > 0)
					 Или (НазвПоказателя = "П002050012001")
					 Или (НазвПоказателя = "ВГруппуОПВходитОрганизация")
					 Или ((НазвПоказателя = "П002050015003") И (ЗначПоказателя = "0")) Тогда
						Продолжить;
					КонецЕсли;

					Если ЗначениеЗаполнено(ЗначПоказателя) Тогда
						Если НЕ ЭтоОшибка Тогда
							// Увеличим счетчик регистрации формул, только в том случае, если точно есть ошибка.
							ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
							ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ОбработкаКС.ПолучитьНазваниеВыполняемойФормулы(СтрокаНастройки));
							Комм1 = "Возможно, в информационной базе не заведены обособленные подразделения организации";
						КонецЕсли;
						ЭтоОшибка = Истина;
						Ном = Док.ДанныеМногостраничныхРазделов.Лист02_Прил4.Индекс(Прил5Лист02);
						Ном = Ном + 1;
						ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(НазвПоказателя, ОбработкаКС.ПолучитьТекстовоеПредставлениеФормулы("РегламентированныйОтчетПрибыль." + НазвПоказателя, "РегламентированныйОтчетПрибыль"), ЗначПоказателя, Формула, Стр.СсылкаНаРО, ТребуемыйРаздел, Формат(Ном, "ЧГ=0"));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

		КонецЕсли;

		Если ЭтоОшибка Тогда
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		Иначе
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		КонецЕсли;

		СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОписаниеОшибки);
		СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "");
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
		СтруктураОшибок.Вставить("Комментарий" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"),Комм1);

		// Т.к. название проверяемой формулы генерируется после регистрации формулы с названием, то после формирования окончательного названия
		// заменим в таблице расшифровок не полное название на новое.
		НайденнаяСтрока = ОбработкаКС.СписокРасшифровкиФормулы.Найти(ОбработкаКС.мСчетчикФормулДляРасшифровок, "Номер");
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.ТекстовоеПредставлениеФормулы = "Найдены заполненные показатели в Приложении № 5 к Листу 02";
		КонецЕсли;

		ЭтоОшибка = Ложь;
	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПрибыльПроверитьПриложение4НаЗаполнение

// ПрибыльПроверитьПриложение5Строка050
// Функция проверяет на заполненность приложение 5 к листу 02. Данное приложение
// не должно заполнятся если нет обособленных подразделений и предприятие сдает декларацию по месту нахождения организации
//
// Параметры:
//  ОтчетныйПериод   - структура, период отчета, датанач и датакон
//  ТаблицаПодоходящихДокументов - таблица документов для проверки.
//  Формула                      - формула, итоговая формула.
//  ОписаниеОшибки               - строка, описание ошибки.
//  СтрокаНастройки              - ссылка на таблицу формул.
//
// Возвращаемое значение:
//  Структура результата.
//
Функция ПрибыльПроверитьПриложение5Строка050(ОбработкаКС, СтруктураПараметров)

	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ТребуемыйРаздел = "Лист02_Прил5";
	КоммКОшибке = "";

	// Стандартный цикл перебора документов.
	Для каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;

		// Данная переменная не требует какой-либо расшифровки, т.к. она нигде не показывается и показываться не будет.
		// От её значения зависит, какой показатель будет браться в расчет.
		БазаПоЛиквидированнымОПСХ = ОбработкаКС.ПолучитьИзОпределенногоДокумента(Док
																	  , "П002050005003"
																	  , Ложь // поиск по обычным листам.
																	  , Истина // поиска по многостраничным
																	  , 1
																	  , Истина
																	  , СформироватьТаблицуУсловий("Ликвидированные1")
																	  , "И"
																	  , ТребуемыйРаздел // название раздела многостраничного документа
																	  , Неопределено); // Номер страницы - по всем.

		БазаПоЛиквидированнымОПНеСХ = ОбработкаКС.ПолучитьИзОпределенногоДокумента(Док
																	  , "П002050005003"
																	  , Ложь // поиск по обычным листам.
																	  , Истина // поиска по многостраничным
																	  , 1
																	  , Истина
																	  , СформироватьТаблицуУсловий("Ликвидированные2")
																	  , "И"
																	  , ТребуемыйРаздел // название раздела многостраничного документа
																	  , Неопределено); // Номер страницы - по всем.

		Для каждого Прил5 Из Док.ДанныеМногостраничныхРазделов.Лист02_Прил5 Цикл
			Если Прил5.Данные.П002050000200 = "3" Тогда
				// Не проверяем строку 050 для листов с ликвидированными ОП.
				Продолжить;
			КонецЕсли;

			ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;

			НомерЛиста = Док.ДанныеМногостраничныхРазделов.Лист02_Прил5.Индекс(Прил5) + 1;

			Если НомерЛиста >= 999 Тогда
				НомерСтр = Формат(НомерЛиста, "ЧГ=0");
			Иначе
				НомерСтр = Строка(НомерЛиста);
			КонецЕсли;

			// Проверим лист С/х (=1) и не С/х (2)
			ЭтоЛистСХ = Прил5.Данные.П002050000100 = "V";
			ТекстФормулы = "Налоговая база (Приложение № 5 к Листу 02, строка 050) определяется путем умножения показателя строки ";
			Если ЭтоЛистСХ Тогда
				БазаПоЛиквидированнымОП = БазаПоЛиквидированнымОПСХ;
			Иначе
				БазаПоЛиквидированнымОП = БазаПоЛиквидированнымОПНеСХ;
			КонецЕсли;

			БазаПоЛиквидированнымОП = ?(БазаПоЛиквидированнымОП = Неопределено, 0, БазаПоЛиквидированнымОП);

			Если БазаПоЛиквидированнымОП = 0 Тогда

				// Данные строки 050 определяются путем умножения показателя строки 030 (или строки 031 при наличии у организации ликвидированных
				// обособленных подразделений) на данные строки 040.
				МножетельЗнач = Прил5.Данные.П002050003003;
				ТекстФормулы = ТекстФормулы + "030 ";

				ДляПоискаПредставления = "РегламентированныйОтчетПрибыль.П002050003003[П002050000100 " + ?(ЭтоЛистСХ, "= ", "<> ") +  """V""]";
				НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.мТекстыПоказателей.Найти(ДляПоискаПредставления, "Показатель").ЯвныйТекст);
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П002050003003", НазваниеПоказателя, ОбработкаКС.ОкруглитьЧислоПоФормату(МножетельЗнач), Формула, Стр.СсылкаНаРО, ТребуемыйРаздел, Неопределено, НомерСтр);

			Иначе
				МножетельЗнач = Прил5.Данные.П002050003103;
				ТекстФормулы = ТекстФормулы + "031 ";

				ДляПоискаПредставления = "РегламентированныйОтчетПрибыль.П002050003103[П002050000100 " + ?(ЭтоЛистСХ, "= ", "<> ") +  """V""]";
				НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.мТекстыПоказателей.Найти(ДляПоискаПредставления, "Показатель").ЯвныйТекст);
				ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П002050003103", НазваниеПоказателя, ОбработкаКС.ОкруглитьЧислоПоФормату(МножетельЗнач), Формула, Стр.СсылкаНаРО, ТребуемыйРаздел, Неопределено, НомерСтр);

			КонецЕсли;
			ТекстФормулы = ТекстФормулы + " на данные строки 040.";

			ЛеваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(Прил5.Данные.П002050005003);
			ЛеваяЧастьСтр = Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0;ЧО=0") + " Итог [" + Формат(ЛеваяЧасть, "ЧРД=.;ЧН=0;ЧО=0") + "] = ";

			ДляПоискаПредставления = "РегламентированныйОтчетПрибыль.П002050005003[П002050000100 " + ?(ЭтоЛистСХ, "= ", "<> ") +  """V""]";
			НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.мТекстыПоказателей.Найти(ДляПоискаПредставления, "Показатель").ЯвныйТекст);
			ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П002050005003", НазваниеПоказателя, ЛеваяЧасть, Формула, Стр.СсылкаНаРО, ТребуемыйРаздел, Неопределено, НомерСтр);

			ПраваяЧасть = ОбработкаКС.ОкруглитьЧислоПоФормату(МножетельЗнач * Прил5.Данные.П002050004003 / 100);
			ПраваяЧастьСтр = Формат(МножетельЗнач, "ЧРД=.;ЧН=0;ЧО=0") + " * " + Формат(Прил5.Данные.П002050004003, "ЧРД=.;ЧН=0;ЧО=0") + " / 100 Итог [" + Формат(ПраваяЧасть, "ЧРД=.;ЧН=0;ЧО=0") + "], Лист № " + НомерСтр;

			ДляПоискаПредставления = "РегламентированныйОтчетПрибыль.П002050004003[П002050000100 " + ?(ЭтоЛистСХ, "= ", "<> ") +  """V""]";
			НазваниеПоказателя = ОбработкаКС.ЗаглавнаяБуква(ОбработкаКС.мТекстыПоказателей.Найти(ДляПоискаПредставления, "Показатель").ЯвныйТекст);
			ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки("П002050004003", НазваниеПоказателя, ОбработкаКС.ОкруглитьЧислоПоФормату(Прил5.Данные.П002050004003), Формула, Стр.СсылкаНаРО, ТребуемыйРаздел, Неопределено, НомерСтр);

			Расшифровка = ЛеваяЧастьСтр + ПраваяЧастьСтр;

			Если ЛеваяЧасть <> ПраваяЧасть Тогда
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ЭтоОшибка = Истина;
			Иначе
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				ЭтоОшибка = Ложь;
			КонецЕсли;

			// Зарегистрируем формулу
			ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ТекстФормулы);

			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОписаниеОшибки);
			СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
			СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОбработкаКС.мСчетчикФормулДляРасшифровок);
			СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
			СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстФормулы);

		КонецЦикла;
	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПрибыльПроверитьПриложение5Строка050

// ПолучитьЗначениеИзРаздела1_2
// Получает заданное значение из раздела 1.2
// Параметры:
//  НеобхПараметр  - число от 1 до 6, порядковый счетчик, показатели в разделе 1.2
// Возвращаемое значение:
// Структура. Ключ Значение и Расшифровка.
//
Функция ПолучитьЗначениеИзРаздела1_2(Обработка, Док, СсылкаНаРО, НеобхПараметр)
	Если НеобхПараметр = 1 Тогда
		ТребЗнач = "СуммаФедПоСроку1Раздел1_2";
	ИначеЕсли НеобхПараметр = 2 Тогда
		ТребЗнач = "СуммаФедПоСроку2Раздел1_2";
	ИначеЕсли НеобхПараметр = 3 Тогда
		ТребЗнач = "СуммаФедПоСроку3Раздел1_2";
	ИначеЕсли НеобхПараметр = 4 Тогда
		ТребЗнач = "СуммаСубПоСроку1Раздел1_2";
	ИначеЕсли НеобхПараметр = 5 Тогда
		ТребЗнач = "СуммаСубПоСроку2Раздел1_2";
	ИначеЕсли НеобхПараметр = 6 Тогда
		ТребЗнач = "СуммаСубПоСроку3Раздел1_2";
	ИначеЕсли НеобхПараметр = 7 Тогда
		ТребЗнач = "СрокУплаты1Раздел1_2"
	ИначеЕсли НеобхПараметр = 8 Тогда
		ТребЗнач = "СрокУплаты2Раздел1_2"
	ИначеЕсли НеобхПараметр = 9 Тогда
		ТребЗнач = "СрокУплаты3Раздел1_2"

	КонецЕсли;

	Если НеобхПараметр <= 6 Тогда
		Результат = Обработка.ОкруглитьЧислоПоФормату(Док.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1_2[ТребЗнач]);
	Иначе
		Результат = Формат(Док.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1_2[ТребЗнач], "ДФ=дд.ММ.гггг");
	КонецЕсли;

	// Получим название показателя.
	НазваниеПоказателя = Обработка.ЗаглавнаяБуква(Обработка.ПолучитьНазваниеЧастногоПоказателя(ТребЗнач, "РегламентированныйОтчетПрибыль"));
	Обработка.ЗарегистрироватьПоказательДляРасшифровки(ТребЗнач, НазваниеПоказателя, Результат, "", СсылкаНаРО, "Раздел1_2");

	Если НеобхПараметр <= 6 Тогда
		ВозвращаемоеЗначение = Новый Структура("Значение, Расшифровка", Результат, Формат(Результат, "ЧРД=.;ЧН=0;ЧО=0"));
	Иначе
		ВозвращаемоеЗначение = Новый Структура("Значение, Расшифровка", Результат, "");
	КонецЕсли;

	Возврат ВозвращаемоеЗначение;

КонецФункции // ПолучитьЗначениеИзРаздела1_2

// СформироватьТаблицуУсловий
// Применяется только в декларации по прибыли, для формирования условий при проверке раздела 1.1. Условия по приложению 5 к листу 02
// Параметры:
//  ВариантУсл     - строка, определяет вариант условия.
// Возвращаемое значение:
//  Таблица значений, для функции ПолучитьЗначениеИзДокумента определяющая условие для показателя.
//
Функция СформироватьТаблицуУсловий(ВариантУсл)

	ТаблУсловий = Новый ТаблицаЗначений;
	ТаблУсловий.Колонки.Добавить("Показатель");
	ТаблУсловий.Колонки.Добавить("ЛогическийЗнак");
	ТаблУсловий.Колонки.Добавить("ЗначениеПоказателя");

	Если ВариантУсл = "3" Тогда
		НовСтр = ТаблУсловий.Добавить();
		НовСтр.Показатель = "П002050000200";
		НовСтр.ЛогическийЗнак = "=";
		НовСтр.ЗначениеПоказателя = "1";

	ИначеЕсли ВариантУсл = "Только2и4" тогда

		НовСтр = ТаблУсловий.Добавить();
		НовСтр.Показатель = "П002050000200";
		НовСтр.ЛогическийЗнак = "=";
		НовСтр.ЗначениеПоказателя = "2";

		НовСтр = ТаблУсловий.Добавить();
		НовСтр.Показатель = "П002050000200";
		НовСтр.ЛогическийЗнак = "=";
		НовСтр.ЗначениеПоказателя = "4";
	ИначеЕсли ВариантУсл = "Ликвидированные1" Тогда

		// Установим признак СХ
		НовСтр = ТаблУсловий.Добавить();
		НовСтр.Показатель = "П002050000100";
		НовСтр.ЛогическийЗнак = "=";
		НовСтр.ЗначениеПоказателя = "V";

		// Признак ликвидированности = 3
		НовСтр = ТаблУсловий.Добавить();
		НовСтр.Показатель = "П002050000200";
		НовСтр.ЛогическийЗнак = "=";
		НовСтр.ЗначениеПоказателя = "3";

	ИначеЕсли ВариантУсл = "Ликвидированные2" Тогда
		// Установим признак не СХ
		НовСтр = ТаблУсловий.Добавить();
		НовСтр.Показатель = "П002050000100";
		НовСтр.ЛогическийЗнак = "<>";
		НовСтр.ЗначениеПоказателя = "V";

		// Признак ликвидированности = 3
		НовСтр = ТаблУсловий.Добавить();
		НовСтр.Показатель = "П002050000200";
		НовСтр.ЛогическийЗнак = "=";
		НовСтр.ЗначениеПоказателя = "3";

	КонецЕсли;

	Возврат ТаблУсловий;

КонецФункции // СформироватьТаблицуУсловий

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасшифровка(Кнопка)
	Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
	Обраб.Форма = ЭтаФорма;
    ТекущийЛист = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
    ТекущееТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ТекущийЛист];
    Обраб.ИмяЯчейки = ЭлементыФормы[ТекущееТабличноеПоле.Имя].ТекущаяОбласть.Имя;
	Обраб.ПолучитьФорму(, ЭтаФорма).Показать();

КонецПроцедуры

// Процедура вызывается при выборе пункта "Показать машиночитаемый бланк" подменю "Печать"
// командной панели действий формы. 
//
// Обработчик уставливается динамически методом "Действие" из общего модуля
// "Регламентированная отчетность".
//
Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСоставПоказателей = "СоставПоказателей2007Кв1";

мКодыБюджетнойКлассификации2005 = Новый ТаблицаЗначений;
мКодыБюджетнойКлассификации2005.Колонки.Добавить("Код",,, 19);
мКодыБюджетнойКлассификации2005.Колонки.Добавить("Название",,, 39);

мКодыБюджетнойКлассификации2006 = Новый ТаблицаЗначений;
мКодыБюджетнойКлассификации2006.Колонки.Добавить("Код",,, 19);
мКодыБюджетнойКлассификации2006.Колонки.Добавить("Название",,, 55);

мКодыБюджетнойКлассификации2007 = Новый ТаблицаЗначений;
мКодыБюджетнойКлассификации2007.Колонки.Добавить("Код",,, 19);
мКодыБюджетнойКлассификации2007.Колонки.Добавить("Название",,, 55);

мПрибыльКодыВидовПоступлений = Новый ТаблицаЗначений;
мПрибыльКодыВидовПоступлений.Колонки.Добавить("Код",,, 5);
мПрибыльКодыВидовПоступлений.Колонки.Добавить("Название",,, 55);

мКодыКБК2005Раздел1_3 = Новый ТаблицаЗначений;
мКодыКБК2005Раздел1_3.Колонки.Добавить("Код",,, 19);
мКодыКБК2005Раздел1_3.Колонки.Добавить("Название",,, 55);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

// Создадим координаты признаков С/х
мСтруктураПризнаковСх = Новый Структура;
мСтруктураПризнаковСх.Вставить("Лист02", "П002000000100");
мСтруктураПризнаковСх.Вставить("Лист02_Прил1", "П002010000100");
мСтруктураПризнаковСх.Вставить("Лист02_Прил2", "П002020000100");
мСтруктураПризнаковСх.Вставить("Лист02_Прил3", "П002030000100");
мСтруктураПризнаковСх.Вставить("Лист02_Прил4", "П002040000100");
мСтруктураПризнаковСх.Вставить("Лист02_Прил5", "П002050000100");

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);

ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповСтрока3   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

МассивДата = Новый Массив;
МассивДата.Добавить(Тип("Дата"));
КвалификаторДата = Новый КвалификаторыДаты(ЧастиДаты.Дата);
ОписаниеТиповДата = Новый ОписаниеТипов(МассивДата, КвалификаторДата);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1  = "П0021200010";

// Создаем список, содержащий количество полных месяцев владения.
мСписокМесяцев = Новый СписокЗначений;
мСписокМесяцев.Добавить("01", "01 (Январь)");
мСписокМесяцев.Добавить("02", "02 (Февраль)");
мСписокМесяцев.Добавить("03", "03 (Март)");
мСписокМесяцев.Добавить("04", "04 (Апрель)");
мСписокМесяцев.Добавить("05", "05 (Май)");
мСписокМесяцев.Добавить("06", "06 (Июнь)");
мСписокМесяцев.Добавить("07", "07 (Июль)");
мСписокМесяцев.Добавить("08", "08 (Август)");
мСписокМесяцев.Добавить("09", "09 (Сентябрь)");
мСписокМесяцев.Добавить("10", "10 (Октябрь)");
мСписокМесяцев.Добавить("11", "11 (Ноябрь)");
мСписокМесяцев.Добавить("12", "12 (Декабрь)");
мСписокМесяцев.Добавить("-1", "Пустое значение");

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 8;

// структура строк многострочного раздела на странице
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П002120001001", ОписаниеТиповСтрока3);
СтруктураГруппы1.Колонки.Добавить("П002120001002", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П002120001003", ОписаниеТиповСтрока3);
СтруктураГруппы1.Колонки.Добавить("П002120001004", ОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("П002120001005", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П002120001006", ОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("П002120001007", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П002120001008", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П002120001009", мОписаниеТиповЧислоЕ);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен
ЦветАвто = Новый Цвет(0, 0, 0);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
мСтруктураЦветовРаскраски.Вставить("_6", ЦветАвто);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы;
//    - таблица значений, содержит данные строк многострочного блока показателей страницы.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");

СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;

// Элемент структуры - данные дополнительных страниц Раздела 1.3
ТаблицаСтраницыРаздела1_3 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел1_3", ТаблицаСтраницыРаздела1_3);

// Элемент структуры - данные дополнительных страниц Раздела 2
ТаблицаСтраницыРаздела2 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Лист02", ТаблицаСтраницыРаздела2);

// Элемент структуры - данные дополнительных страниц Раздела 2_Прил1
ТаблицаСтраницыРаздел2_Прил1 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил1", ТаблицаСтраницыРаздел2_Прил1);

// Элемент структуры - данные дополнительных страниц Раздела 2_Прил2
ТаблицаСтраницыРаздел2_Прил2 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил2", ТаблицаСтраницыРаздел2_Прил2);

// Элемент структуры - данные дополнительных страниц Раздела 2_Прил3
ТаблицаСтраницыРаздел2_Прил3 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил3", ТаблицаСтраницыРаздел2_Прил3);

// Элемент структуры - данные дополнительных страниц Раздела 2_Прил4
ТаблицаСтраницыРаздел2_Прил4 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил4", ТаблицаСтраницыРаздел2_Прил4);

// Элемент структуры - данные дополнительных страниц Раздела 2_Прил5
ТаблицаСтраницыРаздел2_Прил5 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Лист02_Прил5", ТаблицаСтраницыРаздел2_Прил5);

// Элемент структуры - данные дополнительных страниц Раздела 3
ТаблицаСтраницыРаздела3 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Лист03", ТаблицаСтраницыРаздела3);

// Элемент структуры - данные дополнительных страниц Раздела 3 (продолжение)
ТаблицаСтраницыРаздела3Продолжение = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Лист03Продолжение", ТаблицаСтраницыРаздела3Продолжение);

// Элемент структуры - данные дополнительных страниц Раздела 3 (продолжение)
ТаблицаСтраницыРаздела3Реестр = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Лист03Реестр", ТаблицаСтраницыРаздела3Реестр);

// Элемент структуры - данные дополнительных страниц Раздела 4А
ТаблицаСтраницыРаздела4 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Лист04", ТаблицаСтраницыРаздела4);

// Элемент структуры - данные дополнительных страниц Раздел 5
ТаблицаСтраницыРаздела5 = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Лист05", ТаблицаСтраницыРаздела5);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "01/01/2007";

// Код отчета, равен КНД
мКодОтчета   = 1151006;

РежимОтладки = Ложь;

ОбязРазделов = Новый СписокЗначений;

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 3.00007", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

КНД = "1151006";
НаименованиеОтчетаДляВыгрузки = "НАЛОГОВАЯ ДЕКЛАРАЦИЯ ПО НАЛОГУ НА ПРИБЫЛЬ ОРГАНИЗАЦИЙ";

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;

СпП = Новый ТаблицаЗначений;
СпП.Колонки.Добавить("НомСтроки");
СпП.Колонки.Добавить("ИмяЯчейки");
СпП.Колонки.Добавить("ИмяПоказателя");
СпП.Колонки.Добавить("ЗнакОперации");
СпП.Колонки.Добавить("ИмяСлагаемого");
СпП.Колонки.Добавить("Сумма");
СпП.Колонки.Добавить("КодСчета");
СпП.Колонки.Добавить("КодКорСчета");
СпП.Колонки.Добавить("ДатаНачала");
СпП.Колонки.Добавить("ДатаКонца");
СпП.Колонки.Добавить("Сдвиг");
СпП.Колонки.Добавить("Раздел");
СпП.Колонки.Добавить("Страница");
СпП.Колонки.Добавить("МнЧ");
СпП.Колонки.Добавить("СтрокаПП");
СпП.Колонки.Добавить("Субконто1");
СпП.Колонки.Добавить("Субконто2");
СпП.Колонки.Добавить("Субконто3");

ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
Если ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
	мОсновнойПланСчетов = ПланыСчетов.Хозрасчетный;
ИначеЕсли ИДКонфигурации <> "ББУ" И ИДКонфигурации <> "БГУ" Тогда
	мОсновнойПланСчетов = ПланыСчетов.Налоговый;
КонецЕсли;
