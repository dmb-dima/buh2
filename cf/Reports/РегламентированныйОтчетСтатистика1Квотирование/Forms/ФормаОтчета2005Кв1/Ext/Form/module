////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
Перем мФормаОтчета;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы Экспорт;
Перем мСтараяВерсияФормы;

Перем мПечатныеФормы Экспорт;

Перем мВПрограммеИзмененаОрганизация;

Перем мСтруктураМногострочныхРазделов Экспорт;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция собирает значения редактирукемых ячеек +табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл

		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

	мФормаОтчета.Области.Период.Значение = "за " + СтрПериодОтчета;

КонецПроцедуры // ПоказатьПериод()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН

		Сведения.Добавить("", "АдрПочт");
		Сведения.Добавить("", "ТелОрганизации");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "КодОКОНХ");
		Сведения.Добавить("", "ОКВЭД");
		Сведения.Добавить("", "ОКАТО");
		Сведения.Добавить("", "ОКОПФ");
		Сведения.Добавить("", "ОКФС");
		Сведения.Добавить("", "ФаксОрганизации");
		Сведения.Добавить("", "ТипНП");

	КонецЕсли;

	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ФИОБух");

	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ИННЮЛ = "";
		АдрПочт     = "";

		ТелОрганизации   = "";

		НаимЮЛПол   = "";
		ОргКодОКПО  = "";
		ОргКодОКОНХ = "";
		ОргКодОКВЭД = "";
		ОргКодОКАТО = "";
		ОргКодОКОПФ = "";
		ОргКодОКФС  = "";
		ОргФакс     = "";
		ТипНП = "";

	КонецЕсли;

	ОргДиректор  = "";
	ОргБухгалтер = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ОргСведения.Свойство("ИННЮЛ",          ИННЮЛ);
		ОргСведения.Свойство("АдрПочт",        АдрПочт);
		ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
		ОргСведения.Свойство("НаимЮЛПол",      НаимЮЛПол);
		ОргСведения.Свойство("ОКПО",           ОргКодОКПО);
		ОргСведения.Свойство("КодОКОНХ",       ОргКодОКОНХ);
		ОргСведения.Свойство("ОКВЭД",          ОргКодОКВЭД);
		ОргСведения.Свойство("ОКАТО",          ОргКодОКАТО);
		ОргСведения.Свойство("ОКОПФ",          ОргКодОКОПФ);
		ОргСведения.Свойство("ОКФС",           ОргКодОКФС);
		ОргСведения.Свойство("ФаксОрганизации",ОргФакс);
		ОргСведения.Свойство("ТипНП",          ТипНП);

	КонецЕсли;

	ОргСведения.Свойство("ФИОРук",         ОргДиректор );
	ОргСведения.Свойство("ФИОБух",         ОргБухгалтер);

	Если ВПрограммеИзмененаДатаПодписи Тогда
		мФормаОтчета.Области.Директор.Значение = ОргДиректор;
		мФормаОтчета.Области.Бухгалтер.Значение = ОргБухгалтер;
		Возврат;
	КонецЕсли;

	Если Не РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда

		Для Инд = 1 По 10 Цикл
			мФормаОтчета.Области["ИНН" + Строка(Инд)].Значение = Сред(?(ТипНП <> 3, ИННЮЛ, ""), Инд, 1);
		КонецЦикла;

	КонецЕсли;
	
	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргФакс.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргФакс.Значение = ОргФакс;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргКодОКФС.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргКодОКФС.Значение = ОргКодОКФС;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргКодОКОПФ.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргКодОКОПФ.Значение = ОргКодОКОПФ;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргКодОКАТО.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргКодОКАТО.Значение = ОргКодОКАТО;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргКодОКВЭД.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргКодОКВЭД.Значение = ОргКодОКВЭД;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргКодОКОНХ.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргКодОКОНХ.Значение = ОргКодОКОНХ;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргКодОКПО.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			мФормаОтчета.Области.ОргКодОКПО.Значение = "";
		Иначе
			мФормаОтчета.Области.ОргКодОКПО.Значение = ОргКодОКПО;
		КонецЕсли;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргНазв.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргПочтАдрес.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда

		Если РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(АдрПочт, ",","")) Тогда

			мФормаОтчета.Области.ОргПочтАдрес.Значение = "";

		Иначе

			мФормаОтчета.Области.ОргПочтАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(АдрПочт);

		КонецЕсли;

	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.Директор.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.Директор.Значение = ОргДиректор;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.Бухгалтер.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.Бухгалтер.Значение = ОргБухгалтер;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргТелефон.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргТелефон.Значение = ТелОрганизации;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить("Форма 1-квотирование: при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить("Форма 1-квотирование: при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить("Форма 1-квотирование: при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";

	КонецЕсли;

	мФормаОтчета.Области.П000010020004.Формат = мСтрокаФормата;
	мФормаОтчета.Области.П000010021004.Формат = мСтрокаФормата;
	мФормаОтчета.Области.П000010022004.Формат = мСтрокаФормата;
	мФормаОтчета.Области.П000010023004.Формат = мСтрокаФормата;
	мФормаОтчета.Области.П000010024004.Формат = мСтрокаФормата;

	мФормаОтчета.Области.П000010025004.Формат = мСтрокаФормата;
	мФормаОтчета.Области.П000010026004.Формат = мСтрокаФормата;
	мФормаОтчета.Области.П000010027004.Формат = мСтрокаФормата;

	мФормаОтчета.Области.П000010028004.Формат = мСтрокаФормата;
	мФормаОтчета.Области.П000010029004.Формат = мСтрокаФормата;
	мФормаОтчета.Области.П000010030004.Формат = мСтрокаФормата;
	мФормаОтчета.Области.П000010031004.Формат = мСтрокаФормата;
	мФормаОтчета.Области.П000010032004.Формат = мСтрокаФормата;
	мФормаОтчета.Области.П000010033004.Формат = мСтрокаФормата;
	мФормаОтчета.Области.П000010034004.Формат = мСтрокаФормата;
	мФормаОтчета.Области.П000010035004.Формат = мСтрокаФормата;
	мФормаОтчета.Области.П000010036004.Формат = мСтрокаФормата;
	мФормаОтчета.Области.П000010037004.Формат = мСтрокаФормата;
	мФормаОтчета.Области.П000010038004.Формат = мСтрокаФормата;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)

	Перем СписокПоказателейНеПодлежащихОчистке;
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргПочтАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить("РегНом1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("РегНом2");
	СписокПоказателейНеПодлежащихОчистке.Добавить("РегНом3");
	СписокПоказателейНеПодлежащихОчистке.Добавить("РегНом4");
	СписокПоказателейНеПодлежащихОчистке.Добавить("РегНом5");
	СписокПоказателейНеПодлежащихОчистке.Добавить("РегНом6");
	СписокПоказателейНеПодлежащихОчистке.Добавить("РегНом7");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКОНХ");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКВЭД");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКАТО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКОПФ");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКФС");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Директор");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Бухгалтер");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргТелефон");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргФакс");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ЭлектронныйЯщик");

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	ТекТабличноеПоле = мФормаОтчета;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	Ставка = 0;

	Расчет();

	// устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // Очистить()

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ЧтоИскать <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяТабличногоПоля, НаименованиеЛиста, ЧтоИскать", "ПолеТабличногоДокументаФормаОтчета", "Форма 1-квотирование (Москва)", ЧтоИскать);
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПоиска);
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.Вывести(ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть("ОсновнаяЧасть1"));
	мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 1-квотирование (Москва)");
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.Вывести(ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть("ОсновнаяЧасть2"));
	мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 1-квотирование (Москва)");
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.Комментарий                = Комментарий;

	//мСохраненныйДок.КодИМНС                    = ПолучитьКодИМНС();
	мСохраненныйДок.Периодичность              = мПериодичность;

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаФормаОтчета";

	ТекТабличноеПоле        = мФормаОтчета;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	СписокСохранения.Вставить("Ставка", Ставка);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Процедура управляет выводом даты представления отчета в соответствующие
// области табличного документа.
//
Процедура ЗаполнитьДаты()

	мФормаОтчета.Области.ДатаПодписания.Значение = Формат(ДатаПодписи, "ДФ='дд ММММ гггг'") + " г.";

КонецПроцедуры // ЗаполнитьДаты()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);
	мСтараяВерсияФормы = ВерсияФормы;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Если Не СписокСохранения.Свойство( "Ставка", Ставка) Тогда
		Ставка = 0;
	КонецЕсли;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;
	КонецЦикла;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	ЗаполнитьДаты();
	УстановитьФорматВывода();

	Модифицированность = Ложь;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	мВПрограммеИзмененаОрганизация = Ложь;

	мФормаОтчета = ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета;
	ТекТабличноеПоле = мФормаОтчета;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	мСтараяВерсияФормы = мВерсияФормы;

	мПериодичность = Перечисления.Периодичность.Квартал;

	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			УстановитьФорматВывода();
		КонецЕсли;

	Иначе

		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	//мФормаОтчета.Области.ДатаСоставленияОтчета.Значение = Формат(ДатаПодписи, "ДФ=дд.ММ.гггг");

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	ЗаполнитьДаты();

	ТекущийЭлемент = мФормаОтчета;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Расчет();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти

// Расчет
//
Процедура Расчет()

	// строки 04 - 06
	
	// Установленный размер квот
	// Форма представляется организациями, у которых среднесписочная численность
	// работников составляет более 100 человек.
	мФормаОтчета.Области.П000010004003.Значение = ?(мФормаОтчета.Области.П000010001003.Значение > 100, Цел(мФормаОтчета.Области.П000010001003.Значение * 0.04), 0);
	мФормаОтчета.Области.П000010005003.Значение = ?(мФормаОтчета.Области.П000010002003.Значение > 100, Цел(мФормаОтчета.Области.П000010002003.Значение * 0.04), 0);
	мФормаОтчета.Области.П000010006003.Значение = ?(мФормаОтчета.Области.П000010003003.Значение > 100, Цел(мФормаОтчета.Области.П000010003003.Значение * 0.04), 0);

	// Определяем разрешенное количество молодежи, при условии что инвалиды 
	// должны составлять не менее 2% от среднесписочной численности работников.

	мФормаОтчета.Области.П000010004004.Значение = мФормаОтчета.Области.П000010004003.Значение;
	Если мФормаОтчета.Области.П000010001003.Значение > 100 Тогда
		Если мФормаОтчета.Области.П000010004005.Значение > 0 Тогда

			МинИнвалидов = Цел(мФормаОтчета.Области.П000010001003.Значение*0.02);
			МинПредел = мФормаОтчета.Области.П000010001003.Значение*0.02;
			КолвоМолодежи4 = мФормаОтчета.Области.П000010004003.Значение - ?(МинИнвалидов < МинПредел, Цел(МинПредел) + 1, МинИнвалидов);

			Если мФормаОтчета.Области.П000010004005.Значение > КолвоМолодежи4 Тогда
				Сообщить("Форма 1-квотирование: в строке 04 можно указать не более "+ КолвоМолодежи4 + " рабочих мест для молодежи");
				мФормаОтчета.Области.П000010004005.Значение = КолвоМолодежи4;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	мФормаОтчета.Области.П000010005004.Значение = мФормаОтчета.Области.П000010005003.Значение;
	Если мФормаОтчета.Области.П000010002003.Значение > 100 Тогда
		Если мФормаОтчета.Области.П000010005005.Значение > 0 Тогда

			МинИнвалидов = Цел(мФормаОтчета.Области.П000010002003.Значение*0.02);
			МинПредел = мФормаОтчета.Области.П000010002003.Значение*0.02;
			КолвоМолодежи5 = мФормаОтчета.Области.П000010005003.Значение - ?(МинИнвалидов < МинПредел, Цел(МинПредел) + 1, МинИнвалидов);

			Если мФормаОтчета.Области.П000010005005.Значение > КолвоМолодежи5 Тогда
				Сообщить("Форма 1-квотирование: в строке 05 можно указать не более "+ КолвоМолодежи5 + " рабочих мест для молодежи");
				мФормаОтчета.Области.П000010005005.Значение = КолвоМолодежи5;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	мФормаОтчета.Области.П000010006004.Значение = мФормаОтчета.Области.П000010006003.Значение;
	Если мФормаОтчета.Области.П000010003003.Значение > 100 Тогда
		Если мФормаОтчета.Области.П000010006005.Значение > 0 Тогда

			МинИнвалидов = Цел(мФормаОтчета.Области.П000010003003.Значение*0.02);
			МинПредел = мФормаОтчета.Области.П000010003003.Значение*0.02;
			КолвоМолодежи6 = мФормаОтчета.Области.П000010006003.Значение - ?(МинИнвалидов < МинПредел, Цел(МинПредел) + 1, МинИнвалидов);

			Если мФормаОтчета.Области.П000010006005.Значение > КолвоМолодежи6 Тогда
				Сообщить("Форма 1-квотирование: в строке 06 можно указать не более "+ КолвоМолодежи6 + " рабочих мест для молодежи");
				мФормаОтчета.Области.П000010006005.Значение = КолвоМолодежи6;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// квоты для инвалидов
	мФормаОтчета.Области.П000010004004.Значение = мФормаОтчета.Области.П000010004003.Значение - мФормаОтчета.Области.П000010004005.Значение;
	мФормаОтчета.Области.П000010005004.Значение = мФормаОтчета.Области.П000010005003.Значение - мФормаОтчета.Области.П000010005005.Значение;
	мФормаОтчета.Области.П000010006004.Значение = мФормаОтчета.Области.П000010006003.Значение - мФормаОтчета.Области.П000010006005.Значение;

	// строки 07 - 09
	// Работает на квотируемых местах на конец периода 
	// количество указывается в пределах численности, указаной в строках 04-06
	мФормаОтчета.Области.П000010007004.Значение = Мин(мФормаОтчета.Области.П000010004004.Значение, мФормаОтчета.Области.П000010007004.Значение);
	мФормаОтчета.Области.П000010008004.Значение = Мин(мФормаОтчета.Области.П000010005004.Значение, мФормаОтчета.Области.П000010008004.Значение);
	мФормаОтчета.Области.П000010009004.Значение = Мин(мФормаОтчета.Области.П000010006004.Значение, мФормаОтчета.Области.П000010009004.Значение);

	мФормаОтчета.Области.П000010007005.Значение = Мин(мФормаОтчета.Области.П000010004005.Значение, мФормаОтчета.Области.П000010007005.Значение);
	мФормаОтчета.Области.П000010008005.Значение = Мин(мФормаОтчета.Области.П000010005005.Значение, мФормаОтчета.Области.П000010008005.Значение);
	мФормаОтчета.Области.П000010009005.Значение = Мин(мФормаОтчета.Области.П000010006005.Значение, мФормаОтчета.Области.П000010009005.Значение);

	мФормаОтчета.Области.П000010007003.Значение = мФормаОтчета.Области.П000010007004.Значение + мФормаОтчета.Области.П000010007005.Значение;
	мФормаОтчета.Области.П000010008003.Значение = мФормаОтчета.Области.П000010008004.Значение + мФормаОтчета.Области.П000010008005.Значение;
	мФормаОтчета.Области.П000010009003.Значение = мФормаОтчета.Области.П000010009004.Значение + мФормаОтчета.Области.П000010009005.Значение;

	// строки 11 - 13
	// Невыполненная квота (подлежит оплате) по месяцам  
	мФормаОтчета.Области.П000010011003.Значение = Макс(мФормаОтчета.Области.П000010004003.Значение - мФормаОтчета.Области.П000010007003.Значение, 0);
	мФормаОтчета.Области.П000010012003.Значение = Макс(мФормаОтчета.Области.П000010005003.Значение - мФормаОтчета.Области.П000010008003.Значение, 0);
	мФормаОтчета.Области.П000010013003.Значение = Макс(мФормаОтчета.Области.П000010006003.Значение - мФормаОтчета.Области.П000010009003.Значение, 0);

	мФормаОтчета.Области.П000010011004.Значение = Макс(мФормаОтчета.Области.П000010004004.Значение - мФормаОтчета.Области.П000010007004.Значение, 0);
	мФормаОтчета.Области.П000010012004.Значение = Макс(мФормаОтчета.Области.П000010005004.Значение - мФормаОтчета.Области.П000010008004.Значение, 0);
	мФормаОтчета.Области.П000010013004.Значение = Макс(мФормаОтчета.Области.П000010006004.Значение - мФормаОтчета.Области.П000010009004.Значение, 0);

	мФормаОтчета.Области.П000010011005.Значение = Макс(мФормаОтчета.Области.П000010004005.Значение - мФормаОтчета.Области.П000010007005.Значение, 0);
	мФормаОтчета.Области.П000010012005.Значение = Макс(мФормаОтчета.Области.П000010005005.Значение - мФормаОтчета.Области.П000010008005.Значение, 0);
	мФормаОтчета.Области.П000010013005.Значение = Макс(мФормаОтчета.Области.П000010006005.Значение - мФормаОтчета.Области.П000010009005.Значение, 0);

	// строка 10
	// Невыполненная квота (подлежит оплате) за квартал
	мФормаОтчета.Области.П000010010003.Значение = мФормаОтчета.Области.П000010011003.Значение + мФормаОтчета.Области.П000010012003.Значение + мФормаОтчета.Области.П000010013003.Значение;
	мФормаОтчета.Области.П000010010004.Значение = мФормаОтчета.Области.П000010011004.Значение + мФормаОтчета.Области.П000010012004.Значение + мФормаОтчета.Области.П000010013004.Значение;
	мФормаОтчета.Области.П000010010005.Значение = мФормаОтчета.Области.П000010011005.Значение + мФормаОтчета.Области.П000010012005.Значение + мФормаОтчета.Области.П000010013005.Значение;

	// Раздел II.
	// строки 14 - 16
	мФормаОтчета.Области.П000010014003.Значение = мФормаОтчета.Области.П000010014004.Значение + мФормаОтчета.Области.П000010014005.Значение;
	мФормаОтчета.Области.П000010015003.Значение = мФормаОтчета.Области.П000010015004.Значение + мФормаОтчета.Области.П000010015005.Значение;
	мФормаОтчета.Области.П000010016003.Значение = мФормаОтчета.Области.П000010016004.Значение + мФормаОтчета.Области.П000010016005.Значение;

	// Раздел Справочно
	// строка 17
	мФормаОтчета.Области.П000010017003.Значение = мФормаОтчета.Области.П000010017004.Значение + мФормаОтчета.Области.П000010017005.Значение;

	// Раздел III
	// строка 18
	мФормаОтчета.Области.П000010018003.Значение = мФормаОтчета.Области.П000010018004.Значение + мФормаОтчета.Области.П000010018005.Значение;

	// Раздел IV
	// Начислена обязательная плата
	// по месяцам квартала
	мФормаОтчета.Области.П000010025003.Значение = мФормаОтчета.Области.П000010011003.Значение;
	мФормаОтчета.Области.П000010026003.Значение = мФормаОтчета.Области.П000010012003.Значение;
	мФормаОтчета.Области.П000010027003.Значение = мФормаОтчета.Области.П000010013003.Значение;

	мФормаОтчета.Области.П000010025004.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010025003.Значение * Ставка);
	мФормаОтчета.Области.П000010026004.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010026003.Значение * Ставка);
	мФормаОтчета.Области.П000010027004.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010027003.Значение * Ставка);

	// строка 24
	мФормаОтчета.Области.П000010024003.Значение = мФормаОтчета.Области.П000010010003.Значение;
	мФормаОтчета.Области.П000010024004.Значение = мФормаОтчета.Области.П000010025004.Значение + мФормаОтчета.Области.П000010026004.Значение + мФормаОтчета.Области.П000010027004.Значение;

	// строка 30
	// Всего причитается к платежу 
	мФормаОтчета.Области.П000010030003.Значение = мФормаОтчета.Области.П000010020003.Значение + мФормаОтчета.Области.П000010024003.Значение + мФормаОтчета.Области.П000010028003.Значение;
	мФормаОтчета.Области.П000010030004.Значение = мФормаОтчета.Области.П000010020004.Значение - мФормаОтчета.Области.П000010023004.Значение + мФормаОтчета.Области.П000010024004.Значение + мФормаОтчета.Области.П000010028004.Значение + мФормаОтчета.Области.П000010029004.Значение;

	// строка 34
	// Остаток задолженности на конец отчетного периода
	мФормаОтчета.Области.П000010034003.Значение = Макс(мФормаОтчета.Области.П000010030003.Значение - мФормаОтчета.Области.П000010031003.Значение, 0);
	мФормаОтчета.Области.П000010034004.Значение = Макс(мФормаОтчета.Области.П000010030004.Значение - мФормаОтчета.Области.П000010031004.Значение, 0);

	// строка 36
	// образовавшаяся на 01.08.2002г.
	мФормаОтчета.Области.П000010036003.Значение = Макс(мФормаОтчета.Области.П000010021003.Значение - мФормаОтчета.Области.П000010032003.Значение, 0);
	мФормаОтчета.Области.П000010036004.Значение = Макс(мФормаОтчета.Области.П000010021004.Значение - мФормаОтчета.Области.П000010032004.Значение, 0);

	// строка 37
	// в т.ч. штрафы, пени
	мФормаОтчета.Области.П000010037004.Значение = Макс(мФормаОтчета.Области.П000010022004.Значение + мФормаОтчета.Области.П000010029004.Значение - мФормаОтчета.Области.П000010033004.Значение, 0 );

КонецПроцедуры // Расчет

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ЗаполнитьСведенияОбОрганизации(Истина);

	ЗаполнитьДаты();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// СтавкаПриИзменении
//
Процедура СтавкаПриИзменении(Элемент)

	Расчет();

КонецПроцедуры // СтавкаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленной единицей измерения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленной единицей измерения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

// Версия формы
мВерсияФормы = "01/05/2005";

мПечатныеФормы = Новый СписокЗначений;

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

мСтруктураМногострочныхРазделов = Новый Структура;
