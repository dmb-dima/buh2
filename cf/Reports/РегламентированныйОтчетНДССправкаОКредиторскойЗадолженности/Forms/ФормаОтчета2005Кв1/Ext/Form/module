////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мРаздел1;

// Хранят имена многострочных разделов
Перем мИдГруппы1;
Перем мИдГруппы2;
Перем мИдГруппы3;
Перем мИдГруппы4;
Перем мИдГруппы5;
Перем мИдГруппы6;
Перем мИдГруппы7;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

Перем мОписаниеТиповЧислоЕ;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// Хранит код отчета по КНД
Перем мКодОтчета;

// в случае, если отчет открывается, то они мВерсияФормы = мСтараяВерсияФормы
Перем мСтараяВерсияФормы Экспорт;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

Перем мВПрограммеИзмененаОрганизация;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

// Настройка свойств листов
Перем мСвойстваРазделовДекларации Экспорт;

// Хранит название макета состава показателей
Перем мСоставПоказателей Экспорт;

Перем мДокументВосстановлен;

Перем мРежимПечати;

Перем мОписаниеТиповБулево;

Перем мБезОткрытияФормы;

////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ОбновитьСтруктуруМногостраничныхРазделов
// Обновляет структуру многостраничных разделов формы.
// После обновления структуры выводит в табличный документ
// данные первой страницы из набора страниц.
//
Процедура ОбновитьСтруктуруМногостраничныхРазделов(ИмяСтраницы = Неопределено)

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, имяСтраницы);

КонецПроцедуры // ОбновитьСтруктуруМногостраничныхРазделов()

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда

		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);


	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  мОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 7;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления()

	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт

	Страница = СтрЗаменить(ИмяРаздела, "ПолеТабличногоДокумента", "");
	// Для совместимости
	Возврат;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	ТекТабличноеПоле = мРаздел1;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице() Экспорт
	Перем ИмяГруппы;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел1.ТекущаяОбласть);
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	ТабличноеПолеИмя = ТабличноеПоле.Имя;

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	Если мБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;
		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);
		Если ВариантЗаполнения = 4 Тогда
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;
		Иначе
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
		КонецЕсли;
		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;
	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы
		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Строка(Инд);
				КонецЕсли;

				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				//ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт

	Перем СтруктураГруппы;

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	// Заполняем таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями.
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];

		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки    = Колонка.Имя;
			ИмяЯчейки     = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");

			Если ЭтотПоказательНеЗаполняется(ИмяЯчейки) Тогда
				Продолжить;
			КонецЕсли;

			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;

			ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;

		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Формирует струкутуру данных строк многострочных блоков табличного документа
// на заданной странице основной панели формы.
//
// Параметры
//  ИмяСтраницы  - строка - имя страницы основной панели формы.
//
// Возвращаемое значение:
//   структура   - элементы струкутуры содержат данные дополнительных строк страницы, где
//                 в качестве ключа используется имя многострочного блока, а в качестве
//                 значения - таблица показателей и их значений многострочного блока.
//
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяСтраницы) Экспорт
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяСтраницы = "Раздел4" Тогда

		// Так как Раздел содержит несколько многострочных блоков,
		// то поочередно сохраняем данные дополнительных строк каждого блока.

		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы3);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы4);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		// Обновим структуру, хранящую данные строк многострочных блоков.

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы3, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы3 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы3, ТаблицаДопСтрокГруппы3);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы4, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы4 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы4, ТаблицаДопСтрокГруппы4);

	КонецЕсли;

	Возврат СтруктураДанныхДопСтрокРаздела;

КонецФункции // СформироватьСтруктуруДанныхДопСтрокСтраницы()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	//  Процедура оставлена для совместимости, вызывается из роЗаполнитьСведенияОбОрганизации
	Возврат;

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения = "ИННЮЛ, КППЮЛ, НаимЮЛПол, ";
	КонецЕсли;

	Сведения = Сведения + "ФИОРук, ФИОБух";

	Результат = РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации(ЭтаФорма, Сведения,,"Раздел1");
	
	Если (НЕ ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда
		мРаздел1.Области.ИННКПП.Значение = Результат.ИННЮЛ + ?(ПустаяСтрока(Результат.КППЮЛ), "", "/" + Результат.КППЮЛ);
	КонецЕсли;

	Если (НЕ ВПрограммеИзмененаДатаПодписи) Тогда
		Отказ = Ложь;
		УчетнаяПолитика2005 = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики('20051231', Отказ, Организация, "Регл", Истина);
		мРаздел1.Области.УчетнаяПолитика.Значение = ?(Отказ, "", Нрег(СокрЛП(УчетнаяПолитика2005.МоментОпределенияНалоговойБазыНДС)));
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// УправлениеЛистами
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт

	// Процедура заглушка
	Возврат;

КонецПроцедуры // УправлениеЛистами

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если (ТипДанныхПоказателя = "Е") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

					Если ЭтотПоказательНеЗаполняется(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) Тогда

						Продолжить;

					Иначе
						ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
						ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
						ФорматируемаяОбласть.Формат = мСтрокаФормата;
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку(НомерРаздела = Неопределено)
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	Если НомерРаздела = Неопределено Тогда
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Иначе
		ИмяГруппы = НомерРаздела;
	КонецЕсли;
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(КолСтрок, "ЧГ=0");

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(КолСтрок, "ЧГ=0");
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат((КолСтрок + 1), "ЧГ=0");

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Формат(НовыйПорядковыйНомер, "ЧГ=0"), "");

		КонецЕсли;
	КонецЦикла;

	//// Назначаем новый номер добавленной строке
	//// (данный фрагмент используется в отдельных формах).
	//
	НомерСтрокиОбласть       = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,     2, НомерНижнЯчейкиОбласти,     2);
	НомераСтрокиНоваяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти,2, НомерНижнЯчейкиНовойОбласти,2);
	ПоследнийНомер           = НомерСтрокиОбласть.Текст;

	Если Не ПустаяСтрока(ПоследнийНомер) Тогда
		ИсходныйНомер = Число(ПоследнийНомер);
	Иначе
		ИсходныйНомер = МаксимальноеКоличествоСтрокГруппы;
	КонецЕсли;

	НовыйПорядковыйНомер = ИсходныйНомер + 1;

	НомераСтрокиНоваяОбласть.Текст = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Формат(НовыйПорядковыйНомер, "ЧГ=0"), "");
	//
	//// Назначаем новый номер добавленной строке

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат((КолСтрок + 1), "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// предварительно обновим структуру многострочного раздела
	ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		// Определим область удаляемой строки
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// непосредственно удаляем область строки табличного документа
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + Формат(НСтр, "ЧГ=0");
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + Формат((НСтр - 1), "ЧГ=0");

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Формат(Макс(СтарыйНомер - 1, 0), "ЧГ=0");
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;

				//// Назначаем новый номер сдвигаемой строке
				//// (данный фрагмент используется в отдельных формах).
				//
				//Шаг   = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
				//Сдвиг = (НСтр - НомУдаляемойСтроки - 1) * Шаг;
				//
				//НомерСтрокиСдвигОбласть  = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг, 2, НомерНижнЯчейкиОбласти + Сдвиг, 2);

				//ПоследнийНомер           = НомерСтрокиСдвигОбласть.Текст;
				//НовыйПорядковыйНомер     = "";

				//Если Не ПустаяСтрока(ПоследнийНомер) Тогда
				//	НовыйПорядковыйНомер = Число(ПоследнийНомер) - 1;
				//Иначе
				//	Если Не (НСтр - 1) > ИсходноеКоличествоСтрокГруппы Тогда
				//		ОбластьПредыдущийНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг - Шаг, 2, НомерНижнЯчейкиОбласти + Сдвиг - Шаг, 2);
				//		НовыйПорядковыйНомер   = Число(ОбластьПредыдущийНомер.Текст) + 1;
				//	КонецЕсли;
				//КонецЕсли;

				//НомерСтрокиСдвигОбласть.Текст = НовыйПорядковыйНомер;
				//
				//// Назначаем новый номер сдвигаемой строке

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Формат(ПервыйНомерВГруппе + НомерСтрокиВТаблице, "ЧГ=0");

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомТекущейСтроки, "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;

	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;
	ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Ложь;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат(НомНовойСтроки, "ЧГ=0");

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Формат(НовыйПорядковыйНомер, "ЧГ=0");
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");

			// Пропустим не заполняемые показатели раздела 3.
			Если ЭтотПоказательНеЗаполняется(ИмяЯчейки) Тогда
				Продолжить;
			КонецЕсли;

			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
 Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт

	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.
	МассивМногострочныхБлоков = Новый Массив;
	Если ВыбТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел1" Тогда

		// Раздел 4 содержит два многострочных блока.
		// Поочередно удалим дополнительные строки в каждом из них.
		МассивМногострочныхБлоков.Добавить(мИдГруппы1);
		МассивМногострочныхБлоков.Добавить(мИдГруппы2);
		МассивМногострочныхБлоков.Добавить(мИдГруппы3);
		МассивМногострочныхБлоков.Добавить(мИдГруппы4);
		МассивМногострочныхБлоков.Добавить(мИдГруппы5);
		МассивМногострочныхБлоков.Добавить(мИдГруппы6);
		МассивМногострочныхБлоков.Добавить(мИдГруппы7);

	КонецЕсли;

	Для Инд = 0 По (МассивМногострочныхБлоков.Количество() - 1) Цикл

		// Идентификатор многострочного блока
		ИмяГруппыДопСтрок = МассивМногострочныхБлоков.Получить(Инд);

		// Получим таблицу значений, содержащую данные дополнительных строк.
		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

		ИсходноеКоличествоСтрокГруппы = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.

			НСтр = ПромТаблицаДопСтрокРаздела.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

				ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + Формат(НСтр, "ЧГ=0");

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				// Определим область удаляемой строки
				УдаляемаяОбласть = ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// непосредственно удаляем область строки табличного документа
				ВыбТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

				// удаляем из структуры многострочного раздела соответствующую строку
				ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Имя = "ОргНазв" Или ТекущаяОбласть.Имя = "ИННКПП" 
			Или ТекущаяОбласть.Имя = "Периоды" Или ТекущаяОбласть.Имя = "УчетнаяПолитика"
			Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда

			Если Найти(ТекущаяОбласть.Имя, "П000030001007") = 0  Тогда
				Продолжить;
			КонецЕсли;

		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	ИмяСтраницыПанели = СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", "");
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяСтраницыПанели);

	Если ИмяГруппыДопСтрок <> Неопределено Тогда

		Если ВыбТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел1" Тогда
			ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы1);
			ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы2);
			ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы3);
			ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы4);
			ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы5);
			ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы6);
			ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы7);
		Иначе
			ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);
		КонецЕсли;

		// Пересчитаем автоматически вычисляемые ячейки таблицы.
		Расчет();
	КонецЕсли;

КонецПроцедуры // ОчиститьТабличноеПоле()

Процедура РазбитьПечатнуюФорму(ПечФорма)

	ИмяФормы = "Справка о кредиторской задоженности";
	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = Истина;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	
	Для Сч = 1 По ПечФорма.ВысотаТаблицы Цикл
		
		ВремТаблДок = Новый ТабличныйДокумент;
		ВремТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
		Если ВремТаблДок.Область(ВремТаблДок.ВысотаТаблицы, 0, ВремТаблДок.ВысотаТаблицы, 0).КонецСтраницы Тогда
			ВремТаблДок.Область(ВремТаблДок.ВысотаТаблицы, 0, ВремТаблДок.ВысотаТаблицы, 0).КонецСтраницы = Ложь;
		КонецЕсли;
		Если мПечатныеФормы.Количество() = 0 Тогда
			ВремТаблДок.Вывести(ЭлементыФормы.ПолеТабличногоДокументаРаздел1.ПолучитьОбласть("Сноска1"));
		КонецЕсли;
		Если ВремТаблДок.Области.Найти("ОснованиеСноски2") <> Неопределено Тогда
			ВремТаблДок.Вывести(ЭлементыФормы.ПолеТабличногоДокументаРаздел1.ПолучитьОбласть("Сноска2"));
		КонецЕсли;
		ВремТаблДок.АвтоМасштаб = Истина;
		ВремТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ВремТаблДок.ЧерноБелаяПечать = Истина;
		ВремТаблДок.ЧерноБелыйПросмотр = Истина;
		
		Если ВремТаблДок.КоличествоСтраниц() > 1 Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			Если НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы Тогда
				НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы = Ложь;
			КонецЕсли;
			Если мПечатныеФормы.Количество() = 0 Тогда
				НовТаблДок.Вывести(ЭлементыФормы.ПолеТабличногоДокументаРаздел1.ПолучитьОбласть("Сноска1"));
			КонецЕсли;
			Если НовТаблДок.Области.Найти("ОснованиеСноски2") <> Неопределено Тогда
				НовТаблДок.Вывести(ЭлементыФормы.ПолеТабличногоДокументаРаздел1.ПолучитьОбласть("Сноска2"));
			КонецЕсли;
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			Если НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы Тогда
				НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы = Ложь;
			КонецЕсли;
			Если мПечатныеФормы.Количество() = 0 Тогда
				НовТаблДок.Вывести(ЭлементыФормы.ПолеТабличногоДокументаРаздел1.ПолучитьОбласть("Сноска1"));
			КонецЕсли;
			Если НовТаблДок.Области.Найти("ОснованиеСноски2") <> Неопределено Тогда
				НовТаблДок.Вывести(ЭлементыФормы.ПолеТабличногоДокументаРаздел1.ПолучитьОбласть("Сноска2"));
			КонецЕсли;
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			//Если НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы Тогда
			//	НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы = Ложь;
			//КонецЕсли;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		НовТаблДок = Новый ТабличныйДокумент();
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		Если НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы Тогда
			НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы = Ложь;
		КонецЕсли;
		Если НовТаблДок.Области.Найти("ОснованиеСноски2") <> Неопределено Тогда
			НовТаблДок.Вывести(ЭлементыФормы.ПолеТабличногоДокументаРаздел1.ПолучитьОбласть("Сноска2"));
		КонецЕсли;
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ЧтоИскать <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяТабличногоПоля, НаименованиеЛиста, ЧтоИскать", "ПолеТабличногоДокументаРаздел1", "Справка о кредиторской задолженности", ЧтоИскать);
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПоиска);
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();

	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.Вывести(ЭлементыФормы.ПолеТабличногоДокументаРаздел1);
	ПечатнаяФорма.УдалитьОбласть(ПечатнаяФорма.Область("Сноска1"), ТипСмещенияТабличногоДокумента.ПоВертикали);
	ПечатнаяФорма.УдалитьОбласть(ПечатнаяФорма.Область("Сноска2"), ТипСмещенияТабличногоДокумента.ПоВертикали);
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	
	РазбитьПечатнуюФорму(ПечатнаяФорма);
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()

// ПолучитьКодИМНС
// Возвращает код ИМНС из справочника организации
//
Функция ПолучитьКодИМНС()

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат "";
	КонецЕсли;

	Сведения = Новый СписокЗначений;

	Сведения.Добавить("", "КодНО");

	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, Сведения);

	КодНО = "";

	ОргСведения.Свойство("КодНО", КодНО);

	Если КодНО = Неопределено Или РегламентированнаяОтчетность.ПустоеЗначение(КодНО) Тогда
		Результат = "";
	Иначе
		Результат = КодНО;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьКодИМНС

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт
	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = ПолучитьКодИМНС();

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.КодИМНС                    = КодИФНС;

	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// обновляем структуру многостраничных разделов
	ОбновитьСтруктуруМногостраничныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоСтраницОтчета();

	КлючУникальности = мСохраненныйДок.Ссылка;
	
	//СохранениеДереваНастройкиСтраниц();
	
	Модифицированность = Ложь;
	
	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий 			 = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда

			мСтараяВерсияФормы = ВерсияФормы;

			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);

		КонецЦикла;

	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	УстановитьФорматВывода();

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	// Выводим дату подписания отчета
	// ЗаполнитьДатуВЯчейках();

	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;

	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИдГруппы = "") Экспорт
	Перем СтруктураГруппы;

	Если ФлажокОтклАвтоРасчет Или мРежимПечати Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;

	Для Каждого Блок Из мСтруктураМногострочныхРазделов Цикл

		Если ИдГруппы <> "" Тогда
			Если ИдГруппы <> Блок.Ключ Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		СтруктураГруппы = Блок.Значение;
		Итог1 = 0;
		Итог2 = 0;
		Итог3 = 0;
		Итог4 = 0;

		СчСтрок = 0;
		Для Каждого Стр Из СтруктураГруппы Цикл

			СчСтрок = СчСтрок + 1;
			Итог1 = Итог1 + ОкруглитьЧислоПоФормату(мРаздел1.Области[Блок.Ключ + "04_" + Формат(СчСтрок, "ЧГ=0")].Значение);
			Итог2 = Итог2 + ОкруглитьЧислоПоФормату(мРаздел1.Области[Блок.Ключ + "05_" + Формат(СчСтрок, "ЧГ=0")].Значение);

			Если Блок.Ключ = мИдГруппы7 Тогда
				Итог3 = Итог3 + ОкруглитьЧислоПоФормату(мРаздел1.Области[Блок.Ключ + "07_" + Формат(СчСтрок, "ЧГ=0")].Значение);
				Итог4 = Итог4 + ОкруглитьЧислоПоФормату(мРаздел1.Области[Блок.Ключ + "08_" + Формат(СчСтрок, "ЧГ=0")].Значение);
			КонецЕсли;
		КонецЦикла;

		Если Блок.Ключ = мИдГруппы7 Тогда
			мРаздел1.Области.П000010002704.Значение = Итог1;
			мРаздел1.Области.П000010002705.Значение = Итог2;
			мРаздел1.Области.П000010002707.Значение = Итог3;
			мРаздел1.Области.П000010002708.Значение = Итог4;
		Иначе
			мРаздел1.Области["П000010002" + Сред(Блок.Ключ, 10,1) + "04"].Значение = Итог1;
			мРаздел1.Области["П000010002" + Сред(Блок.Ключ, 10,1) + "05"].Значение = Итог2;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // Расчет()

// ЭтотПоказательНеЗаполняется
//
Функция ЭтотПоказательНеЗаполняется(Знач КодПоказателя)

	Если   КодПоказателя = "П000030001004_1"
	   Или КодПоказателя = "П000030001004_3"
	   Или КодПоказателя = "П000030001004_5"
	   Или КодПоказателя = "П000030001004_6"
	   Или КодПоказателя = "П000030001004_7"
	   Или КодПоказателя = "П000030001004_13"
	   Или КодПоказателя = "П000030001004_14"

	   Или КодПоказателя = "П000030001003_2"
	   Или КодПоказателя = "П000030001003_4"
	   Или КодПоказателя = "П000030001003_12"

	   Или Найти(КодПоказателя, "П000030001008") > 0
	   Или Найти(КодПоказателя, "П000030001009") > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ЭтотПоказательНеЗаполняется

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	мБезОткрытияФормы = БезОткрытияФормы;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	ФормироватьСтруктуруСвойствСтраниц();
	мРежимПечати = Ложь;

	мАвтоВыборКодов = Ложь;
	мВПрограммеИзмененаОрганизация = Ложь;
	мСтараяВерсияФормы = мВерсияФормы;
	мДокументВосстановлен = Ложь;

	мРаздел1   = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);
		ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления();
	КонецЕсли;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
					Если ЭтотПоказательНеЗаполняется(КодПоказателя) Тогда

						// Пропустим из-за особенностей реализации данной декларации.
						// Многострочность.
						Продолжить;

					КонецЕсли;

					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

			УстановитьФорматВывода();
			
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		Если НЕ мБезОткрытияФормы Тогда
			УправлениеЛистами();
		КонецЕсли;
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		Если НЕ мБезОткрытияФормы Тогда
			УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);
		КонецЕсли;

	КонецЦикла;

	Если НЕ мБезОткрытияФормы Тогда
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма);
	КонецЕсли;

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// КоманднаяПанельФормыРасширитьПолеБланка
//
Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)

	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыРасширитьПолеБланка

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

    Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоСтраницОтчета();

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// СохранитьДеревоСтраницОтчета
//
Процедура СохранитьДеревоСтраницОтчета()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // СохранитьДеревоСтраницОтчета

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный);

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе") > 0 Тогда
		ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИдГруппы <> Неопределено Тогда
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
			ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
		КонецЕсли;
		// управляем доступностью кнопок "Добавить" и "Удалить"
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма, ТекущаяОбласть, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Истина;

	// Заполним дату на листах
	ЗаполнитьДатуВЯчейках();

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Ложь;

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура вызывается при активизации поля табличного документа на странице
// "Раздел 1" основной панели формы. Определяет текущую область табличного
// документа и вызывает процедуру управления доступностью кнопок "Добавить"
// и "Удалить".
//
Процедура ПолеТабличногоДокументаРаздел1ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел1ПриАктивизацииОбласти()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную
// строку на странице "Раздел 3" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиРаздел1Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел1Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную
// строку на странице "Раздел 6" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиРаздел1Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();

	Если ИмяГруппы <> Неопределено Тогда
		Расчет(ИмяГруппы);
	КонецЕсли;

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел1Нажатие()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Справка о кредиторской задолженности";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			// Код показателя по структуре определяется по колонке 9 макета
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Функция ПакетнаяПечать(ПечДок) Экспорт
	
КонецФункции

// КоманднаяПанельФормыЗаполнить
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	ЗаполнитьАвто();
КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// ЗаполнитьАвто
//
Процедура ЗаполнитьАвто() Экспорт
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонфигурации <> "БП" Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 
	
	//Подготовка данных 
	Результат = ПолучитьДанныеПоРазделу1(Организация);
	ИнформацияОЗадолженности = ПолучитьИнформациюОСостоянииРасчетов(Организация, ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Результат.ВыгрузитьКолонку("Документ"),Истина));
	
	СкорректироватьРезультатПоИнформацииОЗадолженности(Результат,ИнформацияОЗадолженности,Истина);

	Раздел1 = Результат.Скопировать();
	
	БазоваяТаблица = новый ТаблицаЗначений();
	БазоваяТаблица.Колонки.Добавить("Документ");
	БазоваяТаблица.Колонки.Добавить("СчетФактура");
	БазоваяТаблица.Колонки.Добавить("Контрагент");
	БазоваяТаблица.Колонки.Добавить("ДатаИНомерСчетаФактуры");
	БазоваяТаблица.Колонки.Добавить("СуммаСНДС");
	БазоваяТаблица.Колонки.Добавить("НДС");
	
	Раздел11 = БазоваяТаблица.Скопировать();
	Раздел12 = БазоваяТаблица.Скопировать();
	
	УчетНДС.ПереименованиеКолонок(Результат,новый Структура("СуммаСНДС,НДС,СуммаСНДС_СМРПодрядные,НДС_СМРПодрядные","СуммаСНДС_Всего","НДС_Всего","СуммаСНДС","НДС"));
	СкорректироватьРезультатПоИнформацииОЗадолженности(Результат,ИнформацияОЗадолженности);
	
	Для каждого СтрокаРезультата Из Результат Цикл
		Если не СтрокаРезультата.СуммаСНДС =0 тогда 
			Если СтрокаРезультата.ДокументДата<'20050101' Тогда
				НоваяСтрока = Раздел11.Добавить();
			Иначе
				НоваяСтрока = Раздел12.Добавить();
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРезультата);
		КонецЕсли; 
	КонецЦикла; 
	
	Результат = ПолучитьДанныеПоСтроительству(Организация);
	СкорректироватьРезультатПоИнформацииОЗадолженности(Результат,ИнформацияОЗадолженности,,"СуммаСНДСдо2005","НДСдо2005");
	СкорректироватьРезультатПоИнформацииОЗадолженности(Результат,ИнформацияОЗадолженности,,"СуммаСНДС2005","НДС2005");
	
	Раздел14 = БазоваяТаблица.Скопировать();
	Раздел15 = БазоваяТаблица.Скопировать();
	
	Для каждого СтрокаРезультата Из Результат Цикл
		Если не СтрокаРезультата.СуммаСНДСдо2005 = 0 тогда 
			НоваяСтрока = Раздел14.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРезультата);
			НоваяСтрока.СуммаСНДС = СтрокаРезультата.СуммаСНДСдо2005;
			НоваяСтрока.НДС = СтрокаРезультата.НДСдо2005;
		КонецЕслИ;
		Если не СтрокаРезультата.СуммаСНДС2005 = 0 тогда 
			НоваяСтрока = Раздел15.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРезультата);
			НоваяСтрока.СуммаСНДС = СтрокаРезультата.СуммаСНДС2005;
			НоваяСтрока.НДС = СтрокаРезультата.НДС2005;
		КонецЕслИ;
	КонецЦикла;
	
	Результат = ПолучитьДанныеПоОСиНМА(Организация);
	СкорректироватьРезультатПоИнформацииОЗадолженности(Результат,ИнформацияОЗадолженности);
	
	Раздел13 = БазоваяТаблица.Скопировать();
	Раздел2 = БазоваяТаблица.Скопировать();
	
	Для каждого СтрокаРезультата Из Результат Цикл
		Если СтрокаРезультата.НаСтроительство тогда 
			НоваяСтрока = Раздел13.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРезультата);
		Иначе
			НоваяСтрока = Раздел2.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРезультата);
		КонецЕслИ;
	КонецЦикла;
	
	ГруппаТаблиц = Новый Соответствие();
	ГруппаТаблиц.Вставить(мИдГруппы1,Раздел1);
	ГруппаТаблиц.Вставить(мИдГруппы2,Раздел11);
	ГруппаТаблиц.Вставить(мИдГруппы3,Раздел12);
	ГруппаТаблиц.Вставить(мИдГруппы4,Раздел13);
	ГруппаТаблиц.Вставить(мИдГруппы5,Раздел14);
	ГруппаТаблиц.Вставить(мИдГруппы6,Раздел15);
	ГруппаТаблиц.Вставить(мИдГруппы7,Раздел2);
	//Подготовка данных 
	
	ОчиститьТабличноеПоле(мРаздел1);
	
	Для каждого Раздел Из ГруппаТаблиц Цикл
		
		// Активизация текущего раздела
		
		НомерРаздела = Раздел.Ключ;
		
		Если НомерРаздела = мИдГруппы2 Тогда
			КолвоВгруппе = 4;
		Иначе	
			КолвоВгруппе = 3;
		КонецЕсли; 
		
		ТекПозиция = 0;
		
		ТаблицаРаздела = Раздел.Значение;
		
		
		Для каждого СтрокаРаздела из ТаблицаРаздела Цикл
			
			ТекПозиция = ТекПозиция + 1;
			
			Если ТекПозиция > КолвоВгруппе Тогда
				ВставитьДополнительнуюСтроку(Раздел.Ключ);
			КонецЕсли;
			
			СтрСтр = "_" + Формат(ТекПозиция, "ЧГ=0");
			
			СведенияОКонтрагенте = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СтрокаРаздела.Контрагент,'20051231');
			
			КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "КПП,", Ложь);
			Если ЗначениеЗаполнено(КПП) Тогда
				КПП = "/" + КПП;
			КонецЕсли;
			
			ПредставлениеПоставщика       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование,")+
			" (ИНН/КПП : " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ИНН,", Ложь) + КПП+")";
			
			мРаздел1.Области[НомерРаздела+"01" + СтрСтр].Значение = Формат(ТекПозиция, "ЧГ=0");
			мРаздел1.Области[НомерРаздела+"02" + СтрСтр].Значение = ПредставлениеПоставщика;
			мРаздел1.Области[НомерРаздела+"03" + СтрСтр].Значение = СтрокаРаздела.ДатаИНомерСчетаФактуры;
			мРаздел1.Области[НомерРаздела+"04" + СтрСтр].Значение = СтрокаРаздела.СуммаСНДС;
			мРаздел1.Области[НомерРаздела+"05" + СтрСтр].Значение = СтрокаРаздела.НДС;
			
		КонецЦикла;
	КонецЦикла; 
	Расчет("");
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;
	ИмяТекущейСтраницыПанели = "Раздел1";

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;
	НомерСтроки = Сред(ОбластьИмя, 15);
	НомерИзменяемойКолонки = Сред(ОбластьИмя, 13, 1);

	Если Найти(ОбластьИмя, мИдГруппы1) > 0 Тогда
		ГруппаРасчета = мИдГруппы1;
	ИначеЕсли Найти(ОбластьИмя, мИдГруппы2) > 0 Тогда
		ГруппаРасчета = мИдГруппы2;
	ИначеЕсли Найти(ОбластьИмя, мИдГруппы3) > 0 Тогда
		ГруппаРасчета = мИдГруппы3;
	ИначеЕсли Найти(ОбластьИмя, мИдГруппы4) > 0 Тогда
		ГруппаРасчета = мИдГруппы4;
	ИначеЕсли Найти(ОбластьИмя, мИдГруппы5) > 0 Тогда
		ГруппаРасчета = мИдГруппы5;
	ИначеЕсли Найти(ОбластьИмя, мИдГруппы6) > 0 Тогда
		ГруппаРасчета = мИдГруппы6;
	ИначеЕсли Найти(ОбластьИмя, мИдГруппы7) > 0 Тогда
		ГруппаРасчета = мИдГруппы7;
	Иначе
		ГруппаРасчета = Неопределено;
	КонецЕсли;

	Если ((НомерИзменяемойКолонки = "4") Или (НомерИзменяемойКолонки = "5"))
	Или (((НомерИзменяемойКолонки = "7") Или (НомерИзменяемойКолонки = "8")
	И (ГруппаРасчета = мИдГруппы7))) Тогда
		Расчет(ГруппаРасчета);
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

// Определение состояния расчетов по списку счетов фактур
// СписокСчетовФактур - Массив или список значений
//
// Возвращаемое значение:
//   ТаблицаЗначений   – таблица задолженности по документам
//
Функция ПолучитьИнформациюОСостоянииРасчетов(ТекущаяОрганизация, СписокСчетовФактур)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСРасчетыСПоставщикамиОстатки.Документ КАК Документ,
	               |	НДСРасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаСНДС
	               |ИЗ
	               |	РегистрНакопления.НДСРасчетыСПоставщиками.Остатки(
	               |		&Начало2006Года,
	               |		Организация = &Организация
	               |		    И Документ В (&СписокСчетовФактур)
	               |		    И (НЕ РасчетыСБюджетом)) КАК НДСРасчетыСПоставщикамиОстатки
	               |ГДЕ
	               |	НДСРасчетыСПоставщикамиОстатки.СуммаОстаток > 0";

	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("Организация", ТекущаяОрганизация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
КонецФункции // ПолучитьИнформациюОСостоянииРасчетов
 
Процедура СкорректироватьРезультатПоИнформацииОЗадолженности(Результат,ИнформацияОЗадолженности, ОбработкаОсновногоРаздела = Ложь, КолонкаСНДС = "СуммаСНДС",КолонкаНДС = "НДС" )
	СтрокиКУдалению = Новый	Массив();
	Если ОбработкаОсновногоРаздела Тогда
		ИнформацияОЗадолженности.Колонки.Добавить("ТребуетсяРасчет", Новый ОписаниеТипов("Булево"));
		ИнформацияОЗадолженности.Колонки.Добавить("СуммаСНДС_Полная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли; 
	
	Для каждого СтрокаДокумента Из Результат Цикл
		СтрокаЗадолженности = ИнформацияОЗадолженности.Найти(СтрокаДокумента.Документ,"Документ");
		Если СтрокаЗадолженности = Неопределено Тогда
		    // Нет кредиторки, вычет не осуществлен по другим причинам
			СтрокиКУдалению.Добавить(СтрокаДокумента);
		    Продолжить;
		КонецЕсли;  
		
		Если ОбработкаОсновногоРаздела Тогда
			
			Если СтрокаЗадолженности.СуммаСНДС >= СтрокаДокумента.СуммаСНДС Тогда
				// Сумма кредиторки выше, чем доступный к последующему вычету НДС 
				// (производилось включение в стоимость или реализация на экспорт.
				// или равна доступному к последующему вычету НДС.
				// Корректировка строки не требуется
				Продолжить;
			КонецЕсли; 
		
			СтрокаЗадолженности.ТребуетсяРасчет = Истина;
			СтрокаЗадолженности.СуммаСНДС_Полная = СтрокаДокумента.СуммаСНДС;
			
			СуммаСНДСкОтражению = мин(СтрокаЗадолженности.СуммаСНДС,СтрокаДокумента.СуммаСНДС);
			НДСКОтражению = Окр(СтрокаДокумента.НДС * СуммаСНДСкОтражению/СтрокаДокумента.СуммаСНДС,2);
			
			
			СтрокаДокумента.СуммаСНДС = СуммаСНДСкОтражению;
			СтрокаДокумента.НДС = НДСкОтражению;
			
		ИначеЕсли СтрокаЗадолженности.ТребуетсяРасчет и не СтрокаДокумента[КолонкаСНДС]=0 тогда
			
			СуммаСНДСкОтражению =	Окр(СтрокаДокумента[КолонкаСНДС]	* СтрокаЗадолженности.СуммаСНДС/СтрокаЗадолженности.СуммаСНДС_Полная,2);
			НДСКОтражению =			Окр(СтрокаДокумента[КолонкаНДС]			* СтрокаЗадолженности.СуммаСНДС/СтрокаЗадолженности.СуммаСНДС_Полная,2);
			
			СтрокаДокумента[КолонкаСНДС] = СуммаСНДСкОтражению;
			СтрокаДокумента[КолонкаНДС] = НДСкОтражению;
		КонецЕсли; 
	КонецЦикла; 	
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
	    Результат.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
КонецПроцедуры
 
Функция ПолучитьДанныеПоРазделу1(ТекущаяОрганизация)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.СчетФактура КАК Документ,
		|	НДСПредъявленныйОстатки.Поставщик КАК Контрагент,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК НДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК СуммаСНДС,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &ПустаяДата) КАК ДокументДата,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.СчетФактура ССЫЛКА Документ.ГТДИмпорт
		|			ТОГДА НДСПредъявленныйОстатки.СчетФактура
		|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЕСТЬNULL(СчетФактураВыданный.Ссылка, НЕОПРЕДЕЛЕНО)
		|		ИНАЧЕ СчетФактураПолученный.Ссылка
		|	КОНЕЦ КАК СчетФактура,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.СчетФактура ССЫЛКА Документ.ГТДИмпорт
		|			ТОГДА НДСПредъявленныйОстатки.СчетФактура.Дата
		|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЕСТЬNULL(СчетФактураВыданный.Дата, НЕОПРЕДЕЛЕНО)
		|		ИНАЧЕ СчетФактураПолученный.ДатаВходящегоДокумента
		|	КОНЕЦ КАК ДатаСФ,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.СчетФактура ССЫЛКА Документ.ГТДИмпорт
		|			ТОГДА НДСПредъявленныйОстатки.СчетФактура.НомерГТД
		|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЕСТЬNULL(СчетФактураВыданный.Номер, НЕОПРЕДЕЛЕНО)
		|		ИНАЧЕ СчетФактураПолученный.НомерВходящегоДокумента
		|	КОНЕЦ КАК НомерСФ,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПредъявленныйОстатки.ВидЦенности = &СМРПодрядные
		|				ТОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДС_СМРПодрядные,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПредъявленныйОстатки.ВидЦенности = &СМРПодрядные
		|				ТОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаСНДС_СМРПодрядные
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|		&Начало2006Года,
		|		Организация = &Организация
		|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|		&Начало2006Года,
		|		Организация = &Организация
		|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйРеализация0Остатки
		|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСПредъявленныйРеализация0Остатки.СчетФактура
		|			И НДСПредъявленныйОстатки.ВидЦенности = НДСПредъявленныйРеализация0Остатки.ВидЦенности
		|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСПредъявленныйРеализация0Остатки.СтавкаНДС
		|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ПО (НДСПредъявленныйОстатки.СчетФактура = СчетФактураВыданный.ДокументОснование
		|				ИЛИ НДСПредъявленныйОстатки.СчетФактура = СчетФактураВыданный.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|		ПО (НДСПредъявленныйОстатки.СчетФактура = СчетФактураПолученный.ДокументОснование
		|				ИЛИ НДСПредъявленныйОстатки.СчетФактура = СчетФактураПолученный.Ссылка)
		|ГДЕ
		|	(НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСПредъявленныйОстатки.НДСОстаток > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПредъявленныйОстатки.СчетФактура,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &ПустаяДата),
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.СчетФактура ССЫЛКА Документ.ГТДИмпорт
		|			ТОГДА НДСПредъявленныйОстатки.СчетФактура
		|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЕСТЬNULL(СчетФактураВыданный.Ссылка, НЕОПРЕДЕЛЕНО)
		|		ИНАЧЕ СчетФактураПолученный.Ссылка
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.СчетФактура ССЫЛКА Документ.ГТДИмпорт
		|			ТОГДА НДСПредъявленныйОстатки.СчетФактура.Дата
		|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЕСТЬNULL(СчетФактураВыданный.Дата, НЕОПРЕДЕЛЕНО)
		|		ИНАЧЕ СчетФактураПолученный.ДатаВходящегоДокумента
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.СчетФактура ССЫЛКА Документ.ГТДИмпорт
		|			ТОГДА НДСПредъявленныйОстатки.СчетФактура.НомерГТД
		|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЕСТЬNULL(СчетФактураВыданный.Номер, НЕОПРЕДЕЛЕНО)
		|		ИНАЧЕ СчетФактураПолученный.НомерВходящегоДокумента
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) > 0 И
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументДата";

	Запрос.УстановитьПараметр("Организация",  ТекущаяОрганизация);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Начало2006Года", '20060101');

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);

	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	
	Запрос.УстановитьПараметр("СМРПодрядные", Перечисления.ВидыЦенностей.СМРПодрядные);
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Результат.Колонки.Добавить("ДатаИНомерСчетаФактуры");
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	СформироватьДополнительнуюТаблицуСчетовФактур = (ИДКонфигурации ="УПП" ИЛИ ИДКонфигурации ="КА"); 
	Если СформироватьДополнительнуюТаблицуСчетовФактур Тогда
	    // В документах счет-фактура введены табличные чати.
		// необходимо определить наличие счета/фактуы по основанию с учетом данной особенности
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураПолученныйДокументыОснования.Ссылка КАК СчетФактура,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента КАК НомерСФ,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента КАК ДатаСФ,
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК Документ
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|ГДЕ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование В(&СписокОснований)
		|	И СчетФактураПолученныйДокументыОснования.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураВыданныйДокументыОснования.Ссылка,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Номер,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата,
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование В(&СписокОснований)
		|	И СчетФактураВыданныйДокументыОснования.Ссылка.Организация = &Организация";
		
		Запрос.УстановитьПараметр("СписокОснований", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Результат.ВыгрузитьКолонку("Документ"),Истина));
		Запрос.УстановитьПараметр("Организация", ТекущаяОрганизация);
		
		ТаблицаСчетовФактур = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	КонецЕсли; 
	
	ПрефиксыРИБиОрганизации = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(ТекущаяОрганизация);
	
	Для каждого СтрокаРезультата Из Результат Цикл
		Если СформироватьДополнительнуюТаблицуСчетовФактур Тогда
		    СтрокаСФИзДополнительнойТаблицы = ТаблицаСчетовФактур.Найти(СтрокаРезультата.Документ, "Документ");
			Если не СтрокаСФИзДополнительнойТаблицы = Неопределено Тогда
				Если не ТипЗнч(СтрокаСФИзДополнительнойТаблицы.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный")
					Тогда
					НомерСФ = Строка(?(НЕ ЗначениеЗаполнено(СтрокаСФИзДополнительнойТаблицы.НомерСФ),"_______", ОбщегоНазначения.ПолучитьНомерНаПечать(Новый Структура("Номер,Организация", СтрокаСФИзДополнительнойТаблицы.НомерСФ,ТекущаяОрганизация),ПрефиксыРИБиОрганизации)));
				Иначе
					НомерСФ = Строка(?(НЕ ЗначениеЗаполнено(СтрокаСФИзДополнительнойТаблицы.НомерСФ),"_______", СокрЛП(СтрокаСФИзДополнительнойТаблицы.НомерСФ)));
				КонецЕсли; 
				
				СтрокаРезультата.ДатаИНомерСчетаФактуры = НомерСФ +" от "+ ?(НЕ ЗначениеЗаполнено(СтрокаСФИзДополнительнойТаблицы.ДатаСФ), "'  .  .    '", Формат(СтрокаСФИзДополнительнойТаблицы.ДатаСФ, "ДФ=dd.MM.yyyy")) ;
			    Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		Если СтрокаРезультата.СчетФактура = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если не ТипЗнч(СтрокаРезультата.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный")
			Тогда
			НомерСФ = Строка(?(НЕ ЗначениеЗаполнено(СтрокаРезультата.НомерСФ),"_______", ОбщегоНазначения.ПолучитьНомерНаПечать(Новый Структура("Номер,Организация", СтрокаРезультата.НомерСФ,ТекущаяОрганизация),ПрефиксыРИБиОрганизации)));
		Иначе
			НомерСФ = Строка(?(НЕ ЗначениеЗаполнено(СтрокаРезультата.НомерСФ),"_______", СокрЛП(СтрокаРезультата.НомерСФ)));
		КонецЕсли; 
		
		СтрокаРезультата.ДатаИНомерСчетаФактуры = НомерСФ +" от "+ ?(НЕ ЗначениеЗаполнено(СтрокаРезультата.ДатаСФ), "'  .  .    '", Формат(СтрокаРезультата.ДатаСФ, "ДФ=dd.MM.yyyy")) ;
		
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции // ПолучитьДанныеПоРазделу1()

Функция ПолучитьДанныеПоСтроительству(ТекущаяОрганизация)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСнаСтроительство.СчетФактура КАК Документ,
	|	НДСПредъявленныйОбороты.Поставщик КАК Контрагент,
	|	ВЫБОР
	|		КОГДА НДСпоОСиНМАОстатки.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|			ТОГДА НДСпоОСиНМАОстатки.СчетФактура
	|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(СчетФактураВыданный.Ссылка, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ СчетФактураПолученный.Ссылка
	|	КОНЕЦ КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА НДСпоОСиНМАОстатки.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|			ТОГДА НДСпоОСиНМАОстатки.СчетФактура.Дата
	|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(СчетФактураВыданный.Дата, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ СчетФактураПолученный.ДатаВходящегоДокумента
	|	КОНЕЦ КАК ДатаСФ,
	|	ВЫБОР
	|		КОГДА НДСпоОСиНМАОстатки.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|			ТОГДА НДСпоОСиНМАОстатки.СчетФактура.НомерГТД
	|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(СчетФактураВыданный.Номер, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ СчетФактураПолученный.НомерВходящегоДокумента
	|	КОНЕЦ КАК НомерСФ,
	|	ВЫБОР
	|		КОГДА НДСнаСтроительство.СуммаБезНДС ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА НДСнаСтроительство.СуммаБезНДС > НДСпоОСиНМАОстатки.СуммаБезНДСОстаток
	|			ТОГДА НДСпоОСиНМАОстатки.СуммаБезНДСОстаток
	|		ИНАЧЕ НДСнаСтроительство.СуммаБезНДС
	|	КОНЕЦ + ВЫБОР
	|		КОГДА НДСнаСтроительство.НДС ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА НДСнаСтроительство.НДС > НДСпоОСиНМАОстатки.НДСОстаток
	|			ТОГДА НДСпоОСиНМАОстатки.НДСОстаток
	|		ИНАЧЕ НДСнаСтроительство.НДС
	|	КОНЕЦ КАК СуммаСНДС2005,
	|	ВЫБОР
	|		КОГДА НДСнаСтроительство.НДС ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА НДСнаСтроительство.НДС > НДСпоОСиНМАОстатки.НДСОстаток
	|			ТОГДА НДСпоОСиНМАОстатки.НДСОстаток
	|		ИНАЧЕ НДСнаСтроительство.НДС
	|	КОНЕЦ КАК НДС2005,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСнаСтроительство.СуммаБезНДС, 0) > НДСпоОСиНМАОстатки.СуммаБезНДСОстаток
	|			ТОГДА 0
	|		ИНАЧЕ НДСпоОСиНМАОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСнаСтроительство.СуммаБезНДС, 0)
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСнаСтроительство.НДС, 0) > НДСпоОСиНМАОстатки.НДСОстаток
	|			ТОГДА 0
	|		ИНАЧЕ НДСпоОСиНМАОстатки.НДСОстаток - ЕСТЬNULL(НДСнаСтроительство.НДС, 0)
	|	КОНЕЦ КАК СуммаСНДСдо2005,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСнаСтроительство.НДС, 0) > НДСпоОСиНМАОстатки.НДСОстаток
	|			ТОГДА 0
	|		ИНАЧЕ НДСпоОСиНМАОстатки.НДСОстаток - ЕСТЬNULL(НДСнаСтроительство.НДС, 0)
	|	КОНЕЦ КАК НДСдо2005
	|ИЗ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки(
	|		&КонецПериода_Граница,
	|		Организация = &Организация
	|			И (НЕ ВидЦенности В (&ВидЦенности))
	|			И Объект ССЫЛКА Справочник.ОбъектыСтроительства) КАК НДСпоОСиНМАОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Обороты(, &КонецПериода_Граница, Период, Организация = &Организация) КАК НДСПредъявленныйОбороты
	|		ПО НДСпоОСиНМАОстатки.СчетФактура = НДСПредъявленныйОбороты.СчетФактура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО (НДСпоОСиНМАОстатки.СчетФактура = СчетФактураВыданный.ДокументОснование
	|				ИЛИ НДСпоОСиНМАОстатки.СчетФактура = СчетФактураВыданный.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО (НДСпоОСиНМАОстатки.СчетФактура = СчетФактураПолученный.ДокументОснование
	|				ИЛИ НДСпоОСиНМАОстатки.СчетФактура = СчетФактураПолученный.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НДСпоОСиНМАОбороты.Объект КАК Объект,
	|			НДСпоОСиНМАОбороты.СчетФактура КАК СчетФактура,
	|			НДСпоОСиНМАОбороты.ВидЦенности КАК ВидЦенности,
	|			НДСпоОСиНМАОбороты.СтавкаНДС КАК СтавкаНДС,
	|			НДСпоОСиНМАОбороты.СчетУчетаНДС КАК СчетУчетаНДС,
	|			НДСпоОСиНМАОбороты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|			НДСпоОСиНМАОбороты.Состояние КАК Состояние,
	|			СУММА(НДСпоОСиНМАОбороты.СуммаБезНДСОборот) КАК СуммаБезНДС,
	|			СУММА(НДСпоОСиНМАОбороты.НДСОборот) КАК НДС
	|		ИЗ
	|			РегистрНакопления.НДСпоОСиНМА.Обороты(
	|				&Начало2005,
	|				&Конец2005,
	|				Период,
	|				Организация = &Организация
	|					И (НЕ ВидЦенности В (&ВидЦенности))
	|					И Состояние = &Состояние_ОжиданиеПринятияКУчетуОбСтр
	|					И Объект ССЫЛКА Справочник.ОбъектыСтроительства) КАК НДСпоОСиНМАОбороты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НДСпоОСиНМАОбороты.СчетУчетаНДС,
	|			НДСпоОСиНМАОбороты.НДСВключенВСтоимость,
	|			НДСпоОСиНМАОбороты.ВидЦенности,
	|			НДСпоОСиНМАОбороты.Состояние,
	|			НДСпоОСиНМАОбороты.СтавкаНДС,
	|			НДСпоОСиНМАОбороты.Объект,
	|			НДСпоОСиНМАОбороты.СчетФактура
	|		
	|		ИМЕЮЩИЕ
	|			(СУММА(НДСпоОСиНМАОбороты.СуммаБезНДСОборот) > 0
	|				ИЛИ СУММА(НДСпоОСиНМАОбороты.НДСОборот) > 0)) КАК НДСнаСтроительство
	|		ПО НДСнаСтроительство.Объект = НДСпоОСиНМАОстатки.Объект
	|			И НДСнаСтроительство.СчетФактура = НДСпоОСиНМАОстатки.СчетФактура
	|			И НДСнаСтроительство.ВидЦенности = НДСпоОСиНМАОстатки.ВидЦенности
	|			И НДСнаСтроительство.СтавкаНДС = НДСпоОСиНМАОстатки.СтавкаНДС
	|			И НДСнаСтроительство.СчетУчетаНДС = НДСпоОСиНМАОстатки.СчетУчетаНДС
	|			И НДСнаСтроительство.НДСВключенВСтоимость = НДСпоОСиНМАОстатки.НДСВключенВСтоимость
	|ГДЕ
	|	НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток > 0
	|	И (НЕ НДСнаСтроительство.НДСВключенВСтоимость)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДСнаСтроительство.СчетФактура.МоментВремени";

	Запрос.УстановитьПараметр("Организация"		, ТекущаяОрганизация);
	Запрос.УстановитьПараметр("Начало2005"	, '20050101');
	Запрос.УстановитьПараметр("Конец2005"	, '20051231235959');
	Запрос.УстановитьПараметр("Состояние_ОжиданиеПринятияКУчетуОбСтр"	, Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства);
	Запрос.УстановитьПараметр("КонецПериода_Граница"	, '20060101');
	//Запрос.УстановитьПараметр("Делитель"	, Делитель);
	
	ВидЦенности = новый Массив;
	// Отработка переходного периода в соответствии с п.6 статьи 3 закона №119-ФЗ
	ВидЦенности.добавить(Перечисления.ВидыЦенностей.СМРПодрядные);
	ВидЦенности.добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидЦенности.добавить(Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства);
	ВидЦенности.добавить(Перечисления.ВидыЦенностей.НМА);
	ВидЦенности.добавить(Перечисления.ВидыЦенностей.ОС);
	ВидЦенности.добавить(Перечисления.ВидыЦенностей.Оборудование);
	ВидЦенности.добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	
	Запрос.УстановитьПараметр("ВидЦенности"	, ВидЦенности);
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Результат.Колонки.Добавить("ДатаИНомерСчетаФактуры");
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	СформироватьДополнительнуюТаблицуСчетовФактур = (ИДКонфигурации ="УПП" ИЛИ ИДКонфигурации ="КА"); 
	Если СформироватьДополнительнуюТаблицуСчетовФактур Тогда
	    // В документах счет-фактура введены табличные чати.
		// необходимо определить наличие счета/фактуы по основанию с учетом данной особенности
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураПолученныйДокументыОснования.Ссылка КАК СчетФактура,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента КАК НомерСФ,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента КАК ДатаСФ,
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК Документ
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|ГДЕ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование В(&СписокОснований)
		|	И СчетФактураПолученныйДокументыОснования.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураВыданныйДокументыОснования.Ссылка,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Номер,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата,
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование В(&СписокОснований)
		|	И СчетФактураВыданныйДокументыОснования.Ссылка.Организация = &Организация";
		
		Запрос.УстановитьПараметр("СписокОснований", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Результат.ВыгрузитьКолонку("Документ"),Истина));
		Запрос.УстановитьПараметр("Организация", ТекущаяОрганизация);
		
		ТаблицаСчетовФактур = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	КонецЕсли; 
	
	ПрефиксыРИБиОрганизации = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
	
	Для каждого СтрокаРезультата Из Результат Цикл
		Если СформироватьДополнительнуюТаблицуСчетовФактур Тогда
		    СтрокаСФИзДополнительнойТаблицы = ТаблицаСчетовФактур.Найти(СтрокаРезультата.Документ, "Документ");
			Если не СтрокаСФИзДополнительнойТаблицы = Неопределено Тогда
				Если не ТипЗнч(СтрокаСФИзДополнительнойТаблицы.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный")
					Тогда
					НомерСФ = Строка(?(НЕ ЗначениеЗаполнено(СтрокаСФИзДополнительнойТаблицы.НомерСФ),"_______", ОбщегоНазначения.ПолучитьНомерНаПечать(Новый Структура("Номер,Организация", СтрокаСФИзДополнительнойТаблицы.НомерСФ,ТекущаяОрганизация),ПрефиксыРИБиОрганизации)));
				Иначе
					НомерСФ = Строка(?(НЕ ЗначениеЗаполнено(СтрокаСФИзДополнительнойТаблицы.НомерСФ),"_______", СокрЛП(СтрокаСФИзДополнительнойТаблицы.НомерСФ)));
				КонецЕсли; 
				
				СтрокаРезультата.ДатаИНомерСчетаФактуры = НомерСФ +" от "+ ?(НЕ ЗначениеЗаполнено(СтрокаСФИзДополнительнойТаблицы.ДатаСФ), "'  .  .    '", Формат(СтрокаСФИзДополнительнойТаблицы.ДатаСФ, "ДФ=dd.MM.yyyy")) ;
			    Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		Если СтрокаРезультата.СчетФактура = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если не ТипЗнч(СтрокаРезультата.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный")
			Тогда
			НомерСФ = Строка(?(НЕ ЗначениеЗаполнено(СтрокаРезультата.НомерСФ),"_______", ОбщегоНазначения.ПолучитьНомерНаПечать(Новый Структура("Номер,Организация", СтрокаРезультата.НомерСФ,ТекущаяОрганизация),ПрефиксыРИБиОрганизации)));
		Иначе
			НомерСФ = Строка(?(НЕ ЗначениеЗаполнено(СтрокаРезультата.НомерСФ),"_______", СокрЛП(СтрокаРезультата.НомерСФ)));
		КонецЕсли; 
		
		СтрокаРезультата.ДатаИНомерСчетаФактуры = НомерСФ +" от "+ ?(НЕ ЗначениеЗаполнено(СтрокаРезультата.ДатаСФ), "'  .  .    '", Формат(СтрокаРезультата.ДатаСФ, "ДФ=dd.MM.yyyy")) ;
		
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

Функция ПолучитьДанныеПоОСиНМА(ТекущаяОрганизация)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Поставщик КАК Контрагент,
	|	ВЫБОР
	|		КОГДА НДСпоОСиНМАОстатки.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|			ТОГДА НДСпоОСиНМАОстатки.СчетФактура
	|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(СчетФактураВыданный.Ссылка, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ СчетФактураПолученный.Ссылка
	|	КОНЕЦ КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА НДСпоОСиНМАОстатки.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|			ТОГДА НДСпоОСиНМАОстатки.СчетФактура.Дата
	|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(СчетФактураВыданный.Дата, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ СчетФактураПолученный.ДатаВходящегоДокумента
	|	КОНЕЦ КАК ДатаСФ,
	|	ВЫБОР
	|		КОГДА НДСпоОСиНМАОстатки.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|			ТОГДА НДСпоОСиНМАОстатки.СчетФактура.НомерГТД
	|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(СчетФактураВыданный.Номер, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ СчетФактураПолученный.НомерВходящегоДокумента
	|	КОНЕЦ КАК НомерСФ,
	|	НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток КАК СуммаСНДС,
	|	НДСпоОСиНМАОстатки.НДСОстаток КАК НДС,
	|	ВЫБОР
	|		КОГДА НДСпоОСиНМАОстатки.Объект ССЫЛКА Справочник.ОбъектыСтроительства
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаСтроительство,
	|	НДСпоОСиНМАОстатки.СчетФактура КАК Документ
	|ИЗ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки(
	|		&КонецПериода_Граница,
	|		Организация = &Организация
	|		    И ВидЦенности В (&ВидЦенности)) КАК НДСпоОСиНМАОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Обороты(, &КонецПериода_Граница, Период, Организация = &Организация) КАК НДСПредъявленныйОбороты
	|		ПО НДСпоОСиНМАОстатки.СчетФактура = НДСПредъявленныйОбороты.СчетФактура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО (НДСпоОСиНМАОстатки.СчетФактура = СчетФактураВыданный.ДокументОснование
	|				ИЛИ НДСпоОСиНМАОстатки.СчетФактура = СчетФактураВыданный.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО (НДСпоОСиНМАОстатки.СчетФактура = СчетФактураПолученный.ДокументОснование
	|				ИЛИ НДСпоОСиНМАОстатки.СчетФактура = СчетФактураПолученный.Ссылка)
	|ГДЕ
	|	НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток > 0
	|	И (НЕ НДСпоОСиНМАОстатки.НДСВключенВСтоимость)";

	Запрос.УстановитьПараметр("Организация"		, ТекущаяОрганизация);
	Запрос.УстановитьПараметр("Начало2005"	, '20050101');
	Запрос.УстановитьПараметр("Конец2005"	, '20051231235959');
	Запрос.УстановитьПараметр("Состояние_ОжиданиеПринятияКУчетуОбСтр"	, Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства);
	Запрос.УстановитьПараметр("КонецПериода_Граница"	, '20060101');
	
	ВидЦенности = новый Массив;

	ВидЦенности.добавить(Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства);
	ВидЦенности.добавить(Перечисления.ВидыЦенностей.НМА);
	ВидЦенности.добавить(Перечисления.ВидыЦенностей.ОС);
	ВидЦенности.добавить(Перечисления.ВидыЦенностей.Оборудование);
	ВидЦенности.добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);

	Запрос.УстановитьПараметр("ВидЦенности"	, ВидЦенности);
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Результат.Колонки.Добавить("ДатаИНомерСчетаФактуры");
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	СформироватьДополнительнуюТаблицуСчетовФактур = (ИДКонфигурации ="УПП" ИЛИ ИДКонфигурации ="КА"); 
	Если СформироватьДополнительнуюТаблицуСчетовФактур Тогда
	    // В документах счет-фактура введены табличные чати.
		// необходимо определить наличие счета/фактуы по основанию с учетом данной особенности
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураПолученныйДокументыОснования.Ссылка КАК СчетФактура,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента КАК НомерСФ,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента КАК ДатаСФ,
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК Документ
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|ГДЕ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование В(&СписокОснований)
		|	И СчетФактураПолученныйДокументыОснования.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураВыданныйДокументыОснования.Ссылка,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Номер,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата,
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование В(&СписокОснований)
		|	И СчетФактураВыданныйДокументыОснования.Ссылка.Организация = &Организация";
		
		Запрос.УстановитьПараметр("СписокОснований", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Результат.ВыгрузитьКолонку("Документ"),Истина));
		Запрос.УстановитьПараметр("Организация", ТекущаяОрганизация);
		
		ТаблицаСчетовФактур = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	КонецЕсли; 
	
	ПрефиксыРИБиОрганизации = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
	
	Для каждого СтрокаРезультата Из Результат Цикл
		Если СформироватьДополнительнуюТаблицуСчетовФактур Тогда
		    СтрокаСФИзДополнительнойТаблицы = ТаблицаСчетовФактур.Найти(СтрокаРезультата.Документ, "Документ");
			Если не СтрокаСФИзДополнительнойТаблицы = Неопределено Тогда
				Если не ТипЗнч(СтрокаСФИзДополнительнойТаблицы.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный")
					Тогда
					НомерСФ = Строка(?(НЕ ЗначениеЗаполнено(СтрокаСФИзДополнительнойТаблицы.НомерСФ),"_______", ОбщегоНазначения.ПолучитьНомерНаПечать(Новый Структура("Номер,Организация", СтрокаСФИзДополнительнойТаблицы.НомерСФ,ТекущаяОрганизация),ПрефиксыРИБиОрганизации)));
				Иначе
					НомерСФ = Строка(?(НЕ ЗначениеЗаполнено(СтрокаСФИзДополнительнойТаблицы.НомерСФ),"_______", СокрЛП(СтрокаСФИзДополнительнойТаблицы.НомерСФ)));
				КонецЕсли; 
				
				СтрокаРезультата.ДатаИНомерСчетаФактуры = НомерСФ +" от "+ ?(НЕ ЗначениеЗаполнено(СтрокаСФИзДополнительнойТаблицы.ДатаСФ), "'  .  .    '", Формат(СтрокаСФИзДополнительнойТаблицы.ДатаСФ, "ДФ=dd.MM.yyyy")) ;
			    Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		Если СтрокаРезультата.СчетФактура = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если не ТипЗнч(СтрокаРезультата.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный")
			Тогда
			НомерСФ = Строка(?(НЕ ЗначениеЗаполнено(СтрокаРезультата.НомерСФ),"_______", ОбщегоНазначения.ПолучитьНомерНаПечать(Новый Структура("Номер,Организация", СтрокаРезультата.НомерСФ,ТекущаяОрганизация),ПрефиксыРИБиОрганизации)));
		Иначе
			НомерСФ = Строка(?(НЕ ЗначениеЗаполнено(СтрокаРезультата.НомерСФ),"_______", СокрЛП(СтрокаРезультата.НомерСФ)));
		КонецЕсли; 
		
		СтрокаРезультата.ДатаИНомерСчетаФактуры = НомерСФ +" от "+ ?(НЕ ЗначениеЗаполнено(СтрокаРезультата.ДатаСФ), "'  .  .    '", Формат(СтрокаРезультата.ДатаСФ, "ДФ=dd.MM.yyyy")) ;
		
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

мСоставПоказателей = "СоставПоказателей2005Кв1";

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповДата      = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп

мИдГруппы1 = "П0000100010";
мИдГруппы2 = "П0000100020";
мИдГруппы3 = "П0000100030";
мИдГруппы4 = "П0000100040";
мИдГруппы5 = "П0000100050";
мИдГруппы6 = "П0000100060";
мИдГруппы7 = "П0000100070";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 3;
КолИсхСтрокИдГруппы2 = 4;
КолИсхСтрокИдГруппы3 = 3;
КолИсхСтрокИдГруппы4 = 3;
КолИсхСтрокИдГруппы5 = 3;
КолИсхСтрокИдГруппы6 = 3;
КолИсхСтрокИдГруппы7 = 3;

// Структура строк многострочного раздела на странице
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000010001001",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(4));
СтруктураГруппы1.Колонки.Добавить("П000010001002", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П000010001003", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П000010001004", мОписаниеТиповЧислоЕ);
СтруктураГруппы1.Колонки.Добавить("П000010001005", мОписаниеТиповЧислоЕ);

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000010002001",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(4));
СтруктураГруппы2.Колонки.Добавить("П000010002002", ОписаниеТиповСтрока254);
СтруктураГруппы2.Колонки.Добавить("П000010002003", ОписаниеТиповСтрока254);
СтруктураГруппы2.Колонки.Добавить("П000010002004", мОписаниеТиповЧислоЕ);
СтруктураГруппы2.Колонки.Добавить("П000010002005", мОписаниеТиповЧислоЕ);

СтруктураГруппы3 = Новый ТаблицаЗначений;
СтруктураГруппы3.Колонки.Добавить("П000010003001",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(4));
СтруктураГруппы3.Колонки.Добавить("П000010003002", ОписаниеТиповСтрока254);
СтруктураГруппы3.Колонки.Добавить("П000010003003", ОписаниеТиповСтрока254);
СтруктураГруппы3.Колонки.Добавить("П000010003004", мОписаниеТиповЧислоЕ);
СтруктураГруппы3.Колонки.Добавить("П000010003005", мОписаниеТиповЧислоЕ);

СтруктураГруппы4 = Новый ТаблицаЗначений;
СтруктураГруппы4.Колонки.Добавить("П000010004001",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(4));
СтруктураГруппы4.Колонки.Добавить("П000010004002", ОписаниеТиповСтрока254);
СтруктураГруппы4.Колонки.Добавить("П000010004003", ОписаниеТиповСтрока254);
СтруктураГруппы4.Колонки.Добавить("П000010004004", мОписаниеТиповЧислоЕ);
СтруктураГруппы4.Колонки.Добавить("П000010004005", мОписаниеТиповЧислоЕ);

СтруктураГруппы5 = Новый ТаблицаЗначений;
СтруктураГруппы5.Колонки.Добавить("П000010005001",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(4));
СтруктураГруппы5.Колонки.Добавить("П000010005002", ОписаниеТиповСтрока254);
СтруктураГруппы5.Колонки.Добавить("П000010005003", ОписаниеТиповСтрока254);
СтруктураГруппы5.Колонки.Добавить("П000010005004", мОписаниеТиповЧислоЕ);
СтруктураГруппы5.Колонки.Добавить("П000010005005", мОписаниеТиповЧислоЕ);

СтруктураГруппы6 = Новый ТаблицаЗначений;
СтруктураГруппы6.Колонки.Добавить("П000010006001",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(4));
СтруктураГруппы6.Колонки.Добавить("П000010006002", ОписаниеТиповСтрока254);
СтруктураГруппы6.Колонки.Добавить("П000010006003", ОписаниеТиповСтрока254);
СтруктураГруппы6.Колонки.Добавить("П000010006004", мОписаниеТиповЧислоЕ);
СтруктураГруппы6.Колонки.Добавить("П000010006005", мОписаниеТиповЧислоЕ);

СтруктураГруппы7 = Новый ТаблицаЗначений;
СтруктураГруппы7.Колонки.Добавить("П000010007001",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(4));
СтруктураГруппы7.Колонки.Добавить("П000010007002", ОписаниеТиповСтрока254);
СтруктураГруппы7.Колонки.Добавить("П000010007003", ОписаниеТиповСтрока254);
СтруктураГруппы7.Колонки.Добавить("П000010007004", мОписаниеТиповЧислоЕ);
СтруктураГруппы7.Колонки.Добавить("П000010007005", мОписаниеТиповЧислоЕ);
СтруктураГруппы7.Колонки.Добавить("П000010007006", ОписаниеТиповДата);
СтруктураГруппы7.Колонки.Добавить("П000010007007", мОписаниеТиповЧислоЕ);
СтруктураГруппы7.Колонки.Добавить("П000010007008", мОписаниеТиповЧислоЕ);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы3, СтруктураГруппы3);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы4, СтруктураГруппы4);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы5, СтруктураГруппы5);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы6, СтруктураГруппы6);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы7, СтруктураГруппы7);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы3, КолИсхСтрокИдГруппы3);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы4, КолИсхСтрокИдГруппы4);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы5, КолИсхСтрокИдГруппы5);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы6, КолИсхСтрокИдГруппы6);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы7, КолИсхСтрокИдГруппы7);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "01/01/2006"; // Первый вариант

// Код отчета, равен КНД
мКодОтчета   = 1151002;

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;
