////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мФизЛица;
Перем мРаздел1;
Перем мРаздел2;
Перем мРаздел21;
Перем мРаздел22;
Перем мРаздел23;
Перем мРаздел24;

// Хранят сведения о должностных лицах
Перем мОргТип;
Перем мОргКодИМНС;
Перем мОргОГРН;

Перем мИННДиректор;
Перем мИННБухгалтер;
Перем мИННФизЛицо;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;

Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;
Перем мПечатаемыеРазделы Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит версию формы отчета
Перем мСтараяВерсияФормы Экспорт;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

// Признак "горячей" смены организации в декларации
Перем мВПрограммеИзмененаОрганизация;

// Коды КБК для раздела 1 с 2005 года
Перем мКБК2005Раздел1;

// Тип НП
Перем мТипНалогоплательщика;

Перем РежимОтладки;

Перем ОбязРазделов Экспорт;

Перем ВариантыФорматовВыгрузки;

Перем ТаблицаСообщений Экспорт;

Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;

Перем мИННЮЛ;
Перем мКППЮЛ;

Перем мПечатныеФормы Экспорт;

// Переменные первого раздела
Перем мКодПлательщикаРаздел1;
Перем мОКАТОРаздел1;

// Переменные первого раздела, входят в многострочную часть
Перем мКБКРаздел1_1;
Перем мСумма0Раздел1_1;
Перем мСумма1Раздел1_1;
Перем мСумма2Раздел1_1;
Перем мСумма3Раздел1_1;

Перем мКБКРаздел1_2;
Перем мСумма0Раздел1_2;
Перем мСумма1Раздел1_2;
Перем мСумма2Раздел1_2;
Перем мСумма3Раздел1_2;

// Настройка свойств листов
Перем мСвойстваРазделовДекларации Экспорт;

Перем мСоставПоказателей Экспорт;

Перем мДокументВосстановлен;

// Поля поиска показателей в таблице состава показателей.
// Должна быть не во всех отчетах, используется в функции роОпределитьСтраницуПанели
Перем мПоляПоискаПоказателяВТСП Экспорт;

Перем СвойстваЗаполненияОтчета Экспорт;
Перем ИДКонфигурации;

////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ВставитьДополнительнуюСтраницу
// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//            в табличное поле которой вставляется дополнительная страница.
//
Процедура ВставитьДополнительнуюСтраницу( ИмяТекущейСтраницыПанели = Неопределено )

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // ВставитьДополнительнуюСтраницу()

// ОбновитьСтруктуруМногостраничныхРазделов
// Обновляет структуру многостраничных разделов формы.
// После обновления структуры выводит в табличный документ
// данные первой страницы из набора страниц.
//
Процедура ОбновитьСтруктуруМногостраничныхРазделов(ИмяСтраницы = Неопределено)

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, имяСтраницы);

КонецПроцедуры // ОбновитьСтруктуруМногостраничныхРазделов()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления()

	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// ОткрытьФормуСпискаДопСтраниц
// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
//
Процедура ОткрытьФормуСпискаДопСтраниц()

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма);

КонецПроцедуры // ОткрытьФормуСпискаДопСтраниц()

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда

		// чтобы убрать полные связи, запустим расчет ещё раз
		Расчет("");
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры // Очистить()

// ПоказатьСтатикРаздела
//
// Отображает на странице основной панели формы, содержащей многостраничный раздел,
// порядковый номер текущей страницы из набора страниц.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащей многостраничный раздел.
//
Процедура ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели)

	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // ПоказатьСтатикСтраницРаздела()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПолучитьСвойствоРаздела
// Получает из дерево св-в необходимый параметр
// Параметры
// ИмяСтраница - название страницы, для которой необходимо получить св-во
// ИмяСвойства - имя настройки
//
Функция ПолучитьСвойствоРаздела(Знач ИмяСтраницы, Знач ИмяСвойства)

	Возврат РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяСтраницы, ИмяСвойства);

КонецФункции // ПолучитьСвойствоРаздела

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Т = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

	//Если (ИмяСтраницыПанели <> "ФизЛица" И ИмяСтраницыПанели <> "Титульный" И ИмяСтраницыПанели = "Раздел1") Тогда

	//	НоваяСтрока = Т.Добавить();
	//	НоваяСтрока.КодПоказателя = "";
	//	НоваяСтрока.ВариантЗаполнения  = 4;
	//	НоваяСтрока.КодПоказателяПоСтруктуре = "Сумма0Раздел1";

	//КонецЕсли;

	Возврат Т;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// ПроставитьНаВсехЛистах()
// Процедура проставляет значения в многостраничных документах
// может использоваться для простановки значений на одном листе, в нескольких позициях
//
// Параметры:
// Значение          - Значение, которое будет проставлено на лист
// ПрефиксНаЛисте    - Смысловая часть ячейки, без индекса в конце, например "ДатаПодписи"
// ЛистИсключение    - Лист, в котором не нужно проставлять данные, лист исключение
// ТолькоДляЛиста    - Название листа, если указано, то только этот лист будет обрабатываться
// ТолькоАктивныйЛистМногостраничнойчасти - Только активный лист, по умолчанию выключен режим
// ИспользоватьНомер - В случае, если параметр повторяется на листе несколько раз, например ИНН или КПП, по умолчанию включен
//
Процедура ПроставитьНаВсехЛистах(Знач Значение, Знач ПрефиксНаЛисте, ЛистИсключение = Неопределено, ТолькоДляЛиста = Неопределено, ТолькоАктивныйЛистМногостраничнойчасти = Ложь, ИспользоватьНомер = Истина, ЛистыМногостраничные = Истина)

	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, Значение, ПрефиксНаЛисте, ЛистИсключение, ТолькоДляЛиста, ТолькоАктивныйЛистМногостраничнойчасти, ИспользоватьНомер, ЛистыМногостраничные);

КонецПроцедуры // ПроставитьНаВсехЛистах()

// СохранитьДанныеМногостраничногоРазделаВактивнойСтранице
// сохраняет данные в актвном листе
// Особенность:
// Процедура только сохраняет данные, не передвигая страница на начальную
// или какую либу другую часть многостраничного раздела
// Используется в следующих частях:
// 1. ОбновитьСтруктуруМногостраничныхРазделов
// 2. ПоказатьСтраницуМногостраничногоРаздела
// 3. ВставитьДополнительнуюСтраницу
// 4. ОткрытьФормуСпискаДопСтраниц
//
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ИмяТекущейСтраницы, ОчищатьРазделЕслиЕстьМногострочность)

	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницы, ОчищатьРазделЕслиЕстьМногострочность);

КонецПроцедуры // СохранитьДанныеМногостраничногоРазделаВактивнойСтранице

// УдалитьДополнительнуюСтраницу
// Удаляет текущую страницу многостраничного раздела формы.
// Программа стандартизации процедур 10.05.2005
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//              в табличном поле которой удаляется дополнительная страница.
//
Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // УдалитьДополнительнуюСтраницу()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяЯчейка);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)

	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, Вариант, ТекущаяОбласть);

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	//

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел1" Тогда

		СтруктураДанныхПоля.Вставить("КодПлательщикаРаздел1",  мКодПлательщикаРаздел1);
		СтруктураДанныхПоля.Вставить("ОКАТОРаздел1",     мОКАТОРаздел1);

		СтруктураДанныхПоля.Вставить("КБКРаздел1_1",     мКБКРаздел1_1);
		СтруктураДанныхПоля.Вставить("Сумма1Раздел1_1",  мСумма1Раздел1_1);
		СтруктураДанныхПоля.Вставить("Сумма2Раздел1_1",  мСумма2Раздел1_1);
		СтруктураДанныхПоля.Вставить("Сумма3Раздел1_1",  мСумма3Раздел1_1);
		СтруктураДанныхПоля.Вставить("Сумма0Раздел1_1",  мСумма0Раздел1_1);

		СтруктураДанныхПоля.Вставить("КБКРаздел1_2",     мКБКРаздел1_2);
		СтруктураДанныхПоля.Вставить("Сумма1Раздел1_2",  мСумма1Раздел1_2);
		СтруктураДанныхПоля.Вставить("Сумма2Раздел1_2",  мСумма2Раздел1_2);
		СтруктураДанныхПоля.Вставить("Сумма3Раздел1_2",  мСумма3Раздел1_2);
		СтруктураДанныхПоля.Вставить("Сумма0Раздел1_2",  мСумма0Раздел1_2);

	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ПолучитьЗначениеКвадратногоЗначенияПоИмени
// функция возвращает значения показателя по имени
//
Функция ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре)

	Рез = 0;
	Если КодПоказателяПоСтруктуре = "КодПлательщикаРаздел1" Тогда
		Рез = мКодПлательщикаРаздел1;
	ИначеЕсли КодПоказателяПоСтруктуре = "ОКАТОРаздел1" Тогда
		Рез = мОКАТОРаздел1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКРаздел1_1" Тогда
		Рез = мКБКРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКРаздел1_2" Тогда
		Рез = мКБКРаздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма1Раздел1_1" Тогда
		Рез = мСумма1Раздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма1Раздел1_2" Тогда
		Рез = мСумма1Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма2Раздел1_1" Тогда
		Рез = мСумма2Раздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма2Раздел1_2" Тогда
		Рез = мСумма2Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма3Раздел1_1" Тогда
		Рез = мСумма3Раздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма3Раздел1_2" Тогда
		Рез = мСумма3Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма0Раздел1_1" Тогда
		Рез = мСумма0Раздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма0Раздел1_2" Тогда
		Рез = мСумма0Раздел1_2;
	КонецЕсли;

	Возврат Рез;

КонецФункции // ПолучитьЗначениеКвадратногоЗначенияПоИмени

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	Если ИмяПоказателя = "ДатаРождСлиста" Тогда
		мДатаРождСлиста = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДатаДок" Тогда
		мДатаДок = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФизЛицИнд" Тогда
		мФизЛицИнд = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КодПлательщикаРаздел1" Тогда
		мКодПлательщикаРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1" Тогда
		мОКАТОРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1_1" Тогда
		мКБКРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1_2" Тогда
		мКБКРаздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Сумма1Раздел1_1" Тогда
		мСумма1Раздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Сумма1Раздел1_2" Тогда
		мСумма1Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Сумма2Раздел1_1" Тогда
		мСумма2Раздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Сумма2Раздел1_2" Тогда
		мСумма2Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Сумма3Раздел1_1" Тогда
		мСумма3Раздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Сумма3Раздел1_2" Тогда
		мСумма3Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Сумма0Раздел1_1" Тогда
		мСумма0Раздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Сумма0Раздел1_2" Тогда
		мСумма0Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						КодПоказателяПоСтруктуре = СтрокаТаблицы.КодПоказателяПоСтруктуре;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				СвойстваГрупповыхЗначений(ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				СвойстваГрупповыхЗначений(ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			СвойстваГрупповыхЗначений(ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			//ЗначениеВКвадратах = ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяПоказателя);
			ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);


			// Если значение не отображается в квадратах, то и ставить формат ячейки не нужно
			Если НЕ ЗначениеВКвадратах Тогда
				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			// Если многострочность, то специальный механизм
			Если (ЗначениеВКвадратах) И (
			(ИмяПоказателя = "П000010003000")
			Или (ИмяПоказателя = "П000010004000")
			Или (Строка.КодПоказателяПоСтруктуре = "Сумма0Раздел1")
			Или (ИмяПоказателя = "П000010005000")) Тогда // КБК

				Если ИмяПоказателя = "П000010003000" Тогда
					МногострочностьИВариантыЗаполнения("СумНалогСтрах1М1",    ВариантЗаполнения);
					МногострочностьИВариантыЗаполнения("СумНалогНакоп1М1",    ВариантЗаполнения);

				ИначеЕсли ИмяПоказателя = "П000010004000" Тогда
					МногострочностьИВариантыЗаполнения("СумНалогСтрах2М1",    ВариантЗаполнения);
					МногострочностьИВариантыЗаполнения("СумНалогНакоп2М1",    ВариантЗаполнения);

				ИначеЕсли ИмяПоказателя = "П000010005000" Тогда
					МногострочностьИВариантыЗаполнения("СумНалогСтрах3М1",    ВариантЗаполнения);
					МногострочностьИВариантыЗаполнения("СумНалогНакоп3М1",    ВариантЗаполнения);

				ИначеЕсли Строка.КодПоказателяПоСтруктуре = "Сумма0Раздел1" Тогда
					МногострочностьИВариантыЗаполнения("СумНалогСтрахВсего1",    ВариантЗаполнения);
					МногострочностьИВариантыЗаполнения("СумНалогНакопВсего1",    ВариантЗаполнения);

				КонецЕсли;

				Продолжить;
			КонецЕсли;

			Если ВариантЗаполнения = 4 Тогда
				//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

				Если ЗначениеВКвадратах Тогда
					// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
					СвойстваГрупповыхЗначений(ИмяПоказателя, "УстановитьЗащиту");
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
				КонецЕсли;

			Иначе

				Если ЗначениеВКвадратах Тогда
					// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
					СвойстваГрупповыхЗначений(ИмяПоказателя,"СнятьЗащиту");
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
			КонецЕсли;

			Если ЗначениеВКвадратах Тогда
				СвойстваГрупповыхЗначений(ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
			Иначе
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// МногострочностьИВариантыЗаполнения
//
Процедура МногострочностьИВариантыЗаполнения(Знач ПервыйПоказатель, Знач ВариантЗаполнения)

	Перем ЦветФона;

	Ключ = "_" + ВариантЗаполнения;
	мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

	Если ВариантЗаполнения = 4 Тогда
		Действие1 = "УстановитьЗащиту";
		Действие2 = "ПроставитьЦветРаскраски";
	Иначе
		Действие1 = "СнятьЗащиту";
		Действие2 = "ПроставитьЦветРаскраски";
	КонецЕсли;

	СвойстваГрупповыхЗначений(ПервыйПоказатель, Действие1, , "Раздел1");
	СвойстваГрупповыхЗначений(ПервыйПоказатель, Действие2, ЦветФона, "Раздел1");

КонецПроцедуры // МногострочностьИВариантыЗаполнения

// Функция ОбластьЯвляетсяЯчейкойСоставногоПоля
// проверяет, является ли переданное имя ячейки частью многоКвадратной
// группы ячеек на листе
// если да - то истина, иначе - Ложь
//
Функция ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяЯчейки, БыстраяПроверка = Истина)

		СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки);
		Если СмысловаяЧасть = "" Тогда
			// не квадратичная ячейка
			Возврат Ложь;
		КонецЕсли;

		Если БыстраяПроверка Тогда
			Возврат Истина;
		КонецЕсли;

		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		// Получаем текущий счетчик
		//ТекущийСчетчик = Сред(ИмяЯчейки,АдресПоследнегоРазделителя+1,СтрДлина(ИмяЯчейки)-АдресПоследнегоРазделителя);
		ТекущийСчетчик = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки,Ложь);
		Если СтрДлина(ТекущийСчетчик)>=2 Тогда

			Если Сред(ТекущийСчетчик, 1, 1) = "0" Тогда
				ПризнакСчетчикаСнулемВпереди = Истина;
			Иначе
				ПризнакСчетчикаСнулемВпереди = Ложь;
			КонецЕсли;
		Иначе
			ПризнакСчетчикаСнулемВпереди = Ложь; // перед счетчиком нет нуля
		КонецЕсли;

		Попытка
			ТекущийСчетчикЦел = Число(ТекущийСчетчик);
		Исключение
			Возврат Ложь;
		КонецПопытки;

		Координата = СмысловаяЧасть + ?(ПризнакСчетчикаСнулемВпереди = Истина,"0" + Строка(ТекущийСчетчикЦел + 1),ТекущийСчетчикЦел + 1);

		Попытка
			Проверка = ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Значение;
		Исключение
			Возврат Ложь
		КонецПопытки;
		// значение получено
		Возврат Истина;

КонецФункции // ОбластьЯвляетсяЯчейкойСоставногоПоля

// процедура управляет показателями на форме оформленные как в квадратных значениях
// Имя Ячейки всегда должно быть первой в квадратичном представлении
//
Процедура СвойстваГрупповыхЗначений (ИмяЯчейки, Операция, ЦветФона = Неопределено, ИмяСтраницы = Неопределено)

	Если ИмяСтраницы = Неопределено Тогда
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ИмяСтраницыПанели = ИмяСтраницы;
	КонецЕсли;

	ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

	СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки);
	Если СмысловаяЧасть = "" Тогда
	// не групповая ячейка
		Возврат;
	КонецЕсли;
	ТекущийСчетчик = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
	ТекущийСчетчикЦел = Число(ТекущийСчетчик);
	МожноРаботать = Истина;
	Пока МожноРаботать Цикл
		Координата = СмысловаяЧасть + Строка(ТекущийСчетчикЦел);

		Попытка
			Если Операция = "УстановитьЗащиту" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Защита = Истина;
			КонецЕсли;

			Если Операция = "СнятьЗащиту" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Защита = Ложь;
			КонецЕсли;

			Если Операция = "ПроставитьЦветРаскраски" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].ЦветФона = ЦветФона;
			КонецЕсли;

			Если Операция = "Очистить" Тогда
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Значение = "";
			КонецЕсли;

		Исключение
			МожноРаботать = Ложь; // далее нет ячеек многоквадратного значения
			Прервать;
		КонецПопытки;
		ТекущийСчетчикЦел = ТекущийСчетчикЦел + 1; // работаем со следующей ячейкой
	КонецЦикла; // Пока

КонецПроцедуры // СвойстваГрупповыхЗначений

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	мТитульный.Области.НалогПериод.Значение = НомерМесяца;

	мТитульный.Области.ОтчетГод1.Значение   = Сред(НомерГода, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение   = Сред(НомерГода, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение   = Сред(НомерГода, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение   = Сред(НомерГода, 4, 1);

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаПодписиРук = "";
	ДатаПодписиБух = "";
	ДатаПодписиФЛ = "";

	Если ЗначениеЗаполнено(мТитульный.Области.ОргДиректор.Значение) Тогда
		ДатаПодписиРук = ДатаПодписи;
	КонецЕсли;

	Если ЗначениеЗаполнено(мТитульный.Области.ОргБухгалтер.Значение) Тогда
		ДатаПодписиБух = ДатаПодписи;
	КонецЕсли;

	Если ЗначениеЗаполнено(мТитульный.Области.ФИОФизЛицо.Значение) Тогда
		ДатаПодписиФЛ = ДатаПодписи;
	КонецЕсли;

	Для НомЯчейки = 1 По 8 Цикл

		мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиРук, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиБух" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиБух, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиФЛ" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиФЛ, "ДФ = 'ддММгггг'"), НомЯчейки, 1);

		мРаздел1.  Области["ДатаПодписи1_"         + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);

		мРаздел24. Области["Дата1_"                + НомЯчейки].Значение = Сред(Формат(ДатаПодписиРук,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мРаздел24. Области["Дата2_"                + НомЯчейки].Значение = Сред(Формат(ДатаПодписиБух,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мРаздел24. Области["Дата3_"                + НомЯчейки].Значение = Сред(Формат(ДатаПодписиФЛ,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);

	КонецЦикла;

	Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(мФизЛица.Области.ФизЛицФИО.Значение) Тогда
		ПроставитьНаВсехЛистах(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), "ДатаПодписи", , "ФизЛица", , Ложь, мВПрограммеИзмененаОрганизация);
	Иначе
		ПроставитьНаВсехЛистах("        ", "ДатаПодписи", , "ФизЛица", , Ложь, мВПрограммеИзмененаОрганизация);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Попытка
		
		Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
			Возврат
		КонецЕсли;
		
		// Составляем список данных, необходимых для вывода в декларацию
		Сведения = Новый СписокЗначений;
		
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			Сведения.Добавить("", "ИННЮЛ"); // ИНН
			Сведения.Добавить("", "КППЮЛ"); // КПП
			
			Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 
			
			Сведения.Добавить("", "ОГРН"); // ОГРН
			Сведения.Добавить("", "ОКАТО"); // ОКАТО
			
			Сведения.Добавить("", "КодНО");  // Код Налогового Органа
			Сведения.Добавить("", "НаимНО"); // Наименование НО
			
			Сведения.Добавить("", "РегНомПФР"); // РегНомПФР
			Сведения.Добавить("", "ТипНП");
			
		КонецЕсли;
		
		Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
		Сведения.Добавить("", "ИННРук"); // ИНН руководителя
		
		Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
		Сведения.Добавить("", "ИННБух"); // ИНН бухгалтера
		
		Сведения.Добавить("", "ФИО"); // ФИО ПБОЮЛа
		
		// Теперь получаем данные из глобальной общей функции
		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
		
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			
			// Инициализируем переменные
			ИННЮЛ = "";
			КППЮЛ = "";
			НаимЮЛПол = "";
			ОГРН = "";
			ОКАТО = "";
			КодНО = "";
			НаимНО = "";
			РегНомПФР = "";
			ТипНП = "";
		КонецЕсли;
		
		ФИОРук = "";
		ИННРук = "";
		ФИОБух = "";
		ИННБух = "";
		ФИО = "";
		
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			// Получаем данные
			ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
			ОргСведения.Свойство("КППЮЛ", КППЮЛ);
			ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
			ОргСведения.Свойство("ОГРН", ОГРН);
			ОргСведения.Свойство("ОКАТО", ОКАТО);
			ОргСведения.Свойство("КодНО", КодНО);
			ОргСведения.Свойство("НаимНО", НаимНО);
			ОргСведения.Свойство("РегНомПФР", РегНомПФР);
			ОргСведения.Свойство("ТипНП", ТипНП);
			
		КонецЕсли;
		
		ОргСведения.Свойство("ФИОРук", ФИОРук);
		ОргСведения.Свойство("ИННРук", ИННРук);
		ОргСведения.Свойство("ФИОБух", ФИОБух);
		ОргСведения.Свойство("ИННБух", ИННБух);
		ОргСведения.Свойство("ФИО", ФИО);
		
		ПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
		
		Если ПБОЮЛ Тогда
			НаимЮЛПол = ФИО;
			ФИОРук = "";
			ФИОБух = "";
		КонецЕсли;
		
		Если ВПрограммеИзмененаДатаПодписи Тогда
			
			// Обновим только то, что зависит от даты подписи и выйдем
			мТитульный.Области.ОргДиректор.Значение  = ФИОРук;
			мТитульный.Области.ОргБухгалтер.Значение = ФИОБух;
			Если ПБОЮЛ Тогда
				мТитульный.Области.ФИОФизЛицо.Значение = ФИО;
				мТитульный.Области.ОргНазв.Значение = НаимЮЛПол;
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		// Заполняем ИНН на всех листах декларации
		// Заполняем ИНН на всех листах декларации
		Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
			ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, " ");
		Иначе
			ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, "0");
		КонецЕсли;
		
		мИННЮЛ = ИННЮЛ;
		КППЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(КППЮЛ, 9, " ");
		
		мКППЮЛ = КППЮЛ;
		
		// Проставлять ИНН и КПП только в новыхо открыты отчетах и при смене ЮЛ
		Если (НЕ мДокументВосстановлен) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
			РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ИННЮЛ, "ИНН", "ФизЛица", ,,, мВПрограммеИзмененаОрганизация);
			РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, КППЮЛ, "КПП", "ФизЛица", ,,, мВПрограммеИзмененаОрганизация);
		КонецЕсли;
		
		УправлениеЛистами(ТипНП);
		
		Признаки = мТитульный.Области.ТипОрг1.Значение
		+ мТитульный.Области.ТипОрг2.Значение
		+ мТитульный.Области.ТипОрг4.Значение
		+ мТитульный.Области.ТипОрг5.Значение
		+ мТитульный.Области.ТипОрг6.Значение
		+ мТитульный.Области.ТипОрг7.Значение;
		
		
		Если (мВПрограммеИзмененаОрганизация) Или (РегламентированнаяОтчетность.ПустоеЗначение(Признаки)) Тогда
			
			Если ТипНП = 1 Тогда
				// Простая организация
				
				мТитульный     .Области["ТипОрг1"].Значение = "V";
				мТитульный     .Области["ТипОрг2"].Значение = "";
				мТитульный     .Области["ТипОрг5"].Значение = "";
				мТитульный     .Области["ТипОрг4"].Значение = "";
				мТитульный     .Области["ТипОрг6"].Значение = "";
				мТитульный     .Области["ТипОрг7"].Значение = "";
				
			ИначеЕсли ТипНП = 2 Тогда
				// Обособленное подразделение
				мТитульный     .Области["ТипОрг1"].Значение = "";
				мТитульный     .Области["ТипОрг2"].Значение = "V";
				мТитульный     .Области["ТипОрг5"].Значение = "";
				мТитульный     .Области["ТипОрг4"].Значение = "";
				мТитульный     .Области["ТипОрг6"].Значение = "";
				мТитульный     .Области["ТипОрг7"].Значение = "";
				
			ИначеЕсли ТипНП = 3 Тогда
				
				мТитульный     .Области["ТипОрг1"].Значение = "";
				мТитульный     .Области["ТипОрг2"].Значение = "";
				мТитульный     .Области["ТипОрг4"].Значение = "V";
				мТитульный     .Области["ТипОрг5"].Значение = "";
				мТитульный     .Области["ТипОрг6"].Значение = "";
				мТитульный     .Области["ТипОрг7"].Значение = "";
				
			ИначеЕсли ТипНП = 5 Тогда
				
				мТитульный     .Области["ТипОрг1"].Значение = "";
				мТитульный     .Области["ТипОрг2"].Значение = "";
				мТитульный     .Области["ТипОрг4"].Значение = "";
				мТитульный     .Области["ТипОрг5"].Значение = "V";
				мТитульный     .Области["ТипОрг6"].Значение = "";
				мТитульный     .Области["ТипОрг7"].Значение = "";
				
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
		// Координаты на листах
		ОГРНКоордината = ?(ТипНП = 3, "ОГРНИП", "ОГРН");
		
		// Работаем с названием ЮЛ
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргНазв.Значение)) Тогда
			// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
			мТитульный.Области.ОргНазв.Значение = НаимЮЛПол;
		КонецЕсли;
		
		// Работаем с ФИО руководителя
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргДиректор.Значение)) Тогда
			мТитульный.Области.ОргДиректор.Значение  = ФИОРук;
		КонецЕсли;
		
		// Работаем с ИНН руководителя
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мИННДиректор)) Тогда
			Попытка
				Для НомЯчейки = 1 По 12 Цикл
					ЦифраИНН = Сред(ИННРук, НомЯчейки, 1);
					мТитульный.Области["ИННРук" + НомЯчейки].Значение = ЦифраИНН;
				КонецЦикла;
			Исключение
			КонецПопытки;
			
			мИННДиректор = ИННРук;
			
		КонецЕсли;
		
		// Работаем с ФИО бухгалтера
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргБухгалтер.Значение)) Тогда
			мТитульный.Области.ОргБухгалтер.Значение = ФИОБух;
		КонецЕсли;
		
		// Работаем с ИНН бухгалтера
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мИННБухгалтер)) Тогда
			
			Попытка
				Для НомЯчейки = 1 По 12 Цикл
					ЦифраИНН = Сред(ИННБух, НомЯчейки, 1);
					мТитульный.Области["ИННГБ" + НомЯчейки].Значение = ЦифраИНН;
				КонецЦикла;
			Исключение
			КонецПопытки;
			мИННБухгалтер = ИННБух;
			
		КонецЕсли;
		
		// Работаем с ОГРН
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мОргОГРН)) Тогда
			ОГРН = РегламентированнаяОтчетность.ДополнитьСтроку(ОГРН, ?(ТипНП = 3, 15, 13), " ");
			Модифицированность = ?(ОГРН = мОргОГРН, Ложь, Истина);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", ОГРНКоордината, ?(ТипНП = 3, 15, 13), ОГРН);
			мОргОГРН = ОГРН;
		КонецЕсли;
		
		// Работаем с ОКАТО, значение мКодОКАТО предварительно считали из квадратиков
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мОКАТОРаздел1)) Тогда
			ОКАТО = РегламентированнаяОтчетность.ДополнитьСтроку(ОКАТО, 11, " ");
			мОКАТОРаздел1 = ОКАТО;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КодОКАТО_", 11, ОКАТО);
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мОргКодИМНС)) Тогда
			КодНО = РегламентированнаяОтчетность.ДополнитьСтроку(КодНО, 4, " ");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "КодИМНС", 4, КодНО);
			мОргКодИМНС = КодНО;
		КонецЕсли;
		
		// Работаем с наименованием инспекции
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.РегНомерПФР.Значение)) Тогда
			мТитульный.Области.РегНомерПФР.Значение = РегНомПФР;
		КонецЕсли;
		
		// Работаем с наименованием инспекции
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргИМНС.Значение)) Тогда
			мТитульный.Области.ОргИМНС.Значение = НаимНО;
		КонецЕсли;
		
		// Работаем с наименованием инспекции
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ФИОФизЛицо.Значение)) Тогда
			мТитульный.Области.ФИОФизЛицо.Значение = ФИО;
		КонецЕсли;
		
		// Даты проставятся всегда при открытии документа или при изменении организации
		Если (НЕ мДокументВосстановлен) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
			ЗаполнитьДатуВЯчейках();
		КонецЕсли;
		
	Исключение
		
		Сообщить("У пользователя недостаточно прав для получения сведений, необходимых для заполнения титульного листа.", СтатусСообщения.ОченьВажное);
		
	КонецПопытки;
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// УправлениеЦветом
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено)

	Если ТипНП = Неопределено Тогда
		ТипНП = 0;

		Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
			Возврат
		КонецЕсли;

		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ТипНП");
		ОргСведения.Свойство("ТипНП", ТипНП);
	КонецЕсли;

	Если ТипНП = 3 Тогда
		УстановитьСвойстваВалидныхЯчеек("Блокировать ячейки ЮЛ", мВПрограммеИзмененаОрганизация);
	ИначеЕсли ТипНП <> 3 Тогда
		УстановитьСвойстваВалидныхЯчеек("Блокировать ячейки ЧП", мВПрограммеИзмененаОрганизация);
	КонецЕсли;

КонецПроцедуры // УправлениеЦветом

// УстановитьСвойстваВалидныхЯчеек
// Блокирует необходимые ячейки, в зависимости от комманды
//
// Параметры:
// КоммандаТекст = может принимать значения "Блокировать ячейки ЮЛ" или "Блокировать ячейки ЧП"
Процедура УстановитьСвойстваВалидныхЯчеек(Знач КоммандаТекст, Знач Очищать)

	НазванияЯчеекОтносящихсяКЮЛ = Новый СписокЗначений;
	//НазванияЯчеекОтносящихсяКЮЛ.Добавить("ОГРН1"   + Символы.ПС + "Титульный"+ Символы.ПС  + "Составная");

	НазванияЯчеекОтносящихсяКЮЛ.Добавить("ТипОрг1" + Символы.ПС + "Титульный" + Символы.ПС + "Несоставная");
	НазванияЯчеекОтносящихсяКЮЛ.Добавить("ТипОрг2" + Символы.ПС + "Титульный"+ Символы.ПС  + "Несоставная");
	НазванияЯчеекОтносящихсяКЮЛ.Добавить("ТипОрг5" + Символы.ПС + "Титульный"+ Символы.ПС  + "Несоставная");
	НазванияЯчеекОтносящихсяКЮЛ.Добавить("ТипОрг6" + Символы.ПС + "Титульный"+ Символы.ПС  + "Несоставная");

	НазванияЯчеекОтносящихсяКЧП = Новый СписокЗначений;
	//НазванияЯчеекОтносящихсяКЧП.Добавить("ОГРНИП1" + Символы.ПС + "Титульный" + Символы.ПС + "Составная");
	НазванияЯчеекОтносящихсяКЧП.Добавить("ТипОрг4" + Символы.ПС + "Титульный" + Символы.ПС + "Несоставная");
	//НазванияЯчеекОтносящихсяКЧП.Добавить("ФИОФизЛицо" + Символы.ПС + "Титульный" + Символы.ПС + "Несоставная");

	ЦветФонаРазБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_0", ЦветФонаРазБлокировки);

	ЦветФонаБлокировки = Неопределено;
	мСтруктураЦветовРаскраски.Свойство("_5", ЦветФонаБлокировки);


	Если КоммандаТекст = "Блокировать ячейки ЮЛ" Тогда
		БлокируемыеЯчейки    = НазванияЯчеекОтносящихсяКЮЛ;
		РазБлокируемыеЯчейки = НазванияЯчеекОтносящихсяКЧП;
	ИначеЕсли КоммандаТекст = "Блокировать ячейки ЧП" Тогда
		БлокируемыеЯчейки    = НазванияЯчеекОтносящихсяКЧП;
		РазБлокируемыеЯчейки = НазванияЯчеекОтносящихсяКЮЛ;
	КонецЕсли;

	// 1 - установка блокировки 2- снятие
	Для Инд = 1 По 2 Цикл

		Ячейки = ?(Инд = 1, БлокируемыеЯчейки, РазблокируемыеЯчейки);

		Для Каждого Показатель из Ячейки Цикл

			ПоказательСтр = СтрПолучитьСтроку(Показатель.Значение, 1);
			Страница      = СтрПолучитьСтроку(Показатель.Значение, 2);
			Группа        = СтрПолучитьСтроку(Показатель.Значение, 3);
			Комманда      = ?(Инд = 1, "УстановитьЗащиту", "СнятьЗащиту");
			Цвет          = ?(Инд = 1, ЦветФонаБлокировки, ЦветФонаРазБлокировки);

			Если Группа = "Составная" Тогда
				СвойстваГрупповыхЗначений(ПоказательСтр, Комманда       ,                   , Страница);
				СвойстваГрупповыхЗначений(ПоказательСтр, "ПроставитьЦветРаскраски", Цвет, Страница);

				Если Очищать Тогда
					СвойстваГрупповыхЗначений(ПоказательСтр, "Очистить"               ,                   , Страница);
				КонецЕсли;

			ИначеЕсли Группа = "Несоставная" Тогда

				ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + Страница;
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].Защита = ?(Инд = 1, Истина, Ложь);
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].ЦветФона = Цвет;

				Если Очищать Тогда
					ЭлементыФормы[ИмяПоляТаблДокумента].Области[ПоказательСтр].Значение = "";
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // УстановитьСвойстваВалидныхЯчеек

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если (ТипДанныхПоказателя = "Е") И (НЕ ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			Если КодПоказателяПоСтруктуре = "Сумма1Раздел1" Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогСтрах1М", 15, мСумма1Раздел1_1, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогНакоп1М", 15, мСумма1Раздел1_2, Истина);

			ИначеЕсли КодПоказателяПоСтруктуре = "Сумма2Раздел1" Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогСтрах2М", 15, мСумма2Раздел1_1, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогНакоп2М", 15, мСумма2Раздел1_2, Истина);

			ИначеЕсли КодПоказателяПоСтруктуре = "Сумма3Раздел1" Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогСтрах3М", 15, мСумма3Раздел1_1, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогНакоп3М", 15, мСумма3Раздел1_2, Истина);

			ИначеЕсли КодПоказателяПоСтруктуре = "Сумма0Раздел1" Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогСтрахВсего", 15, мСумма0Раздел1_1, Истина);
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогНакопВсего", 15, мСумма0Раздел1_2, Истина);

			КонецЕсли;

		КонецЕсли;

		Если (ТипДанныхПоказателя = "Е") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
			Иначе

				ИмяГруппы = Лев(ИмяПоказателя, 11);
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтр];
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
		Иначе
			Дельта = 0;
		КонецЕсли;


		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий1;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
				Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
			Иначе
				Дельта = 0;
			КонецЕсли;

			НайденнаяСтрока.Дельта = Дельта;

			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт
	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если (ВыбТабличноеПоле.Имя <> "ПолеТабличногоДокументаФизЛица") Тогда
		//  Для ФизЛица защищенные ячейки нужно очищать, кроме ИНН КПП
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;

		Иначе
			Если (Найти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (Найти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	Если ВыбТабличноеПоле.Имя = "ПолеТабличногоДокументаФизЛица" Тогда
		ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу("ФизЛица");
	КонецЕсли;

	Если ВыбТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел1" Тогда
				ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу("Раздел1");
	КонецЕсли;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Функция РазделБудетПечататься (ИмяСтраницы)
// Возвращает, будет ли печататься, а значит есть ли такая страница
// Истина - ДА
// Ложь - НЕТ
// Используется в Расчет() для определения есть ли та или иная страница
//
Функция РазделБудетПечататься (ИмяСтраницы)

	Результат = Ложь;

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат Результат;
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Если ИмяСтраницы = СтрокаУровня1.ИмяСтраницы Тогда
			Результат = ?(СтрокаУровня1.ВыводНаПечать=1, Истина, Ложь);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции // РазделБудетПечататься

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	// обновляем структуру многострочных разделов
	// ОбновитьСтруктуруМногострочныхРазделов();
	ОбновитьСтруктуруМногостраничныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	СохранитьДеревоСтраницОтчета();

	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

Процедура СохранитьДеревоСтраницОтчета()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// ЗаполнитьСведенияОбФЛ
// Считывает данные из справочников с помощью стандартной функции и размещает на листе ФизЛицо
//
Процедура ЗаполнитьСведенияОбФЛ()
	Перем ТаблицаСтраницРаздела;

	Возврат;
	// По аналогии с формой по авансам ЕСН

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	СписокПоказателей = Новый СписокЗначений;

	// Составляем список данных, необходимых для вывода в декларацию
	Если ПустаяСтрока(мИННДиректор) Тогда

		СписокПоказателей.Добавить("", "ФИОРук"); // ФИО руководителя
		СписокПоказателей.Добавить("", "ТелРук"); // телефон руководителя из контактной информации
		// СведенияФЛ.Добавить("", "ТелРукДом"); // телефон руководителя ДОМАШНИЙ

		СписокПоказателей.Добавить("", "ВидУдЛичнРук"); // вид уд личности руководителя
		СписокПоказателей.Добавить("", "КодУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "СерияУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "НомерУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнРук"); // Кем выдан
		СписокПоказателей.Добавить("", "ДатаУдЛичнРук");
		СписокПоказателей.Добавить("", "ДатаРождРук");
		СписокПоказателей.Добавить("", "МестоРождРук");
		СписокПоказателей.Добавить("", "ПолРук");
		СписокПоказателей.Добавить("", "ГраждРук");

		СписокПоказателей.Добавить("", "ИндексМЖРук");
		СписокПоказателей.Добавить("", "СубъектМЖРук");
		СписокПоказателей.Добавить("", "КодСубъектМЖРук");
		СписокПоказателей.Добавить("", "РайонМЖРук");
		СписокПоказателей.Добавить("", "ГородМЖРук");
		СписокПоказателей.Добавить("", "НПунктМЖРук");
		СписокПоказателей.Добавить("", "УлицаМЖРук");
		СписокПоказателей.Добавить("", "ДомМЖРук");
		СписокПоказателей.Добавить("", "КорпусМЖРук");
		СписокПоказателей.Добавить("", "КвартираМЖРук");
	КонецЕсли;

	Если ПустаяСтрока(мИННБухгалтер) Тогда
		// Получим данные о бухгалтере
		СписокПоказателей.Добавить("", "ФИОБух");
		СписокПоказателей.Добавить("", "ТелБух");

		СписокПоказателей.Добавить("", "ВидУдЛичнБух");
		СписокПоказателей.Добавить("", "КодУдЛичнБух");
		СписокПоказателей.Добавить("", "СерияУдЛичнБух");
		СписокПоказателей.Добавить("", "НомерУдЛичнБух");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаРождБух");
		СписокПоказателей.Добавить("", "МестоРождБух");
		СписокПоказателей.Добавить("", "ПолБух");
		СписокПоказателей.Добавить("", "ГраждБух");

		СписокПоказателей.Добавить("", "ИндексМЖБух");
		СписокПоказателей.Добавить("", "СубъектМЖБух");
		СписокПоказателей.Добавить("", "КодСубъектМЖБух");
		СписокПоказателей.Добавить("", "РайонМЖБух");
		СписокПоказателей.Добавить("", "ГородМЖБух");
		СписокПоказателей.Добавить("", "НПунктМЖБух");
		СписокПоказателей.Добавить("", "УлицаМЖБух");
		СписокПоказателей.Добавить("", "ДомМЖБух");
		СписокПоказателей.Добавить("", "КорпусМЖБух");
		СписокПоказателей.Добавить("", "КвартираМЖБух");

	КонецЕсли;

	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СписокПоказателей);

	// Пытаемся заполнить лист ФизЛица, сохраняя принцип Если данные есть - то не замещаем, если нет, то пишем
	// 1. Найти лист с таким же ФИО
	// 2. Если листа нет, то добавим новый и туда все запишем

	Если Не мСтруктураМногостраничныхРазделов.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	Если мВПрограммеИзмененаОрганизация Тогда
	// Выбрали новую организацию, нужно удалить листы ФЛ от прошлой фирмы
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда

			Для Инд = 1 По ТаблицаСтраницРаздела.Количество() Цикл
				УдалитьДополнительнуюСтраницу("ФизЛица");

				Если ТаблицаСтраницРаздела.Количество() = 1 Тогда
					ОчиститьТабличноеПоле(ЭлементыФормы["ПолеТабличногоДокументаФизЛица"]);
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;
	
	КонецЕсли;

	ОбновитьСтруктуруМногостраничныхРазделов("ФизЛица");

	Если ПустаяСтрока(мИННДиректор) Тогда

		ФИОДиректора = мТитульный.Области.ОргДиректор.Значение;
		Если НЕ ПустаяСтрока(ФИОДиректора) Тогда
			СвязьУстановлена = Ложь;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные.ФизЛицФИО = ФИОДиректора Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если НЕ СвязьУстановлена Тогда
				// Добавляем новую страницу для вывода туда необходимых данных

				Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(мФизЛица.Области.ФизЛицФИО.Значение) Тогда
					ВставитьДополнительнуюСтраницу("ФизЛица");
				КонецЕсли;

			Иначе

				// установим текущую страницу по связи ТекИндекс
				Если Не ФлажокОтклАвтоРасчет Тогда
					ФлажокОтклАвтоРасчет = Истина;
					ПоказатьСтраницуМногостраничногоРаздела(ТекИндекс, "ФизЛица", Истина);
					ФлажокОтклАвтоРасчет = Ложь;
					Иначе
					ПоказатьСтраницуМногостраничногоРаздела(ТекИндекс, "ФизЛица", Истина);
				КонецЕсли;

			КонецЕсли;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 1);
			СохранитьДанныеМногостраничногоРазделаВактивнойСтранице("ФизЛица", Ложь);

		КонецЕсли; // Если ФИО пусто
		//ОпределитьПредставлениеДопСтраниц();
	КонецЕсли;

	// Бухгалтер
	Если ПустаяСтрока(мИННБухгалтер) Тогда

		ФИОБухгалтера = мТитульный.Области.ОргБухгалтер.Значение;

		Если НЕ ПустаяСтрока(ФИОБухгалтера) Тогда
		// Если в базе есть введенные данные по бухгалтеру, тогда работаем

			СвязьУстановлена = Ложь;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные.ФизЛицФИО = ФИОБухгалтера Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если НЕ СвязьУстановлена Тогда

			// Добавляем новую страницу для вывода туда необходимых данных
			// В случае, если чистый лист уже существует, то пишем в него

				Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(мФизЛица.Области.ФизЛицФИО.Значение) Тогда
					ВставитьДополнительнуюСтраницу("ФизЛица");
				КонецЕсли;

			Иначе
				// установим текущую страницу по связи ТекИндекс
				Если Не ФлажокОтклАвтоРасчет Тогда
					ФлажокОтклАвтоРасчет = Истина;
					ПоказатьСтраницуМногостраничногоРаздела(ТекИндекс, "ФизЛица", Истина);
					ФлажокОтклАвтоРасчет = Ложь;
				Иначе
					ПоказатьСтраницуМногостраничногоРаздела(ТекИндекс, "ФизЛица", Истина);
				КонецЕсли;

			КонецЕсли;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 2);
			СохранитьДанныеМногостраничногоРазделаВактивнойСтранице("ФизЛица", Ложь);

		КонецЕсли; // Если ФИО нет
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбФЛ()

// ПолучитьИННКПП
//
Процедура ПолучитьИННКПП()

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ИННЮЛ, КППЮЛ, ТелОрганизации");

	ИННЮЛ = "";
	КППЮЛ = "";
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);

	Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, " ");
	Иначе
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, "0");
	КонецЕсли;

	КППЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(КППЮЛ, 9, " ");

	мИННЮЛ = ИННЮЛ;
	мКППЮЛ = КППЮЛ;

	мТелОрганизации = "";
	ОргСведения.Свойство("ТелОрганизации", мТелОрганизации);

КонецПроцедуры // ПолучитьИННКПП

// ВыводДанныхОФизическомЛице
// Выводит данные на лист физлица, лист должен быть активным
// Параметры
// СвязьУстановлена - Если Истина, то данные в ячейки записываются не проверяя на пустоту хранящегося там значения
// предпологается, что в этом случае, лист пуст
// СвязьУстановлена - Ложь - Лист с данными по ФИО найден и данные нужно заменять, только если пустота в ячейки
// Данные
// ТипДанных - что выводим может быть 1. Руководитель 2. Бухгалтер 3. УП
//
Процедура ВыводДанныхОФизическомЛице(Знач СвязьУстановлена, Знач Данные, ТипДанных, ОграниченияВыводаУчесть = Ложь);

	ФИО = "";
	Тел = "";
	ВидУдЛичн = "";
	КодУдЛичн = "";
	СерияУдЛичн = "";
	НомерУдЛичн = "";
	ОрганВыданУдЛичн = "";
	ДатаУдЛичн = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
	ИндексМЖ = "";
	СубъектМЖ = "";
	КодСубъектМЖ = "";
	РайонМЖ = "";
	ГородМЖ = "";
	НПунктМЖ = "";
	УлицаМЖ = "";
	ДомМЖ = "";
	КорпусМЖ = "";
	КвартираМЖ = "";
	МестоРожд = "";
	Гражд = "";

	Пол = 0;

	ДатаРожд = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));

	Данные.Свойство(?(ТипДанных = 1,"ФИОРук", ?(ТипДанных = 2, "ФИОБух", ?(ТипДанных = 3, "ФИОУпПред",""))), ФИО);
	Данные.Свойство(?(ТипДанных = 1,"ТелРук", ?(ТипДанных = 2, "ТелБух", ?(ТипДанных = 3, "ТелУпПред",""))), Тел);
	Данные.Свойство(?(ТипДанных = 1,"ВидУдЛичнРук", ?(ТипДанных = 2, "ВидУдЛичнБух", ?(ТипДанных = 3, "ВидУдЛичнУпПред",""))), ВидУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"КодУдЛичнРук", ?(ТипДанных = 2, "КодУдЛичнБух", ?(ТипДанных = 3, "КодУдЛичнУпПред",""))), КодУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаРождРук", ?(ТипДанных = 2, "ДатаРождБух", ?(ТипДанных = 3, "ДатаРождУпПред",""))), ДатаРожд);
	Данные.Свойство(?(ТипДанных = 1,"МестоРождРук", ?(ТипДанных = 2, "МестоРождБух", ?(ТипДанных = 3, "МестоРождУпПред",""))), МестоРожд);
	Данные.Свойство(?(ТипДанных = 1,"ГраждРук", ?(ТипДанных = 2, "ГраждБух", ?(ТипДанных = 3, "ГраждУпПред",""))), Гражд);
	Данные.Свойство(?(ТипДанных = 1,"СерияУдЛичнРук", ?(ТипДанных = 2, "СерияУдЛичнБух", ?(ТипДанных = 3, "СерияУдЛичнУпПред",""))), СерияУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"НомерУдЛичнРук", ?(ТипДанных = 2, "НомерУдЛичнБух", ?(ТипДанных = 3, "НомерУдЛичнУпПред",""))), НомерУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ПолРук", ?(ТипДанных = 2, "ПолБух", ?(ТипДанных = 3, "ПолУпПред",""))), Пол);
	Данные.Свойство(?(ТипДанных = 1,"ОрганВыданУдЛичнРук", ?(ТипДанных = 2, "ОрганВыданУдЛичнБух", ?(ТипДанных = 3, "ОрганВыданУдЛичнУпПред",""))), ОрганВыданУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаУдЛичнРук", ?(ТипДанных = 2, "ДатаУдЛичнБух", ?(ТипДанных = 3, "ДатаУдЛичнУпПред",""))), ДатаУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ИндексМЖРук", ?(ТипДанных = 2, "ИндексМЖБух", ?(ТипДанных = 3, "ИндексМЖУпПред",""))), ИндексМЖ);
	Данные.Свойство(?(ТипДанных = 1,"СубъектМЖРук", ?(ТипДанных = 2, "СубъектМЖБух", ?(ТипДанных = 3, "СубъектМЖУпПред",""))), СубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КодСубъектМЖРук", ?(ТипДанных = 2, "КодСубъектМЖБух", ?(ТипДанных = 3, "КодСубъектМЖУпПред",""))), КодСубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"РайонМЖРук", ?(ТипДанных = 2, "РайонМЖБух", ?(ТипДанных = 3, "РайонМЖУпПред",""))), РайонМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ГородМЖРук", ?(ТипДанных = 2, "ГородМЖБух", ?(ТипДанных = 3, "ГородМЖУпПред",""))), ГородМЖ);
	Данные.Свойство(?(ТипДанных = 1,"НПунктМЖРук", ?(ТипДанных = 2, "НПунктМЖБух", ?(ТипДанных = 3, "НПунктМЖУпПред",""))), НПунктМЖ);
	Данные.Свойство(?(ТипДанных = 1,"УлицаМЖРук", ?(ТипДанных = 2, "УлицаМЖБух", ?(ТипДанных = 3, "УлицаМЖУпПред",""))), УлицаМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ДомМЖРук", ?(ТипДанных = 2, "ДомМЖБух", ?(ТипДанных = 3, "ДомМЖУпПред",""))), ДомМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КорпусМЖРук", ?(ТипДанных = 2, "КорпусМЖБух", ?(ТипДанных = 3, "КорпусМЖУпПред",""))), КорпусМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КвартираМЖРук", ?(ТипДанных = 2, "КвартираМЖБух", ?(ТипДанных = 3, "КвартираМЖУпПред",""))), КвартираМЖ);

	// Заполним ИНН/КПП предприятия на новой странице

	Попытка
	// В декларации Авансы по ЕСН нет на листе ФЛ данных по ИНН и  КПП
		Для НомЯчейки = 1 По 12 Цикл
			ЦифраИНН = Сред(мИННЮЛ, НомЯчейки, 1);
			мФизЛица       .Области["ИНН1_" + Строка(НомЯчейки)].Значение = ЦифраИНН;
		КонецЦикла; 

		Для НомЯчейки = 1 По 9 Цикл
			ЦифраКПП = Сред(мКППЮЛ, НомЯчейки, 1);
			мФизЛица       .Области["КПП1_" + Строка(НомЯчейки)].Значение = ЦифраКПП;
		КонецЦикла;

	Исключение
	КонецПопытки;

	// Теперь можно выводить данные на страницу
	Если (НЕ СвязьУстановлена) Тогда
		мФизЛица.Области.ФизЛицФИО.Значение = ФИО;
	КонецЕсли;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицСлТел.Значение = Тел;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицСлТел.Значение) Тогда
				мФизЛица.Области.ФизЛицСлТел.Значение = Тел;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если НЕ ОграниченияВыводаУчесть Тогда
			Если (НЕ СвязьУстановлена) Тогда
				мФизЛица.Области.ФизЛицГражданство.Значение = Гражд;
				Иначе
				Если ПустаяСтрока(мФизЛица.Области.ФизЛицГражданство.Значение) Тогда
					мФизЛица.Области.ФизЛицГражданство.Значение = Гражд;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицДомТел.Значение = Тел;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицДомТел.Значение) Тогда
				мФизЛица.Области.ФизЛицДомТел.Значение = Тел;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицДокВид.Значение = ВидУдЛичн;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицДокВид.Значение) Тогда
				мФизЛица.Области.ФизЛицДокВид.Значение = ВидУдЛичн;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицДок", 2, КодУдЛичн);
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицДок1.Значение + мФизЛица.Области.ФизЛицДок2.Значение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицДок", 2, КодУдЛичн);
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;


	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицДокСерияНомер.Значение = СерияУдЛичн + "  " + НомерУдЛичн;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицДокСерияНомер.Значение) Тогда
				мФизЛица.Области.ФизЛицДокСерияНомер.Значение = СерияУдЛичн + "  " + НомерУдЛичн;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если НЕ ОграниченияВыводаУчесть Тогда
		// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
			Если (НЕ СвязьУстановлена) Тогда
				// особенность этой декларации, здесь дата рожд, разбита по ячейкам
				// мФизЛица.Области.ФизЛицДатаР.Значение = ДатаРожд;
				стрУказаннаяДата1 = Формат(ДатаРожд, "ДФ=""ддММгггг""");
				мДатаРождСлиста = ДатаРожд;
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицДатаРожд", 8, стрУказаннаяДата1);
			Иначе
				Если РегламентированнаяОтчетность.ПустоеЗначение(мДатаРождСлиста) Тогда
					стрУказаннаяДата1 = Формат(ДатаРожд, "ДФ=""ддММгггг""");
					мДатаРождСлиста = ДатаРожд;
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицДатаРожд", 8, стрУказаннаяДата1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если НЕ ОграниченияВыводаУчесть Тогда
		// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
			Если (НЕ СвязьУстановлена) Тогда
				мФизЛица.Области.ФизЛицМестоР.Значение = МестоРожд;
				Иначе
				Если РегламентированнаяОтчетность.ПустоеЗначение(мФизЛица.Области.ФизЛицМестоР.Значение) Тогда
					мФизЛица.Области.ФизЛицМестоР.Значение = МестоРожд;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицДокВыдан.Значение = ОрганВыданУдЛичн;
		Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицДокВыдан.Значение) Тогда
				мФизЛица.Области.ФизЛицДокВыдан.Значение = ОрганВыданУдЛичн;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка

		Если (НЕ СвязьУстановлена) Тогда
			Если НЕ ((РегламентированнаяОтчетность.роЯвляетсяДатой(ДатаУдЛичн)) И (ДатаУдЛичн = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")))) Тогда
				// Если пустое значение даты, то писать не нужно
				стрУказаннаяДата1 = Формат(ДатаУдЛичн, "ДФ=""ддММгггг""");
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицДокДата", 8, стрУказаннаяДата1);
				мДатаДок = ДатаУдЛичн;
			КонецЕсли;
		Иначе
			Если (мДатаДок = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"))) Тогда
				Если НЕ ((РегламентированнаяОтчетность.роЯвляетсяДатой(ДатаУдЛичн)) И (ДатаУдЛичн = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")))) Тогда
					// Если пустое значение даты, то писать не нужно
					стрУказаннаяДата1 = Формат(ДатаУдЛичн, "ДФ=""ддММгггг""");
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицДокДата", 8, стрУказаннаяДата1);
					мДатаДок = ДатаУдЛичн;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицИнд", 6, ИндексМЖ);
			мФизЛицИнд = ИндексМЖ;
		Иначе
			Если ПустаяСтрока(мФизЛицИнд) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицИнд", 6, ИндексМЖ);
				мФизЛицИнд = ИндексМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицСубъект.Значение = СубъектМЖ;
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицСубъект.Значение) Тогда
				мФизЛица.Области.ФизЛицСубъект.Значение = СубъектМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицС", 2, КодСубъектМЖ);
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицС1.Значение + мФизЛица.Области.ФизЛицС2.Значение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицС", 2, КодСубъектМЖ);
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицРайон.Значение = РайонМЖ;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицРайон.Значение) Тогда
				мФизЛица.Области.ФизЛицРайон.Значение = РайонМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицГород.Значение = ГородМЖ;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицГород.Значение) Тогда
				мФизЛица.Области.ФизЛицГород.Значение = ГородМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицНП.Значение = НПунктМЖ;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицНП.Значение) Тогда
				мФизЛица.Области.ФизЛицНП.Значение = НПунктМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицУлица.Значение = УлицаМЖ;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицУлица.Значение) Тогда
				мФизЛица.Области.ФизЛицУлица.Значение = УлицаМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицДом.Значение = ДомМЖ;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицДом.Значение) Тогда
				мФизЛица.Области.ФизЛицДом.Значение = ДомМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицКорпус.Значение = КорпусМЖ;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицКорпус.Значение) Тогда
				мФизЛица.Области.ФизЛицКорпус.Значение = КорпусМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если (НЕ СвязьУстановлена) Тогда
			мФизЛица.Области.ФизЛицКвартира.Значение = КвартираМЖ;
			Иначе
			Если ПустаяСтрока(мФизЛица.Области.ФизЛицКвартира.Значение) Тогда
				мФизЛица.Области.ФизЛицКвартира.Значение = КвартираМЖ;
			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если НЕ ОграниченияВыводаУчесть Тогда
		// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
			ПолМ = мФизЛица.Области.ФизЛицПолМ.Значение;
			ПолЖ = мФизЛица.Области.ФизЛицПолЖ.Значение;
			Если (НЕ СвязьУстановлена) Тогда
				мФизЛица.Области.ФизЛицПолМ.Значение = ?(Пол = 1, "V", "");
				мФизЛица.Области.ФизЛицПолЖ.Значение = ?(Пол = 0, "V", "");
			Иначе
				Если (РегламентированнаяОтчетность.ПустоеЗначение(ПолЖ)) И (РегламентированнаяОтчетность.ПустоеЗначение(ПолМ)) Тогда
					мФизЛица.Области.ФизЛицПолМ.Значение = ?(Пол = 1, "V", "");
					мФизЛица.Области.ФизЛицПолЖ.Значение = ?(Пол = 0, "V", "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	// Выводим дату на лист ФЛ
	Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(мФизЛица.Области.ФизЛицФИО.Значение) Тогда
		стрУказаннаяДата = Формат(ДатаПодписи, "ДФ=""ддММгггг""");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ДатаПодписи", 8, стрУказаннаяДата);
	КонецЕсли;

КонецПроцедуры //ВыводДанныхОФизическомЛице

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
			мСтараяВерсияФормы = ВерсияФормы;

		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);

			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);

		КонецЦикла;

	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = ПолучитьСвойствоРаздела(ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение

			КонецПопытки;

		КонецЦикла;
	КонецЦикла;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВывода();

	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	мДокументВосстановлен = Истина;

	Модифицированность = Ложь;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ЗаполнениеЗначенийВКвадратиках
//
Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт
	Возврат;
КонецПроцедуры // ЗаполнениеЗначенийВКвадратиках

// Процедура "собирает" значения показателей по отдельным
// полям табличного документа на странице "Титульный" формы.
//
Процедура СохрЗначВКвадратиках()

	мОргТип = мТитульный.Области.ТипОрг1.Значение
	        + мТитульный.Области.ТипОрг2.Значение
	        + мТитульный.Области.ТипОрг3.Значение;
	
	мОргКодИМНС = мТитульный.Области.КодИМНС1.Значение
	            + мТитульный.Области.КодИМНС2.Значение
	            + мТитульный.Области.КодИМНС3.Значение
	            + мТитульный.Области.КодИМНС4.Значение;

	Если НЕ РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
		мОргОГРН = мТитульный.Области.ОГРН1.Значение
		         + мТитульный.Области.ОГРН2.Значение
		         + мТитульный.Области.ОГРН3.Значение
		         + мТитульный.Области.ОГРН4.Значение
		         + мТитульный.Области.ОГРН5.Значение
		         + мТитульный.Области.ОГРН6.Значение
		         + мТитульный.Области.ОГРН7.Значение
		         + мТитульный.Области.ОГРН8.Значение
		         + мТитульный.Области.ОГРН9.Значение
		         + мТитульный.Области.ОГРН10.Значение
		         + мТитульный.Области.ОГРН11.Значение
		         + мТитульный.Области.ОГРН12.Значение
		         + мТитульный.Области.ОГРН13.Значение;
	Иначе
		мОргОГРН = мТитульный.Области.ОГРНИП1.Значение
		         + мТитульный.Области.ОГРНИП2.Значение
		         + мТитульный.Области.ОГРНИП3.Значение
		         + мТитульный.Области.ОГРНИП4.Значение
		         + мТитульный.Области.ОГРНИП5.Значение
		         + мТитульный.Области.ОГРНИП6.Значение
		         + мТитульный.Области.ОГРНИП7.Значение
		         + мТитульный.Области.ОГРНИП8.Значение
		         + мТитульный.Области.ОГРНИП9.Значение
		         + мТитульный.Области.ОГРНИП10.Значение
		         + мТитульный.Области.ОГРНИП11.Значение
		         + мТитульный.Области.ОГРНИП12.Значение
		         + мТитульный.Области.ОГРНИП13.Значение;

	КонецЕсли;

	мОКАТОРаздел1 = мРаздел1.Области.КодОКАТО_1.Значение
	         + мРаздел1.Области.КодОКАТО_2.Значение
	         + мРаздел1.Области.КодОКАТО_3.Значение
	         + мРаздел1.Области.КодОКАТО_4.Значение
	         + мРаздел1.Области.КодОКАТО_5.Значение
	         + мРаздел1.Области.КодОКАТО_6.Значение
	         + мРаздел1.Области.КодОКАТО_7.Значение
	         + мРаздел1.Области.КодОКАТО_8.Значение
	         + мРаздел1.Области.КодОКАТО_9.Значение
	         + мРаздел1.Области.КодОКАТО_10.Значение
	         + мРаздел1.Области.КодОКАТО_11.Значение;

	мОКАТОРаздел1 = СокрЛП(мОКАТОРаздел1);

КонецПроцедуры // СохрЗначВКвадратиках()

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Если ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда

		// Суммы платежей на страховую часть трудовой пенсии
		мСумма0Раздел1_1    = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020031006.Значение);

		//// Строки 030 - 050 заполняются на основании данных расчета Раздела 2 
		мСумма1Раздел1_1 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020032006.Значение);
		мСумма2Раздел1_1 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020033006.Значение);
		мСумма3Раздел1_1 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020034006.Значение);

		мСумма0Раздел1_2 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020041006.Значение);
		мСумма1Раздел1_2 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020042006.Значение);
		мСумма2Раздел1_2 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020043006.Значение);
		мСумма3Раздел1_2 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020044006.Значение);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СумНалогСтрах1М", 15, мСумма1Раздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СумНалогСтрах2М", 15, мСумма2Раздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СумНалогСтрах3М", 15, мСумма3Раздел1_1, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СумНалогНакоп1М", 15, мСумма1Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СумНалогНакоп2М", 15, мСумма2Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СумНалогНакоп3М", 15, мСумма3Раздел1_2, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СумНалогСтрахВсего", 15, мСумма0Раздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СумНалогНакопВсего", 15, мСумма0Раздел1_2, Истина);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда

		ОкрП000020012003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020012003.Значение);
		ОкрП000020012004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020012004.Значение);
		ОкрП000020012005 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020012005.Значение);
		ОкрП000020012007 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020012007.Значение);
		ОкрП000020013003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020013003.Значение);
		ОкрП000020013004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020013004.Значение);
		ОкрП000020013005 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020013005.Значение);
		ОкрП000020013007 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020013007.Значение);
		ОкрП000020014003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020014003.Значение);
		ОкрП000020014004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020014004.Значение);
		ОкрП000020014005 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020014005.Значение);
		ОкрП000020014007 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020014007.Значение);
		ОкрП000020030007 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020030007.Значение);
		ОкрП000020032003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020032003.Значение);
		ОкрП000020032004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020032004.Значение);
		ОкрП000020032005 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020032005.Значение);
		ОкрП000020032007 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020032007.Значение);
		ОкрП000020033003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020033003.Значение);
		ОкрП000020033004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020033004.Значение);
		ОкрП000020033005 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020033005.Значение);
		ОкрП000020033007 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020033007.Значение);
		ОкрП000020034003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020034003.Значение);
		ОкрП000020034004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020034004.Значение);
		ОкрП000020034005 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020034005.Значение);
		ОкрП000020034007 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020034007.Значение);
		ОкрП000020040007 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020040007.Значение);
		ОкрП000020042004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020042004.Значение);
		ОкрП000020042005 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020042005.Значение);
		ОкрП000020042007 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020042007.Значение);
		ОкрП000020043004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020043004.Значение);
		ОкрП000020043005 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020043005.Значение);
		ОкрП000020043007 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020043007.Значение);
		ОкрП000020044004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020044004.Значение);
		ОкрП000020044005 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020044005.Значение);
		ОкрП000020044007 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020044007.Значение);

		// Строки 0100, 0300. 0400 заполняем по данным расчета Раздела 2.2. 
		// "Расчет для заполнения строк 0100, 0300 и 0400".

		П000220050004 = 0;
		П000220050104 = 0;
		П000220050204 = 0;
		П000220050005 = 0;
		П000220050105 = 0;
		П000220050205 = 0;
		П000220050007 = 0;
		П000220050107 = 0;
		П000220050207 = 0;
		П000220050109 = 0;
		П000220050209 = 0;

		П000220050004 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220050004.Значение);
		П000220050104 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220050104.Значение);
		П000220050204 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220050204.Значение);
		П000220050005 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220050005.Значение);
		П000220050105 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220050105.Значение);
		П000220050205 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220050205.Значение);
		П000220050007 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220050007.Значение);
		П000220050107 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220050107.Значение);
		П000220050207 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220050207.Значение);
		П000220050109 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220050109.Значение);
		П000220050209 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220050209.Значение);

		// строка 0100
		мРаздел2.Области.П000020010003.Значение = П000220050004;
		мРаздел2.Области.П000020010004.Значение = П000220050104;
		мРаздел2.Области.П000020010005.Значение = П000220050204;
		мРаздел2.Области.П000020010007.Значение = П000220050005 + П000220050105 + П000220050205;

		// строка 0300
		мРаздел2.Области.П000020030003.Значение = П000220050007;
		мРаздел2.Области.П000020030004.Значение = П000220050107;
		мРаздел2.Области.П000020030005.Значение = П000220050207;

		// строка 0400
		мРаздел2.Области.П000020040004.Значение = П000220050109;
		мРаздел2.Области.П000020040005.Значение = П000220050209;
		
		// строка 0110
		мРаздел2.Области.П000020011003.Значение = ОкрП000020012003 + ОкрП000020013003 + ОкрП000020014003;
		мРаздел2.Области.П000020011004.Значение = ОкрП000020012004 + ОкрП000020013004 + ОкрП000020014004;
		мРаздел2.Области.П000020011005.Значение = ОкрП000020012005 + ОкрП000020013005 + ОкрП000020014005;
		мРаздел2.Области.П000020011007.Значение = ОкрП000020012007 + ОкрП000020013007 + ОкрП000020014007;

		// строка 0310
		мРаздел2.Области.П000020031003.Значение = ОкрП000020032003 + ОкрП000020033003 + ОкрП000020034003;
		мРаздел2.Области.П000020031004.Значение = ОкрП000020032004 + ОкрП000020033004 + ОкрП000020034004;
		мРаздел2.Области.П000020031005.Значение = ОкрП000020032005 + ОкрП000020033005 + ОкрП000020034005;
		мРаздел2.Области.П000020031007.Значение = ОкрП000020032007 + ОкрП000020033007 + ОкрП000020034007;

		// строка 0410
		мРаздел2.Области.П000020041004.Значение = ОкрП000020042004 + ОкрП000020043004 + ОкрП000020044004;
		мРаздел2.Области.П000020041005.Значение = ОкрП000020042005 + ОкрП000020043005 + ОкрП000020044005;
		мРаздел2.Области.П000020041007.Значение = ОкрП000020042007 + ОкрП000020043007 + ОкрП000020044007;

		// строка 0220
		мРаздел2.Области.П000020022003.Значение = ОкрП000020032003;
		мРаздел2.Области.П000020022004.Значение = ОкрП000020032004 + ОкрП000020042004;
		мРаздел2.Области.П000020022005.Значение = ОкрП000020032005 + ОкрП000020042005;
		мРаздел2.Области.П000020022007.Значение = ОкрП000020032007 + ОкрП000020042007;

		// строка 0230
		мРаздел2.Области.П000020023003.Значение = ОкрП000020033003;
		мРаздел2.Области.П000020023004.Значение = ОкрП000020033004 + ОкрП000020043004;
		мРаздел2.Области.П000020023005.Значение = ОкрП000020033005 + ОкрП000020043005;
		мРаздел2.Области.П000020023007.Значение = ОкрП000020033007 + ОкрП000020043007;

		// строка 0240
		мРаздел2.Области.П000020024003.Значение = ОкрП000020034003;
		мРаздел2.Области.П000020024004.Значение = ОкрП000020034004 + ОкрП000020044004;
		мРаздел2.Области.П000020024005.Значение = ОкрП000020034005 + ОкрП000020044005;
		мРаздел2.Области.П000020024007.Значение = ОкрП000020034007 + ОкрП000020044007;

		// строка 0210
		мРаздел2.Области.П000020021003.Значение = мРаздел2.Области.П000020022003.Значение + мРаздел2.Области.П000020023003.Значение + мРаздел2.Области.П000020024003.Значение;
		мРаздел2.Области.П000020021004.Значение = мРаздел2.Области.П000020022004.Значение + мРаздел2.Области.П000020023004.Значение + мРаздел2.Области.П000020024004.Значение;
		мРаздел2.Области.П000020021005.Значение = мРаздел2.Области.П000020022005.Значение + мРаздел2.Области.П000020023005.Значение + мРаздел2.Области.П000020024005.Значение;
		мРаздел2.Области.П000020021007.Значение = мРаздел2.Области.П000020022007.Значение + мРаздел2.Области.П000020023007.Значение + мРаздел2.Области.П000020024007.Значение;

		// строка 0200
		мРаздел2.Области.П000020020003.Значение = мРаздел2.Области.П000020030003.Значение;
		мРаздел2.Области.П000020020004.Значение = мРаздел2.Области.П000020030004.Значение    + мРаздел2.Области.П000020040004.Значение;
		мРаздел2.Области.П000020020005.Значение = мРаздел2.Области.П000020030005.Значение    + мРаздел2.Области.П000020040005.Значение;
		мРаздел2.Области.П000020020007.Значение = ОкрП000020030007 + ОкрП000020040007;
		
		// графа 6 строк 0100 - 0440
		мРаздел2.Области.П000020010006.Значение = мРаздел2.Области.П000020010003.Значение + мРаздел2.Области.П000020010004.Значение + мРаздел2.Области.П000020010005.Значение;
		мРаздел2.Области.П000020012006.Значение = ОкрП000020012003 + ОкрП000020012004 + ОкрП000020012005;
		мРаздел2.Области.П000020013006.Значение = ОкрП000020013003 + ОкрП000020013004 + ОкрП000020013005;
		мРаздел2.Области.П000020014006.Значение = ОкрП000020014003 + ОкрП000020014004 + ОкрП000020014005;
		мРаздел2.Области.П000020030006.Значение = мРаздел2.Области.П000020030003.Значение + мРаздел2.Области.П000020030004.Значение + мРаздел2.Области.П000020030005.Значение;
		мРаздел2.Области.П000020032006.Значение = ОкрП000020032003 + ОкрП000020032004 + ОкрП000020032005;
		мРаздел2.Области.П000020033006.Значение = ОкрП000020033003 + ОкрП000020033004 + ОкрП000020033005;
		мРаздел2.Области.П000020034006.Значение = ОкрП000020034003 + ОкрП000020034004 + ОкрП000020034005;
		мРаздел2.Области.П000020040006.Значение = мРаздел2.Области.П000020040004.Значение    + мРаздел2.Области.П000020040005.Значение;
		мРаздел2.Области.П000020042006.Значение = ОкрП000020042004 + ОкрП000020042005;
		мРаздел2.Области.П000020043006.Значение = ОкрП000020043004 + ОкрП000020043005;
		мРаздел2.Области.П000020044006.Значение = ОкрП000020044004 + ОкрП000020044005;
		мРаздел2.Области.П000020011006.Значение = мРаздел2.Области.П000020011003.Значение + мРаздел2.Области.П000020011004.Значение + мРаздел2.Области.П000020011005.Значение;
		мРаздел2.Области.П000020020006.Значение = мРаздел2.Области.П000020020003.Значение + мРаздел2.Области.П000020020004.Значение + мРаздел2.Области.П000020020005.Значение;
		мРаздел2.Области.П000020021006.Значение = мРаздел2.Области.П000020021003.Значение + мРаздел2.Области.П000020021004.Значение + мРаздел2.Области.П000020021005.Значение;
		мРаздел2.Области.П000020022006.Значение = мРаздел2.Области.П000020022003.Значение + мРаздел2.Области.П000020022004.Значение + мРаздел2.Области.П000020022005.Значение;
		мРаздел2.Области.П000020023006.Значение = мРаздел2.Области.П000020023003.Значение + мРаздел2.Области.П000020023004.Значение + мРаздел2.Области.П000020023005.Значение;
		мРаздел2.Области.П000020024006.Значение = мРаздел2.Области.П000020024003.Значение + мРаздел2.Области.П000020024004.Значение + мРаздел2.Области.П000020024005.Значение;
		мРаздел2.Области.П000020031006.Значение = мРаздел2.Области.П000020031003.Значение + мРаздел2.Области.П000020031004.Значение + мРаздел2.Области.П000020031005.Значение;
		мРаздел2.Области.П000020041006.Значение = мРаздел2.Области.П000020041004.Значение + мРаздел2.Области.П000020041005.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел21" Тогда

		П000020020006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020020006.Значение);
		П000020021006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020021006.Значение);
		П000020022006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020022006.Значение);
		П000020023006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020023006.Значение);
		П000020024006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020024006.Значение);

		П000020020007 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020020007.Значение);
		П000020021007 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020021007.Значение);
		П000020022007 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020022007.Значение);
		П000020023007 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020023007.Значение);
		П000020024007 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020024007.Значение);

		ОкрП000210001005 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001005.Значение);
		ОкрП000210001006 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001006.Значение);
		ОкрП000210001205 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001205.Значение);
		ОкрП000210001206 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001206.Значение);
		ОкрП000210001305 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001305.Значение);
		ОкрП000210001306 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001306.Значение);
		ОкрП000210001405 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001405.Значение);
		ОкрП000210001406 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001406.Значение);
		ОкрП000210001204 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001204.Значение);
		ОкрП000210001304 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001304.Значение);
		ОкрП000210001404 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001404.Значение);
		ОкрП000210001703 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001703.Значение);
		ОкрП000210001704 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001704.Значение);
		ОкрП000210001803 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001803.Значение);
		ОкрП000210001804 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001804.Значение);
		ОкрП000210001903 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001903.Значение);
		ОкрП000210001904 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001904.Значение);

		// строка 010
		мРаздел21.Области.П000210001003.Значение = ОкрП000210001005 + ОкрП000210001006;

		// строки 012 - 014
		мРаздел21.Области.П000210001203.Значение = ОкрП000210001205 + ОкрП000210001206;
		мРаздел21.Области.П000210001303.Значение = ОкрП000210001305 + ОкрП000210001306;
		мРаздел21.Области.П000210001403.Значение = ОкрП000210001405 + ОкрП000210001406;

		// строка 011 
		мРаздел21.Области.П000210001103.Значение = мРаздел21.Области.П000210001203.Значение + мРаздел21.Области.П000210001303.Значение + мРаздел21.Области.П000210001403.Значение;

		мРаздел21.Области.П000210001104.Значение = ОкрП000210001204 + ОкрП000210001304 + ОкрП000210001404;
		мРаздел21.Области.П000210001105.Значение = ОкрП000210001205 + ОкрП000210001305 + ОкрП000210001405;
		мРаздел21.Области.П000210001106.Значение = ОкрП000210001206 + ОкрП000210001306 + ОкрП000210001406;

		// строка 016
		//П000210001603 = ОкрП000210001703 + ОкрП000210001803 + ОкрП000210001903;
		//П000210001604 = ОкрП000210001704 + ОкрП000210001804 + ОкрП000210001904;
		
		мРаздел21.Области.П000210001503.Значение = П000020020006 - мРаздел21.Области.П000210001003.Значение;
		мРаздел21.Области.П000210001603.Значение = П000020021006 - мРаздел21.Области.П000210001103.Значение;
		мРаздел21.Области.П000210001703.Значение = П000020022006 - мРаздел21.Области.П000210001203.Значение;
		мРаздел21.Области.П000210001803.Значение = П000020023006 - мРаздел21.Области.П000210001303.Значение;
		мРаздел21.Области.П000210001903.Значение = П000020024006 - мРаздел21.Области.П000210001403.Значение;

		мРаздел21.Области.П000210001504.Значение = П000020020007 - мРаздел21.Области.П000210001004.Значение;
		мРаздел21.Области.П000210001604.Значение = П000020021007 - мРаздел21.Области.П000210001104.Значение;
		мРаздел21.Области.П000210001704.Значение = П000020022007 - мРаздел21.Области.П000210001204.Значение;
		мРаздел21.Области.П000210001804.Значение = П000020023007 - мРаздел21.Области.П000210001304.Значение;
		мРаздел21.Области.П000210001904.Значение = П000020024007 - мРаздел21.Области.П000210001404.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел22" Тогда

		// Расчет для заполнения строк 0100, 0300 и 0400 
		//              
		// строка 103
		мРаздел22.Области.П000220010304.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010004.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010104.Значение)
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010204.Значение);
		мРаздел22.Области.П000220010305.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010005.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010105.Значение)
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010205.Значение);
		мРаздел22.Области.П000220010307.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010007.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010107.Значение)
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010207.Значение);
		мРаздел22.Области.П000220010309.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010109.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010209.Значение);

		мРаздел22.Области.П000220010310.Значение = мРаздел22.Области.П000220010010.Значение + мРаздел22.Области.П000220010110.Значение + мРаздел22.Области.П000220010210.Значение;

		// строка 210	
		мРаздел22.Области.П000220021004.Значение = ОкруглитьЧислоПоФормату(100000 * мРаздел22.Области.П000220021010.Значение);
		мРаздел22.Области.П000220021007.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021004.Значение * мРаздел22.Области.П000220021006.Значение / 100000);

		// строка 211
		мРаздел22.Области.П000220021104.Значение = ОкруглитьЧислоПоФормату(100000 * мРаздел22.Области.П000220021110.Значение);
		мРаздел22.Области.П000220021107.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021104.Значение * мРаздел22.Области.П000220021106.Значение / 100000);
		мРаздел22.Области.П000220021109.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021104.Значение * мРаздел22.Области.П000220021108.Значение / 100000);
		
		// строка 212
		мРаздел22.Области.П000220021204.Значение = ОкруглитьЧислоПоФормату(100000 * мРаздел22.Области.П000220021210.Значение);
		мРаздел22.Области.П000220021207.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021204.Значение * мРаздел22.Области.П000220021206.Значение / 100000);
		мРаздел22.Области.П000220021209.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021204.Значение * мРаздел22.Области.П000220021208.Значение / 100000);

		// строка 213
		мРаздел22.Области.П000220021304.Значение = мРаздел22.Области.П000220021004.Значение + мРаздел22.Области.П000220021104.Значение + мРаздел22.Области.П000220021204.Значение;
		мРаздел22.Области.П000220021305.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021005.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021105.Значение)
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021205.Значение);
		мРаздел22.Области.П000220021307.Значение = мРаздел22.Области.П000220021007.Значение + мРаздел22.Области.П000220021107.Значение + мРаздел22.Области.П000220021207.Значение;
		мРаздел22.Области.П000220021309.Значение = мРаздел22.Области.П000220021109.Значение + мРаздел22.Области.П000220021209.Значение;
		мРаздел22.Области.П000220021310.Значение = мРаздел22.Области.П000220021010.Значение + мРаздел22.Области.П000220021110.Значение + мРаздел22.Области.П000220021210.Значение;

		// строка 200
		мРаздел22.Области.П000220020004.Значение = мРаздел22.Области.П000220021004.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022004.Значение);
		мРаздел22.Области.П000220020005.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021005.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022005.Значение);
		мРаздел22.Области.П000220020007.Значение = мРаздел22.Области.П000220021007.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022007.Значение);
		мРаздел22.Области.П000220020010.Значение = мРаздел22.Области.П000220021010.Значение;

		// строка 201
		мРаздел22.Области.П000220020104.Значение = мРаздел22.Области.П000220021104.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022104.Значение);
		мРаздел22.Области.П000220020105.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021105.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022105.Значение);
		мРаздел22.Области.П000220020107.Значение = мРаздел22.Области.П000220021107.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022107.Значение);
		мРаздел22.Области.П000220020109.Значение = мРаздел22.Области.П000220021109.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022109.Значение);
		мРаздел22.Области.П000220020110.Значение = мРаздел22.Области.П000220021110.Значение;

		// строка 202
		мРаздел22.Области.П000220020204.Значение = мРаздел22.Области.П000220021204.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022204.Значение);
		мРаздел22.Области.П000220020205.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021205.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022205.Значение);
		мРаздел22.Области.П000220020207.Значение = мРаздел22.Области.П000220021207.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022207.Значение);
		мРаздел22.Области.П000220020209.Значение = мРаздел22.Области.П000220021209.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022209.Значение);
		мРаздел22.Области.П000220020210.Значение = мРаздел22.Области.П000220021210.Значение;

		// строка 203
		мРаздел22.Области.П000220020304.Значение = мРаздел22.Области.П000220020004.Значение + мРаздел22.Области.П000220020104.Значение + мРаздел22.Области.П000220020204.Значение;
		мРаздел22.Области.П000220020305.Значение = мРаздел22.Области.П000220020005.Значение + мРаздел22.Области.П000220020105.Значение + мРаздел22.Области.П000220020205.Значение;
		мРаздел22.Области.П000220020307.Значение = мРаздел22.Области.П000220020007.Значение + мРаздел22.Области.П000220020107.Значение + мРаздел22.Области.П000220020207.Значение;
		мРаздел22.Области.П000220020309.Значение = мРаздел22.Области.П000220020109.Значение + мРаздел22.Области.П000220020209.Значение;
		мРаздел22.Области.П000220020310.Значение = мРаздел22.Области.П000220020010.Значение + мРаздел22.Области.П000220020110.Значение + мРаздел22.Области.П000220020210.Значение;

		// строка 223
		мРаздел22.Области.П000220022304.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022004.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022104.Значение)
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022204.Значение);
		мРаздел22.Области.П000220022305.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022005.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022105.Значение)
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022205.Значение);
		мРаздел22.Области.П000220022307.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022007.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022107.Значение)
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022207.Значение);
		мРаздел22.Области.П000220022309.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022109.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022209.Значение);

		// строка 310
		мРаздел22.Области.П000220031004.Значение = ОкруглитьЧислоПоФормату(300000 * мРаздел22.Области.П000220031010.Значение);
		мРаздел22.Области.П000220031007.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220031004.Значение * мРаздел22.Области.П000220031006.Значение / 300000);

		// строка 311
		мРаздел22.Области.П000220031104.Значение = ОкруглитьЧислоПоФормату(300000 * мРаздел22.Области.П000220031110.Значение);
		мРаздел22.Области.П000220031107.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220031104.Значение * мРаздел22.Области.П000220031106.Значение / 300000);
		мРаздел22.Области.П000220031109.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220031104.Значение * мРаздел22.Области.П000220031108.Значение / 300000);
		
		// строка 312
		мРаздел22.Области.П000220031204.Значение = ОкруглитьЧислоПоФормату(300000 * мРаздел22.Области.П000220031210.Значение);
		мРаздел22.Области.П000220031207.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220031204.Значение * мРаздел22.Области.П000220031206.Значение / 300000);
		мРаздел22.Области.П000220031209.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220031204.Значение * мРаздел22.Области.П000220031208.Значение / 300000); 

		// строка 313
		мРаздел22.Области.П000220031304.Значение = мРаздел22.Области.П000220031004.Значение + мРаздел22.Области.П000220031104.Значение + мРаздел22.Области.П000220031204.Значение;
		мРаздел22.Области.П000220031305.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220031005.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220031105.Значение)
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220031205.Значение);
		мРаздел22.Области.П000220031307.Значение = мРаздел22.Области.П000220031007.Значение + мРаздел22.Области.П000220031107.Значение + мРаздел22.Области.П000220031207.Значение;
		мРаздел22.Области.П000220031309.Значение = мРаздел22.Области.П000220031109.Значение + мРаздел22.Области.П000220031209.Значение;
		мРаздел22.Области.П000220031310.Значение = мРаздел22.Области.П000220031010.Значение + мРаздел22.Области.П000220031110.Значение + мРаздел22.Области.П000220031210.Значение;

		// строка 323
		мРаздел22.Области.П000220032304.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032004.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032104.Значение)
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032204.Значение);
		мРаздел22.Области.П000220032305.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032005.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032105.Значение)
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032205.Значение);
		мРаздел22.Области.П000220032307.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032007.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032107.Значение)
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032207.Значение);
		мРаздел22.Области.П000220032309.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032109.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032209.Значение);

		// строка 300
		мРаздел22.Области.П000220030004.Значение = мРаздел22.Области.П000220031004.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032004.Значение);
		мРаздел22.Области.П000220030005.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220031005.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032005.Значение);
		мРаздел22.Области.П000220030007.Значение = мРаздел22.Области.П000220031007.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032007.Значение);
		мРаздел22.Области.П000220030010.Значение = мРаздел22.Области.П000220031010.Значение;

		// строка 301
		мРаздел22.Области.П000220030104.Значение = мРаздел22.Области.П000220031104.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032104.Значение);
		мРаздел22.Области.П000220030105.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220031105.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032105.Значение);
		мРаздел22.Области.П000220030107.Значение = мРаздел22.Области.П000220031107.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032107.Значение);
		мРаздел22.Области.П000220030109.Значение = мРаздел22.Области.П000220031109.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032109.Значение);
		мРаздел22.Области.П000220030110.Значение = мРаздел22.Области.П000220031110.Значение;

		// строка 302
		мРаздел22.Области.П000220030204.Значение = мРаздел22.Области.П000220031204.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032204.Значение);
		мРаздел22.Области.П000220030205.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220031205.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032205.Значение);
		мРаздел22.Области.П000220030207.Значение = мРаздел22.Области.П000220031207.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032207.Значение);
		мРаздел22.Области.П000220030209.Значение = мРаздел22.Области.П000220031209.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220032209.Значение);
		мРаздел22.Области.П000220030210.Значение = мРаздел22.Области.П000220031210.Значение;

		// строка 303
		мРаздел22.Области.П000220030304.Значение = мРаздел22.Области.П000220030004.Значение + мРаздел22.Области.П000220030104.Значение + мРаздел22.Области.П000220030204.Значение;
		мРаздел22.Области.П000220030305.Значение = мРаздел22.Области.П000220030005.Значение + мРаздел22.Области.П000220030105.Значение + мРаздел22.Области.П000220030205.Значение;
		мРаздел22.Области.П000220030307.Значение = мРаздел22.Области.П000220030007.Значение + мРаздел22.Области.П000220030107.Значение + мРаздел22.Области.П000220030207.Значение;
		мРаздел22.Области.П000220030309.Значение = мРаздел22.Области.П000220030109.Значение + мРаздел22.Области.П000220030209.Значение;
		мРаздел22.Области.П000220030310.Значение = мРаздел22.Области.П000220030010.Значение + мРаздел22.Области.П000220030110.Значение + мРаздел22.Области.П000220030210.Значение;

		// строка 403
		мРаздел22.Области.П000220040304.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040004.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040104.Значение)
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040204.Значение);
		мРаздел22.Области.П000220040305.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040005.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040105.Значение)
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040205.Значение);
		мРаздел22.Области.П000220040307.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040007.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040107.Значение)
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040207.Значение);
		мРаздел22.Области.П000220040309.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040109.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040209.Значение);

		мРаздел22.Области.П000220040310.Значение = мРаздел22.Области.П000220040010.Значение + мРаздел22.Области.П000220040110.Значение + мРаздел22.Области.П000220040210.Значение;

		// строка 500
		мРаздел22.Области.П000220050004.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010004.Значение) + мРаздел22.Области.П000220020004.Значение + мРаздел22.Области.П000220030004.Значение
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040004.Значение);
		мРаздел22.Области.П000220050005.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010005.Значение) + мРаздел22.Области.П000220020005.Значение + мРаздел22.Области.П000220030005.Значение
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040005.Значение);
		мРаздел22.Области.П000220050007.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010007.Значение) + мРаздел22.Области.П000220020007.Значение + мРаздел22.Области.П000220030007.Значение
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040007.Значение);

		мРаздел22.Области.П000220050010.Значение = мРаздел22.Области.П000220010010.Значение + мРаздел22.Области.П000220020010.Значение + мРаздел22.Области.П000220030010.Значение + мРаздел22.Области.П000220040010.Значение;

		// строка 501
		мРаздел22.Области.П000220050104.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010104.Значение) + мРаздел22.Области.П000220020104.Значение + мРаздел22.Области.П000220030104.Значение
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040104.Значение);
		мРаздел22.Области.П000220050105.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010105.Значение) + мРаздел22.Области.П000220020105.Значение + мРаздел22.Области.П000220030105.Значение
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040105.Значение);
		мРаздел22.Области.П000220050107.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010107.Значение) + мРаздел22.Области.П000220020107.Значение + мРаздел22.Области.П000220030107.Значение
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040107.Значение);
		мРаздел22.Области.П000220050109.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010109.Значение) + мРаздел22.Области.П000220020109.Значение + мРаздел22.Области.П000220030109.Значение
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040109.Значение);

		мРаздел22.Области.П000220050110.Значение = мРаздел22.Области.П000220010110.Значение + мРаздел22.Области.П000220020110.Значение + мРаздел22.Области.П000220030110.Значение + мРаздел22.Области.П000220040110.Значение;

		// строка 502
		мРаздел22.Области.П000220050204.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010204.Значение) + мРаздел22.Области.П000220020204.Значение + мРаздел22.Области.П000220030204.Значение
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040204.Значение);
		мРаздел22.Области.П000220050205.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010205.Значение) + мРаздел22.Области.П000220020205.Значение + мРаздел22.Области.П000220030205.Значение
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040205.Значение);
		мРаздел22.Области.П000220050207.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010207.Значение) + мРаздел22.Области.П000220020207.Значение + мРаздел22.Области.П000220030207.Значение
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040207.Значение);
		мРаздел22.Области.П000220050209.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010209.Значение) + мРаздел22.Области.П000220020209.Значение + мРаздел22.Области.П000220030209.Значение
		              + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220040209.Значение);

		мРаздел22.Области.П000220050210.Значение = мРаздел22.Области.П000220010210.Значение + мРаздел22.Области.П000220020210.Значение + мРаздел22.Области.П000220030210.Значение + мРаздел22.Области.П000220040210.Значение;

		// строка 503
		мРаздел22.Области.П000220050304.Значение = мРаздел22.Области.П000220010304.Значение + мРаздел22.Области.П000220020304.Значение + мРаздел22.Области.П000220030304.Значение + мРаздел22.Области.П000220040304.Значение;
		мРаздел22.Области.П000220050305.Значение = мРаздел22.Области.П000220010305.Значение + мРаздел22.Области.П000220020305.Значение + мРаздел22.Области.П000220030305.Значение + мРаздел22.Области.П000220040305.Значение;
		мРаздел22.Области.П000220050307.Значение = мРаздел22.Области.П000220010307.Значение + мРаздел22.Области.П000220020307.Значение + мРаздел22.Области.П000220030307.Значение + мРаздел22.Области.П000220040307.Значение;
		мРаздел22.Области.П000220050309.Значение = мРаздел22.Области.П000220010309.Значение + мРаздел22.Области.П000220020309.Значение + мРаздел22.Области.П000220030309.Значение + мРаздел22.Области.П000220040309.Значение;
		мРаздел22.Области.П000220050310.Значение = мРаздел22.Области.П000220010310.Значение + мРаздел22.Области.П000220020310.Значение + мРаздел22.Области.П000220030310.Значение + мРаздел22.Области.П000220040310.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел23" Тогда

		// строка 020
		мРаздел23.Области.П000230002003.Значение = мРаздел23.Области.П000230003003.Значение + мРаздел23.Области.П000230004003.Значение;
		мРаздел23.Области.П000230002004.Значение = мРаздел23.Области.П000230003004.Значение + мРаздел23.Области.П000230004004.Значение;

		// строка 021
		мРаздел23.Области.П000230002103.Значение = мРаздел23.Области.П000230003103.Значение + мРаздел23.Области.П000230004103.Значение;
		мРаздел23.Области.П000230002104.Значение = мРаздел23.Области.П000230003104.Значение + мРаздел23.Области.П000230004104.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел24" Тогда

		// строка 030
		мРаздел24.Области.П000240003004.Значение = Окр( ?( мРаздел24.Области.П000240001004.Значение > 30, мРаздел24.Области.П000240001004.Значение * 10/100, мРаздел24.Области.П000240001004.Значение * 30/100 ), 0, 1);
		мРаздел24.Области.П000240003005.Значение = Окр( ?( мРаздел24.Области.П000240001005.Значение > 30, мРаздел24.Области.П000240001005.Значение * 10/100, мРаздел24.Области.П000240001005.Значение * 30/100 ), 0, 1);
		мРаздел24.Области.П000240003006.Значение = Окр( ?( мРаздел24.Области.П000240001006.Значение > 30, мРаздел24.Области.П000240001006.Значение * 10/100, мРаздел24.Области.П000240001006.Значение * 30/100 ), 0, 1);

		// строка 050
		мРаздел24.Области.П000240005004.Значение = ОкруглитьЧислоПоФормату(мРаздел24.Области.П000240002004.Значение) - ОкруглитьЧислоПоФормату(мРаздел24.Области.П000240004004.Значение);
		мРаздел24.Области.П000240005005.Значение = ОкруглитьЧислоПоФормату(мРаздел24.Области.П000240002005.Значение) - ОкруглитьЧислоПоФормату(мРаздел24.Области.П000240004005.Значение);
		мРаздел24.Области.П000240005006.Значение = ОкруглитьЧислоПоФормату(мРаздел24.Области.П000240002006.Значение) - ОкруглитьЧислоПоФормату(мРаздел24.Области.П000240004006.Значение);

		// строка 060
		мРаздел24.Области.П000240006004.Значение = ? ( (мРаздел24.Области.П000240001004.Значение - мРаздел24.Области.П000240003004.Значение) <> 0, ОкруглитьЧислоПоФормату(мРаздел24.Области.П000240005004.Значение / (мРаздел24.Области.П000240001004.Значение - мРаздел24.Области.П000240003004.Значение)), 0 );
		мРаздел24.Области.П000240006005.Значение = ? ( (мРаздел24.Области.П000240001005.Значение - мРаздел24.Области.П000240003005.Значение) <> 0, ОкруглитьЧислоПоФормату(мРаздел24.Области.П000240005005.Значение / (мРаздел24.Области.П000240001005.Значение - мРаздел24.Области.П000240003005.Значение)), 0 );
		мРаздел24.Области.П000240006006.Значение = ? ( (мРаздел24.Области.П000240001006.Значение - мРаздел24.Области.П000240003006.Значение) <> 0, ОкруглитьЧислоПоФормату(мРаздел24.Области.П000240005006.Значение / (мРаздел24.Области.П000240001006.Значение - мРаздел24.Области.П000240003006.Значение)), 0 );

		// строка 080
		мРаздел24.Области.П000240008004.Значение = ? ( мРаздел24.Области.П000240007004.Значение <> 0, ОкруглитьЧислоПоФормату(мРаздел24.Области.П000240006004.Значение / мРаздел24.Области.П000240007004.Значение), 0 );
		мРаздел24.Области.П000240008005.Значение = ? ( мРаздел24.Области.П000240007005.Значение <> 0, ОкруглитьЧислоПоФормату(мРаздел24.Области.П000240006005.Значение / мРаздел24.Области.П000240007005.Значение), 0 );
		мРаздел24.Области.П000240008006.Значение = ? ( мРаздел24.Области.П000240007006.Значение <> 0, ОкруглитьЧислоПоФормату(мРаздел24.Области.П000240006006.Значение / мРаздел24.Области.П000240007006.Значение), 0 );

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда

		Расчет("Раздел24");
		Расчет("Раздел23");
		Расчет("Раздел22");
		Расчет("Раздел21");
		Расчет("Раздел2");
		Расчет("Раздел1");

	КонецЕсли;

КонецПроцедуры // Расчет()

// ЗаполнитьСтавки
// Процедура заполняет ставки для раздела 2.2
//
Процедура ЗаполнитьСтавки(КодКатегории, РасчетНеВызывать = Ложь)

	Если ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;

	Если КодКатегории = "20" Тогда
		// Для сельскохозяйственных производителей
		
		// Для мужчин  1952 года рождения и старше и женщин 1956 года рождения  и старше
		// на страховую часть трудовой пенсии
		мРаздел22.Области.П000220010006.Значение = 10.3;
		мРаздел22.Области.П000220021006.Значение = 10300;
		мРаздел22.Области.П000220022006.Значение = 7.9;
		мРаздел22.Области.П000220031006.Значение = 26100;
		мРаздел22.Области.П000220032006.Значение = 3.95;
		мРаздел22.Области.П000220040006.Значение = 37950;
		
		// Для мужчин с 1953 по 1966 год рождения и женщин с 1957 по 1966 год  рождения
		// на страховую часть трудовой пенсии  
		мРаздел22.Области.П000220010106.Значение = 8.3;
		мРаздел22.Области.П000220021106.Значение = 8300;
		мРаздел22.Области.П000220022106.Значение = 6.8;
		мРаздел22.Области.П000220031106.Значение = 21900;
		мРаздел22.Области.П000220032106.Значение = 3.39;
		мРаздел22.Области.П000220040106.Значение = 32070;
		
		// на накопительную часть трудовой пенсии  
		мРаздел22.Области.П000220010108.Значение = 2;
		мРаздел22.Области.П000220021108.Значение = 2000;
		мРаздел22.Области.П000220022108.Значение = 1.1;
		мРаздел22.Области.П000220031108.Значение = 4200;
		мРаздел22.Области.П000220032108.Значение = 0.56;
		мРаздел22.Области.П000220040108.Значение = 5880;
		
		// Для лиц 1967 года рождения и моложе 
		// на страховую часть трудовой пенсии  
		мРаздел22.Области.П000220010206.Значение = 6.3;
		мРаздел22.Области.П000220021206.Значение = 6300;
		мРаздел22.Области.П000220022206.Значение = 5.64;
		мРаздел22.Области.П000220031206.Значение = 17580;
		мРаздел22.Области.П000220032206.Значение = 2.82;
		мРаздел22.Области.П000220040206.Значение = 26040;

		// на накопительную часть трудовой пенсии
		мРаздел22.Области.П000220010208.Значение = 4;
		мРаздел22.Области.П000220021208.Значение = 4000;
		мРаздел22.Области.П000220022208.Значение = 2.26;
		мРаздел22.Области.П000220031208.Значение = 8520;
		мРаздел22.Области.П000220032208.Значение = 1.13;
		мРаздел22.Области.П000220040208.Значение = 11910;

	Иначе

		// Для организаций, индивидуальных предпринимателей и частных лиц

		// Для мужчин  1952 года рождения и старше и женщин 1956 года рождения  и старше
		// на страховую часть трудовой пенсии  
		мРаздел22.Области.П000220010006.Значение = 14;
		мРаздел22.Области.П000220021006.Значение = 14000;
		мРаздел22.Области.П000220022006.Значение = 7.9;
		мРаздел22.Области.П000220031006.Значение = 29800;
		мРаздел22.Области.П000220032006.Значение = 3.95;
		мРаздел22.Области.П000220040006.Значение = 41650;

		// Для мужчин с 1953 по 1966 год рождения и женщин с 1957 по 1966 год  рождения
		// на страховую часть трудовой пенсии  
		мРаздел22.Области.П000220010106.Значение = 12;
		мРаздел22.Области.П000220021106.Значение = 12000;
		мРаздел22.Области.П000220022106.Значение = 6.8;
		мРаздел22.Области.П000220031106.Значение = 25600;
		мРаздел22.Области.П000220032106.Значение = 3.39;
		мРаздел22.Области.П000220040106.Значение = 35770;

		// на накопительную часть трудовой пенсии  
		мРаздел22.Области.П000220010108.Значение = 2;
		мРаздел22.Области.П000220021108.Значение = 2000;
		мРаздел22.Области.П000220022108.Значение = 1.1;
		мРаздел22.Области.П000220031108.Значение = 4200;
		мРаздел22.Области.П000220032108.Значение = 0.56;
		мРаздел22.Области.П000220040108.Значение = 5880;

		// Для лиц 1967 года рождения и моложе 
		// на страховую часть трудовой пенсии  
		мРаздел22.Области.П000220010206.Значение = 10;
		мРаздел22.Области.П000220021206.Значение = 10000;
		мРаздел22.Области.П000220022206.Значение = 5.64;
		мРаздел22.Области.П000220031206.Значение = 21280;
		мРаздел22.Области.П000220032206.Значение = 2.82;
		мРаздел22.Области.П000220040206.Значение = 29740;

		// на накопительную часть трудовой пенсии  
		мРаздел22.Области.П000220010208.Значение = 4;
		мРаздел22.Области.П000220021208.Значение = 4000;
		мРаздел22.Области.П000220022208.Значение = 2.26;
		мРаздел22.Области.П000220031208.Значение = 8520;
		мРаздел22.Области.П000220032208.Значение = 1.13;
		мРаздел22.Области.П000220040208.Значение = 11910;

	КонецЕсли;

	Если НЕ РасчетНеВызывать Тогда
		// Ставки изменены, пересчитаем итоги
		Расчет("Раздел24" );
		Расчет("Раздел23" );
		Расчет("Раздел22" );
		Расчет("Раздел2"  );
		Расчет("Раздел21" );
		Расчет("Раздел1"  );
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтавки

// Возвращает модуль (положительное значение) заданного числа.
//
// Параметры:
//   ИсхЧисло - число - заданное число.
//
// Возвращаемое значение: число.
//
Функция Модуль(ИсхЧисло)
	
	Если НЕ ЗначениеЗаполнено(ИсхЧисло) Тогда
		Возврат 0;
	КонецЕсли;

	Если ТипЗнч(ИсхЧисло) <> Тип("Число") Тогда
		ИсхЧисло = Число(ИсхЧисло);
	КонецЕсли;	

	Мод = Макс(ИсхЧисло, ИсхЧисло * (-1));

	Возврат Мод;

КонецФункции // Модуль()

// Процедура ПоследовательноеЗаполнениеЛистовДеклРасчет()
// процедуры пытается по очереди заполнить (рассчитать)
// на основе уже имеющихся данных в таблицах
// связанные ячейки из других листов и разделов
// заполняем листы в обратном порядке, приоритет у тех листов и разделов
// в которых нет связи с другими объектами декларации
//
Процедура ПоследовательноеЗаполнениеЛистовДеклРасчет(РасчетныйЛист = "")
	// Запускаем НовуюФункциюРасчет листов в обратном порядке 
	// с указанием, какой лист необходимо рассчитать
	// анализируя, какой с кем связан
	// можно пере перебирать в закомментированном цикле, но прямой
	// обратной зависимости по последовательности нет
	// первый расчетный лист предполагается текущий лист, чтобы его сохранить
	// должен быть расчетан, в цикле повторится в расчете, это будет правильно
	// т.к. можеж содержать двойную связь.

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	Если РасчетныйЛист <> "" Тогда
		Если РазделБудетПечататься(РасчетныйЛист) Тогда
			Расчет(РасчетныйЛист);
		КонецЕсли;
	КонецЕсли;

	ПереборЗнач = мДеревоВыбранныхСтраниц.Строки.Количество();
	Пока ПереборЗнач > 0 Цикл

			ВыводНаПечать = мДеревоВыбранныхСтраниц.Строки[ПереборЗнач-1].ВыводНаПечать;
			
			Если ВыводНаПечать = 1 Тогда
				ИмяДляРасчета = мДеревоВыбранныхСтраниц.Строки[ПереборЗнач-1].ИмяСтраницы;
				Расчет(ИмяДляРасчета);
			КонецЕсли;
			ПереборЗнач = ПереборЗнач-1;
	КонецЦикла;
	Модифицированность = Истина;

КонецПроцедуры // Процедура ПоследовательноеЗаполнениеЛистовДеклРасчет (РасчетныйЛист = "")

//Процедура ИзменитьТаблицуВариантовЗаполнения
// Изменяет всем признак корректировки ячеей на 1
// если 1 - то вернем всё к ЭТАЛОНу
// если 0 - то вернем все ячейки к желтому цвету, доступных для редактирования
//
// Логика процедуры изменена: процедура работает только с показателями, с признаком
// автозаполнения равным 4.
// Для использования в декларациях необходимо соблюсти следующие требования:
// 1. Процедуры получения таблицы вариантов заполнения либо не должно быть либо она должна использовать
// только вызов роФУНКЦИИ получения таблицы, не более.
// 2. УстановитьЦветФона - должна быть объявленной как Экспортная.
// 3. Не должно быть процедуры ПолучитьКоличествоСтраницРаздела
//
Процедура ИзменитьТаблицуВариантовЗаполнения(ПолныйРучнойВвод = Ложь)

	ПереборЗнач = мДеревоСтраницОтчета.Строки.Количество();

	Пока ПереборЗнач > 0 цикл
			ИмяСтраницы = мДеревоСтраницОтчета.Строки[ПереборЗнач-1].ИмяСтраницы;
			ПереборЗнач = ПереборЗнач-1;
			// а если это многостраничный раздел?
			КолСтрВРазделе = ПолучитьКоличествоСтраницРаздела(ИмяСтраницы); // кол-во страниц в разделе
			// Всегда получим актуальную таблицу заполнения. Не эталонную.
			ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницы);

			Если ТаблицаВариантыЗаполнения = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ПолныйРучнойВвод Тогда
				// Если раздел многостраничный, то нужно насквозь все обнулять !!!

				Если КолСтрВРазделе = 1 Тогда

					Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
						Если Строка.ВариантЗаполнения = 4 Тогда
							Строка.ВариантЗаполнения = 0; // полный ручной ввод
						КонецЕсли;
					КонецЦикла; // Для Каждого Строка Из

					МассивВариантовЗаполненияСтраниц = Новый Массив;
					МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
					мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

					УстановитьЦветФонаЯчейки(,,ИмяСтраницы);
				КонецЕсли; // КолСтрВРазделе = 1 Иначе // если многостраничный раздел
			
				Если КолСтрВРазделе >= 2 Тогда

					Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
						Продолжить;
					КонецЕсли;

					Для Инд = 0 по МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
						Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд] Цикл
							Если Строка.ВариантЗаполнения = 4 Тогда
								Строка.ВариантЗаполнения = 0; // полный ручной ввод
							КонецЕсли; // ВариантЗаполнения <> 0 
						КонецЦикла; // Для каждого
					КонецЦикла; // Для
					УстановитьЦветФонаЯчейки(,,ИмяСтраницы); // текущую обновим
				КонецЕсли; // КолСтрВРазделе >= 2

			ИначеЕсли ПолныйРучнойВвод Тогда

				// Всё в эталонном виде
				Если КолСтрВРазделе = 1 Тогда
					Для Каждого Стр Из ТаблицаВариантыЗаполнения Цикл
						Если Стр.ВариантЗаполнения = 0 Тогда
							Стр.ВариантЗаполнения = 4
						КонецЕсли;
					КонецЦикла;

					МассивВариантовЗаполненияСтраниц = Новый Массив;
					МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
					мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

					УстановитьЦветФонаЯчейки(,,ИмяСтраницы);

				КонецЕсли; // если одна страница в разделе

				Если КолСтрВРазделе >= 2 Тогда
					Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
						Продолжить;
					КонецЕсли;

					Для Инд = 0 по МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
						// МассивВариантовЗаполненияСтраниц1[Инд].Добавить(ТаблицаВариантыЗаполнения);
						Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд] Цикл
							Если Строка.ВариантЗаполнения = 0 Тогда
								//НайденнаяСтрокаК = ТаблицаВариантыЗаполнения.Найти(Строка.КодПоказателя, "КодПоказателя");
								Строка.ВариантЗаполнения = 4; // полный автоматический ввод
							КонецЕсли; // ВариантЗаполнения <> 0 
						КонецЦикла; // Для каждого

					КонецЦикла; // Для

					// мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц1);
					УстановитьЦветФонаЯчейки(,,ИмяСтраницы); // текущую обновим

				КонецЕсли; // если более 1 страница в разделе

			КонецЕсли;

	КонецЦикла;

КонецПроцедуры // Процедура ИзменитьТаблицуВариантовЗаполнения(ПолныйРучнойВвод = 0)

//Функция ПолучитьКоличествоСтраницРаздела(ИмяТекущейСтраницыПанели)
// Возвращает кол-во страниц для любых многостраничных разделов
// если лист без доп. страниц, Тогда 1
//
Функция ПолучитьКоличествоСтраницРаздела(ИмяТекущейСтраницыПанели)
Перем ТаблицаСтраницРаздела;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат 1;
	КонецЕсли;

	КоличествоСтраниц    = Макс(ТаблицаСтраницРаздела.Количество(), 1);
	Возврат КоличествоСтраниц;
КонецФункции //Функция ПолучитьКоличествоСтраницРаздела(ИмяТекущейСтраницыПанели)

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

// Выполняет вывод полей запроса в табличный документ
Процедура ВывестиРезультатЗапросаВДокумент(РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого Колонка из  РезультатЗапроса.Колонки Цикл
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвтоВнутренний() Экспорт 
	
	Перем МассивВариантовЗаполненияСтраниц;
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамВидСтавокЕСНиПФР", Организация.ВидСтавокЕСНиПФР);
	Запрос.УстановитьПараметр("парамНачалоГода", НачалоГода(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамГод", Год(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамКонецОтчетногоПериода", КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Месяц1", Месяц(мДатаКонцаПериодаОтчета) - 2);
	Запрос.УстановитьПараметр("Месяц2", Месяц(мДатаКонцаПериодаОтчета) - 1);
	Запрос.УстановитьПараметр("Месяц3", Месяц(мДатаКонцаПериодаОтчета));
	
	// Определим: является ли организация плательщиком ЕНВД (для этого поищем доходы с признаком Облагается ЕНВД)
	
	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ГоловнаяОрганизация);

	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	// Сформируем текст запроса выборки месяцев налогового периода
	// первый месяц
	КонецМесяца = КонецМесяца(НачалоГода(мДатаКонцаПериодаОтчета));
	ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
	// прибавим остальные месяцы
	Для Сч = 2 По 12 Цикл
		КонецМесяца = КонецМесяца(КонецМесяца+1);
		ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	
	// ДанныеОПравеНаПенсию
	// Таблица Данные о праве на пенсию: - список иностранцев и периодов
	// Поля:
	//		Физлицо, 
	//		Месяц - месяц налогового периода
	// 
	// Описание:
	//	Выбираем из списка периодов (Периоды)
	//	Внутреннее соединение с "псевдо" ГражданствоФизЛиц.СрезПоследних
	//  по равенству периодов
	//  условие: что физлицо - не имеет права на пенсию
	//
	ДанныеОПравеНаПенсиюТекст = "
	|ВЫБРАТЬ
	|	Месяц(Периоды.Период) КАК Месяц,
	|	ГражданствоФизЛиц.ФизЛицо КАК Физлицо
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		ГражданствоФизЛиц.ФизЛицо КАК Физлицо,
	|		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодРегистра
	|	ИЗ
	|		("+ПериодыТекст+") КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО Периоды.Период >= ГражданствоФизЛиц.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ГражданствоФизЛиц.ФизЛицо,
	|		Периоды.Период) КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО ГражданствоФизЛиц.Период = Периоды.ПериодРегистра И ГражданствоФизЛиц.ФизЛицо = Периоды.Физлицо И ГражданствоФизЛиц.НеИмеетПравоНаПенсию
	|";
	
    // УчетнаяПолитикаНалоговыйУчет
	// Таблица УчетнаяПолитикаНалоговыйУчетУСН - это список периодов, когда организация переходила на УСН
	// поля:
	//		УСН, 
	//		Месяц - месяц налогового периода
	// Описание:	
	//	Выбираем Из Периоды (таблица - список периодов с начала года по текущий период)
	//	Внутреннее соединение с "псевдосрезом" последних регистра УчетнаяПолитикаНалоговыйУчет
	//	по равенству периодов
	//  условие: что организация использует УСН
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() <> "ЗУП" Тогда
		УчетнаяПолитикаНалоговыйУчет = 
		"ВЫБРАТЬ
		|	МЕСЯЦ(Периоды.Период) КАК Месяц,
		|	ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчет.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК УСН
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
		|	ИЗ
		|		("+ ПериодыТекст +") КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период И УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация
		|
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период И УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация И (ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчет.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ)";	
	Иначе
		УчетнаяПолитикаНалоговыйУчет = 
		"ВЫБРАТЬ
		|	МЕСЯЦ(Периоды.Период) КАК Месяц,
		|	УчетнаяПолитикаНалоговыйУчет.УСН КАК УСН
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
		|	ИЗ
		|		("+ ПериодыТекст +") КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период И УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация
		|
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период И УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация И (УчетнаяПолитикаНалоговыйУчет.УСН)";	
	КонецЕсли;

	// ДоходыПоСпискуСтруктурныхПодразделенийТекст
	//	ФизЛицо	- физическое лицо 
	//	Месяц	- месяц налогового периода 
	//	КодДоходаЕСН	- код дохода по нашей классификации доходов 
	//	Доход	- облагаемый размер дохода 
	//	ДоходНеЕНВД	- облагаемый размер дохода, относящийся к видам деятельности на общей системе налогообложения
	// Описание: собирает все зарегистрированные доходы ЕСН за вычетом скидки в разрезе: физлиц, месяцев и признака ОблагаетсяЕНВД
	// Состав облагаемых кодов доходов для взносов в ПФР совпадает с базой ФБ, поэтому выбираем только доходы с признаком ВходитВБазуФедеральныйБюджет
	
	ДоходыПоСпискуСтруктурныхПодразделенийТекст = 
	"ВЫБРАТЬ
	|	ЕСНСведенияОДоходах.ФизЛицо,
	|	МЕСЯЦ(ЕСНСведенияОДоходах.Период) КАК Месяц,
	|	ЕСНСведенияОДоходах.КодДоходаЕСН,
	|	ЕСНСведенияОДоходах.Результат - ЕСНСведенияОДоходах.Скидка КАК Доход,
	|	ВЫБОР
	|		КОГДА ЕСНСведенияОДоходах.ОблагаетсяЕНВД
	|			ТОГДА 0
	|		ИНАЧЕ ЕСНСведенияОДоходах.Результат - ЕСНСведенияОДоходах.Скидка
	|	КОНЕЦ КАК ДоходНеЕНВД
	|ИЗ
	|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|ГДЕ
	|	ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
	|	И ЕСНСведенияОДоходах.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет
	|	И ЕСНСведенияОДоходах.ОбособленноеПодразделение В(&СписокОбособленныхПодразделений)";
	
	// ДоходыПФРПоСпискуСтруктурныхПодразделенийТекст
	//	ФизЛицо	- физическое лицо 
	//	Месяц	- месяц налогового периода 
	//	КодДоходаЕСН	- код дохода по нашей классификации доходов 
	//	Доход	- облагаемый размер дохода 
	//	ДоходНеЕНВД	- облагаемый размер дохода, относящийся к видам деятельности на общей системе налогообложения
	// учтем, что некоторые физлица не имеют права на пенсионное обеспечение
	// оставим только те данные из выборки ДоходыФизлицПоМесяцам
	// которые относятся к физлицам, отсутствующим в выборке Иностранцы
	
	ДоходыПФРПоСпискуСтруктурныхПодразделенийТекст = 
	"ВЫБРАТЬ
	|	ДоходыФизлицПоМесяцам.ФизЛицо КАК ФизЛицо,
	|	ДоходыФизлицПоМесяцам.Месяц,
	|	ДоходыФизлицПоМесяцам.КодДоходаЕСН,
	|	ДоходыФизлицПоМесяцам.Доход,
	|	ДоходыФизлицПоМесяцам.ДоходНеЕНВД
	|ИЗ
	|	(" + ДоходыПоСпискуСтруктурныхПодразделенийТекст + ") КАК ДоходыФизлицПоМесяцам
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДанныеОПравеНаПенсиюТекст + ") КАК Иностранцы
	|		ПО ДоходыФизлицПоМесяцам.ФизЛицо = Иностранцы.Физлицо И ДоходыФизлицПоМесяцам.Месяц = Иностранцы.Месяц
	|
	|ГДЕ
	|	((Иностранцы.Физлицо) ЕСТЬ NULL )";
	
	// поделим всех физлиц по полу и возрасту на группы
	ПолоВозрастнаяГруппа = "ВЫБОР КОГДА ГОД(<Источник>.ФизЛицо.ДатаРождения) < 1967 ТОГДА 1 ИНАЧЕ 2 КОНЕЦ";
													 
	// НалоговаяБазаПоФизлицамПоМесяцам
	//	ФизЛицо	- физическое лицо 
	//	Месяц	- месяц налогового периода 
	//	База - налоговая база
	//	БазаНеЕНВД - налоговая база в части видов деятельности, не облагаемых ЕНВД
	//  НомерВозрастнойГруппы - номер возрастной группы: 
	//		1 - лица по 1966 г.р.
	//		2 - лица моложе 1966 г.р.
	// Описание:
	//  Выбирает базу взновов ПФР 
	
	НалоговаяБазаПоФизлицамПоМесяцам = "
	|ВЫБРАТЬ
	|	Доходы.ФизЛицо КАК ФизЛицо,
	|	Доходы.Месяц КАК Месяц,
	|   " + СтрЗаменить(ПолоВозрастнаяГруппа, "<Источник>", "Доходы") +" КАК НомерВозрастнойГруппы,
	|	СУММА(Доход) КАК База,
	|	СУММА(ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL ТОГДА ДоходНеЕНВД ИНАЧЕ 0 КОНЕЦ) КАК БазаНеЕНВД
	|ИЗ
	|	(" + ДоходыПФРПоСпискуСтруктурныхПодразделенийТекст + " ) КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ("+УчетнаяПолитикаНалоговыйУчет+") КАК УчетнаяПолитикаНалоговыйУчетУСН
	|		ПО Доходы.Месяц = УчетнаяПолитикаНалоговыйУчетУСН.Месяц
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизЛицо,
	|	Доходы.Месяц
	|";
													 

	// ИсчисленныйНалогПоФизЛицамПоМесяцам
	//	ФизЛицо	- физическое лицо 
	//	Месяц	- месяц налогового периода 
	//  НомерВозрастнойГруппы - номер возрастной группы физлица
	//		1 - лица по 1966 г.р.
	//		2 - лица моложе 1966 г.р.
	//	Накопительная - начислено на накопительную часть
	//	Страховая - начислено на страховую часть
	//	НакопительнаяНеЕНВД - начислено на накопительную часть по видам деятельности, не облагаемым ЕНВД
	//	СтраховаяНеЕНВД - начислено на страховую часть с доходов не облагаемых ЕНВД
	
	ИсчисленныйНалогПоФизЛицамПоМесяцам = "
	|ВЫБРАТЬ
	|	ЕСНИсчисленный.ФизЛицо КАК ФизЛицо,
	|	МЕСЯЦ(ЕСНИсчисленный.Период) КАК Месяц,
	|   " + СтрЗаменить(ПолоВозрастнаяГруппа, "<Источник>", "ЕСНИсчисленный") +" КАК НомерВозрастнойГруппы,
	|	СУММА(ЕСНИсчисленный.ПФРНакопительная) КАК Накопительная,
	|	СУММА(ЕСНИсчисленный.ПФРСтраховая) КАК Страховая,
	|	СУММА(ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL ТОГДА ЕСНИсчисленный.ПФРНакопительная - ЕСНИсчисленный.ПФРНакопительнаяЕНВД ИНАЧЕ 0 КОНЕЦ) КАК НакопительнаяНеЕНВД,
	|	СУММА(ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL ТОГДА ЕСНИсчисленный.ПФРСтраховая - ЕСНИсчисленный.ПФРСтраховаяЕНВД ИНАЧЕ 0 КОНЕЦ) КАК СтраховаяНеЕНВД
	|ИЗ
	|	РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ("+УчетнаяПолитикаНалоговыйУчет+") КАК УчетнаяПолитикаНалоговыйУчетУСН
	|		ПО МЕСЯЦ(ЕСНИсчисленный.Период) = УчетнаяПолитикаНалоговыйУчетУСН.Месяц
	|
	|ГДЕ
	|	ЕСНИсчисленный.ОбособленноеПодразделение В(&СписокОбособленныхПодразделений) И
	|	ЕСНИсчисленный.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСНИсчисленный.ФизЛицо,
	|	МЕСЯЦ(ЕСНИсчисленный.Период)
	|";
	
	// РАСЧЕТ ПОКАЗАТЕЛЕЙ РАЗДЕЛА 2										  
											  
	//НалоговаяБазаПоМесяцамОтчетногоПериода
	// поля запроса соответствуют номерам ячеек отчета
	// Описание:
	//  Выполняет расчет налоговой базы по месяцам отчетного периода для раздела 2 
	
	НалоговаяБазаПоМесяцамКвартала = "
	|ВЫБРАТЬ 
	|	// строка 0120 - первый месяц отчетного периода
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц1 И БазаПФР.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.База ) 	КАК П000020012003,
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц1 И БазаПФР.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.База ) 	КАК П000020012005,
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.БазаНеЕНВД) 									КАК П000020012007,
	|	// строка 0130 - второй месяц отчетного периода
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц2 И БазаПФР.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.База ) 	КАК П000020013003,
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц2 И БазаПФР.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.База ) 	КАК П000020013005,
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.БазаНеЕНВД) 									КАК П000020013007,
	|	// строка 0140 -  третий месяц отчетного периода
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц3 И БазаПФР.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.База ) 	КАК П000020014003,
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц3 И БазаПФР.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.База ) 	КАК П000020014005,
	|	СУММА(ВЫБОР КОГДА БазаПФР.Месяц = &Месяц3 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * БазаПФР.БазаНеЕНВД) 									КАК П000020014007
	|	ИЗ (" + НалоговаяБазаПоФизлицамПоМесяцам + ") КАК БазаПФР 
	|";
	
	
	//ИсчисленныеНалогиРаздела2
	// поля запроса соответствуют номерам ячеек отчета
	// Описание:
	//  Выполняет расчет показателей раздела 2, содержащих информацию об исчисленных налогах 
	
	ИсчисленныеНалогиРаздела2 = "
	|ВЫБРАТЬ 
	|
	|	// Страховая часть 
	|
	|	// строка 0300 - исчисленный налог с начала года
	|	СУММА(ИсчисленныйЕСН.СтраховаяНеЕНВД) КАК П000020030006,
	|
	|	// строка 0320 - исчисленный налог за первый месяц
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц1 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Страховая) 	КАК П000020032003,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц1 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Страховая) 	КАК П000020032005,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.СтраховаяНеЕНВД) 										КАК П000020032007,
	|	// строка 0330 - исчисленный налог за второй месяц
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц2 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Страховая) 	КАК П000020033003,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц2 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Страховая) 	КАК П000020033005,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.СтраховаяНеЕНВД) 										КАК П000020033007,
	|	// строка 0340 - исчисленный налог за третий месяц
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц3 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Страховая) 	КАК П000020034003,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц3 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Страховая) 	КАК П000020034005,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц3 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.СтраховаяНеЕНВД) 										КАК П000020034007,
	|
	|	// Накопительная часть 
	|
	|	// строка 0400 - исчисленный налог с начала года
	|	СУММА(ИсчисленныйЕСН.НакопительнаяНеЕНВД) КАК П000020040006,
	|
	|	// строка 0420 - исчисленный налог за первый месяц
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц1 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Накопительная) 	КАК П000020042005,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.НакопительнаяНеЕНВД) 										КАК П000020042007,
	|	// строка 0430 - исчисленный налог за второй месяц
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц2 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Накопительная) 	КАК П000020043005,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.НакопительнаяНеЕНВД) 										КАК П000020043007,
	|	// строка 0440 - исчисленный налог за третий месяц
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц3 И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.Накопительная) 	КАК П000020044005,
	|	СУММА(ВЫБОР КОГДА ИсчисленныйЕСН.Месяц = &Месяц3 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ИсчисленныйЕСН.НакопительнаяНеЕНВД) 										КАК П000020044007
	|
	|	ИЗ (" + ИсчисленныйНалогПоФизЛицамПоМесяцам + ") КАК ИсчисленныйЕСН 
	|";
	
	// РАСЧЕТ ПОКАЗАТЕЛЕЙ РАЗДЕЛА 2.2
	
	// ИсчисленныйНалогПоФизЛицамСНачалаГода
	//	ФизЛицо	- физическое лицо 
	//	Накопительная, Страховая - начисленные взносы на страховую и накопительную части с начала года
	
	ИсчисленныйНалогПоФизЛицамСНачалаГода = 
	"ВЫБРАТЬ
	|	ЕСНИсчисленный.ФизЛицо КАК ФизЛицо,
	|	СУММА(ЕСНИсчисленный.Накопительная) КАК Накопительная,
	|	СУММА(ЕСНИсчисленный.Страховая) КАК Страховая
	|ИЗ
	|	(" + ИсчисленныйНалогПоФизЛицамПоМесяцам + ") КАК ЕСНИсчисленный
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСНИсчисленный.ФизЛицо";
	

	// НалоговаяБазаПоФизлицамСНачалаГода 
	// Описание:
	//  Выбирает базу взновов ПФР с начала года в разрезе физлиц 
	//	Данные нужны для раздела 2.2
	
	НалоговаяБазаПоФизлицамСНачалаГода = "
	|ВЫБРАТЬ
	|	БазаПФР.ФизЛицо КАК ФизЛицо,
	|	БазаПФР.НомерВозрастнойГруппы КАК НомерВозрастнойГруппы,
	|	СУММА(БазаПФР.База) КАК База,
	|	СУММА(БазаПФР.БазаНеЕНВД) КАК БазаНеЕНВД
	|ИЗ
	|	(" + НалоговаяБазаПоФизлицамПоМесяцам + " ) КАК БазаПФР
	|
	|СГРУППИРОВАТЬ ПО
	|	БазаПФР.ФизЛицо,
	|	БазаПФР.НомерВозрастнойГруппы
	|";
												
	// НалоговаяБазаПоФизлицамПределам
	// Описание:
	//  Выполняет расчет показателей раздела 2.2
	
	НалоговаяБазаПоФизлицамПределам = "
	|ВЫБРАТЬ
	|
	|	// До 280 000 
	|
	|	// строка 100 - первая возрастная группа
	|	СУММА(ВЫБОР КОГДА (Ставки.НомерСтрокиСтавок = 1 ИЛИ Доходы.База < 0) И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * Доходы.База) 					КАК П000220010004, 
	|	СУММА(ВЫБОР КОГДА (Ставки.НомерСтрокиСтавок = 1 ИЛИ Доходы.База < 0) И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * Доходы.БазаНеЕНВД) 			КАК П000220010005, // под ОСН
	|	СУММА(ВЫБОР КОГДА (Ставки.НомерСтрокиСтавок = 1 ИЛИ Доходы.База < 0) И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ПФРИсчисленный.Страховая) 	КАК П000220010007,
	|	СУММА(ВЫБОР КОГДА (Ставки.НомерСтрокиСтавок = 1 ИЛИ Доходы.База < 0) И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) 								КАК П000220010010, 
	|	// строка 102 - вторая возрастная группа
	|	СУММА(ВЫБОР КОГДА (Ставки.НомерСтрокиСтавок = 1 ИЛИ Доходы.База < 0) И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * Доходы.База) 					КАК П000220010204, 
	|	СУММА(ВЫБОР КОГДА (Ставки.НомерСтрокиСтавок = 1 ИЛИ Доходы.База < 0) И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * Доходы.БазаНеЕНВД)			КАК П000220010205, // под ОСН
	|	СУММА(ВЫБОР КОГДА (Ставки.НомерСтрокиСтавок = 1 ИЛИ Доходы.База < 0) И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ПФРИсчисленный.Страховая) 	КАК П000220010207,
	|	СУММА(ВЫБОР КОГДА (Ставки.НомерСтрокиСтавок = 1 ИЛИ Доходы.База < 0) И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ПФРИсчисленный.Накопительная) КАК П000220010209,
	|	СУММА(ВЫБОР КОГДА (Ставки.НомерСтрокиСтавок = 1 ИЛИ Доходы.База < 0) И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ)  							 	КАК П000220010210, 
	|
	|	// От 280 000 до 600 000: 
	|
	|	// строка 210 - первая возрастная группа (рассчитываем только численность)
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА Доходы.БазаНеЕНВД * Ставки.СуммаДоходаС / Доходы.База ИНАЧЕ 0 КОНЕЦ)	КАК П000220021005, // база под ОСН за минусом 280000
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) 														КАК П000220021010, 
	|	// строка 212 - вторая возрастная группа (рассчитываем только численность)
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА Доходы.БазаНеЕНВД * Ставки.СуммаДоходаС / Доходы.База ИНАЧЕ 0 КОНЕЦ)	КАК П000220021205, // база под ОСН за минусом 280000
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) 														КАК П000220021210, 
	|
	|	// строка 220 - первая возрастная группа 
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * (Доходы.База - Ставки.СуммаДоходаС)) 								КАК П000220022004, // база за минусом 280000
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА Доходы.БазаНеЕНВД * (Доходы.База - Ставки.СуммаДоходаС) / Доходы.База ИНАЧЕ 0 КОНЕЦ)КАК П000220022005, // база под ОСН за минусом 280000
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * (ПФРИсчисленный.Страховая - Ставки.ПФРСтраховая1вРублях)) 		КАК П000220022007, // начислено налога на сумму, превышающую 280000
	|	// строка 222 - вторая возрастная группа 
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * (Доходы.База - Ставки.СуммаДоходаС)) 								КАК П000220022204, // база за минусом 280000
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА Доходы.БазаНеЕНВД * (Доходы.База - Ставки.СуммаДоходаС) / Доходы.База ИНАЧЕ 0 КОНЕЦ)КАК П000220022205, // база под ОСН за минусом 280000
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * (ПФРИсчисленный.Страховая - Ставки.ПФРСтраховая2вРублях)) 		КАК П000220022207, // начислено налога на сумму, превышающую 280000
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 2 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * (ПФРИсчисленный.Накопительная - Ставки.ПФРНакопительная2вРублях)) КАК П000220022209, // начислено налога на сумму, превышающую 280000
	|
	|	// Свыше 600 000: 
	|
	|	// строка 400 - первая возрастная группа 
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 3 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * Доходы.База )					КАК П000220040004, // вся база
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 3 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * Доходы.БазаНеЕНВД )			КАК П000220040005, // вся база под ОСН
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 3 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ПФРИсчисленный.Страховая )	КАК П000220040007, // всего начислено на страховую часть
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 3 И Доходы.НомерВозрастнойГруппы = 1 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ)								КАК П000220040010, // численность
	|	// строка 402 - вторая возрастная группа 
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 3 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * Доходы.База )					КАК П000220040204, // вся база
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 3 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * Доходы.БазаНеЕНВД )			КАК П000220040205, // вся база  под ОСН
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 3 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ПФРИсчисленный.Страховая )	КАК П000220040207, // всего начислено на страховую часть
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 3 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ * ПФРИсчисленный.Накопительная )КАК П000220040209, // всего начислено на накопительную часть
	|	СУММА(ВЫБОР КОГДА Ставки.НомерСтрокиСтавок = 3 И Доходы.НомерВозрастнойГруппы = 2 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ)								КАК П000220040210  // численность
	|
	|	ИЗ (" + НалоговаяБазаПоФизлицамСНачалаГода + ") КАК Доходы 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахЕСНиПФР КАК Ставки
	|		ПО Ставки.ВидСтавокЕСНиПФР = &парамВидСтавокЕСНиПФР И Ставки.Год = &парамГод И Доходы.База > Ставки.СуммаДоходаС И Доходы.База <= Ставки.СуммаДоходаПо
	|  		ЛЕВОЕ СОЕДИНЕНИЕ (" + ИсчисленныйНалогПоФизЛицамСНачалаГода +") КАК ПФРИсчисленный
	|		ПО ПФРИсчисленный.ФизЛицо = Доходы.ФизЛицо
	|";
	
	// РАСЧЕТ ПОКАЗАТЕЛЕЙ РАЗДЕЛА 2.3										  

	// НалоговаяБазаПоСпискуОбособленныхПодразделений
	//	База - налоговая база
	//	БазаНеЕНВД - налоговая база в части доходов не облагаемых ЕНВД
	// Описание:
	//  Выбирает базу взновов ПФР 
	
	НалоговаяБазаПоСпискуОбособленныхПодразделений = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА СУММА(Доход) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(Доход) КОНЕЦ КАК База,
	|	ВЫБОР КОГДА СУММА(ДоходНеЕНВД) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ДоходНеЕНВД) КОНЕЦ КАК БазаНеЕНВД
	|ИЗ
	|	(" + ДоходыПФРПоСпискуСтруктурныхПодразделенийТекст + " ) КАК Доходы
	|";
	
	// ИсчисленныйНалогПоСпискуОбособленныхПодразделений
	//	Накопительная - начислено на накопительную часть
	//	Страховая - начислено на страховую часть
	//	НакопительнаяНеЕНВД - начислено на накопительную часть с доходов не облагаемых ЕНВД
	//	СтраховаяНеЕНВД - начислено на страховую часть с доходов не облагаемых ЕНВД
	
	ИсчисленныйНалогПоСпискуОбособленныхПодразделений = "
	|ВЫБРАТЬ
	|	СУММА(ЕСНИсчисленный.ПФРНакопительная) КАК Накопительная,
	|	СУММА(ЕСНИсчисленный.ПФРСтраховая) КАК Страховая,
	|	СУММА(ЕСНИсчисленный.ПФРНакопительная - ЕСНИсчисленный.ПФРНакопительнаяЕНВД) КАК НакопительнаяНеЕНВД,
	|	СУММА(ЕСНИсчисленный.ПФРСтраховая - ЕСНИсчисленный.ПФРСтраховаяЕНВД) КАК СтраховаяНеЕНВД
	|ИЗ
	|	РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
	|
	|ГДЕ
	|	ЕСНИсчисленный.ОбособленноеПодразделение В(&СписокОбособленныхПодразделений) И
	|	ЕСНИсчисленный.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
	|";

	// -------------------------------------------------------------------------------
	// ВЫВОД ДАННЫХ В ОТЧЕТ
	
	// Раздел 2.0
	
	// Данные берутся по обособленному подразделению (указанной организации)
	Запрос.УстановитьПараметр("СписокОбособленныхПодразделений", Организация);
	
	Запрос.Текст = НалоговаяБазаПоМесяцамКвартала;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	Запрос.Текст = ИсчисленныеНалогиРаздела2;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	// Раздел 2.1
	
	Если Метаданные.Обработки.Найти("БухгалтерскиеИтоги") <> Неопределено Тогда
		
		Запрос.Текст = НалоговаяБазаПоСпискуОбособленныхПодразделений;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			База = Выборка.База;
			БазаНеЕНВД = Выборка.БазаНеЕНВД;
		Иначе
			База = 0; БазаНеЕНВД = 0;
		КонецЕсли;
		
		// Инициализация
		ПС = ПланыСчетов.Хозрасчетный;
		Счет51    = ПС.РасчетныеСчета;
		Счет69_02_1 = ПС.ПФР_страх;
		Счет69_02_2 = ПС.ПФР_нак;

		// Бухгалтерские итоги по аналитике
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();

		НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
		Если НомерМесяца = "12" Тогда
			НомерМесяца = "0";
		КонецЕсли;

		НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
		НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");
		
		Номер1МесяцаКвартала = НомерКвартала * 3 - 2;
		Номер2МесяцаКвартала = НомерКвартала * 3 - 1;
		Номер3МесяцаКвартала = НомерКвартала * 3;
		
		ДатаВ1МесяцеКвартала = Дата(НомерГода, Номер1МесяцаКвартала, 1);
		
		СдвигПериодаУплаты = 15 * 86400;
		
		ДатаНачалаГода = КонецДня(РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(Дата(НомерГода, 1, 15))) + 1;
		
		ДатаВ1МесяцеКвартала = Дата(НомерГода, Номер1МесяцаКвартала, 15);
		
		ДатаНачала1МесяцаКвартала = КонецДня(РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(ДатаВ1МесяцеКвартала)) + 1;
		ДатаКонца1МесяцаКвартала  = КонецДня(РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(
			КонецМесяца(ДатаНачала1МесяцаКвартала) + СдвигПериодаУплаты));
		
		ДатаВо2МесяцеКвартала = Дата(НомерГода, Номер2МесяцаКвартала, 15);
		
		ДатаНачала2МесяцаКвартала = КонецДня(РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(ДатаВо2МесяцеКвартала)) + 1;
		ДатаКонца2МесяцаКвартала  = КонецДня(РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(
			КонецМесяца(ДатаНачала2МесяцаКвартала) + СдвигПериодаУплаты));
		
		ДатаВ3МесяцеКвартала = Дата(НомерГода, Номер3МесяцаКвартала, 15);
		
		ДатаНачала3МесяцаКвартала = КонецДня(РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(ДатаВ3МесяцеКвартала)) + 1;
		ДатаКонца3МесяцаКвартала  = КонецДня(РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(
			КонецМесяца(ДатаНачала3МесяцаКвартала) + СдвигПериодаУплаты));
		
		//**********************************************************************
		// Извлекаем данные за 1 месяц квартала
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.02", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		// Перечислены взносы
		ПеречисленоСтраховой = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет69_02_1, Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		ПеречисленоНакопительной = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет69_02_2, Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000210001205", ПеречисленоСтраховой);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000210001206", ПеречисленоНакопительной);
		
		Если ЗначениеЗаполнено(База) Тогда
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000210001204", (ПеречисленоСтраховой + ПеречисленоНакопительной) / База * БазаНеЕНВД);
		КонецЕсли;
		
		//**********************************************************************
		// Извлекаем данные за 2 месяц квартала
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.02", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		// Перечислены взносы
		ПеречисленоСтраховой = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет69_02_1, Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		ПеречисленоНакопительной = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет69_02_2, Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000210001305", ПеречисленоСтраховой);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000210001306", ПеречисленоНакопительной);
		
		Если ЗначениеЗаполнено(База) Тогда
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000210001304", (ПеречисленоСтраховой + ПеречисленоНакопительной) / База * БазаНеЕНВД);
		КонецЕсли;
		
		//**********************************************************************
		// Извлекаем данные за 3 месяц квартала
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.02", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		// Перечислены взносы
		ПеречисленоСтраховой = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет69_02_1, Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		ПеречисленоНакопительной = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет69_02_2, Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000210001405", ПеречисленоСтраховой);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000210001406", ПеречисленоНакопительной);
		
		Если ЗначениеЗаполнено(База) Тогда
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000210001404", (ПеречисленоСтраховой + ПеречисленоНакопительной) / База * БазаНеЕНВД);
		КонецЕсли;
		
		//**********************************************************************
		// Извлекаем данные за отчетный период
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаГода, ДатаКонца3МесяцаКвартала, , "69.02", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		// Перечислены взносы
		ПеречисленоСтраховой = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет69_02_1, Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		ПеречисленоНакопительной = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет69_02_2, Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000210001005", ПеречисленоСтраховой);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000210001006", ПеречисленоНакопительной);
		
		Если ЗначениеЗаполнено(База) Тогда
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000210001004", (ПеречисленоСтраховой + ПеречисленоНакопительной) / База * БазаНеЕНВД);
		КонецЕсли;
		
	КонецЕсли;
	
	// Раздел 2.2
	
	// Данные берутся по обособленному подразделению (указанной организации)
	Запрос.УстановитьПараметр("СписокОбособленныхПодразделений", Организация);
	Запрос.Текст = НалоговаяБазаПоФизлицамПределам;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());

	// Раздел 2.3
	
	// Заполняется только для головной организации, имеющей обособленные подразделения.
	
	СписокОбособленныхПодразделенийОрганизации = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	Если Организация = ГоловнаяОрганизация И СписокОбособленныхПодразделенийОрганизации.Количество() <> 0 Тогда
		
		// База ПФР по обособленным подразделениям организации 
		Запрос.УстановитьПараметр("СписокОбособленныхПодразделений", СписокОбособленныхПодразделенийОрганизации);
		Запрос.Текст = НалоговаяБазаПоСпискуОбособленныхПодразделений;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000230001103",Выборка.База);
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000230001104",Выборка.БазаНеЕНВД);
		КонецЕсли; 
		
		// Исчисленные налони по обособленным подразделениям организации
		Запрос.УстановитьПараметр("СписокОбособленныхПодразделений", СписокОбособленныхПодразделенийОрганизации);
		Запрос.Текст = ИсчисленныйНалогПоСпискуОбособленныхПодразделений;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000230003103", Выборка.Страховая);
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000230004103", Выборка.Накопительная);
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000230003104", Выборка.СтраховаяНеЕНВД);
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000230004104", Выборка.НакопительнаяНеЕНВД);
		КонецЕсли; 
		
	КонецЕсли;	
	
	// -------------------------------------------------------------------------------
	// Расчет автовычисляемых полей

	Расчет();

	Модифицированность = Истина;

	// По окончании ЗаполнитьАвто будет запускаться Расчет с проставлением
	// связей внутри декларации. Не стирать!

	ПоследовательноеЗаполнениеЛистовДеклРасчет();

КонецПроцедуры // ЗаполнитьАвто()

Процедура ЗаполнитьАвтоВнешний() Экспорт

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		Предупреждение("Заполнение по данным информационной базы не предусмотрено!");
		Возврат;
	КонецЕсли;
	
	// запрашиваем подтверждение у пользователя и очищаем отчет
	ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма);
	Если ПрерватьАвтоЗаполнение Тогда
		Возврат;
	КонецЕсли;

	// заполняем содержательную часть
	Если ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		ПараметрыОтчета = РегламентированнаяОтчетность.СформироватьСтруктуруПараметровОтчетаДляЗаполнения(ЭтаФорма);
		ПараметрыОтчета.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		ПараметрыОтчета.Вставить("ТочностьЕдиницыИзмерения", ТочностьЕдиницыИзмерения);
		ДанныеЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьДанныеЗаполненияОтчета(ЭтаФорма, , мВыбраннаяФорма, , ПараметрыОтчета);
		Если ТипЗнч(ДанныеЗаполненияОтчета) = Тип("ДеревоЗначений") Тогда
			Для Каждого СтрУровня1 Из ДанныеЗаполненияОтчета.Строки Цикл
				Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
					РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, СтрУровня2.Имя, СтрУровня2.Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Расчет();
	
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	

КонецПроцедуры  //ЗаполнитьАвтоВнешний

Процедура НачальнаяПодготовкаФормы() Экспорт 

	мСтараяВерсияФормы = мВерсияФормы;

	мАвтоВыборКодов = Ложь;

	мТитульный   = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мФизЛица     = ЭлементыФормы.ПолеТабличногоДокументаФизЛица;
	мРаздел1     = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	мРаздел2     = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;
	мРаздел21    = ЭлементыФормы.ПолеТабличногоДокументаРаздел21;
	мРаздел22    = ЭлементыФормы.ПолеТабличногоДокументаРаздел22;
	мРаздел23    = ЭлементыФормы.ПолеТабличногоДокументаРаздел23;
	мРаздел24    = ЭлементыФормы.ПолеТабличногоДокументаРаздел24;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	мВПрограммеИзмененаОрганизация = Ложь;
	мДокументВосстановлен = Ложь;

	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления();

	ЗагрузитьПоказателиИзМакета("ТипНалогоплательщика");
	
	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

			мТитульный     .Области["ВидДок"].Значение = "1";

			// Ставки по умолчанию для 10 типа
			ЗаполнитьСтавки("10", Истина);

			Если ОбновитьПеременныеМодуля("КодПлательщикаРаздел1", "10") Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "ТипНП", 2, "10");
			КонецЕсли;

			УстановитьФорматВывода();
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	// ИНИЦИАЛИЗАЦИЯ ЗАПОЛНЕНИЯ СОДЕРЖАТЕЛЬНОЙ ЧАСТИ ПО УЧЕТНЫМ ДАННЫМ
	
	СвойстваЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьСвойстваЗаполненияОтчета(ЭтотОбъект, мВыбраннаяФорма);
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда 
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета);
	КонецЕсли;
	Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" ) Тогда
		//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
		ИзМакета = Истина;
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	
	ПоказатьПериод();

	СохрЗначВКвадратиках();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
		ЗаполнитьСведенияОбФЛ();
	Иначе
		УправлениеЛистами();
		ПолучитьИННКПП();
	КонецЕсли;

	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

КонецПроцедуры

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
		
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	ФормироватьСтруктуруСвойствСтраниц();

	НачальнаяПодготовкаФормы();
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт

	Страница = СтрЗаменить(ИмяРаздела, "ПолеТабличногоДокумента", "");

	Если Страница = "Раздел1" Тогда
		мКодПлательщикаРаздел1 = "";
		мОКАТОРаздел1 = "";

	// Входят в многострочную часть
		мКодПлательщикаРаздел1 = "";
		мКодОКАТО = "";

		// Переменные первого раздела, входят в многострочную часть
		мКБКРаздел1_1     =  "";
		мСумма1Раздел1_1  =  0;
		мСумма2Раздел1_1  =  0;
		мСумма3Раздел1_1  =  0;

		мКБКРаздел1_2     =  "";
		мСумма1Раздел1_2  =  0;
		мСумма2Раздел1_2  =  0;
		мСумма3Раздел1_2  =  0;
		мСумма0Раздел1_1  =  0;
		мСумма0Раздел1_2  =  0;

	ИначеЕсли Страница = "Титульный" Тогда

		мИННДиректор = "";
		мИННБухгалтер = "";

	КонецЕсли;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоСтраницОтчета();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	Если СвойстваЗаполненияОтчета = Неопределено Тогда  
		ЗаполнитьАвтоВнутренний();
	Иначе
		ЗаполнитьАвтоВнешний();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	СохрЗначВКвадратиках();
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

Процедура ПолеТабличногоДокументаФизЛицаПриИзменении(Элемент)

	Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(Элемент.Значение) Тогда
		стрУказаннаяДата = Формат(ДатаПодписи, "ДФ=""ддММгггг""");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ДатаПодписи", 8, стрУказаннаяДата);
	Иначе
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ДатаПодписи", 8, "        ");
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	// управляем показом статика, отображающего номер текущей страницы
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;
	ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели);

	// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "Выбор" поля табличного документа
// на странице "Физ. лица" основной панели формы.
// Вызывается при двойном щелчке на ячейку.
//
Процедура ПолеТабличногоДокументаФизЛицаВыбор(Элемент, Область, СтандартнаяОбработка)

	ВРегОбластьИмя = Лев(ВРег(Область.Имя), 13);
	Если (Найти(Область.Имя, "ФизЛицИнд") > 0)
	   Или (Область.Имя = "ФизЛицСубъект")
	   Или (Область.Имя = "ФизЛицРайон")
	   Или (Область.Имя = "ФизЛицГород")
	   Или (Область.Имя = "ФизЛицС1")
	   Или (Область.Имя = "ФизЛицС2")
	   Или (Область.Имя = "ФизЛицНП")
	   Или (Область.Имя = "ФизЛицУлица")
	   Или (Область.Имя = "ФизЛицДом")
	   Или (Область.Имя = "ФизЛицКорпус")
	   Или (Область.Имя = "ФизЛицКвартира") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВводаАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");

		СтруктураАдресныхДанных = Новый Структура;

		СтруктураАдресныхДанных.Вставить("Индекс", мФизЛица.Области.ФизЛицИнд1.Значение
		   + мФизЛица.Области.ФизЛицИнд2.Значение
		   + мФизЛица.Области.ФизЛицИнд3.Значение
		   + мФизЛица.Области.ФизЛицИнд4.Значение
		   + мФизЛица.Области.ФизЛицИнд5.Значение
		   + мФизЛица.Области.ФизЛицИнд6.Значение);

		СтруктураАдресныхДанных.Вставить("Регион", мФизЛица.Области.ФизЛицС1.Значение
		   + мФизЛица.Области.ФизЛицС2.Значение);

		СтруктураАдресныхДанных.Вставить("НазваниеРегиона", мФизЛица.Области.ФизЛицСубъект.Значение);

		СтруктураАдресныхДанных.Вставить("Район", мФизЛица.Области.ФизЛицРайон.Значение);
		СтруктураАдресныхДанных.Вставить("Город", мФизЛица.Области.ФизЛицГород.Значение);
		СтруктураАдресныхДанных.Вставить("НаселенныйПункт", мФизЛица.Области.ФизЛицНП.Значение);
		СтруктураАдресныхДанных.Вставить("Улица", мФизЛица.Области.ФизЛицУлица.Значение);
		СтруктураАдресныхДанных.Вставить("Дом", мФизЛица.Области.ФизЛицДом.Значение);
		СтруктураАдресныхДанных.Вставить("Корпус", мФизЛица.Области.ФизЛицКорпус.Значение);
		СтруктураАдресныхДанных.Вставить("Квартира", мФизЛица.Области.ФизЛицКвартира.Значение);

		ФормаВводаАдреса.НачальноеЗначениеВыбора = СтруктураАдресныхДанных;

		Если ФормаВводаАдреса.ОткрытьМодально() Тогда

			Индекс = "";
			Регион = "";
			НазваниеРегиона = "";
			Район = "";
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Дом = "";
			Корпус = "";
			Квартира = "";

			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Индекс", Индекс);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Регион", Регион);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НазваниеРегиона", НазваниеРегиона);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Район", Район);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Город", Город);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НаселенныйПункт", НаселенныйПункт);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Улица", Улица);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Дом", Дом);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Корпус", Корпус);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Квартира", Квартира);

			мФизЛицИнд = Индекс;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицИнд", 6, Индекс);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицС", 2, Регион);

			мФизЛица.Области.ФизЛицСубъект.Значение = НазваниеРегиона;
			мФизЛица.Области.ФизЛицРайон.Значение = Район;
			мФизЛица.Области.ФизЛицГород.Значение = Город;
			мФизЛица.Области.ФизЛицНП.Значение = НаселенныйПункт;
			мФизЛица.Области.ФизЛицУлица.Значение = Улица;

			мФизЛица.Области.ФизЛицДом.Значение = Дом;
			мФизЛица.Области.ФизЛицКорпус.Значение = Корпус;
			мФизЛица.Области.ФизЛицКвартира.Значение = Квартира;
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли Область.Имя = "ФизЛицПолМ" Тогда

		СтандартнаяОбработка = Ложь;
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
			Модифицированность = Истина;
			Возврат;
		Иначе
			Область.Значение = "V";
			мФизЛица.Области.ФизЛицПолЖ.Значение = "";
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли Область.Имя = "ФизЛицПолЖ" Тогда
		СтандартнаяОбработка = Ложь;
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
			Модифицированность = Истина;
			Возврат;
		Иначе
			Область.Значение = "V";
			мФизЛица.Области.ФизЛицПолМ.Значение = "";
			Модифицированность = Истина;
		КонецЕсли;


	ИначеЕсли (ВРегОбластьИмя = "ФИЗЛИЦДОКДАТА") ИЛИ (ВРегОбластьИмя = "ФИЗЛИЦДАТАРОЖ") Тогда

		СтандартнаяОбработка = Ложь;

		ШаблонИмениЯчейки = Лев(Область.Имя, СтрДлина(Область.Имя) - 1);

		стрУказаннаяДата = Элемент.Области[ШаблонИмениЯчейки + "5"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "6"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "7"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "8"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "3"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "4"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "1"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "2"].Значение;

		Если ПустаяСтрока(стрУказаннаяДата) Тогда
			стрУказаннаяДата = "00010101000000";
		Иначе
			стрУказаннаяДата = стрУказаннаяДата + "000000";
		КонецЕсли;

		УказанннаяДата = Дата(стрУказаннаяДата);

		Если ВвестиДату(УказанннаяДата, "Введите дату", ЧастиДаты.Дата) Тогда

			стрУказаннаяДата = Формат(УказанннаяДата, "ДФ=""ддММгггг""");

			Для Поз = 1 По 8 Цикл
				Элемент.Области[ШаблонИмениЯчейки + Поз].Значение = Сред(стрУказаннаяДата, Поз, 1);
			КонецЦикла;

			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаФизЛицаВыбор()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	ПоследовательноеЗаполнениеЛистовДеклРасчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	ПоследовательноеЗаполнениеЛистовДеклРасчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Истина;

	// Заполним дату на листах
	ЗаполнитьДатуВЯчейках();

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Ложь;

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

Процедура КнопкаДобавитьДопСтраницуНажатие(Элемент)

	// Модифицируем структуру параметров автозаполнения ячеек
	ВставитьДополнительнуюСтраницу();

КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуНажатие(Элемент)

	УдалитьДополнительнуюСтраницу();

КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуНажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаНажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(-1, ИмяТекущейСтраницыПанели);

КонецПроцедуры

Процедура КнопкаСледующаяСтраницаНажатие(Элемент)

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(1, ИмяТекущейСтраницыПанели);

КонецПроцедуры

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)
	ИзменитьТаблицуВариантовЗаполнения (НЕ ФлажокОтклАвтоРасчет);
КонецПроцедуры

Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	// Попытка сделана для того, чтобы в случае выделения нескольких ячеек (даже случайно)
	// не возникала ошибка
	Попытка
		Если Область.Защита Тогда
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;

	Если (Найти(Область.Имя,"ТипОрг") > 0) И Область.Имя <> "ТипОрг3" Тогда
		СтандартнаяОбработка = Ложь;

		Модифицированность = ?(Область.Значение = "V", Ложь, Истина);

		Область.Значение = "V";
		АктивныйНомер = Число(Сред(Область.Имя, СтрДлина(Область.Имя), 1));

		Зн = 1;
		Пока Зн <= 7 цикл
			Если АктивныйНомер=Зн Тогда
				Зн=Зн+1;
			Иначе
				мТитульный.Области[ Сред(Область.Имя, 1,6) + Строка(Зн)].Значение = " ";
				Зн = Зн + 1;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФизЛица";
	СтрокаУровня1.Представление            = "Сведения о физических лицах";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаФизЛица";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел21";
	СтрокаУровня1.Представление            = "Раздел 2.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел21";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел22";
	СтрокаУровня1.Представление            = "Раздел 2.2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел22";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел23";
	СтрокаУровня1.Представление            = "Раздел 2.3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел23";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел24";
	СтрокаУровня1.Представление            = "Раздел 2.4";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел24";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ФизЛица";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "ФизЛицФИО";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела1_2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел21";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел22";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел23";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел24";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			// КодПоказателя по структуре , под 9-й колонке
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре    = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ИмяСтраницы = "Раздел1" Тогда

			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = "Раздел1";
			НоваяСтрока.КодПоказателяПоСоставу = "";
			НоваяСтрока.КодПоказателяПоФорме   = "";
			НоваяСтрока.ПризнМногострочности   = "";
			НоваяСтрока.ТипДанныхПоказателя    = "Е";
			НоваяСтрока.КодПоказателяПоСтруктуре  = "Сумма0Раздел1";

			НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
			НоваяСтрока.КодПоказателя      = "";
			НоваяСтрока.ВариантЗаполнения  = 4;
			НоваяСтрока.КодПоказателяПоСтруктуре  = "Сумма0Раздел1";

		КонецЕсли;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Загружает данные из Списков
// Параметры:
// РазделвМакете - раздел в макете
// КодДляКБКБюджет - код для кбк, чтоб выбор был из соответствующих бюджетов
//
Процедура ЗагрузитьПоказателиИзМакета (РазделВМакете, КодДляКБКБюджет = Неопределено)

	МакетСоставаПоказателей = ПолучитьМакет("Списки");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	// Очистим
	Если РазделВМакете = "КБК2005Раздел1" Тогда

		Если мКБК2005Раздел1 <> Неопределено Тогда
			Если мКБК2005Раздел1.Количество() > 0 Тогда
				мКБК2005Раздел1.Очистить();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Если ТекОбласть <> Неопределено Тогда

		НеобходимоДобавитьСтроку = Неопределено;

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.

			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда

				Прервать;

			Иначе

				Если (РазделВМакете = "КБК2005Раздел1") И (КодПоказателя = "") Тогда

					НеобходимоДобавитьСтроку = Истина; // Пустое значение

				ИначеЕсли (РазделВМакете = "КБК2005Раздел1") И (КодДляКБКБюджет = 1) Тогда

					Если КодПоказателя = "18210202010061000160" Тогда
						НеобходимоДобавитьСтроку = Истина;
					КонецЕсли;

				ИначеЕсли (РазделВМакете = "КБК2005Раздел1") И (КодДляКБКБюджет = 2) Тогда

					Если КодПоказателя = "18210202020061000160" Тогда
						НеобходимоДобавитьСтроку = Истина;
					КонецЕсли;

				ИначеЕсли РазделВМакете = "ТипНалогоплательщика" Тогда

					НовСтрока = мТипНалогоплательщика.Добавить();

				КонецЕсли;

					Если НеобходимоДобавитьСтроку <> Неопределено Тогда

						Если НеобходимоДобавитьСтроку Тогда
							НовСтрока = мКБК2005Раздел1.Добавить();
							НовСтрока.Код= КодПоказателя;
							НовСтрока.Название = Название;
							НеобходимоДобавитьСтроку = Ложь;
						КонецЕсли;

					Иначе
						НовСтрока.Код= КодПоказателя;
						НовСтрока.Название = Название;

					КонецЕсли;

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ЗагрузитьНалоговыеЛьготыИмущество

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Функция возвращает структуру с показателями титульного листа и листов раздела "ФизЛица"
//
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак вывода сообщений в окно сообщений
//
// Возвращаемое значение:
//	Структура - данные с титульного листа и листа "ФизЛица"
//
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
	
	СтруктураМногостраничныхРазделов = Неопределено;
	
	Если БратьИзФормы Тогда
		
		ОбновитьСтруктуруМногостраничныхРазделов();
		
		ПоказателиОтчета = Новый Структура();

		Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

		КонецЦикла;
		
	Иначе
		
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		//СтруктураМногостраничныхРазделов = ДанныеОтчета.ДанныеМногостраничныхРазделов;

	КонецЕсли;
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	
	Возврат СписокДляВозврата;
	
КонецФункции

// Процедура добавляет строку в таблицу сообщений, заполняемую по ходу проверки правильности 
// заполнения показателей перед выгрузкой
//
// Параметры:
//	Описание - строка, описание ошибки
//	Раздел - строка, имя раздела, при проверке которого произошла ошибка
//	ИмяЯчейки - строка, имя области табличного документа, соответвующей неверно заполненному показателю
//	ФИО - строка, ФИО физлица. Заполняется для раздела "ФизЛица"
//
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры
	
// Функция проверяет правильность заполнения титульного листа и листов раздела "ФизЛица".
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	Если БратьИзформы Тогда
	     Орг = Организация;
	Иначе
		Если мСохраненныйДок = Неопределено Тогда
			Если ВыводитьСообщения Тогда
				Сообщить(ПредставлениеОтчета + "Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		Данные = мСохраненныйДок.ДанныеОтчета.Получить();
		Если Данные = Неопределено Тогда
			Если ВыводитьСообщения Тогда
				Сообщить(ПредставлениеОтчета + "Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		Орг = мСохраненныйДок.Организация;
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
	КонецЕсли;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы, ВыводитьСообщения);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	ОргКПП = ПоказателиТитульный.КПП1;
	ОргИНН = Орг.ИНН;
	
	ДокПредставляется = 210;
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредставляется = 220;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг4) Тогда
		ДокПредставляется = 120;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг5) Тогда
		ДокПредставляется = 331;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг6) Тогда
		ДокПредставляется = 332;
	КонецЕсли;
	
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер = ПоказателиТитульный.ОргБухгалтер;
	ВидДок = ПоказателиТитульный.ВидДок;
	ПризнВидаДок = 1;
	
	Если НЕ ПустаяСтрока(ВидДок) Тогда
		Попытка
			ПризнВидаДок = Число(ВидДок);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		НомерКорректировки = Число(ПоказателиТитульный.НомКоррект); 
	Исключение
		НомерКорректировки = 0;
	КонецПопытки;
	
	Если (ПризнВидаДок = 3) И (НомерКорректировки = 0) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не указан номер корректировки!", "Титульный", "НомКоррект");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если ПустаяСтрока(ПоказателиТитульный.РегНомерПФР) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не указан регистрационный номер ПФР!", "Титульный", "РегНомерПФР");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	КатегорияНП = 1;
	Если СтрДлина(СокрЛП(ОргИНН)) = 12 Тогда
		КатегорияНП = 2;
	КонецЕсли;
	
	Если КатегорияНП = 1 Тогда
		Если РабочаяДата >= '20080101' Тогда
			Если ПустаяСтрока(ОргДиректор) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не задано Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(ОргДиректор) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не указаны Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");  
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;  
			Если ПустаяСтрока(ОргБухгалтер) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не указаны Ф.И.О. (полностью) гл. бухгалтера!", "Титульный", "ОргБухгалтер"); 
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;  
		КонецЕсли;
	КонецЕсли;
		
	Если КатегорияНП = 1 Тогда
			
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ОргИНН) Тогда
			Если ВыводитьСообщения Тогда
				Сообщить("Неверно задан ИНН организации!", СтатусСообщения.Важное);
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;

		ОргНазв = ПоказателиТитульный.ОргНазв;
		ОргОГРН = ПоказателиТитульный.ОГРН;
		ОргОГРНИП = ПоказателиТитульный.ОГРНИП;
		
		Если НЕ ПустаяСтрока(ОргОГРН) Тогда
			Если НЕ РегламентированнаяОтчетность.ОГРНсоответствуетТребованиям(ОргОГРН) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Неверно задан ОГРН для организации!", "Титульный", "ОГРН");
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;	
		КонецЕсли;
		
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;

		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргБухгалтер, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество главного бухгалтера содержат недопустимые символы!", "Титульный", "ОргБухгалтер");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		
	Иначе
		
		ОргНазв = ПоказателиТитульный.ОргНазв;
		
		Если ПустаяСтрока(ОргНазв) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не заданы фамилия, имя, отчество индивидуального предпринимателя!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ОргИНН, Истина) Тогда
			Если ВыводитьСообщения Тогда
				Сообщить("Неверно задан ИНН индивидуального предпринимателя!", СтатусСообщения.Важное);
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;

		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргНазв, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество индивидуального предпринимателя содержат недопустимые символы!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат (СтатусПроверки <> 1);
	
КонецФункции

// Процедура добавляет в текст c электронным представлением информацию о показателях титульного листа и 
// листов раздела "ФизЛица"
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который следует добавлять строки
//
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст)
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	ОргКПП = ПоказателиТитульный.КПП1;
	ОргИНН = Орг.ИНН;
	
	ДокПредставляется = 210;
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредставляется = 220;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг4) Тогда
		ДокПредставляется = 120;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг5) Тогда
		ДокПредставляется = 331;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг6) Тогда
		ДокПредставляется = 332;
	КонецЕсли;
	
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер = ПоказателиТитульный.ОргБухгалтер;
	ВидДок = ПоказателиТитульный.ВидДок;
	ПризнВидаДок = 1;
	Если НЕ ПустаяСтрока(ВидДок) Тогда
		попытка
			ПризнВидаДок = Число(ВидДок);
		исключение
		конецпопытки;
	КонецЕсли;
	попытка
		НомерКорректировки = Число(ПоказателиТитульный.НомКоррект); 
	исключение
		НомерКорректировки = 0;
	конецпопытки;
	
	ДатаДок = Формат(РабочаяДата, "ДФ=dd.MM.yyyy");	
	                                         
	Если ДокПредставляется <> 120 Тогда
		
		Текст.ДобавитьСтроку("НаимЮЛПол:" + ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, ""))));
		Текст.ДобавитьСтроку("ИННЮЛ:" + ОргИНН);  
		Текст.ДобавитьСтроку("КППЮЛ:" + ОргКПП);
		Текст.ДобавитьСтроку("ОГРН:"  + СокрЛП(ПоказателиТитульный.ОГРН));
		Текст.ДобавитьСтроку("РегНомПФР:"  + СокрЛП(ПоказателиТитульный.РегНомерПФР));
		Текст.ДобавитьСтроку("###");
		Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор)); 
		Текст.ДобавитьСтроку("ФИОБух:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргБухгалтер)); 
		Текст.ДобавитьСтроку("###");
		
	Иначе//ДокПредставляется = 120
		
		Текст.ДобавитьСтроку("ФИО:"   + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргНазв)); 
		Текст.ДобавитьСтроку("ИННФЛ:" + ОргИНН);  
		Текст.ДобавитьСтроку("ОГРНИП:"  + СокрЛП(ПоказателиТитульный.ОГРНИП));
		Текст.ДобавитьСтроку("###");
		
	КонецЕсли;
	
	//////// Начало блока <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ>
	////                            
	Текст.ДобавитьСтроку("ПризФОтч:1");
	Текст.ДобавитьСтроку("КНД:" + КНД);
	Текст.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(НаименованиеОтчетаДляВыгрузки));
	Текст.ДобавитьСтроку("ВерФОтч:3.00000");
	Текст.ДобавитьСтроку("ПериодВерОтч:10.03.2005,30.01.2006");
	Текст.ДобавитьСтроку("ПризВидДок:"     + ПризнВидаДок);
	
	Если ПризнВидаДок = 3 Тогда
		Текст.ДобавитьСтроку("НомерКорр:"      + НомерКорректировки);
	Конецесли;     

	Текст.ДобавитьСтроку("ПризПериодОтч:0");
	Текст.ДобавитьСтроку("ГодПериодОтч:"   + Формат(Год(мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	Текст.ДобавитьСтроку("ДокПредст:"      + ДокПредставляется);
	Текст.ДобавитьСтроку("ОКЕИ:383"); 
	Текст.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется 
	
	Текст.ДобавитьСтроку("###");
	////
	//////// Конец блока <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ> 
	
КонецПроцедуры

// Процедура формирует текст выгрузки в части предписанных показателей
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который выгружаются показатели
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	//Показатели.ВыбратьСтроку("");
	ТекСостРазд = Неопределено;
	
	МногострочныеИсключения = Новый СписокЗначений;
	МногострочныеИсключения.Добавить("П000010002000");
	МногострочныеИсключения.Добавить("П000010003000");
	МногострочныеИсключения.Добавить("П000010004000");
	МногострочныеИсключения.Добавить("П000010005000");
	
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//Для Каждого Стр Из Разделы Цикл
	//	Если((Стр.Значение = "*") ИЛИ (Стр.Значение = "#")) И (мСтруктураМногостраничныхРазделов[Стр.Ключ].Количество()=0)Тогда
	//		ВставитьДополнительнуюСтраницу(Стр.Ключ);
	//		УдалитьДополнительнуюСтраницу(Стр.Ключ);
	//	КонецЕсли;
	//КонецЦикла;
	
	Если БратьИзФормы Тогда
		// обновляем структуру многострочных разделов
		//ОбновитьСтруктуруМногострочныхРазделов();

		// обновляем структуру многостраничных разделов
		ОбновитьСтруктуруМногостраничныхРазделов();
	КонецЕсли;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		ПустойРаздел = РазделПуст(Разд, ПоказателиОтчета);
		
		Если ПустойРаздел И ОбязРазделов.НайтиПоЗначению(ИмяРаздела) = Неопределено Тогда
			//Если раздел пустой и необязательный для выгрузки, то продолжим
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//Продолжить;//не реализовано
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если (СтраницаПустая = 1) И (НЕ ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							СтрокаПустая = 1;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
								
							КонецЦикла;
							
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					
				КонецЦикла;
				
				Если (СтраницаПустая = 1) И (Не ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Текст.ДобавитьСтроку("###");
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						СтрокаПустая = 1;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
							
						КонецЦикла;
						
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
					Текст.ДобавитьСтроку("###");
					
				КонецЕсли;
				
			Конеццикла;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяРаздела]);
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Текст.ДобавитьСтроку("###");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет раздел на наличие в нем заполненных значимых показателей
// Параметры:
//	Разд - КлючИЗначение, описатель раздела (Ключ - имя, Значение - вид)
//	ПоказателиОтчета - структура, хранящая значения показателей
//
// Возвращаемое значение:
//	Булево - Истина означает, что раздел пуст; Ложь - раздел заполнен
//
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	
	СтраницаПустая = 1;
	
	МногострочныеИсключения = Новый СписокЗначений;
	МногострочныеИсключения.Добавить("П000010002000");
	МногострочныеИсключения.Добавить("П000010003000");
	МногострочныеИсключения.Добавить("П000010004000");
	МногострочныеИсключения.Добавить("П000010005000");
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		НомСтр = 0;
		
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			
			НомСтр = НомСтр + 1;
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла;
							КонецЕсли;
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						
					КонецЦикла;
					
				КонецЕсли;//многострочный или обычный подраздел
				
			Конеццикла;//по подразделам

		КонецЦикла;//по страницам
		
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		
		//выгрузка многостраничного раздела
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
			
			НомСтр = НомСтр + 1;
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
				
			КонецЦикла;
			
		КонецЦикла;
		//конец выгрузки многостраничного раздела
		
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
			//Продолжить;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
					
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				
				Пока Истина Цикл
					
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						
						Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
							Перейти ~ВыходИзДвойногоЦикла_;
						КонецЕсли;
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
							
					КонецЦикла;
					
					ном = ном + 1;
					
				КонецЦикла;
				
				~ВыходИзДвойногоЦикла_:
				
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
											
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Конеццикла;
		
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			//Продолжить;
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
		
КонецФункции

// Функция находит и возвращает КлючИЗначение по переданному ключу
//
// Параметры:
//	Ключ - значение ключа
//	Разделы - структура, в которой ищется КлючИЗначение
//
// Возвращаемое значение:
//	КлючИЗначение - искомый объект
//	
Функция КлючИЗначениеПоКлючу(Ключ, Разделы)
	
	Для Каждого Эл Из Разделы Цикл
		Если Эл.Ключ = Ключ Тогда
			Возврат Эл;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

// Функция проверяет правильность заполнения разделов с предписанными показателями.
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//	ЧтоПроверять - строка. Если в строке присутствует "1" - проверять значения на заполненность, "2" - на корректность заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	
	ИмяРазделаПред = "";
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	Если БратьИзФормы Тогда
		ПоказателиОтчета = Новый Структура();

		Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

		КонецЦикла;
	Иначе
		
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если ДанныеОтчета = Неопределено Тогда
			Сообщить("Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		//мСтруктураМногострочныхРазделов = ДанныеОтчета.ДанныеМногострочныхРазделов;

		//мСтруктураМногостраничныхРазделов = ДанныеОтчета.ДанныеМногостраничныхРазделов;этот объект инициализируется раньше

		мСтруктураВариантыЗаполнения = ДанныеОтчета.ДанныеВариантовАвтоЗаполнения;
		
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
		
	КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	РазделыСп = Новый СписокЗначений;
	ПоказателиКопия = Показатели.Скопировать();
	ПоказателиКопия.Свернуть("ИмяПоляТаблДокумента", "");
		
	РазделыСп.ЗагрузитьЗначения(ПоказателиКопия.ВыгрузитьКолонку("ИмяПоляТаблДокумента"));
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
		ЭлРазделаСп = РазделыСп.НайтиПоЗначению(ИмяРаздела);
		Если ЭлРазделаСп = Неопределено Тогда
			ЭлРазделаСп = РазделыСп.Добавить(ИмяРаздела);
		КонецЕсли;
		СостояниеРаздела = Неопределено;
		Разделы.Свойство(ИмяРаздела, СостояниеРаздела);
		ЭлРазделаСп.Представление = СостояниеРаздела;
		
	КонецЦикла;
	
	МногострочныеИсключения = Новый СписокЗначений;
	МногострочныеИсключения.Добавить("П000010002000");
	МногострочныеИсключения.Добавить("П000010003000");
	МногострочныеИсключения.Добавить("П000010004000");
	МногострочныеИсключения.Добавить("П000010005000");
	
	Если БратьИзФормы Тогда
		//ОбновитьСтруктуруМногострочныхРазделов();
		ОбновитьСтруктуруМногостраничныхРазделов();
	КонецЕсли;
	
	//Выгружаем поочередно разделы
	Для Каждого Раздел Из РазделыСп Цикл
		
		Разд = Неопределено;
		Разделы.Свойство(Раздел.Значение, Разд);
		ИмяРаздела = Раздел.Значение;
		Призн = Разд;
		
		Если РазделПуст(КлючИЗначениеПоКлючу(ИмяРаздела, Разделы), ПоказателиОтчета) Тогда
			//Если ОбязРазделов.НайтиПоЗначению(ИмяРаздела) <> Неопределено Тогда
			//	СообщитьВТС("Обязательный к заполнению раздел пуст!", ИмяРаздела, "");
			//	СтатусПроверки = 1;
			//КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла;
							
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦиклаВ:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;

						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					Если Найти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						//проверка на то, что строка пустая
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						//конец проверки
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							//СтатусПроверки = Макс(ПроверитьПоказатель(ТекОписатель, ЗначениеПоля, ВыводитьСообщения), СтатусПроверки);
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_В:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если Найти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						Если Найти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				Если Найти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				Если Найти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;//цикл по разделам
	
	Если СтатусПроверки = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьПоказатели() Экспорт
	
	ИзвлечьДанные();
	ТаблицаСообщений.Очистить();
	Возврат (ПроверитьТитульныйЛистИСведенияОФизЛицах(Ложь) И ПроверитьПредписанныеПоказатели(Ложь));
	
КонецФункции

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура Выгрузить() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	НовыйДок.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НЕ НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		//Сообщить("Не удалось выгрузить отчет!", СтатусСообщения.Внимание);
	Иначе
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Процедура инициализирует переменные модуля, необходимые для выгрузки
//
// Параметры:
//	Нет.
//
Процедура ИзвлечьДанные()
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	мСтруктураМногоСтраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	
КонецПроцедуры

// Процедура обрабатывает результирующий текст выгрузки, 
// полученный после работы универсального процедур и функций
// В процедуре обрабатываются нестандартные ситуации, непредусмотренные универсальным механизмом выгрузки
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст выгрузки
//
Процедура ОбработатьРезультирующийТекстВыгрузки(Текст)
	
Конецпроцедуры

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПакетнаяВыгрузка = ?(Текст = Неопределено, Ложь, Истина);
	
	Если НЕ ПакетнаяВыгрузка Тогда
		Текст = Новый ТекстовыйДокумент;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПакетнаяВыгрузка Тогда
		ПутьВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки();
		Если ПутьВыгрузки = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		Сохранить();
	КонецЕсли;
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
		
	Орг = мСохраненныйДок.Организация;
		
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	
	//выводим сведения служебной части
	Если (НЕ ПакетнаяВыгрузка) И (НЕ РегламентированнаяОтчетность.ВывестиСведенияСлужебнойЧасти30(Текст, Орг, , , , мСохраненныйДок.КодИМНС)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//выводим сведения об отправителе
	Если (НЕ ПакетнаяВыгрузка) И (НЕ РегламентированнаяОтчетность.ВывестиСведенияОбОтправителе30(Текст, Орг, ПоказателиТитульный.ОргНазв, , ПоказателиТитульный.ОргБухгалтер)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//выводим общие сведения информационной части
	РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Орг, , мСохраненныйДок.КПП, мСохраненныйДок.ДатаНачала, мСохраненныйДок.КодИМНС);
	
	//выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, НЕ ПакетнаяВыгрузка);
	
	ОбработатьРезультирующийТекстВыгрузки(Текст);
	
	Если НЕ ПакетнаяВыгрузка Тогда
		Текст.ДобавитьСтроку("@@@");
		Текст.ДобавитьСтроку("===" + Символы.ПС);
	КонецЕсли;
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:"+РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;

	Если НЕ ПакетнаяВыгрузка Тогда
		ИмяФайлаВыгрузки = "отладка.txt";
							
		Текст.Записать(ПутьВыгрузки + ИмяФайлаВыгрузки, КодировкаТекста.OEM);
		
		сообщить("Выгрузка завершена!");
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура заполняет переменную модуля мТаблицаСоставПоказателей из соответствующего макета отчета
// 
// Параметры:
//	Нет.
//
Процедура ИнициализацияСоставаПоказателей() Экспорт

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	// Таблица значений хранит состав показателей отчета.
	// В колонках таблицы хранятся следующие данные:
	//    - имя поля табличного документа;
	//    - код показатели по составу показателей;
	//    - код показателя по форме (имя области табличного документа);
	//    - признак многострочности;
	//    - тип данных показателя.
	//
	мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
	мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",		      ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",    	  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("НомерСтрокиВМакете");

	МакетСоставаПоказателей = ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// доп. описание показателя
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = ?(ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоСтруктуре, КодПоказателяПоФорме);
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.НомерСтрокиВМакете     = ном;

		КонецЦикла;

	КонецЦикла;
	
	мТаблицаСоставПоказателей.Сортировать("НомерСтрокиВМакете");
	
КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1Выбор(Элемент, Область, СтандартнаяОбработка)

	Если Найти(Область.Имя, "КБКв") > 0 Тогда

		СтандартнаяОбработка = Ложь;

		ОпределениеБюджета = Сред(Область.Имя, 5, 5);

		Если Найти(ОпределениеБюджета, "Страх") > 0 Тогда
			ТипКБК = 1;
			ПервоначальноеЗначение = мКБКРаздел1_1;
		ИначеЕсли Найти(ОпределениеБюджета, "Накоп") > 0 Тогда
			ТипКБК = 2;
			ПервоначальноеЗначение = мКБКРаздел1_2;
		КонецЕсли;

		МаксДлина = 20; // ?(Год(ДатаПодписи) <= 2004, 7, 20);

		СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя);

		Если мАвтоВыборКодов Тогда

			Если ВвестиСтроку(ПервоначальноеЗначение, "Введите КБК", МаксДлина) Тогда

				Если ОбновитьПеременныеМодуля("КБКРаздел1_" + Строка(ТипКБК), ПервоначальноеЗначение) Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, МаксДлина, ПервоначальноеЗначение);
				КонецЕсли;

			КонецЕсли;

			Возврат;

		КонецЕсли;

		ЗагрузитьПоказателиИзМакета("КБК2005Раздел1", ТипКБК);

		НайденнаяСтрока = мКБК2005Раздел1.Найти(ПервоначальноеЗначение, "Код");

		Если НайденнаяСтрока <> Неопределено Тогда
			Результат = мКБК2005Раздел1.ВыбратьСтроку("Выбор КБК", НайденнаяСтрока);
		Иначе
			Результат = мКБК2005Раздел1.ВыбратьСтроку("Выбор КБК");
		КонецЕсли;

		Если Результат <> Неопределено Тогда
			Если ОбновитьПеременныеМодуля("КБКРаздел1_" + Строка(ТипКБК), Результат.Получить(0)) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, 20, Результат.Получить(0));
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли (Найти(Область.Имя, "СумНалог") > 0) И (ФлажокОтклАвтоРасчет) Тогда
		ТипСуммы = -2;
		Если (Найти(Область.Имя, "СумНалогСтрахВсего") = 1) Или (Найти(Область.Имя, "СумНалогНакопВсего") = 1) Тогда
			ТипСуммы = (-1) * ?(Найти(Область.Имя, "СумНалогСтрахВсего") = 1, 1, 2);
			МесяцСуммы = "0";
		Иначе
			СуммаДля   = Сред(Область.Имя, 9, 5);
			МесяцСуммы = Сред(Область.Имя, 14, 1);
		КонецЕсли;

		СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя);

		СтандартнаяОбработка = Ложь;

		Если ТипСуммы = - 2 Тогда
			Если Найти(СуммаДля, "Страх") > 0 Тогда
				ТипСуммы = 1;
			ИначеЕсли Найти(СуммаДля, "Накоп") > 0 Тогда
				ТипСуммы = 2;
			КонецЕсли;
		КонецЕсли;

		ИмяПеременной = "Сумма" + Строка(МесяцСуммы) + "Раздел1_" + Строка(Модуль(ТипСуммы));
		ПервоначальноеЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(ИмяПеременной);

		Если ВвестиЧисло(ПервоначальноеЗначение, "Введите сумму", 15, 2) Тогда
			Если ОбновитьПеременныеМодуля(ИмяПеременной, ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, 15, ПервоначальноеЗначение, Истина);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (Найти(Область.Имя, "КодОКАТО") > 0) Тогда

		СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя);
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мОКАТОРаздел1;

		Если ВвестиСтроку(ПервоначальноеЗначение, "Введите ОКАТО", 11) Тогда

			Если (ПервоначальноеЗначение = "") Или (ОбщегоНазначения.ТолькоЦифрыВСтроке(ПервоначальноеЗначение)) И (СтрДлина(ПервоначальноеЗначение) = 11) Тогда

				Если ОбновитьПеременныеМодуля("ОКАТОРаздел1", ПервоначальноеЗначение) Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, 11, ПервоначальноеЗначение);
				КонецЕсли;

			Иначе

				Сообщить("Код ОКАТО должен состоять из 11 цифр.");

			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(Область.Имя, "ТипНП") > 0 Тогда

		СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя);
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мКодПлательщикаРаздел1;

		Если мАвтоВыборКодов Тогда

			Если ВвестиСтроку(ПервоначальноеЗначение, "Введите тип налогоплательщика", 2) Тогда
				Если ОбновитьПеременныеМодуля("КодПлательщикаРаздел1", ПервоначальноеЗначение) Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, 2, ПервоначальноеЗначение);
					ЗаполнитьСтавки(ПервоначальноеЗначение);
				КонецЕсли;
			КонецЕсли;

			Возврат;

		КонецЕсли;

		НайденнаяСтрока = мТипНалогоплательщика.Найти(ПервоначальноеЗначение, "Код");

		Если НайденнаяСтрока <> Неопределено Тогда
			Результат = мТипНалогоплательщика.ВыбратьСтроку("Выбор типа страхователя", НайденнаяСтрока);
		Иначе
			Результат = мТипНалогоплательщика.ВыбратьСтроку("Выбор типа страхователя");
		КонецЕсли;

		Если Результат <> Неопределено Тогда

			Если ОбновитьПеременныеМодуля("КодПлательщикаРаздел1", Результат.Получить(0)) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, 2, Результат.Получить(0));
				ЗаполнитьСтавки(Результат.Получить(0));
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел21ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел21ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел21ПриАктивизацииОбласти

Процедура ПолеТабличногоДокументаРаздел22ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел22ПриАктивизацииОбласти

// ПолеВыбораВариантЗаполненияРаздел2ПриИзменении
//
Процедура ПолеВыбораВариантЗаполненияРаздел2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел2ПриИзменении

// ПолеВводаЗначениеКорректировкиРаздел2ПриИзменении
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел2ПриИзменении

// ПолеВводаКомментарийРаздел2ПриИзменении
//
Процедура ПолеВводаКомментарийРаздел2ПриИзменении(Элемент)
	Перем Комментарий1;

	Комментарий1 = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий1);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел2ПриИзменении

// ПолеВыбораВариантЗаполненияРаздел21ПриИзменении
//
Процедура ПолеВыбораВариантЗаполненияРаздел21ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел21ПриИзменении

// ПолеВводаЗначениеКорректировкиРаздел21ПриИзменении
//
Процедура ПолеВводаЗначениеКорректировкиРаздел21ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел21ПриИзменении

// ПолеВводаКомментарийРаздел21ПриИзменении
//
Процедура ПолеВводаКомментарийРаздел21ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел21ПриИзменении

// ПолеВыбораВариантЗаполненияРаздел22ПриИзменении
//
Процедура ПолеВыбораВариантЗаполненияРаздел22ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел22ПриИзменении

// ПолеВводаЗначениеКорректировкиРаздел22ПриИзменении
//
Процедура ПолеВводаЗначениеКорректировкиРаздел22ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел22ПриИзменении

Процедура ПолеВводаКомментарийРаздел22ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел22ПриИзменении

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;

	Если ИмяТекущейСтраницыПанели <> "Титульный" И ИмяТекущейСтраницыПанели <> "ФизЛица" Тогда
		Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
			Расчет("Раздел2");
			Расчет("Раздел21");
			Расчет("Раздел1");
		ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел22" Тогда
			Расчет("Раздел22");
			Расчет("Раздел2");
			Расчет("Раздел1");
		Иначе
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Если ПолучитьСвойствоРаздела(ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
			ОбновитьПараметрыАвтозаполненияЯчейки();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

// для ЗУП вводится свой состав показателей, отличающийся параметрами автозаполнения, колонка 6.
ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
Если ИдКонф = "ЗУП" ИЛИ ИдКонф = "ЗБУ" Тогда
	мСоставПоказателей = "СоставПоказателейДляЗУП";
Иначе
	мСоставПоказателей = "СоставПоказателей";
КонецЕсли;

мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме, КодПоказателяПоСтруктуре";

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

мКБК2005Раздел1 = Новый ТаблицаЗначений;
мКБК2005Раздел1.Колонки.Добавить("Код",,, 18);
мКБК2005Раздел1.Колонки.Добавить("Название",,, 50);

мТипНалогоплательщика = Новый ТаблицаЗначений;
мТипНалогоплательщика.Колонки.Добавить("Код",,, 18);
мТипНалогоплательщика.Колонки.Добавить("Название",,, 50);

ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(18,2);
ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповСтрока10 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10);
ОписаниеТиповСтрока9 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9);
ОписаниеТиповСтрока1   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1);
ОписаниеТиповДата      = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//    - структура, элементы которой содержат данные дополнительных строк страницы, где
//      в качестве ключа используется имя многострочного блока, а в качестве значения-
//      таблица значений показателей многострочного блока.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", ОписаниеТиповБулево);

СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;

// Элемент структуры - данные дополнительных страниц раздела со сведениями
// о физических лицах
ТаблицаСтраницыФизЛиц = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("ФизЛица", ТаблицаСтраницыФизЛиц);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
/// мВерсияФормы = "31/10/2005"; Вставлен второй макет состава показателей для ЗУПа
мВерсияФормы = "13/01/2006";

// Код отчета, равен КНД
мКодОтчета   = 1151065;

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
ОбязРазделов = Новый СписокЗначений;
ОбязРазделов.Добавить("Раздел1");
ОбязРазделов.Добавить("Раздел2");
ОбязРазделов.Добавить("Раздел21");
ОбязРазделов.Добавить("Раздел22");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 3.00000", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

КНД = "1151065";
НаименованиеОтчетаДляВыгрузки = "ДЕКЛАРАЦИЯ ПО СТРАХОВЫМ ВЗНОСАМ НА ОБЯЗАТЕЛЬНОЕ ПЕНСИОННОЕ СТРАХОВАНИЕ ДЛЯ ЛИЦ, ПРОИЗВОДЯЩИХ ВЫПЛАТЫ ФИЗИЧЕСКИМ ЛИЦАМ";

РежимОтладки = Ложь;

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;
