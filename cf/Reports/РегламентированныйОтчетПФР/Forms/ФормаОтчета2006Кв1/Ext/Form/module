////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мФизЛица;
Перем мРаздел1;
Перем мРаздел2;
Перем мРаздел21;
Перем мРаздел22;
Перем мРаздел23;

Перем мОписаниеТиповЧислоЕ;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;
Перем мПечатаемыеРазделы Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// Хранит код отчета по КНД
Перем мКодОтчета Экспорт;

// Хранит версию формы отчета
Перем мСтараяВерсияФормы Экспорт;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

// Признак "горячей" смены организации в декларации
Перем мВПрограммеИзмененаОрганизация;

// Коды КБК для раздела 1 с 2005 года
Перем мКБК2005Раздел1;

// Тип НП
Перем мТипНалогоплательщика;

Перем мИННЮЛ;
Перем мКППЮЛ;

Перем мПечатныеФормы Экспорт;

// Переменные первого раздела
Перем мКодПлательщикаРаздел1;
Перем мОКАТОРаздел1;

// Переменные первого раздела, входят в многострочную часть
Перем мКБКРаздел1_1;
Перем мСумма0Раздел1_1;
Перем мСумма1Раздел1_1;
Перем мСумма2Раздел1_1;
Перем мСумма3Раздел1_1;

Перем мКБКРаздел1_2;
Перем мСумма0Раздел1_2;
Перем мСумма1Раздел1_2;
Перем мСумма2Раздел1_2;
Перем мСумма3Раздел1_2;

// Настройка свойств листов
Перем мСвойстваРазделовДекларации Экспорт;

Перем мСоставПоказателей Экспорт;

Перем мДокументВосстановлен;

// Переменная для механизма обхода номеров страниц, при вводе показателей.
Перем мСтруктураВзаимныхПереходов Экспорт;

// Поля поиска показателей в таблице состава показателей.
// Должна быть не во всех отчетах, используется в функции роОпределитьСтраницуПанели
Перем мПоляПоискаПоказателяВТСП Экспорт;

Перем РежимОтладки;
Перем ОбязРазделов Экспорт;
Перем ВариантыФорматовВыгрузки;
Перем ТаблицаСообщений Экспорт;
Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;

Перем МногострочныеИсключения;

Перем мСтруктураДанныхОтчетаXMLКонтейнер Экспорт;

Перем СвойстваЗаполненияОтчета Экспорт;
Перем ИДКонфигурации;
////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ВставитьДополнительнуюСтраницу
// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//            в табличное поле которой вставляется дополнительная страница.
//
Процедура ВставитьДополнительнуюСтраницу( ИмяТекущейСтраницыПанели = Неопределено )

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // ВставитьДополнительнуюСтраницу()

// ОбновитьСтруктуруМногостраничныхРазделов
// Обновляет структуру многостраничных разделов формы.
// После обновления структуры выводит в табличный документ
// данные первой страницы из набора страниц.
//
Процедура ОбновитьСтруктуруМногостраничныхРазделов(ИмяСтраницы = Неопределено)

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, имяСтраницы);

КонецПроцедуры // ОбновитьСтруктуруМногостраничныхРазделов()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления()

	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// ОткрытьФормуСпискаДопСтраниц
// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
//
Процедура ОткрытьФормуСпискаДопСтраниц()

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма);

КонецПроцедуры // ОткрытьФормуСпискаДопСтраниц()

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда

		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		// чтобы убрать полные связи, запустим расчет ещё раз
		Расчет("");
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры // Очистить()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПолучитьСвойствоРаздела
// Получает из дерево св-в необходимый параметр
// Параметры
// ИмяСтраница - название страницы, для которой необходимо получить св-во
// ИмяСвойства - имя настройки
//
Функция ПолучитьСвойствоРаздела(Знач ИмяСтраницы, Знач ИмяСвойства)

	Возврат РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяСтраницы, ИмяСвойства);

КонецФункции // ПолучитьСвойствоРаздела

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь, ТипЗнчСуммы = Неопределено)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную, ТипЗнчСуммы);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// УдалитьДополнительнуюСтраницу
// Удаляет текущую страницу многостраничного раздела формы.
// Программа стандартизации процедур 10.05.2005
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//              в табличном поле которой удаляется дополнительная страница.
//
Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // УдалитьДополнительнуюСтраницу()

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)

	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, Вариант, ТекущаяОбласть);

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	//

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел1" Тогда

		СтруктураДанныхПоля.Вставить("КодПлательщикаРаздел1",  мКодПлательщикаРаздел1);
		СтруктураДанныхПоля.Вставить("ОКАТОРаздел1",     мОКАТОРаздел1);

		СтруктураДанныхПоля.Вставить("КБКРаздел1_1",     мКБКРаздел1_1);
		СтруктураДанныхПоля.Вставить("Сумма1Раздел1_1",  мСумма1Раздел1_1);
		СтруктураДанныхПоля.Вставить("Сумма2Раздел1_1",  мСумма2Раздел1_1);
		СтруктураДанныхПоля.Вставить("Сумма3Раздел1_1",  мСумма3Раздел1_1);
		СтруктураДанныхПоля.Вставить("Сумма0Раздел1_1",  мСумма0Раздел1_1);

		СтруктураДанныхПоля.Вставить("КБКРаздел1_2",     мКБКРаздел1_2);
		СтруктураДанныхПоля.Вставить("Сумма1Раздел1_2",  мСумма1Раздел1_2);
		СтруктураДанныхПоля.Вставить("Сумма2Раздел1_2",  мСумма2Раздел1_2);
		СтруктураДанныхПоля.Вставить("Сумма3Раздел1_2",  мСумма3Раздел1_2);
		СтруктураДанныхПоля.Вставить("Сумма0Раздел1_2",  мСумма0Раздел1_2);

	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ПолучитьЗначениеКвадратногоЗначенияПоИмени
// функция возвращает значения показателя по имени
//
Функция ПолучитьЗначениеКвадратногоЗначенияПоИмени(КодПоказателяПоСтруктуре)

	Рез = 0;
	Если КодПоказателяПоСтруктуре = "КодПлательщикаРаздел1" Тогда
		Рез = мКодПлательщикаРаздел1;
	ИначеЕсли КодПоказателяПоСтруктуре = "ОКАТОРаздел1" Тогда
		Рез = мОКАТОРаздел1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКРаздел1_1" Тогда
		Рез = мКБКРаздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "КБКРаздел1_2" Тогда
		Рез = мКБКРаздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма1Раздел1_1" Тогда
		Рез = мСумма1Раздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма1Раздел1_2" Тогда
		Рез = мСумма1Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма2Раздел1_1" Тогда
		Рез = мСумма2Раздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма2Раздел1_2" Тогда
		Рез = мСумма2Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма3Раздел1_1" Тогда
		Рез = мСумма3Раздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма3Раздел1_2" Тогда
		Рез = мСумма3Раздел1_2;
	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма0Раздел1_1" Тогда
		Рез = мСумма0Раздел1_1;
	ИначеЕсли КодПоказателяПоСтруктуре = "Сумма0Раздел1_2" Тогда
		Рез = мСумма0Раздел1_2;
	КонецЕсли;

	Возврат Рез;

КонецФункции // ПолучитьЗначениеКвадратногоЗначенияПоИмени

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	Если ИмяПоказателя = "ДатаРождСлиста" Тогда
		мДатаРождСлиста = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДатаДок" Тогда
		мДатаДок = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодПлательщикаРаздел1" Тогда
		мКодПлательщикаРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1" Тогда
		мОКАТОРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1_1" Тогда
		мКБКРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1_2" Тогда
		мКБКРаздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Сумма1Раздел1_1" Тогда
		мСумма1Раздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Сумма1Раздел1_2" Тогда
		мСумма1Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Сумма2Раздел1_1" Тогда
		мСумма2Раздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Сумма2Раздел1_2" Тогда
		мСумма2Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Сумма3Раздел1_1" Тогда
		мСумма3Раздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Сумма3Раздел1_2" Тогда
		мСумма3Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Сумма0Раздел1_1" Тогда
		мСумма0Раздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "Сумма0Раздел1_2" Тогда
		мСумма0Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						КодПоказателяПоСтруктуре = СтрокаТаблицы.КодПоказателяПоСтруктуре;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;

		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			//ЗначениеВКвадратах = ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяПоказателя);
			ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

			// Если значение не отображается в квадратах, то и ставить формат ячейки не нужно
			Если НЕ ЗначениеВКвадратах Тогда
				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			// Если многострочность, то специальный механизм
			Если (ЗначениеВКвадратах) И (
			    (ИмяПоказателя = "П000010003000")
			Или (ИмяПоказателя = "П000010004000")
			Или (ИмяПоказателя = "П000010005000")
			Или (ИмяПоказателя = "П000010006000")) Тогда // КБК

				Если ИмяПоказателя = "П000010004000" Тогда
					МногострочностьИВариантыЗаполнения("СумНалогСтрах1М1",    ВариантЗаполнения);
					МногострочностьИВариантыЗаполнения("СумНалогНакоп1М1",    ВариантЗаполнения);

				ИначеЕсли ИмяПоказателя = "П000010005000" Тогда
					МногострочностьИВариантыЗаполнения("СумНалогСтрах2М1",    ВариантЗаполнения);
					МногострочностьИВариантыЗаполнения("СумНалогНакоп2М1",    ВариантЗаполнения);

				ИначеЕсли ИмяПоказателя = "П000010006000" Тогда
					МногострочностьИВариантыЗаполнения("СумНалогСтрах3М1",    ВариантЗаполнения);
					МногострочностьИВариантыЗаполнения("СумНалогНакоп3М1",    ВариантЗаполнения);

				ИначеЕсли ИмяПоказателя = "П000010003000" Тогда
					МногострочностьИВариантыЗаполнения("СумНалогСтрахВсего1",    ВариантЗаполнения);
					МногострочностьИВариантыЗаполнения("СумНалогНакопВсего1",    ВариантЗаполнения);

				КонецЕсли;

				Продолжить;
			КонецЕсли;

			Если ВариантЗаполнения = 4 Тогда
				//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

				Если ЗначениеВКвадратах Тогда
					// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
				КонецЕсли;

			Иначе

				Если ЗначениеВКвадратах Тогда
					// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"СнятьЗащиту");
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
			КонецЕсли;

			Если ЗначениеВКвадратах Тогда
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
			Иначе
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// МногострочностьИВариантыЗаполнения
//
Процедура МногострочностьИВариантыЗаполнения(Знач ПервыйПоказатель, Знач ВариантЗаполнения)

	Перем ЦветФона;

	Ключ = "_" + ВариантЗаполнения;
	мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

	Если ВариантЗаполнения = 4 Тогда
		Действие1 = "УстановитьЗащиту";
		Действие2 = "ПроставитьЦветРаскраски";
	Иначе
		Действие1 = "СнятьЗащиту";
		Действие2 = "ПроставитьЦветРаскраски";
	КонецЕсли;

	РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПервыйПоказатель, Действие1, , "Раздел1");
	РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПервыйПоказатель, Действие2, ЦветФона, "Раздел1");

КонецПроцедуры // МногострочностьИВариантыЗаполнения

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	мТитульный.Области.НалогПериод.Значение = НомерМесяца;

	мТитульный.Области.ОтчетГод1.Значение   = Сред(НомерГода, 1, 1);
	мТитульный.Области.ОтчетГод2.Значение   = Сред(НомерГода, 2, 1);
	мТитульный.Области.ОтчетГод3.Значение   = Сред(НомерГода, 3, 1);
	мТитульный.Области.ОтчетГод4.Значение   = Сред(НомерГода, 4, 1);

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаПодписиРук = "";
	ДатаПодписиБух = "";
	ДатаПодписиФЛ = "";

	Если ЗначениеЗаполнено(мТитульный.Области.ОргДиректор.Значение) Тогда
		ДатаПодписиРук = ДатаПодписи;
	КонецЕсли;

	Если ЗначениеЗаполнено(мТитульный.Области.ОргБухгалтер.Значение) Тогда
		ДатаПодписиБух = ДатаПодписи;
	КонецЕсли;

	Если ЗначениеЗаполнено(мТитульный.Области.ФИОФизЛицо.Значение) Тогда
		ДатаПодписиФЛ = ДатаПодписи;
	КонецЕсли;

	ПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);

	Для НомЯчейки = 1 По 8 Цикл

		мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиРук, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиБух" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиБух, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мТитульный.Области["ДатаПодписиИП" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиФЛ, "ДФ = 'ддММгггг'"), НомЯчейки, 1);

		мРаздел1.   Области["Дата1_"         + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мРаздел2.   Области["Дата1_"         + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мРаздел21.   Области["Дата1_"         + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мРаздел22.   Области["Дата1_"         + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		мРаздел23.   Области["Дата1_"         + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);

		Если ПБОЮЛ Тогда
			мРаздел1.   Области["Дата2_"         + НомЯчейки].Значение = "";
			мРаздел2.   Области["Дата2_"         + НомЯчейки].Значение = "";
			мРаздел21.  Области["Дата2_"         + НомЯчейки].Значение = "";
			мРаздел22.  Области["Дата2_"         + НомЯчейки].Значение = "";
			мРаздел23.  Области["Дата2_"         + НомЯчейки].Значение = "";
		Иначе
			мРаздел1.   Области["Дата2_"         + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
			мРаздел2.   Области["Дата2_"         + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
			мРаздел21.  Области["Дата2_"         + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
			мРаздел22.  Области["Дата2_"         + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
			мРаздел23.  Области["Дата2_"         + НомЯчейки].Значение = Сред(Формат(ДатаПодписи,    "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Попытка
		
		Сведения = "";
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			Сведения = "ИННЮЛ, КППЮЛ, НаимЮЛПол, ОГРН, ОКАТО, КодНО, НаимНО, ТипНП, ТелОрганизации, РегНомПФР, ";
		КонецЕсли;
		
		Сведения = Сведения + "ФИОРук, ФИОБух, ФИО, ТитульныйЛистФИО_ФИОФизЛицо";
		
		// Теперь получаем данные из глобальной общей функции
		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
		
		Результат = РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации(ЭтаФорма, Сведения);
		
		Если (НЕ ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда
			ОКАТО = РегламентированнаяОтчетность.ДополнитьСтроку(Результат.ОКАТО, 11, " ");
			мОКАТОРаздел1 = ОКАТО;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КодОКАТО_", 11, ОКАТО);
			
			// Уберем пробелы.
			РегистрационныйНомерПФР = СтрЗаменить(Результат.РегНомПФР, " ", "");
			// 022-122-000101
			// Если в справочник организаций КОД введен не по формату декларации, тогда на титульном листе пользователь поправит сам.
			РегистрационныйНомерПФР = Сред(РегистрационныйНомерПФР, 1, 3) + Сред(РегистрационныйНомерПФР, 5, 3) + Сред(РегистрационныйНомерПФР, 9);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "РегНомерПФР", 12, РегистрационныйНомерПФР);
		КонецЕсли;
		
	Исключение
		
		Сообщить("У пользователя недостаточно прав для получения сведений, необходимых для заполнения титульного листа.", СтатусСообщения.ОченьВажное);
		
	КонецПопытки;
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// УправлениеЛистами
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт

	// Процедура "заглушка" для сохранения работающих механизмов.
	// Вызов осуществляется из роЗаполнитьСведенияОбОрганизации.
	Возврат;

КонецПроцедуры // УправлениеЛистами

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода(ПередВосстановлением = Неопределено)
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ПередВосстановлением = Неопределено Тогда
			Если (ТипДанныхПоказателя = "Е") И (НЕ ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

				Если КодПоказателяПоСтруктуре = "Сумма1Раздел1" Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогСтрах1М", 15, мСумма1Раздел1_1, Истина);
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогНакоп1М", 15, мСумма1Раздел1_2, Истина);

				ИначеЕсли КодПоказателяПоСтруктуре = "Сумма2Раздел1" Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогСтрах2М", 15, мСумма2Раздел1_1, Истина);
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогНакоп2М", 15, мСумма2Раздел1_2, Истина);

				ИначеЕсли КодПоказателяПоСтруктуре = "Сумма3Раздел1" Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогСтрах3М", 15, мСумма3Раздел1_1, Истина);
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогНакоп3М", 15, мСумма3Раздел1_2, Истина);

				ИначеЕсли КодПоказателяПоСтруктуре = "Сумма0Раздел1" Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогСтрахВсего", 15, мСумма0Раздел1_1, Истина);
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяПоляТаблДокумента, "СумНалогНакопВсего", 15, мСумма0Раздел1_2, Истина);

				КонецЕсли;

			КонецЕсли;
		КонецЕсли;

		Если (ТипДанныхПоказателя = "Е") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
		Иначе
			Дельта = 0;
		КонецЕсли;


		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий1;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
				Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
			Иначе
				Дельта = 0;
			КонецЕсли;

			НайденнаяСтрока.Дельта = Дельта;

			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт
	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если (ВыбТабличноеПоле.Имя <> "ПолеТабличногоДокументаФизЛица") Тогда
		//  Для ФизЛица защищенные ячейки нужно очищать, кроме ИНН КПП
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;

		Иначе
			Если (Найти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (Найти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	Если ВыбТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел1" Тогда
		ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу("Раздел1");
	КонецЕсли;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Функция РазделБудетПечататься (ИмяСтраницы)
// Возвращает, будет ли печататься, а значит есть ли такая страница
// Истина - ДА
// Ложь - НЕТ
// Используется в Расчет() для определения есть ли та или иная страница
//
Функция РазделБудетПечататься (ИмяСтраницы)

	Результат = Ложь;

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат Результат;
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Если ИмяСтраницы = СтрокаУровня1.ИмяСтраницы Тогда
			Результат = ?(СтрокаУровня1.ВыводНаПечать=1, Истина, Ложь);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции // РазделБудетПечататься

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	// обновляем структуру многострочных разделов
	// ОбновитьСтруктуруМногострочныхРазделов();
	ОбновитьСтруктуруМногостраничныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	СписокСохранения.Вставить("ФлажокВнешДанные", ФлажокВнешДанные);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	СохранитьДеревоСтраницОтчета();

	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

Процедура СохранитьДеревоСтраницОтчета()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// ПолучитьИННКПП
//
Процедура ПолучитьИННКПП()

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ИННЮЛ, КППЮЛ, ТелОрганизации");

	ИННЮЛ = "";
	КППЮЛ = "";
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);

	Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, " ");
	Иначе
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, "0");
	КонецЕсли;

	КППЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(КППЮЛ, 9, " ");

	мИННЮЛ = ИННЮЛ;
	мКППЮЛ = КППЮЛ;

	мТелОрганизации = "";
	ОргСведения.Свойство("ТелОрганизации", мТелОрганизации);

КонецПроцедуры // ПолучитьИННКПП

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	УстановитьФорматВывода(Истина);

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
			мСтараяВерсияФормы = ВерсияФормы;
		КонецЕсли;

	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);

			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);

		КонецЦикла;

	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);

	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Если СписокСохранения.Свойство("ФлажокВнешДанные") Тогда
		ФлажокВнешДанные = СписокСохранения.ФлажокВнешДанные;
	Иначе
		ФлажокВнешДанные = Ложь;
	КонецЕсли;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = ПолучитьСвойствоРаздела(ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение

			КонецПопытки;

		КонецЦикла;
	КонецЦикла;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВывода();

	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	мДокументВосстановлен = Истина;

	Модифицированность = Ложь;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ЗаполнениеЗначенийВКвадратиках
//
Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт
	Возврат;
КонецПроцедуры // ЗаполнениеЗначенийВКвадратиках

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Если ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда

		// на страховую часть трудовой пенсии – из графы 5 строки 0300;
		// на накопительную часть трудовой пенсии – из графы 5 строки 0400;

		// Суммы платежей на страховую часть трудовой пенсии
		// Стр. 030
		мСумма0Раздел1_1    = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020030005.Значение);

		// Стр. 040
		мСумма1Раздел1_1 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020032005.Значение);

		// Стр. 050
		мСумма2Раздел1_1 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020033005.Значение);

		// Стр. 060
		мСумма3Раздел1_1 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020034005.Значение);

		// Стр. 030
		мСумма0Раздел1_2 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020040005.Значение);

		// Стр. 040
		мСумма1Раздел1_2 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020042005.Значение);

		// Стр. 050
		мСумма2Раздел1_2 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020043005.Значение);

		// Стр. 060
		мСумма3Раздел1_2 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020044005.Значение);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СумНалогСтрах1М", 15, мСумма1Раздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СумНалогСтрах2М", 15, мСумма2Раздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СумНалогСтрах3М", 15, мСумма3Раздел1_1, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СумНалогНакоп1М", 15, мСумма1Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СумНалогНакоп2М", 15, мСумма2Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СумНалогНакоп3М", 15, мСумма3Раздел1_2, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СумНалогСтрахВсего", 15, мСумма0Раздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, ИмяТекущейСтраницыПанели, "СумНалогНакопВсего", 15, мСумма0Раздел1_2, Истина);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда

		ОкрП000020012003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020012003.Значение);
		ОкрП000020012004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020012004.Значение);

		ОкрП000020012006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020012006.Значение);
		ОкрП000020013003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020013003.Значение);
		ОкрП000020013004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020013004.Значение);

		ОкрП000020013006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020013006.Значение);
		ОкрП000020014003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020014003.Значение);
		ОкрП000020014004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020014004.Значение);

		ОкрП000020014006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020014006.Значение);
		ОкрП000020030006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020030006.Значение);
		ОкрП000020032003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020032003.Значение);
		ОкрП000020032004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020032004.Значение);

		ОкрП000020032006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020032006.Значение);
		ОкрП000020033003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020033003.Значение);
		ОкрП000020033004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020033004.Значение);

		ОкрП000020033006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020033006.Значение);
		ОкрП000020034003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020034003.Значение);
		ОкрП000020034004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020034004.Значение);

		ОкрП000020034006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020034006.Значение);
		ОкрП000020040006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020040006.Значение);
		ОкрП000020042004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020042004.Значение);

		ОкрП000020042006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020042006.Значение);
		ОкрП000020043004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020043004.Значение);

		ОкрП000020043006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020043006.Значение);
		ОкрП000020044004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020044004.Значение);

		ОкрП000020044006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020044006.Значение);

		П000220040004 = 0;
		П000220040104 = 0;
		П000220040204 = 0;
		П000220050205 = 0;

		П000220040004 = мРаздел22.Области.П000220040004.Значение;
		П000220040104 = мРаздел22.Области.П000220040104.Значение;
		П000220040204 = мРаздел22.Области.П000220040204.Значение;
		П000220040205 = мРаздел22.Области.П000220040205.Значение;

		// строка 0100
		мРаздел2.Области.П000020010003.Значение = П000220040004;
		мРаздел2.Области.П000020010004.Значение = П000220040104;
		мРаздел2.Области.П000020010005.Значение = П000220040204;
		мРаздел2.Области.П000020010006.Значение = П000220040205;

		// строка 0110
		мРаздел2.Области.П000020011003.Значение = ОкрП000020012003 + ОкрП000020013003 + ОкрП000020014003;
		мРаздел2.Области.П000020011004.Значение = ОкрП000020012004 + ОкрП000020013004 + ОкрП000020014004;
		мРаздел2.Области.П000020011006.Значение = ОкрП000020012006 + ОкрП000020013006 + ОкрП000020014006;

		// строка 0310
		мРаздел2.Области.П000020031003.Значение = ОкрП000020032003 + ОкрП000020033003 + ОкрП000020034003;
		мРаздел2.Области.П000020031004.Значение = ОкрП000020032004 + ОкрП000020033004 + ОкрП000020034004;
		мРаздел2.Области.П000020031006.Значение = ОкрП000020032006 + ОкрП000020033006 + ОкрП000020034006;

		// строка 0410
		мРаздел2.Области.П000020041004.Значение = ОкрП000020042004 + ОкрП000020043004 + ОкрП000020044004;
		мРаздел2.Области.П000020041006.Значение = ОкрП000020042006 + ОкрП000020043006 + ОкрП000020044006;

		// строка 0220
		мРаздел2.Области.П000020022003.Значение = ОкрП000020032003;
		мРаздел2.Области.П000020022004.Значение = ОкрП000020032004 + ОкрП000020042004;
		мРаздел2.Области.П000020022006.Значение = ОкрП000020032006 + ОкрП000020042006;

		// строка 0230
		мРаздел2.Области.П000020023003.Значение = ОкрП000020033003;
		мРаздел2.Области.П000020023004.Значение = ОкрП000020033004 + ОкрП000020043004;
		
		мРаздел2.Области.П000020023006.Значение = ОкрП000020033006 + ОкрП000020043006;

		// строка 0240
		мРаздел2.Области.П000020024003.Значение = ОкрП000020034003;
		мРаздел2.Области.П000020024004.Значение = ОкрП000020034004 + ОкрП000020044004;
		мРаздел2.Области.П000020024006.Значение = ОкрП000020034006 + ОкрП000020044006;

		// строка 0210
		мРаздел2.Области.П000020021003.Значение = мРаздел2.Области.П000020022003.Значение + мРаздел2.Области.П000020023003.Значение + мРаздел2.Области.П000020024003.Значение;
		мРаздел2.Области.П000020021004.Значение = мРаздел2.Области.П000020022004.Значение + мРаздел2.Области.П000020023004.Значение + мРаздел2.Области.П000020024004.Значение;

		мРаздел2.Области.П000020021006.Значение = мРаздел2.Области.П000020022006.Значение + мРаздел2.Области.П000020023006.Значение + мРаздел2.Области.П000020024006.Значение;

		// строка 0200
		мРаздел2.Области.П000020020003.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020030003.Значение);
		мРаздел2.Области.П000020020004.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020030004.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020040004.Значение);

		мРаздел2.Области.П000020020006.Значение = ОкрП000020030006 + ОкрП000020040006;
		
		// графа 6 строк 0100 - 0440

		мРаздел2.Области.П000020011005.Значение = мРаздел2.Области.П000020011003.Значение + мРаздел2.Области.П000020011004.Значение;

		мРаздел2.Области.П000020020005.Значение = мРаздел2.Области.П000020020003.Значение + мРаздел2.Области.П000020020004.Значение;
		мРаздел2.Области.П000020021005.Значение = мРаздел2.Области.П000020021003.Значение + мРаздел2.Области.П000020021004.Значение;
		мРаздел2.Области.П000020022005.Значение = мРаздел2.Области.П000020022003.Значение + мРаздел2.Области.П000020022004.Значение;
		мРаздел2.Области.П000020023005.Значение = мРаздел2.Области.П000020023003.Значение + мРаздел2.Области.П000020023004.Значение;
		мРаздел2.Области.П000020024005.Значение = мРаздел2.Области.П000020024003.Значение + мРаздел2.Области.П000020024004.Значение;
		мРаздел2.Области.П000020031005.Значение = мРаздел2.Области.П000020031003.Значение + мРаздел2.Области.П000020031004.Значение;
		мРаздел2.Области.П000020041005.Значение = мРаздел2.Области.П000020041004.Значение;

		мРаздел2.Области.П000020012005.Значение = ОкрП000020012003 + ОкрП000020012004;
		мРаздел2.Области.П000020013005.Значение = ОкрП000020013003 + ОкрП000020013004;
		мРаздел2.Области.П000020014005.Значение = ОкрП000020014003 + ОкрП000020014004;

		ОкрП000020030003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020030003.Значение);
		ОкрП000020030004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020030004.Значение);

		мРаздел2.Области.П000020030005.Значение = ОкрП000020030003 + ОкрП000020030004;

		мРаздел2.Области.П000020032005.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020032003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020032004.Значение);
		мРаздел2.Области.П000020033005.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020033003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020033004.Значение);
		мРаздел2.Области.П000020034005.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020034003.Значение) + ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020034004.Значение);
		мРаздел2.Области.П000020040005.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020040004.Значение);

		мРаздел2.Области.П000020042005.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020042004.Значение);
		мРаздел2.Области.П000020043005.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020043004.Значение);
		мРаздел2.Области.П000020044005.Значение = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020044004.Значение);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел21" Тогда

		П000020020005 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020020005.Значение);
		П000020021005 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020021005.Значение);
		П000020022005 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020022005.Значение);
		П000020023005 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020023005.Значение);
		П000020024005 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020024005.Значение);

		П000020020006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020020006.Значение);
		П000020021006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020021006.Значение);
		П000020022006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020022006.Значение);
		П000020023006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020023006.Значение);
		П000020024006 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020024006.Значение);

		ОкрП000210001005 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001005.Значение);
		ОкрП000210001006 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001006.Значение);
		ОкрП000210001205 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001205.Значение);
		ОкрП000210001206 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001206.Значение);
		ОкрП000210001305 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001305.Значение);
		ОкрП000210001306 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001306.Значение);
		ОкрП000210001405 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001405.Значение);
		ОкрП000210001406 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001406.Значение);
		ОкрП000210001204 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001204.Значение);
		ОкрП000210001304 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001304.Значение);
		ОкрП000210001404 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001404.Значение);
		ОкрП000210001703 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001703.Значение);
		ОкрП000210001704 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001704.Значение);
		ОкрП000210001803 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001803.Значение);
		ОкрП000210001804 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001804.Значение);
		ОкрП000210001903 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001903.Значение);
		ОкрП000210001904 = ОкруглитьЧислоПоФормату(мРаздел21.Области.П000210001904.Значение);

		// строка 010
		мРаздел21.Области.П000210001003.Значение = ОкрП000210001005 + ОкрП000210001006;

		// строки 012 - 014
		мРаздел21.Области.П000210001203.Значение = ОкрП000210001205 + ОкрП000210001206;
		мРаздел21.Области.П000210001303.Значение = ОкрП000210001305 + ОкрП000210001306;
		мРаздел21.Области.П000210001403.Значение = ОкрП000210001405 + ОкрП000210001406;

		// строка 011 
		мРаздел21.Области.П000210001103.Значение = мРаздел21.Области.П000210001203.Значение + мРаздел21.Области.П000210001303.Значение + мРаздел21.Области.П000210001403.Значение;

		мРаздел21.Области.П000210001104.Значение = ОкрП000210001204 + ОкрП000210001304 + ОкрП000210001404;
		мРаздел21.Области.П000210001105.Значение = ОкрП000210001205 + ОкрП000210001305 + ОкрП000210001405;
		мРаздел21.Области.П000210001106.Значение = ОкрП000210001206 + ОкрП000210001306 + ОкрП000210001406;

		Если мРаздел2.Области.П000020010006.Значение = 0 Тогда
		// Страхователями, применяющими только специальные налоговые режимы и не уплачивающими единый социальный налог, строки 015 - 019 не заполняются.
			мРаздел21.Области.П000210001503.Значение = 0;
			мРаздел21.Области.П000210001603.Значение = 0;
			мРаздел21.Области.П000210001703.Значение = 0;
			мРаздел21.Области.П000210001803.Значение = 0;
			мРаздел21.Области.П000210001903.Значение = 0;

			мРаздел21.Области.П000210001504.Значение = 0;
			мРаздел21.Области.П000210001604.Значение = 0;
			мРаздел21.Области.П000210001704.Значение = 0;
			мРаздел21.Области.П000210001804.Значение = 0;
			мРаздел21.Области.П000210001904.Значение = 0;
		Иначе
			мРаздел21.Области.П000210001503.Значение = Макс(П000020020005 - мРаздел21.Области.П000210001003.Значение, 0);
			мРаздел21.Области.П000210001603.Значение = Макс(П000020021005 - мРаздел21.Области.П000210001103.Значение, 0);
			мРаздел21.Области.П000210001703.Значение = Макс(П000020022005 - мРаздел21.Области.П000210001203.Значение, 0);
			мРаздел21.Области.П000210001803.Значение = Макс(П000020023005 - мРаздел21.Области.П000210001303.Значение, 0);
			мРаздел21.Области.П000210001903.Значение = Макс(П000020024005 - мРаздел21.Области.П000210001403.Значение, 0);

			мРаздел21.Области.П000210001504.Значение = Макс(П000020020006 - мРаздел21.Области.П000210001004.Значение, 0);
			мРаздел21.Области.П000210001604.Значение = Макс(П000020021006 - мРаздел21.Области.П000210001104.Значение, 0);
			мРаздел21.Области.П000210001704.Значение = Макс(П000020022006 - мРаздел21.Области.П000210001204.Значение, 0);
			мРаздел21.Области.П000210001804.Значение = Макс(П000020023006 - мРаздел21.Области.П000210001304.Значение, 0);
			мРаздел21.Области.П000210001904.Значение = Макс(П000020024006 - мРаздел21.Области.П000210001404.Значение, 0);
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел22" Тогда

		// строка 102
		//
		мРаздел22.Области.П000220010204.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010004.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010104.Значение);
		мРаздел22.Области.П000220010205.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010005.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010105.Значение);
		мРаздел22.Области.П000220010206.Значение = мРаздел22.Области.П000220010006.Значение + мРаздел22.Области.П000220010106.Значение;
		мРаздел22.Области.П000220010207.Значение = мРаздел22.Области.П000220010007.Значение + мРаздел22.Области.П000220010107.Значение;
		  
		// строка 200
		//
		мРаздел22.Области.П000220020004.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021004.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022004.Значение);
		мРаздел22.Области.П000220020005.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021005.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022005.Значение);
		мРаздел22.Области.П000220020006.Значение = мРаздел22.Области.П000220021006.Значение;
		мРаздел22.Области.П000220020007.Значение = мРаздел22.Области.П000220021007.Значение;

		// строка 201
		//
		мРаздел22.Области.П000220020104.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021104.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022104.Значение);
		мРаздел22.Области.П000220020105.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021105.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022105.Значение);
		мРаздел22.Области.П000220020106.Значение = мРаздел22.Области.П000220021106.Значение;
		мРаздел22.Области.П000220020107.Значение = мРаздел22.Области.П000220021107.Значение;

		// строка 202
		//
		мРаздел22.Области.П000220020204.Значение = мРаздел22.Области.П000220020004.Значение + мРаздел22.Области.П000220020104.Значение;
		мРаздел22.Области.П000220020205.Значение = мРаздел22.Области.П000220020005.Значение + мРаздел22.Области.П000220020105.Значение;
		мРаздел22.Области.П000220020206.Значение = мРаздел22.Области.П000220020006.Значение + мРаздел22.Области.П000220020106.Значение;
		мРаздел22.Области.П000220020207.Значение = мРаздел22.Области.П000220020007.Значение + мРаздел22.Области.П000220020107.Значение;

		// строка 212
		//
		мРаздел22.Области.П000220021204.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021004.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021104.Значение);
		мРаздел22.Области.П000220021205.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021005.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021105.Значение);
		мРаздел22.Области.П000220021206.Значение = мРаздел22.Области.П000220021006.Значение + мРаздел22.Области.П000220021106.Значение;
		мРаздел22.Области.П000220021207.Значение = мРаздел22.Области.П000220021007.Значение + мРаздел22.Области.П000220021107.Значение;

		// строка 222
		//

		мРаздел22.Области.П000220022204.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022004.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022104.Значение);
		мРаздел22.Области.П000220022205.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022005.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022105.Значение);

		// строка 302
		//
		мРаздел22.Области.П000220030204.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220030004.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220030104.Значение);
		мРаздел22.Области.П000220030205.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220030005.Значение) + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220030105.Значение);
		мРаздел22.Области.П000220030206.Значение = мРаздел22.Области.П000220030006.Значение + мРаздел22.Области.П000220030106.Значение;
		мРаздел22.Области.П000220030207.Значение = мРаздел22.Области.П000220030007.Значение + мРаздел22.Области.П000220030107.Значение;

		// строка 400
		//
		мРаздел22.Области.П000220040004.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010004.Значение) + мРаздел22.Области.П000220020004.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220030004.Значение);
		мРаздел22.Области.П000220040005.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010005.Значение) + мРаздел22.Области.П000220020005.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220030005.Значение);
		мРаздел22.Области.П000220040006.Значение = мРаздел22.Области.П000220010006.Значение + мРаздел22.Области.П000220020006.Значение + мРаздел22.Области.П000220030006.Значение;
		мРаздел22.Области.П000220040007.Значение = мРаздел22.Области.П000220010007.Значение + мРаздел22.Области.П000220020007.Значение + мРаздел22.Области.П000220030007.Значение;

		// строка 401
		//
		мРаздел22.Области.П000220040104.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010104.Значение) + мРаздел22.Области.П000220020104.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220030104.Значение);
		мРаздел22.Области.П000220040105.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010105.Значение) + мРаздел22.Области.П000220020105.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220030105.Значение);
		мРаздел22.Области.П000220040106.Значение = мРаздел22.Области.П000220010106.Значение + мРаздел22.Области.П000220020106.Значение + мРаздел22.Области.П000220030106.Значение;
		мРаздел22.Области.П000220040107.Значение = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010107.Значение) + мРаздел22.Области.П000220020107.Значение + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220030107.Значение);

		// строка 402
		//
		мРаздел22.Области.П000220040204.Значение = мРаздел22.Области.П000220040004.Значение + мРаздел22.Области.П000220040104.Значение;
		мРаздел22.Области.П000220040205.Значение = мРаздел22.Области.П000220040005.Значение + мРаздел22.Области.П000220040105.Значение;
		мРаздел22.Области.П000220040206.Значение = мРаздел22.Области.П000220040006.Значение + мРаздел22.Области.П000220040106.Значение;
		мРаздел22.Области.П000220040207.Значение = мРаздел22.Области.П000220040007.Значение + мРаздел22.Области.П000220040107.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел23" Тогда

		// строка 020
		мРаздел23.Области.П000230002003.Значение = мРаздел23.Области.П000230003003.Значение + мРаздел23.Области.П000230004003.Значение;
		мРаздел23.Области.П000230002004.Значение = мРаздел23.Области.П000230003004.Значение + мРаздел23.Области.П000230004004.Значение;

		// строка 021
		мРаздел23.Области.П000230002103.Значение = мРаздел23.Области.П000230003103.Значение + мРаздел23.Области.П000230004103.Значение;
		мРаздел23.Области.П000230002104.Значение = мРаздел23.Области.П000230003104.Значение + мРаздел23.Области.П000230004104.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда

		Расчет("Раздел23");
		Расчет("Раздел22");
		Расчет("Раздел21");
		Расчет("Раздел2");
		Расчет("Раздел21"); // Строки 015-019 от раздела 2
		Расчет("Раздел1");

	КонецЕсли;

КонецПроцедуры // Расчет()

// Возвращает модуль (положительное значение) заданного числа.
//
// Параметры:
//   ИсхЧисло - число - заданное число.
//
// Возвращаемое значение: число.
//
Функция Модуль(ИсхЧисло)
	
	Если НЕ ЗначениеЗаполнено(ИсхЧисло) Тогда
		Возврат 0;
	КонецЕсли;

	Если ТипЗнч(ИсхЧисло) <> Тип("Число") Тогда
		ИсхЧисло = Число(ИсхЧисло);
	КонецЕсли;	

	Мод = Макс(ИсхЧисло, ИсхЧисло * (-1));

	Возврат Мод;

КонецФункции // Модуль()

// Процедура ПоследовательноеЗаполнениеЛистовДеклРасчет()
// процедуры пытается по очереди заполнить (рассчитать)
// на основе уже имеющихся данных в таблицах
// связанные ячейки из других листов и разделов
// заполняем листы в обратном порядке, приоритет у тех листов и разделов
// в которых нет связи с другими объектами декларации
//
Процедура ПоследовательноеЗаполнениеЛистовДеклРасчет(РасчетныйЛист = "")
	// Запускаем НовуюФункциюРасчет листов в обратном порядке 
	// с указанием, какой лист необходимо рассчитать
	// анализируя, какой с кем связан
	// можно пере перебирать в закомментированном цикле, но прямой
	// обратной зависимости по последовательности нет
	// первый расчетный лист предполагается текущий лист, чтобы его сохранить
	// должен быть расчетан, в цикле повторится в расчете, это будет правильно
	// т.к. можеж содержать двойную связь.

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	Если РасчетныйЛист <> "" Тогда
		Если РазделБудетПечататься(РасчетныйЛист) Тогда
			Расчет(РасчетныйЛист);
		КонецЕсли;
	КонецЕсли;

	ПереборЗнач = мДеревоВыбранныхСтраниц.Строки.Количество();
	Пока ПереборЗнач > 0 Цикл

			ВыводНаПечать = мДеревоВыбранныхСтраниц.Строки[ПереборЗнач-1].ВыводНаПечать;
			
			Если ВыводНаПечать = 1 Тогда
				ИмяДляРасчета = мДеревоВыбранныхСтраниц.Строки[ПереборЗнач-1].ИмяСтраницы;
				Расчет(ИмяДляРасчета);
			КонецЕсли;
			ПереборЗнач = ПереборЗнач-1;
	КонецЦикла;
	Модифицированность = Истина;

КонецПроцедуры // Процедура ПоследовательноеЗаполнениеЛистовДеклРасчет (РасчетныйЛист = "")

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Выполняет вывод полей запроса в табличный документ
Процедура ВывестиРезультатЗапросаВДокумент(РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого Колонка из  РезультатЗапроса.Колонки Цикл
			Если Лев(Колонка.Имя,1) = "П" Тогда // это имя показателя
				УстановитьЗначениеПоказателя(Колонка.Имя, Выборка[Колонка.Имя]);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

// ОтобразитьДанныеВКвадратиках
// Отобразить данные в квадратном представлении
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОтобразитьДанныеВКвадратиках(Знач ИмяРаздела) Экспорт

	Страница = СтрЗаменить(ИмяРаздела, "ПолеТабличногоДокумента", "");

	Если Страница = "Раздел1" Тогда

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБКвСтрах_", 20, мКБКРаздел1_1);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КБКвНакоп_", 20, мКБКРаздел1_2);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "КодОКАТО_", 11, мОКАТОРаздел1);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "ТипНП", 2, мКодПлательщикаРаздел1);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "СумНалогСтрах1М", 15, мСумма1Раздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "СумНалогСтрах2М", 15, мСумма2Раздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "СумНалогСтрах3М", 15, мСумма3Раздел1_1, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "СумНалогНакоп1М", 15, мСумма1Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "СумНалогНакоп2М", 15, мСумма2Раздел1_2, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "СумНалогНакоп3М", 15, мСумма3Раздел1_2, Истина);

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "СумНалогСтрахВсего", 15, мСумма0Раздел1_1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "СумНалогНакопВсего", 15, мСумма0Раздел1_2, Истина);

	КонецЕсли;

КонецПроцедуры // ОтобразитьДанныеВКвадратиках

// ОпределитьИмяРазделаПриИмпорте
//
Функция ОпределитьИмяРазделаПриИмпорте(СтруктураДанных)
	Перем Результат;

	Для каждого Зап Из СтруктураДанных Цикл
		ИмяСтраницы = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, Зап.Ключ);
		Если ИмяСтраницы <> Неопределено Тогда
			Результат = ИмяСтраницы;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ОпределитьИмяРазделаПриИмпорте

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвтоВнутренний(ВсеДанные = Истина) Экспорт 

	Если НЕ ФлажокВнешДанные Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено;
	
	Если ВсеДанные Тогда
		ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма);

		Если ПрерватьАвтоЗаполнение Тогда
			// Пользователь нажал кнопку "Нет".
			Возврат;
		КонецЕсли;

		Если ФлажокВнешДанные Тогда
			мСтруктураДанныхОтчетаXMLКонтейнер = РегламентированнаяОтчетность.ИмпортироватьДанныеКонтейнераXML(ЭтаФорма);
			Если мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено Тогда
				Сообщить("Данные из XML файла не подходят для текущего отчета.", СтатусСообщения.Важное);
				Сообщить("Необходимо проверить период отчета и организацию (ИНН/КПП).", СтатусСообщения.Важное);
			КонецЕсли;
			
			Отказ = Ложь;
			РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации(); 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамВидСтавокЕСНиПФР", Организация.ВидСтавокЕСНиПФР);
	Запрос.УстановитьПараметр("парамНачалоГода", НачалоГода(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамГод", Год(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамКонецОтчетногоПериода", КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Месяц1", Месяц(мДатаКонцаПериодаОтчета) - 2);
	Запрос.УстановитьПараметр("Месяц2", Месяц(мДатаКонцаПериодаОтчета) - 1);
	Запрос.УстановитьПараметр("Месяц3", Месяц(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Делитель", мДелитель);
	Запрос.УстановитьПараметр("СписокОбособленныхПодразделений", Организация);
	
	// Определим: является ли организация плательщиком ЕНВД (для этого поищем доходы с признаком Облагается ЕНВД)
	
	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ГоловнаяОрганизация);

	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	// Сформируем текст запроса выборки месяцев налогового периода
	// Сформируем текст запроса выборки месяцев налогового периода
	// конец месяца налогового периода
	КонецМесяца = КонецМесяца(НачалоГода(мДатаКонцаПериодаОтчета));
	// первый месяц
	ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериоды";
	// прибавим остальные месяцы
	Для Сч = 2 По Месяц(мДатаКонцаПериодаОтчета) Цикл
		КонецМесяца = КонецМесяца(КонецМесяца+1);
    	ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	
	// Сформируем текст запроса выборки месяцев налогового периода
	МесяцыНПТекст = "ВЫБРАТЬ 1 КАК МЕСЯЦ ПОМЕСТИТЬ ВТМесяцыНП";
	Для Сч = 2 По 12 Цикл
    	МесяцыНПТекст = МесяцыНПТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ " + Сч;
	КонецЦикла;
	
	Запрос.Текст = МесяцыНПТекст;
	Запрос.Выполнить();
	
	// ДанныеОПравеНаПенсию
	// Таблица Данные о праве на пенсию: - список иностранцев и периодов
	// Поля:
	//		Физлицо, 
	//		Месяц - месяц налогового периода
	// 
	// Описание:
	//	Выбираем из списка периодов (Периоды)
	//	Внутреннее соединение с "псевдо" ГражданствоФизЛиц.СрезПоследних
	//  по равенству периодов
	//  условие: что физлицо - не имеет права на пенсию
	//
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МЕСЯЦ(Периоды.Период) КАК Месяц,
	|	ГражданствоФизЛиц.ФизЛицо КАК Физлицо
	|ПОМЕСТИТЬ ВТДанныеОПравеНаПенсию
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		ГражданствоФизЛиц.ФизЛицо КАК Физлицо,
	|		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО Периоды.Период >= ГражданствоФизЛиц.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ГражданствоФизЛиц.ФизЛицо,
	|		Периоды.Период) КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО Периоды.ПериодРегистра = ГражданствоФизЛиц.Период
	|			И Периоды.Физлицо = ГражданствоФизЛиц.ФизЛицо
	|			И (ГражданствоФизЛиц.НеИмеетПравоНаПенсию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц,
	|	Физлицо";
	Запрос.Выполнить();
	
    // УчетнаяПолитикаНалоговыйУчет
	// Таблица УчетнаяПолитикаНалоговыйУчетУСН - это список периодов, когда организация переходила на УСН
	// поля:
	//		УСН, 
	//		Месяц - месяц налогового периода
	// Описание:	
	//	Выбираем Из Периоды (таблица - список периодов с начала года по текущий период)
	//	Внутреннее соединение с "псевдосрезом" последних регистра УчетнаяПолитикаНалоговыйУчет
	//	по равенству периодов
	//  условие: что организация использует УСН
	
	Если ИДКонфигурации <> "ЗУП" Тогда
		УчетнаяПолитикаНалоговыйУчетТекст = 
		"ВЫБРАТЬ
		|	МЕСЯЦ(Периоды.Период) КАК Месяц,
		|	ВЫБОР
		|		КОГДА УчетнаяПолитикаНалоговыйУчет.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УСН
		|ПОМЕСТИТЬ ВТУчетнаяПолитикаНалоговыйУчет
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
		|	ИЗ
		|		ВТПериоды КАК Периоды
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|			ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период
		|				И (УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период
		|			И (УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация)
		|			И (ВЫБОР
		|				КОГДА УчетнаяПолитикаНалоговыйУчет.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)";	
	Иначе
		УчетнаяПолитикаНалоговыйУчетТекст = 
		"ВЫБРАТЬ
		|	МЕСЯЦ(Периоды.Период) КАК Месяц,
		|	УчетнаяПолитикаНалоговыйУчет.УСН КАК УСН
		|ПОМЕСТИТЬ ВТУчетнаяПолитикаНалоговыйУчет
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
		|	ИЗ
		|		ВТПериоды КАК Периоды
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|			ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период
		|				И (УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период
		|			И (УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация)
		|			И (УчетнаяПолитикаНалоговыйУчет.УСН)";	
	КонецЕсли;
	
	Запрос.Текст = УчетнаяПолитикаНалоговыйУчетТекст;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСНСведенияОДоходах.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТФизлицаБезНалоговойБазы
	|ИЗ
	|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|ГДЕ
	|	ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
	|	И ЕСНСведенияОДоходах.Организация = &парамГоловнаяОрганизация
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСНСведенияОДоходах.ФизЛицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ЕСНСведенияОДоходах.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет
	|				ТОГДА ЕСНСведенияОДоходах.Результат - ЕСНСведенияОДоходах.Скидка
	|			ИНАЧЕ 0
	|		КОНЕЦ) < 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.Выполнить();
	
	// НалоговаяБазаПоФизлицамПоМесяцам
	//	ФизЛицо	- физическое лицо 
	//	Месяц	- месяц налогового периода 
	//	База - налоговая база
	//	БазаОбщСН - налоговая база в части видов деятельности, не облагаемых ЕНВД
	//  НомерВозрастнойГруппы - номер возрастной группы: 
	//		1 - лица по 1966 г.р.
	//		2 - лица моложе 1966 г.р.
	// Описание:
	//  Выбирает базу взновов ПФР 
	// данные собираются нарастающим итогом для каждого месяца налогового периода в разрезе физлиц	 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ГОД(ЕСНСведенияОДоходах.ФизЛицо.ДатаРождения) < 1967
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НомерВозрастнойГруппы,
	|	МесяцыНП.Месяц КАК Месяц,
	|	ЕСТЬNULL(СУММА(ЕСНСведенияОДоходах.Результат - ЕСНСведенияОДоходах.Скидка), 0) КАК База,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ЕСНСведенияОДоходах.ОблагаетсяЕНВД
	|					ТОГДА 0
	|				КОГДА УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ ЕСНСведенияОДоходах.Результат - ЕСНСведенияОДоходах.Скидка
	|			КОНЕЦ), 0) КАК БазаОбщСН
	|ПОМЕСТИТЬ ВТНалоговаяБазаПоФизлицамПоМесяцамНарастающимИтогом
	|ИЗ
	|	ВТМесяцыНП КАК МесяцыНП
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТФизлицаБезНалоговойБазы КАК ФизлицаБезНалоговойБазы
	|			ПО ЕСНСведенияОДоходах.ФизЛицо = ФизлицаБезНалоговойБазы.Физлицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПравеНаПенсию КАК Иностранцы
	|			ПО ЕСНСведенияОДоходах.ФизЛицо = Иностранцы.Физлицо
	|				И (МЕСЯЦ(ЕСНСведенияОДоходах.Период) = Иностранцы.Месяц)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТУчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчетУСН
	|			ПО (МЕСЯЦ(ЕСНСведенияОДоходах.Период) = УчетнаяПолитикаНалоговыйУчетУСН.Месяц)
	|		ПО (МесяцыНП.Месяц >= МЕСЯЦ(ЕСНСведенияОДоходах.Период))
	|ГДЕ
	|	ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
	|	И ЕСНСведенияОДоходах.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет
	|	И ЕСНСведенияОДоходах.Организация = &парамГоловнаяОрганизация
	|	И ЕСНСведенияОДоходах.ОбособленноеПодразделение В(&СписокОбособленныхПодразделений)
	|	И ФизлицаБезНалоговойБазы.Физлицо ЕСТЬ NULL 
	|	И Иностранцы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСНСведенияОДоходах.ФизЛицо,
	|	МесяцыНП.Месяц,
	|	ВЫБОР
	|		КОГДА ГОД(ЕСНСведенияОДоходах.ФизЛицо.ДатаРождения) < 1967
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц,
	|	ФизЛицо";
	Запрос.Выполнить();

	ДоходыНарастающимИтогомТекст = 
	"ВЫБРАТЬ
	|	МесяцыНП.Месяц КАК Месяц,
	|	ЕСТЬNULL(ДоходыЕСН.База, 0) КАК База,
	|	ЕСТЬNULL(ДоходыЕСН.БазаОбщСН, 0) КАК БазаОбщСН,
	|	ЕСТЬNULL(ДоходыПФР.База, 0) КАК База1,
	|	ЕСТЬNULL(ДоходыПФР.БазаОбщСН, 0) КАК БазаОбщСН1,
	|	ЕСТЬNULL(ДоходыЕСН.База, 0) - ЕСТЬNULL(ДоходыПФР.База, 0) КАК База2,
	|	ЕСТЬNULL(ДоходыЕСН.БазаОбщСН, 0) - ЕСТЬNULL(ДоходыПФР.БазаОбщСН, 0) КАК БазаОбщСН2
	|ПОМЕСТИТЬ ВТДоходыПФР
	|ИЗ
	|	ВТМесяцыНП КАК МесяцыНП
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДоходыПФР.Месяц КАК Месяц,
	|			(ВЫРАЗИТЬ(СУММА(ДоходыПФР.База) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК База,
	|			(ВЫРАЗИТЬ(СУММА(ДоходыПФР.БазаОбщСН) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК БазаОбщСН
	|		ИЗ
	|			ВТНалоговаяБазаПоФизлицамПоМесяцамНарастающимИтогом КАК ДоходыПФР
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДоходыПФР.Месяц) КАК ДоходыЕСН
	|		ПО МесяцыНП.Месяц = ДоходыЕСН.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДоходыПФР.Месяц КАК Месяц,
	|			(ВЫРАЗИТЬ(СУММА(ДоходыПФР.База) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК База,
	|			(ВЫРАЗИТЬ(СУММА(ДоходыПФР.БазаОбщСН) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК БазаОбщСН
	|		ИЗ
	|			ВТНалоговаяБазаПоФизлицамПоМесяцамНарастающимИтогом КАК ДоходыПФР
	|		ГДЕ
	|			ДоходыПФР.НомерВозрастнойГруппы = 1
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДоходыПФР.Месяц) КАК ДоходыПФР
	|		ПО МесяцыНП.Месяц = ДоходыПФР.Месяц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц";
	Запрос.Текст  = СтрЗаменить(ДоходыНарастающимИтогомТекст,"ЧИСЛО(15, 3)","ЧИСЛО(15, " + ТочностьЕдиницыИзмерения + ")");
	Запрос.Выполнить();
	

	// РАСЧЕТ ПОКАЗАТЕЛЕЙ РАЗДЕЛА 2										  
											  
	//НалоговаяБазаПоМесяцамОтчетногоПериода
	// поля запроса соответствуют номерам ячеек отчета
	// Описание:
	//  Выполняет расчет налоговой базы по месяцам отчетного периода для раздела 2 

	НалоговаяБазаПоМесяцамКвартала = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА БазаПФР.Месяц = &Месяц1
	|				ТОГДА БазаПФР.База1 - ЕСТЬNULL(БазаПФРПредМесяца.База1, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020012003,
	|	СУММА(ВЫБОР
	|			КОГДА БазаПФР.Месяц = &Месяц1
	|				ТОГДА БазаПФР.База2 - ЕСТЬNULL(БазаПФРПредМесяца.База2, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020012004,
	|	СУММА(ВЫБОР
	|			КОГДА БазаПФР.Месяц = &Месяц1
	|				ТОГДА БазаПФР.БазаОбщСН - ЕСТЬNULL(БазаПФРПредМесяца.БазаОбщСН, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020012006,
	|	СУММА(ВЫБОР
	|			КОГДА БазаПФР.Месяц = &Месяц2
	|				ТОГДА БазаПФР.База1 - ЕСТЬNULL(БазаПФРПредМесяца.База1, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020013003,
	|	СУММА(ВЫБОР
	|			КОГДА БазаПФР.Месяц = &Месяц2
	|				ТОГДА БазаПФР.База2 - ЕСТЬNULL(БазаПФРПредМесяца.База2, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020013004,
	|	СУММА(ВЫБОР
	|			КОГДА БазаПФР.Месяц = &Месяц2
	|				ТОГДА БазаПФР.БазаОбщСН - ЕСТЬNULL(БазаПФРПредМесяца.БазаОбщСН, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020013006,
	|	СУММА(ВЫБОР
	|			КОГДА БазаПФР.Месяц = &Месяц3
	|				ТОГДА БазаПФР.База1 - ЕСТЬNULL(БазаПФРПредМесяца.База1, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020014003,
	|	СУММА(ВЫБОР
	|			КОГДА БазаПФР.Месяц = &Месяц3
	|				ТОГДА БазаПФР.База2 - ЕСТЬNULL(БазаПФРПредМесяца.База2, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020014004,
	|	СУММА(ВЫБОР
	|			КОГДА БазаПФР.Месяц = &Месяц3
	|				ТОГДА БазаПФР.БазаОбщСН - ЕСТЬNULL(БазаПФРПредМесяца.БазаОбщСН, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020014006
	|ИЗ
	|	ВТМесяцыНП КАК МесяцыНП
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПФР КАК БазаПФР
	|		ПО МесяцыНП.Месяц = БазаПФР.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПФР КАК БазаПФРПредМесяца
	|		ПО (МесяцыНП.Месяц - 1 = БазаПФРПредМесяца.Месяц)";
	
	// ИсчисленныйНалог
	//	Месяц	- месяц налогового периода 
	//  НомерВозрастнойГруппы - номер возрастной группы физлица
	//		1 - лица по 1966 г.р.
	//		2 - лица моложе 1966 г.р.
	//	Накопительная - начислено на накопительную часть
	//	Страховая - начислено на страховую часть
	//	НакопительнаяОбщСН - начислено на накопительную часть по видам деятельности, не облагаемым ЕНВД
	//	СтраховаяОбщСН - начислено на страховую часть с доходов не облагаемых ЕНВД
	// данные собираются нарастающим итогом для каждого месяца налогового периода сводно	 
	
	НалогиНарастающимИтогомТекст = 
	"ВЫБРАТЬ
	|	МесяцыНП.Месяц КАК Месяц,
	|	ВЫБОР
	|		КОГДА ГОД(ИсчисленныйНалог.ФизЛицо.ДатаРождения) < 1967
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НомерВозрастнойГруппы,
	|	(ВЫРАЗИТЬ(СУММА(ИсчисленныйНалог.ПФРНакопительная) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК Накопительная,
	|	(ВЫРАЗИТЬ(СУММА(ИсчисленныйНалог.ПФРСтраховая) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК Страховая,
	|	(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|				КОГДА УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL 
	|					ТОГДА ИсчисленныйНалог.ПФРНакопительная - ИсчисленныйНалог.ПФРНакопительнаяЕНВД
	|				ИНАЧЕ 0
	|			КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК НакопительнаяОбщСН,
	|	(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|				КОГДА УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL 
	|					ТОГДА ИсчисленныйНалог.ПФРСтраховая - ИсчисленныйНалог.ПФРСтраховаяЕНВД
	|				ИНАЧЕ 0
	|			КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК СтраховаяОбщСН
	|ПОМЕСТИТЬ ВТИсчисленныйНалог
	|ИЗ
	|	ВТМесяцыНП КАК МесяцыНП
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЕСНИсчисленный КАК ИсчисленныйНалог
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТУчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчетУСН
	|			ПО (МЕСЯЦ(ИсчисленныйНалог.Период) = УчетнаяПолитикаНалоговыйУчетУСН.Месяц)
	|		ПО (МесяцыНП.Месяц >= МЕСЯЦ(ИсчисленныйНалог.Период))
	|ГДЕ
	|	ИсчисленныйНалог.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
	|	И ИсчисленныйНалог.Организация = &парамГоловнаяОрганизация
	|	И ИсчисленныйНалог.ОбособленноеПодразделение В(&СписокОбособленныхПодразделений)
	|
	|СГРУППИРОВАТЬ ПО
	|	МесяцыНП.Месяц,
	|	ВЫБОР
	|		КОГДА ГОД(ИсчисленныйНалог.ФизЛицо.ДатаРождения) < 1967
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц,
	|	НомерВозрастнойГруппы";
	Запрос.Текст  = СтрЗаменить(НалогиНарастающимИтогомТекст,"ЧИСЛО(15, 3)","ЧИСЛО(15, " + ТочностьЕдиницыИзмерения + ")");
	Запрос.Выполнить();
	
	//ИсчисленныеНалогиРаздела2
	// поля запроса соответствуют номерам ячеек отчета
	// Описание:
	//  Выполняет расчет показателей раздела 2, содержащих информацию об исчисленных налогах 
	
	ИсчисленныеНалогиРаздела2 = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|				ТОГДА ИсчисленныйЕСН.СтраховаяОбщСН
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СтраховаяОбщСН,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|				ТОГДА ИсчисленныйЕСН.Страховая
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Страховая,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|				ТОГДА ИсчисленныйЕСН.НакопительнаяОбщСН
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НакопительнаяОбщСН,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|				ТОГДА ИсчисленныйЕСН.Накопительная
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Накопительная,
	// Страховая часть 
	// строка 0300 - исчисленный налог с начала года
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|					И ИсчисленныйЕСН.НомерВозрастнойГруппы = 1
	|				ТОГДА ИсчисленныйЕСН.Страховая
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020030003,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|					И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2
	|				ТОГДА ИсчисленныйЕСН.Страховая
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020030004,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|				ТОГДА ИсчисленныйЕСН.Страховая
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020030005,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|				ТОГДА ИсчисленныйЕСН.СтраховаяОбщСН
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020030006,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц1
	|					И ИсчисленныйЕСН.НомерВозрастнойГруппы = 1
	|				ТОГДА ИсчисленныйЕСН.Страховая - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.Страховая, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020032003,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц1
	|					И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2
	|				ТОГДА ИсчисленныйЕСН.Страховая - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.Страховая, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020032004,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц1
	|				ТОГДА ИсчисленныйЕСН.Страховая - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.Страховая, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020032005,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц1
	|				ТОГДА ИсчисленныйЕСН.СтраховаяОбщСН - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.СтраховаяОбщСН, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020032006,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц2
	|					И ИсчисленныйЕСН.НомерВозрастнойГруппы = 1
	|				ТОГДА ИсчисленныйЕСН.Страховая - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.Страховая, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020033003,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц2
	|					И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2
	|				ТОГДА ИсчисленныйЕСН.Страховая - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.Страховая, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020033004,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц2
	|				ТОГДА ИсчисленныйЕСН.Страховая - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.Страховая, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020033005,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц2
	|				ТОГДА ИсчисленныйЕСН.СтраховаяОбщСН - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.СтраховаяОбщСН, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020033006,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|					И ИсчисленныйЕСН.НомерВозрастнойГруппы = 1
	|				ТОГДА ИсчисленныйЕСН.Страховая - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.Страховая, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020034003,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|					И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2
	|				ТОГДА ИсчисленныйЕСН.Страховая - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.Страховая, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020034004,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|				ТОГДА ИсчисленныйЕСН.Страховая - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.Страховая, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020034005,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|				ТОГДА ИсчисленныйЕСН.СтраховаяОбщСН - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.СтраховаяОбщСН, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020034006,
	// Накопительная часть 
	// строка 0400 - исчисленный налог с начала года
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|				ТОГДА ИсчисленныйЕСН.Накопительная
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020040004,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|				ТОГДА ИсчисленныйЕСН.Накопительная
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020040005,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|				ТОГДА ИсчисленныйЕСН.НакопительнаяОбщСН
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020040006,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц1
	|					И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2
	|				ТОГДА ИсчисленныйЕСН.Накопительная - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.Накопительная, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020042004,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц1
	|				ТОГДА ИсчисленныйЕСН.Накопительная - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.Накопительная, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020042005,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц1
	|				ТОГДА ИсчисленныйЕСН.НакопительнаяОбщСН - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.НакопительнаяОбщСН, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020042006,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц2
	|					И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2
	|				ТОГДА ИсчисленныйЕСН.Накопительная - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.Накопительная, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020043004,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц2
	|				ТОГДА ИсчисленныйЕСН.Накопительная - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.Накопительная, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020043005,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц2
	|				ТОГДА ИсчисленныйЕСН.НакопительнаяОбщСН - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.НакопительнаяОбщСН, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020043006,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|					И ИсчисленныйЕСН.НомерВозрастнойГруппы = 2
	|				ТОГДА ИсчисленныйЕСН.Накопительная - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.Накопительная, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020044004,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|				ТОГДА ИсчисленныйЕСН.Накопительная - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.Накопительная, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020044005,
	|	СУММА(ВЫБОР
	|			КОГДА ИсчисленныйЕСН.Месяц = &Месяц3
	|				ТОГДА ИсчисленныйЕСН.НакопительнаяОбщСН - ЕСТЬNULL(ИсчисленныйЕСНПредМесяца.НакопительнаяОбщСН, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000020044006
	|ИЗ
	|	ВТМесяцыНП КАК МесяцыНП
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсчисленныйНалог КАК ИсчисленныйЕСН
	|		ПО МесяцыНП.Месяц = ИсчисленныйЕСН.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсчисленныйНалог КАК ИсчисленныйЕСНПредМесяца
	|		ПО (МесяцыНП.Месяц - 1 = ИсчисленныйЕСНПредМесяца.Месяц)
	|			И (ИсчисленныйЕСН.НомерВозрастнойГруппы = ИсчисленныйЕСНПредМесяца.НомерВозрастнойГруппы)";
	
	// РАСЧЕТ ПОКАЗАТЕЛЕЙ РАЗДЕЛА 2.2
	
	// ИсчисленныйНалогПоФизЛицамСНачалаГода
	//	ФизЛицо	- физическое лицо 
	//	Накопительная, Страховая - начисленные взносы на страховую и накопительную части с начала года
	
	// НалоговаяБазаПоФизлицамПределам
	// Описание:
	//  Выполняет расчет показателей раздела 2.2
	
	НалоговаяБазаПоСтаршимФизлицамИПределамТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ДоходыПФРВсего.База, 0) КАК База,
	|	ЕСТЬNULL(ДоходыПФРВсего.БазаОбщСН, 0) КАК БазаОбщСН,
	|	ДоходыПФРВсего.База1 - ДоходыНалоги.П000220021004 - ДоходыНалоги.П000220022004 - ДоходыНалоги.П000220030004 КАК П000220010004,
	|	ДоходыПФРВсего.БазаОбщСН1 - ДоходыНалоги.П000220021005 - ДоходыНалоги.П000220022005 - ДоходыНалоги.П000220030005 КАК П000220010005,
	|	ДоходыНалоги.П000220010006,
	|	ДоходыНалоги.П000220010007,
	|	ДоходыНалоги.П000220021004,
	|	ДоходыНалоги.П000220021005,
	|	ДоходыНалоги.П000220021006,
	|	ДоходыНалоги.П000220021007,
	|	ДоходыНалоги.П000220022004,
	|	ДоходыНалоги.П000220022005,
	|	ДоходыНалоги.П000220030004,
	|	ДоходыНалоги.П000220030005,
	|	ДоходыНалоги.П000220030006,
	|	ДоходыНалоги.П000220030007
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ВЫБОР
	|				КОГДА Ставки.НомерСтрокиСтавок = 1
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК П000220010006,
	|		СУММА(ВЫБОР
	|				КОГДА Ставки.НомерСтрокиСтавок = 1
	|						И Доходы.БазаОбщСН <> 0
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК П000220010007,
	|		(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|					КОГДА Ставки.НомерСтрокиСтавок = 2
	|						ТОГДА Ставки.СуммаДоходаС
	|					ИНАЧЕ 0
	|				КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000220021004,
	|		(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|					КОГДА Ставки.НомерСтрокиСтавок = 2
	|						ТОГДА Доходы.БазаОбщСН * Ставки.СуммаДоходаС / Доходы.База
	|					ИНАЧЕ 0
	|				КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000220021005,
	|		СУММА(ВЫБОР
	|				КОГДА Ставки.НомерСтрокиСтавок = 2
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК П000220021006,
	|		СУММА(ВЫБОР
	|				КОГДА Ставки.НомерСтрокиСтавок = 2
	|						И Доходы.БазаОбщСН <> 0
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК П000220021007,
	|		(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|					КОГДА Ставки.НомерСтрокиСтавок = 2
	|						ТОГДА Доходы.База - Ставки.СуммаДоходаС
	|					ИНАЧЕ 0
	|				КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000220022004,
	|		(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|					КОГДА Ставки.НомерСтрокиСтавок = 2
	|						ТОГДА Доходы.БазаОбщСН * (Доходы.База - Ставки.СуммаДоходаС) / Доходы.База
	|					ИНАЧЕ 0
	|				КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000220022005,
	|		(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|					КОГДА Ставки.НомерСтрокиСтавок = 3
	|						ТОГДА Доходы.База
	|					ИНАЧЕ 0
	|				КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000220030004,
	|		(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|					КОГДА Ставки.НомерСтрокиСтавок = 3
	|						ТОГДА Доходы.БазаОбщСН
	|					ИНАЧЕ 0
	|				КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000220030005,
	|		СУММА(ВЫБОР
	|				КОГДА Ставки.НомерСтрокиСтавок = 3
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК П000220030006,
	|		СУММА(ВЫБОР
	|				КОГДА Ставки.НомерСтрокиСтавок = 3
	|						И Доходы.БазаОбщСН <> 0
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК П000220030007
	|	ИЗ
	|		ВТНалоговаяБазаПоФизлицамПоМесяцамНарастающимИтогом КАК Доходы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахЕСНиПФР КАК Ставки
	|			ПО (Ставки.ВидСтавокЕСНиПФР = &парамВидСтавокЕСНиПФР)
	|				И (Ставки.Год = &парамГод)
	|				И Доходы.База > Ставки.СуммаДоходаС
	|				И Доходы.База <= Ставки.СуммаДоходаПо
	|	ГДЕ
	|		Доходы.Месяц = &Месяц3
	|		И Доходы.НомерВозрастнойГруппы = 1) КАК ДоходыНалоги
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПФР КАК ДоходыПФРВсего
	|		ПО (ДоходыПФРВсего.Месяц = &Месяц3)";
	НалоговаяБазаПоСтаршимФизлицамИПределамТекст = СтрЗаменить(НалоговаяБазаПоСтаршимФизлицамИПределамТекст,"ЧИСЛО(15, 3)","ЧИСЛО(15, " + ТочностьЕдиницыИзмерения + ")");
	
	НалоговаяБазаПоМладшимФизлицамИПределамТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ДоходыПФРВсего.База, 0) КАК База,
	|	ЕСТЬNULL(ДоходыПФРВсего.БазаОбщСН, 0) КАК БазаОбщСН,
	|	ДоходыПФРВсего.База2 - ДоходыНалоги.П000220021104 - ДоходыНалоги.П000220022104 - ДоходыНалоги.П000220030104 КАК П000220010104,
	|	ДоходыПФРВсего.БазаОбщСН2 - ДоходыНалоги.П000220021105 - ДоходыНалоги.П000220022105 - ДоходыНалоги.П000220030105 КАК П000220010105,
	|	ДоходыНалоги.П000220010106,
	|	ДоходыНалоги.П000220010107,
	|	ДоходыНалоги.П000220021104,
	|	ДоходыНалоги.П000220021105,
	|	ДоходыНалоги.П000220021106,
	|	ДоходыНалоги.П000220021107,
	|	ДоходыНалоги.П000220022104,
	|	ДоходыНалоги.П000220022105,
	|	ДоходыНалоги.П000220030104,
	|	ДоходыНалоги.П000220030105,
	|	ДоходыНалоги.П000220030106,
	|	ДоходыНалоги.П000220030107
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ВЫБОР
	|				КОГДА Ставки.НомерСтрокиСтавок = 1
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК П000220010106,
	|		СУММА(ВЫБОР
	|				КОГДА Ставки.НомерСтрокиСтавок = 1
	|						И Доходы.БазаОбщСН <> 0
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК П000220010107,
	|		(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|					КОГДА Ставки.НомерСтрокиСтавок = 2
	|						ТОГДА Ставки.СуммаДоходаС
	|					ИНАЧЕ 0
	|				КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000220021104,
	|		(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|					КОГДА Ставки.НомерСтрокиСтавок = 2
	|						ТОГДА Доходы.БазаОбщСН * Ставки.СуммаДоходаС / Доходы.База
	|					ИНАЧЕ 0
	|				КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000220021105,
	|		СУММА(ВЫБОР
	|				КОГДА Ставки.НомерСтрокиСтавок = 2
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК П000220021106,
	|		СУММА(ВЫБОР
	|				КОГДА Ставки.НомерСтрокиСтавок = 2
	|						И Доходы.БазаОбщСН <> 0
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК П000220021107,
	|		(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|					КОГДА Ставки.НомерСтрокиСтавок = 2
	|						ТОГДА Доходы.База - Ставки.СуммаДоходаС
	|					ИНАЧЕ 0
	|				КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000220022104,
	|		(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|					КОГДА Ставки.НомерСтрокиСтавок = 2
	|						ТОГДА Доходы.БазаОбщСН * (Доходы.База - Ставки.СуммаДоходаС) / Доходы.База
	|					ИНАЧЕ 0
	|				КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000220022105,
	|		(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|					КОГДА Ставки.НомерСтрокиСтавок = 3
	|						ТОГДА Доходы.База
	|					ИНАЧЕ 0
	|				КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000220030104,
	|		(ВЫРАЗИТЬ(СУММА(ВЫБОР
	|					КОГДА Ставки.НомерСтрокиСтавок = 3
	|						ТОГДА Доходы.БазаОбщСН
	|					ИНАЧЕ 0
	|				КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель КАК П000220030105,
	|		СУММА(ВЫБОР
	|				КОГДА Ставки.НомерСтрокиСтавок = 3
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК П000220030106,
	|		СУММА(ВЫБОР
	|				КОГДА Ставки.НомерСтрокиСтавок = 3
	|						И Доходы.БазаОбщСН <> 0
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК П000220030107
	|	ИЗ
	|		ВТНалоговаяБазаПоФизлицамПоМесяцамНарастающимИтогом КАК Доходы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахЕСНиПФР КАК Ставки
	|			ПО (Ставки.ВидСтавокЕСНиПФР = &парамВидСтавокЕСНиПФР)
	|				И (Ставки.Год = &парамГод)
	|				И Доходы.База > Ставки.СуммаДоходаС
	|				И Доходы.База <= Ставки.СуммаДоходаПо
	|	ГДЕ
	|		Доходы.Месяц = &Месяц3
	|		И Доходы.НомерВозрастнойГруппы = 2) КАК ДоходыНалоги
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПФР КАК ДоходыПФРВсего
	|		ПО (ДоходыПФРВсего.Месяц = &Месяц3)";

	НалоговаяБазаПоМладшимФизлицамИПределамТекст = СтрЗаменить(НалоговаяБазаПоМладшимФизлицамИПределамТекст,"ЧИСЛО(15, 3)","ЧИСЛО(15, " + ТочностьЕдиницыИзмерения + ")");
	
	// -------------------------------------------------------------------------------
	// ВЫВОД ДАННЫХ В ОТЧЕТ
	
	СтруктураИтоговыхДанных = Новый Структура("База,БазаОбщСН,Страховая,Накопительная,СтраховаяОбщСН,НакопительнаяОбщСН",0,0,0,0,0,0);
	
	// Раздел 2.0
	
	// Данные берутся по обособленному подразделению (указанной организации)
	
	Запрос.Текст = НалоговаяБазаПоМесяцамКвартала;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	Запрос.Текст = ИсчисленныеНалогиРаздела2;
	Результат = Запрос.Выполнить();
	ВывестиРезультатЗапросаВДокумент(Результат);
	Если Не Результат.Пустой() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураИтоговыхДанных,Результат.Выгрузить()[0]);
	КонецЕсли;
	
	// Раздел 2.2
	
	// Данные берутся по обособленному подразделению (указанной организации)
	Запрос.Текст = НалоговаяБазаПоСтаршимФизлицамИПределамТекст;
	Результат = Запрос.Выполнить();
	ВывестиРезультатЗапросаВДокумент(Результат);
	Если Не Результат.Пустой() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураИтоговыхДанных,Результат.Выгрузить()[0]);
	КонецЕсли;

	Запрос.Текст = НалоговаяБазаПоМладшимФизлицамИПределамТекст;
	Результат = Запрос.Выполнить();
	ВывестиРезультатЗапросаВДокумент(Результат);
	Если Не Результат.Пустой() Тогда
		Данные = Результат.Выгрузить()[0];
		СтруктураИтоговыхДанных.База = СтруктураИтоговыхДанных.База + Данные.База;
		СтруктураИтоговыхДанных.БазаОбщСН = СтруктураИтоговыхДанных.БазаОбщСН + Данные.БазаОбщСН;
	КонецЕсли;

	// Раздел 2.1

	// Раздел 2.1

	Если Метаданные.Обработки.Найти("БухгалтерскиеИтоги") <> Неопределено Тогда

		// Инициализация
		ПС = ПланыСчетов.Хозрасчетный;
		Счет51    = ПС.РасчетныеСчета;
		Счет69_02_1 = ПС.ПФР_страх;
		Счет69_02_2 = ПС.ПФР_нак;

		// Бухгалтерские итоги по аналитике
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();

		НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
		Если НомерМесяца = "12" Тогда
			НомерМесяца = "0";
		КонецЕсли;

		НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
		НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");
		
		Номер1МесяцаКвартала = НомерКвартала * 3 - 2;
		Номер2МесяцаКвартала = НомерКвартала * 3 - 1;
		Номер3МесяцаКвартала = НомерКвартала * 3;
		
		ДатаВ1МесяцеКвартала = Дата(НомерГода, Номер1МесяцаКвартала, 1);
		
		СдвигПериодаУплаты = 15 * 86400;
		
		ДатаНачалаГода = КонецДня(РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(Дата(НомерГода, 1, 15))) + 1;
		
		ДатаВ1МесяцеКвартала = Дата(НомерГода, Номер1МесяцаКвартала, 15);
		
		ДатаНачала1МесяцаКвартала = КонецДня(РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(ДатаВ1МесяцеКвартала)) + 1;
		ДатаКонца1МесяцаКвартала  = КонецДня(РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(
			КонецМесяца(ДатаНачала1МесяцаКвартала) + СдвигПериодаУплаты));
		
		ДатаВо2МесяцеКвартала = Дата(НомерГода, Номер2МесяцаКвартала, 15);
		
		ДатаНачала2МесяцаКвартала = КонецДня(РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(ДатаВо2МесяцеКвартала)) + 1;
		ДатаКонца2МесяцаКвартала  = КонецДня(РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(
			КонецМесяца(ДатаНачала2МесяцаКвартала) + СдвигПериодаУплаты));
		
		ДатаВ3МесяцеКвартала = Дата(НомерГода, Номер3МесяцаКвартала, 15);
		
		ДатаНачала3МесяцаКвартала = КонецДня(РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(ДатаВ3МесяцеКвартала)) + 1;
		ДатаКонца3МесяцаКвартала  = КонецДня(РегламентированнаяОтчетность.ПолучитьСледующуюРабочуюДатуДляРегОтчетности(
			КонецМесяца(ДатаНачала3МесяцаКвартала) + СдвигПериодаУплаты));
		
		ОкрП000020012003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020012003.Значение);
		ОкрП000020012004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020012004.Значение);
		ОкрП000020013003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020013003.Значение);
		ОкрП000020013004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020013004.Значение);
		ОкрП000020014003 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020014003.Значение);
		ОкрП000020014004 = ОкруглитьЧислоПоФормату(мРаздел2.Области.П000020014004.Значение);

		мРаздел2.Области.П000020012005.Значение = ОкрП000020012003 + ОкрП000020012004;
		мРаздел2.Области.П000020013005.Значение = ОкрП000020013003 + ОкрП000020013004;
		мРаздел2.Области.П000020014005.Значение = ОкрП000020014003 + ОкрП000020014004;
		
		//**********************************************************************
		// Извлекаем данные за 1 месяц квартала
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.02", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		// Перечислены взносы
		ПеречисленоСтраховой = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет69_02_1, Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		ПеречисленоНакопительной = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет69_02_2, Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		УстановитьЗначениеПоказателя("П000210001205", ПеречисленоСтраховой);
		УстановитьЗначениеПоказателя("П000210001206", ПеречисленоНакопительной);

		Если ЗначениеЗаполнено(мРаздел2.Области.П000020012005.Значение) Тогда
			УстановитьЗначениеПоказателя("П000210001204", (ПеречисленоСтраховой + ПеречисленоНакопительной) / мРаздел2.Области.П000020012005.Значение * мРаздел2.Области.П000020012006.Значение);
		Иначе 	
			УстановитьЗначениеПоказателя("П000210001204", 0);
		КонецЕсли;

		//**********************************************************************
		// Извлекаем данные за 2 месяц квартала
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.02", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		// Перечислены взносы
		ПеречисленоСтраховой = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет69_02_1, Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		ПеречисленоНакопительной = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет69_02_2, Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		УстановитьЗначениеПоказателя("П000210001305", ПеречисленоСтраховой);
		УстановитьЗначениеПоказателя("П000210001306", ПеречисленоНакопительной);
		
		Если ЗначениеЗаполнено(мРаздел2.Области.П000020013005.Значение) Тогда
			УстановитьЗначениеПоказателя("П000210001304", (ПеречисленоСтраховой + ПеречисленоНакопительной) / мРаздел2.Области.П000020013005.Значение * мРаздел2.Области.П000020013006.Значение);
		Иначе 	
			УстановитьЗначениеПоказателя("П000210001304", 0);
		КонецЕсли;
		
		//**********************************************************************
		// Извлекаем данные за 3 месяц квартала
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.02", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		// Перечислены взносы
		ПеречисленоСтраховой = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет69_02_1, Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		ПеречисленоНакопительной = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет69_02_2, Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		УстановитьЗначениеПоказателя("П000210001405", ПеречисленоСтраховой);
		УстановитьЗначениеПоказателя("П000210001406", ПеречисленоНакопительной);
		
		Если ЗначениеЗаполнено(мРаздел2.Области.П000020014005.Значение) Тогда
			УстановитьЗначениеПоказателя("П000210001404", (ПеречисленоСтраховой + ПеречисленоНакопительной) / мРаздел2.Области.П000020014005.Значение * мРаздел2.Области.П000020014006.Значение);
		Иначе 	
			УстановитьЗначениеПоказателя("П000210001404", 0);
		КонецЕсли;
		
		//**********************************************************************
		// Извлекаем данные за отчетный период
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаГода, ДатаКонца3МесяцаКвартала, , "69.02", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		// Перечислены взносы
		ПеречисленоСтраховой = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет69_02_1, Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		ПеречисленоНакопительной = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет69_02_2, Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		УстановитьЗначениеПоказателя("П000210001005", ПеречисленоСтраховой);
		УстановитьЗначениеПоказателя("П000210001006", ПеречисленоНакопительной);

		П000220040204 = ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010004.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021004.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022004.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220030004.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010104.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021104.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022104.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220030104.Значение);

		Если НЕ ФлажокОтклАвтоРасчет Тогда
			мРаздел22.Области.П000220040204.Значение = П000220040204;
		КонецЕсли;

		П000220040205 =  ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010005.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021005.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022005.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220030005.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220010105.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220021105.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220022105.Значение)
					  + ОкруглитьЧислоПоФормату(мРаздел22.Области.П000220030105.Значение);

		Если НЕ ФлажокОтклАвтоРасчет Тогда
			мРаздел22.Области.П000220040205.Значение = П000220040205;
		КонецЕсли;

		Если ЗначениеЗаполнено(П000220040204) Тогда
			УстановитьЗначениеПоказателя("П000210001004", (ПеречисленоСтраховой + ПеречисленоНакопительной) / П000220040204 * П000220040205);
		Иначе 	
			УстановитьЗначениеПоказателя("П000210001004", 0);
		КонецЕсли;
		
	КонецЕсли;
	
	// Раздел 2.3

	// Заполняется только для головной организации, имеющей обособленные подразделения.
	
	Если Организация = ГоловнаяОрганизация Тогда
		СписокОбособленныхПодразделенийОрганизации = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
		Если СписокОбособленныхПодразделенийОрганизации.Количество() <> 0 Тогда
			
			// РАСЧЕТ ПОКАЗАТЕЛЕЙ РАЗДЕЛА 2.3										  

			Запрос.УстановитьПараметр("СписокОбособленныхПодразделений", СписокОбособленныхПодразделенийОрганизации);
			
			// База ПФР по обособленным подразделениям организации 
			// НалоговаяБазаПоСпискуОбособленныхПодразделений
			//	База - налоговая база
			//	БазаОбщСН - налоговая база в части доходов не облагаемых ЕНВД  для месяцев на ОСН
			// Описание:
			//  Выбирает базу взновов ПФР 
			
			НалоговаяБазаПоСпискуОбособленныхПодразделений = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL((ВЫРАЗИТЬ(СУММА(ЕСНСведенияОДоходах.Результат - ЕСНСведенияОДоходах.Скидка) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель, 0) КАК База,
			|	ЕСТЬNULL((ВЫРАЗИТЬ(СУММА(ВЫБОР
			|					КОГДА ЕСНСведенияОДоходах.ОблагаетсяЕНВД
			|						ТОГДА 0
			|					КОГДА УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL 
			|						ТОГДА 0
			|					ИНАЧЕ ЕСНСведенияОДоходах.Результат - ЕСНСведенияОДоходах.Скидка
			|				КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель, 0) КАК БазаОбщСН
			|ИЗ
			|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизлицаБезНалоговойБазы КАК ФизлицаБезНалоговойБазы
			|		ПО ЕСНСведенияОДоходах.ФизЛицо = ФизлицаБезНалоговойБазы.Физлицо
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПравеНаПенсию КАК Иностранцы
			|		ПО ЕСНСведенияОДоходах.ФизЛицо = Иностранцы.Физлицо
			|			И (МЕСЯЦ(ЕСНСведенияОДоходах.Период) = Иностранцы.Месяц)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчетУСН
			|		ПО (МЕСЯЦ(ЕСНСведенияОДоходах.Период) = УчетнаяПолитикаНалоговыйУчетУСН.Месяц)
			|ГДЕ
			|	ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
			|	И ЕСНСведенияОДоходах.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет
			|	И ЕСНСведенияОДоходах.Организация = &парамГоловнаяОрганизация
			|	И ЕСНСведенияОДоходах.ОбособленноеПодразделение В(&СписокОбособленныхПодразделений)
			|	И ФизлицаБезНалоговойБазы.Физлицо ЕСТЬ NULL 
			|	И Иностранцы.Физлицо ЕСТЬ NULL ";
			Запрос.Текст = СтрЗаменить(НалоговаяБазаПоСпискуОбособленныхПодразделений,"ЧИСЛО(15, 3)","ЧИСЛО(15, " + ТочностьЕдиницыИзмерения + ")");
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				УстановитьЗначениеПоказателя("П000230001003",СтруктураИтоговыхДанных.База + Выборка.База);
				УстановитьЗначениеПоказателя("П000230001004",СтруктураИтоговыхДанных.БазаОбщСН + Выборка.БазаОбщСН);
				УстановитьЗначениеПоказателя("П000230001103",Выборка.База);
				УстановитьЗначениеПоказателя("П000230001104",Выборка.БазаОбщСН);
			КонецЕсли; 
			
			// Исчисленные налоги по обособленным подразделениям организации
			//	Накопительная - начислено на накопительную часть
			//	Страховая - начислено на страховую часть
			//	НакопительнаяОбщСН - начислено на накопительную часть с доходов не облагаемых ЕНВД
			//	СтраховаяОбщСН - начислено на страховую часть с доходов не облагаемых ЕНВД
			
			ЕСНИсчисленныйТекст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL((ВЫРАЗИТЬ(СУММА(ЕСНИсчисленный.ПФРНакопительная) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель, 0) КАК Накопительная,
			|	ЕСТЬNULL((ВЫРАЗИТЬ(СУММА(ЕСНИсчисленный.ПФРСтраховая) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель, 0) КАК Страховая,
			|	ЕСТЬNULL((ВЫРАЗИТЬ(СУММА(ВЫБОР
			|				КОГДА УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL 
			|					ТОГДА ЕСНИсчисленный.ПФРНакопительная - ЕСНИсчисленный.ПФРНакопительнаяЕНВД
			|				ИНАЧЕ 0
			|			КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель, 0) КАК НакопительнаяОбщСН,
			|	ЕСТЬNULL((ВЫРАЗИТЬ(СУММА(ВЫБОР
			|				КОГДА УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL 
			|					ТОГДА ЕСНИсчисленный.ПФРСтраховая - ЕСНИсчисленный.ПФРСтраховаяЕНВД
			|				ИНАЧЕ 0
			|			КОНЕЦ) / &Делитель КАК ЧИСЛО(15, 3))) * &Делитель, 0) КАК СтраховаяОбщСН
			|ИЗ
			|	РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчетУСН
			|		ПО (МЕСЯЦ(ЕСНИсчисленный.Период) = УчетнаяПолитикаНалоговыйУчетУСН.Месяц)
			|ГДЕ
			|	ЕСНИсчисленный.ОбособленноеПодразделение В(&СписокОбособленныхПодразделений)
			|	И ЕСНИсчисленный.Организация = &парамГоловнаяОрганизация
			|	И ЕСНИсчисленный.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода";
			Запрос.Текст = СтрЗаменить(ЕСНИсчисленныйТекст,"ЧИСЛО(15, 3)","ЧИСЛО(15, " + ТочностьЕдиницыИзмерения + ")");
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				УстановитьЗначениеПоказателя("П000230003003", СтруктураИтоговыхДанных.Страховая + Выборка.Страховая);
				УстановитьЗначениеПоказателя("П000230004003", СтруктураИтоговыхДанных.Накопительная + Выборка.Накопительная);
				УстановитьЗначениеПоказателя("П000230003004", СтруктураИтоговыхДанных.СтраховаяОбщСН + Выборка.СтраховаяОбщСН);
				УстановитьЗначениеПоказателя("П000230004004", СтруктураИтоговыхДанных.НакопительнаяОбщСН + Выборка.НакопительнаяОбщСН);
				УстановитьЗначениеПоказателя("П000230003103", Выборка.Страховая);
				УстановитьЗначениеПоказателя("П000230004103", Выборка.Накопительная);
				УстановитьЗначениеПоказателя("П000230003104", Выборка.СтраховаяОбщСН);
				УстановитьЗначениеПоказателя("П000230004104", Выборка.НакопительнаяОбщСН);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;

	Если ВсеДанные Тогда
		// Добавляем показатели в отчет из xml файла.
		ЗавершитьИмпортXMLФайлаВОтчет(мСтруктураДанныхОтчетаXMLКонтейнер );

		// -------------------------------------------------------------------------------
		// Расчет автовычисляемых полей

		Расчет();

		Модифицированность = Истина;

		// По окончании ЗаполнитьАвто будет запускаться Расчет с проставлением
		// связей внутри декларации. Не стирать!

		ПоследовательноеЗаполнениеЛистовДеклРасчет();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьАвто()

Процедура ЗаполнитьАвтоВнешний()  Экспорт

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ФлажокВнешДанные И НЕ ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		Предупреждение("Заполнение по данным информационной базы не предусмотрено!");
		Возврат;
	КонецЕсли;
	
	// запрашиваем подтверждение у пользователя и очищаем отчет
	ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма);
	Если ПрерватьАвтоЗаполнение Тогда
		Возврат;
	КонецЕсли;

	// формируем структуру с данными из внешнего файла, если установлен признак заполнения по внешним данным
	мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено;
	Если ФлажокВнешДанные Тогда
		мСтруктураДанныхОтчетаXMLКонтейнер = РегламентированнаяОтчетность.ИмпортироватьДанныеКонтейнераXML(ЭтаФорма);
		Если мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено Тогда
			Сообщить("Данные из XML файла не подходят для текущего отчета.", СтатусСообщения.Важное);
			Сообщить("Необходимо проверить период отчета и организацию (ИНН/КПП).", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	
	// заполняем содержательную часть
	Если ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		ПараметрыОтчета = РегламентированнаяОтчетность.СформироватьСтруктуруПараметровОтчетаДляЗаполнения(ЭтаФорма);
		ПараметрыОтчета.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		ПараметрыОтчета.Вставить("ТочностьЕдиницыИзмерения", ТочностьЕдиницыИзмерения);
		ДанныеЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьДанныеЗаполненияОтчета(ЭтаФорма, , мВыбраннаяФорма, , ПараметрыОтчета);
		Если ТипЗнч(ДанныеЗаполненияОтчета) = Тип("ДеревоЗначений") Тогда
			Для Каждого СтрУровня1 Из ДанныеЗаполненияОтчета.Строки Цикл
				Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
					УстановитьЗначениеПоказателя(СтрУровня2.Имя, СтрУровня2.Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// добавляем показатели в внешнего файла
	ЗавершитьИмпортXMLФайлаВОтчет(мСтруктураДанныхОтчетаXMLКонтейнер);

	Расчет();
	
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);


КонецПроцедуры

// ЗавершитьИмпортXMLфайлаВОтчет
//
Процедура ЗавершитьИмпортXMLфайлаВОтчет(СтруктураДанныхОтчетаXMLКонтейнер)
	Если СтруктураДанныхОтчетаXMLКонтейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Перебор по страницам.
	Инд = 0;
	Для каждого Раздел Из СтруктураДанныхОтчетаXMLКонтейнер.ДанныеРазделовОтчета Цикл

		ИмяРаздела = ОпределитьИмяРазделаПриИмпорте(Раздел.Данные[0].СтруктураДанных);

		Если ИмяРаздела = Неопределено Тогда
			// Не удалось по показателю определить имя раздела декларации.
			Продолжить;
		КонецЕсли;

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяРаздела, "ПредставлениеДанных", Ложь);
		МногостраничностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяРаздела, "МногостраничностьВРазделе", Ложь);
		МногострочностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяРаздела, "МногострочностьВРазделе", 0);

		Для каждого Срез Из Раздел.Данные Цикл

			ПеременныеОбновлены = Ложь;

			Для каждого ПоказательОтчета Из Срез.СтруктураДанных Цикл

				Показатель = ПоказательОтчета.Ключ;
				Значение = СокрЛП(ПоказательОтчета.Значение);

				НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(Показатель, мПоляПоискаПоказателяВТСП);

				Если НайденнаяСтрока = Неопределено Тогда
					// Либо показателя нет, или он в квадратах
					Если ИмяРаздела = "Раздел1" Тогда
						Если (Найти(Показатель, "Сумма") = 1) И 
						     (Найти(Показатель,"Раздел1") > 0) Тогда
							ТипДанных = "Е";
						ИначеЕсли (Показатель = "КБКРаздел1_1")
						      Или (Показатель = "КБКРаздел1_2")
						      Или  (Показатель = "КодПлательщикаРаздел1")
						      Или  (Показатель = "ОКАТОРаздел1") Тогда
							ТипДанных = "С";
						Иначе
							// Показателя нет в составе показателей и нет в квадратных ячейках.
							Продолжить;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					ТипДанных = НайденнаяСтрока.ТипДанныхПоказателя;
				КонецЕсли;

				Если ТипДанных = "Е" Или ТипДанных = "E" Или ТипДанных = "Ч" Тогда
					Значение = ?(РегламентированнаяОтчетность.роЯвляетсяЧислом(Значение), Число(Значение), 0);
				ИначеЕсли ТипДанных = "Д" Тогда
					Если РегламентированнаяОтчетность.ПустоеЗначение(Значение) Тогда
						Значение = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
					Иначе
						Год = Прав(Значение, 4);
						Мес = Сред(Значение, 4, 2);
						День = Лев(Значение, 2);
						Значение = Год + Мес + День;

						Значение = ?(РегламентированнаяОтчетность.роЯвляетсяДатой(Значение), Дата(Значение), ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")));
					КонецЕсли;
				КонецЕсли;

				ДанныеИмпортированы = Истина;
				Если ПредставлениеДанных Тогда
					Если ОбновитьПеременныеМодуля(Показатель, Значение) Тогда
						ПеременныеОбновлены = Истина;
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				Попытка
					РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, Показатель, Значение);
				Исключение
					Сообщить("Показатель " + Показатель + " не проимпортирован!", СтатусСообщения.ОченьВажное);
				КонецПопытки;

			КонецЦикла;

			Если ПеременныеОбновлены Тогда
				ОтобразитьДанныеВКвадратиках(ИмяРаздела);
			КонецЕсли;

		КонецЦикла;
	КонецЦикла;
КонецПроцедуры // ЗавершитьИмпортXMLфайлаВОтчет

// УстановитьЗначениеПоказателя
// Процедура "прослойка". Она обрабатывает показатель с учетом источника данных ИБ и XML контейнера.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя)
	// Вызываем процедуру, которая обработает показатель на предмет присутствия в XML контейнере.
	// Если в xml нет такого показателя, то установится из ИБ. Если есть, то из XML.
	РегламентированнаяОтчетность.УстановитьПоказательСУчетомXML(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
КонецПроцедуры // УстановитьЗначениеПоказателя

// НачальнаяПодготовкаФормы
//
Процедура НачальнаяПодготовкаФормы() Экспорт 

	мСтараяВерсияФормы = мВерсияФормы;

	мАвтоВыборКодов = Ложь;

	мТитульный   = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мФизЛица     = ЭлементыФормы.ПолеТабличногоДокументаФизЛица;
	мРаздел1     = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	мРаздел2     = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;
	мРаздел21    = ЭлементыФормы.ПолеТабличногоДокументаРаздел21;
	мРаздел22    = ЭлементыФормы.ПолеТабличногоДокументаРаздел22;
	мРаздел23    = ЭлементыФормы.ПолеТабличногоДокументаРаздел23;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	мВПрограммеИзмененаОрганизация = Ложь;
	мДокументВосстановлен = Ложь;

	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления();

	ЗагрузитьПоказателиИзМакета("ТипНалогоплательщика2006Кв1");

	// Установим маски на ввод только чисел.
	РегламентированнаяОтчетность.СтандратныеОперацииПоУстановкамМасок(ЭтаФорма);

	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			// В данной декларации лист с данными физ. лиц скрыт и по умолчанию не печатается.
			РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

			мТитульный.Области.ВидДок.Значение = "1";

			КодПлательщика = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация), "30", "10");
			Если ОбновитьПеременныеМодуля("КодПлательщикаРаздел1", КодПлательщика) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "ТипНП", 2, КодПлательщика);
			КонецЕсли;

			УстановитьФорматВывода();
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	// ИНИЦИАЛИЗАЦИЯ ЗАПОЛНЕНИЯ СОДЕРЖАТЕЛЬНОЙ ЧАСТИ ПО УЧЕТНЫМ ДАННЫМ
	
	СвойстваЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьСвойстваЗаполненияОтчета(ЭтотОбъект, мВыбраннаяФорма);
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда 
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета);
	КонецЕсли;
	Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ") Тогда
		//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
		ИзМакета = Истина;
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	
	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		УправлениеЛистами();
		ПолучитьИННКПП();
	КонецЕсли;

	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда
			Продолжить;
		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

КонецПроцедуры // НачальнаяПодготовкаФормы

// Инициализация
//
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	Если НЕ БезОткрытияФормы Тогда
		Если ИДКонфигурации = "ЗУП" ИЛИ ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "ЗБУ" ИЛИ ИДКонфигурации = "БГУ" Тогда
			ЭлементыФормы.ФлажокВнешДанные.Видимость = Ложь;
			ФлажокВнешДанные = Ложь;
		КонецЕсли;
	КонецЕсли;

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	ФормироватьСтруктуруСвойствСтраниц();

	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	КонецЕсли;

	НачальнаяПодготовкаФормы();

	Если СвойстваЗаполненияОтчета = Неопределено Тогда  
		
		Если ИДКонфигурации <> "ЗУП" Тогда
			РегламентированнаяОтчетность.УдалитьКнопкуРасшифровки(ЭтаФорма, "Расшифровать");
		КонецЕсли;
	КонецЕсли;
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // Инициализация
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт

	Страница = СтрЗаменить(ИмяРаздела, "ПолеТабличногоДокумента", "");

	Если Страница = "Раздел1" Тогда
		мКодПлательщикаРаздел1 = "";
		мОКАТОРаздел1 = "";

		// Переменные первого раздела, входят в многострочную часть
		мКБКРаздел1_1     =  "";
		мСумма1Раздел1_1  =  0;
		мСумма2Раздел1_1  =  0;
		мСумма3Раздел1_1  =  0;

		мКБКРаздел1_2     =  "";
		мСумма1Раздел1_2  =  0;
		мСумма2Раздел1_2  =  0;
		мСумма3Раздел1_2  =  0;
		мСумма0Раздел1_1  =  0;
		мСумма0Раздел1_2  =  0;

	КонецЕсли;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоСтраницОтчета();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	Если СвойстваЗаполненияОтчета = Неопределено Тогда  
		ЗаполнитьАвтоВнутренний();
	Иначе
		ЗаполнитьАвтоВнешний();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

// Расшифровывает ячейки отчета
//
Процедура КоманднаяПанельФормыРасшифровать(Кнопка)

Если СвойстваЗаполненияОтчета = Неопределено Тогда  
  РасшифроватьВнутренний();
 Иначе
  РасшифроватьВнешний();
КонецЕсли;

КонецПроцедуры

// Расшифровывает ячейки отчета
//
Процедура РасшифроватьВнутренний() Экспорт
	
	ОтчетРасшифровки = Отчеты.АнализНачисленныхНалоговИВзносов.Создать();
	ОтчетРасшифровкиФорма = ОтчетРасшифровки.ПолучитьФорму("ФормаОтчета", ЭтаФорма);	
	
	ОтчетРасшифровкиФорма.ЭтоОтработкаРасшифровки = истина;
	
	Поле         = "";
	ИмяЯчейки    = "";
	НомерРаздела = "";
	НомерСтроки  = "";
	НомерКолонки = "";
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Раздел2" Тогда
		ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаРаздел2.ТекущаяОбласть;
		ИмяЯчейки	   = ТекущаяОбласть.Имя;
		НомерРаздела   = "2";
		НомерТаблицы   = Сред(ИмяЯчейки, 8, 2);
		НомерСтроки    = Сред(ИмяЯчейки, 10, 2);
		НомерКолонки   = Прав(ИмяЯчейки, 2);

		Если НомерКолонки = "03" и НомерТаблицы = "04" тогда
			Возврат;
		КонецЕсли;
		
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "Организация",    Организация);
		
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "НеГражданин", истина,  ВидСравненияКомпоновкиДанных.НеРавно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "ИмеетПравоНаПенсию", истина,  ВидСравненияКомпоновкиДанных.Равно);
		ГруппаИЛИ = ОтчетРасшифровки.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИЛИ.Использование = Истина;
		ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ТиповыеОтчеты.ДобавитьОтбор(ГруппаИЛИ, "ЕСН.ФБ.НомерСтрокиСтавокФБ", 1);
		ТиповыеОтчеты.ДобавитьОтбор(ГруппаИЛИ, "ЕСН.ФБ.НомерСтрокиСтавокФБ", 2);
		ТиповыеОтчеты.ДобавитьОтбор(ГруппаИЛИ, "ЕСН.ФБ.НомерСтрокиСтавокФБ", 3);
	
		ОтчетРасшифровки.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ОтчетРасшифровки.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		
		// установим период формирования отчета
		Если НомерСтроки = "00" тогда
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "КонецПериода",  мДатаКонцаПериодаОтчета);
		ИначеЕсли НомерСтроки = "10" тогда
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "НачалоПериода", НачалоКвартала(мДатаКонцаПериодаОтчета));
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "КонецПериода",  мДатаКонцаПериодаОтчета);
		ИначеЕсли НомерСтроки = "20" тогда
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "НачалоПериода", НачалоКвартала(мДатаКонцаПериодаОтчета));
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "КонецПериода",  КонецМесяца(НачалоКвартала(мДатаКонцаПериодаОтчета)));
		ИначеЕсли НомерСтроки = "30" тогда
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "НачалоПериода", КонецМесяца(НачалоКвартала(мДатаКонцаПериодаОтчета))+1);
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "КонецПериода",  НачалоМесяца(мДатаКонцаПериодаОтчета)-1);
		ИначеЕсли НомерСтроки = "40" тогда
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "НачалоПериода", НачалоМесяца(мДатаКонцаПериодаОтчета));
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "КонецПериода",  мДатаКонцаПериодаОтчета);
		КонецЕсли;
		
		Если НомерТаблицы = "01" тогда
			Поле = Поле + "ЕСН.ФБ.БазаСУчетомСкидкиФБ";
		ИначеЕсли НомерТаблицы = "02" тогда
			Поле = Поле + "ПФР.НачисленоПФРСЕНВД";
		ИначеЕсли НомерТаблицы = "03" тогда
			Поле = Поле + "ПФР.НачисленоПФРСтраховаяСЕНВД";
		ИначеЕсли НомерТаблицы = "04" тогда
			Поле = Поле + "ПФР.НачисленоПФРНакопительнаяСЕНВД";
		КонецЕсли;
		
		Если НомерКолонки = "03" тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "ВозрастнаяГруппа", "до1967");
		ИначеЕсли НомерКолонки = "04" тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "ВозрастнаяГруппа", "от1967");
		КонецЕсли;
		
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "Пояснение", "По данным в учете");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "Сотрудник");
		Если НомерТаблицы = "01" тогда
			ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "ВидРасчета");
		КонецЕсли;
		Если Поле = "" тогда
			Предупреждение("Расшифровка данного раздела не поддерживается");
			Возврат;		
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетРасшифровки.КомпоновщикНастроек, Поле);
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Раздел22" Тогда
		ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаРаздел22.ТекущаяОбласть;
		ИмяЯчейки	   = ТекущаяОбласть.Имя;		
		НомерРаздела   = "22";
		НомерТаблицы   = Сред(ИмяЯчейки, 8, 2);
		НомерСтроки    = Сред(ИмяЯчейки, 10, 2);
		НомерКолонки   = Прав(ИмяЯчейки, 2);
		
		Если НомерТаблицы = "02" и (НомерСтроки = "10" или НомерСтроки = "11" или НомерСтроки = "12") тогда
			Возврат;
		КонецЕсли;
		
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "Организация",    Организация);
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "КонецПериода",  мДатаКонцаПериодаОтчета);
		
		ОтчетРасшифровки.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ОтчетРасшифровки.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		Если НомерКолонки = "04" или НомерКолонки = "05" тогда
			Поле = "ЕСН.ФБ.БазаСУчетомСкидкиФБ";
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "Пояснение", "По данным в учете");
			ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "ПериодРегистрации");
			ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "Сотрудник");
			ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "ВидРасчета");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетРасшифровки.КомпоновщикНастроек, Поле);
			Если НомерКолонки = "05" тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "ЕСН.ОблагаетьсяЕНВД", ложь);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "ЕСН.УСН", ложь);
			КонецЕсли;
		ИначеЕсли НомерКолонки = "07" или НомерКолонки = "06"  тогда
			Группировка                 = ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "Сотрудник.ФизЛицо");
			ВыбранноеПоле               = Группировка.Выбор.Элементы.Вставить(0, Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("SystemFields.GroupSerialNumber");
			ВыбранноеПоле.Использование = истина;
			Если НомерКолонки = "07" тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "ЕСН.ОблагаетьсяЕНВД", ложь);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "ЕСН.УСН", ложь);
			КонецЕсли;
		КонецЕсли;
		
		Если НомерТаблицы = "01" тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "ЕСН.ФБ.НомерСтрокиСтавокФБ", 1);
		ИначеЕсли НомерТаблицы = "02" тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "ЕСН.ФБ.НомерСтрокиСтавокФБ", 2);
		ИначеЕсли НомерТаблицы = "03" тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "ЕСН.ФБ.НомерСтрокиСтавокФБ", 3);
		ИначеЕсли НомерТаблицы = "04" тогда
			ГруппаИЛИ = ОтчетРасшифровки.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИЛИ.Использование = Истина;
			ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаИЛИ, "ЕСН.ФБ.НомерСтрокиСтавокФБ", 1);
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаИЛИ, "ЕСН.ФБ.НомерСтрокиСтавокФБ", 2);
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаИЛИ, "ЕСН.ФБ.НомерСтрокиСтавокФБ", 3);
	    КонецЕсли;
	
		Если НомерСтроки = "00" тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "ВозрастнаяГруппа", "до1967");
		ИначеЕсли НомерСтроки = "01" тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "ВозрастнаяГруппа", "от1967");
		КонецЕсли;
		
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Раздел23" Тогда
		ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаРаздел23.ТекущаяОбласть;
		ИмяЯчейки	   = ТекущаяОбласть.Имя;		
		НомерРаздела   = "23";
		НомерТаблицы   = Сред(ИмяЯчейки, 8, 2);
		НомерСтроки    = Сред(ИмяЯчейки, 10, 2);
		НомерКолонки   = Прав(ИмяЯчейки, 2);
		
		Если НомерСтроки = "10" или НомерСтроки = "20" или НомерСтроки = "30" или НомерСтроки = "40" тогда
			ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
			СписокОбособленныхПодразделенийОрганизации = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
			СписокОбособленныхПодразделенийОрганизации.Добавить(ГоловнаяОрганизация);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "Организация", СписокОбособленныхПодразделенийОрганизации, ВидСравненияКомпоновкиДанных.ВСписке);
		Иначе
			ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
			СписокОбособленныхПодразделенийОрганизации = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "Организация", СписокОбособленныхПодразделенийОрганизации, ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
		
		           
		ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетРасшифровки.КомпоновщикНастроек, "КонецПериода",  мДатаКонцаПериодаОтчета);
		
		ОтчетРасшифровки.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ОтчетРасшифровки.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		
		Поле = "";
		Если НомерСтроки = "11" или НомерСтроки = "10" тогда
			Поле = "ЕСН.ФБ." + Поле + "БазаФБ";
			//ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "НеГражданин", истина, ВидСравненияКомпоновкиДанных.НеРавно);
		ИначеЕсли НомерСтроки = "21" или НомерСтроки = "20" тогда
			Поле = "ПФР." + Поле + "НачисленоПФРСЕНВД";
		ИначеЕсли НомерСтроки = "31" или НомерСтроки = "30" тогда
			Поле = "ПФР." + Поле + "НачисленоПФРСтраховаяСЕНВД";
		ИначеЕсли НомерСтроки = "41" или НомерСтроки = "40" тогда
			Поле = "ПФР." + Поле + "НачисленоПФРНакопительнаяСЕНВД";
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетРасшифровки.КомпоновщикНастроек, Поле);
		
		Если НомерСтроки = "11" или НомерСтроки = "10" тогда
			ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "Пояснение");
			ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "Организация");
			ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "ПериодРегистрации");
			ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "Сотрудник");
			ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "ВидРасчета");
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "Пояснение", "По данным в учете");
			ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "ПериодРегистрации");
			ТиповыеОтчеты.ДобавитьГруппировку(ОтчетРасшифровки.КомпоновщикНастроек, "Сотрудник");
		КОнецЕсли;
	
		Если НомерКолонки = "04" тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "ЕСН.ОблагаетьсяЕНВД", ложь);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасшифровки.КомпоновщикНастроек, "ЕСН.УСН", ложь);
		КонецЕсли;
		
	Иначе
		Предупреждение("Расшифровка данного раздела не поддерживается");
		Возврат;		
	КонецЕсли;
		
	Если Найти(ИмяЯчейки,"R") > 0 Тогда
		Предупреждение("Расшифровка данной ячейки не поддерживается");
		Возврат;
	КонецЕсли;

	// установи отбор, что бы не показывались пустые строки в отчете
	МассивГруппировокОтчета = ТиповыеОтчеты.ПолучитьПоляГруппировок(ОтчетРасшифровки.КомпоновщикНастроек);
	Для каждого ПолеГруппировки из МассивГруппировокОтчета Цикл
		Группировка = ТиповыеОтчеты.ПолучитьЭлементСтруктурыПоПолюГруппировки(Новый ПолеКомпоновкиДанных(ПолеГруппировки.Значение), ОтчетРасшифровки.КомпоновщикНастроек);
		ТиповыеОтчеты.ДобавитьОтбор(Группировка.Отбор, Поле, 0, ВидСравненияКомпоновкиДанных.НеРавно);
		ПараметрВывода = Группировка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("FilterOutput"));
		ПараметрВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		ПараметрВывода.Использование = истина;
	КонецЦикла;
	ОтчетРасшифровкиФорма.ОбновитьОтчет();
	ОтчетРасшифровкиФорма.Открыть();	
	
КонецПроцедуры //КоманднаяПанельФормыРасшифровать

Процедура РасшифроватьВнешний()

	Если СвойстваЗаполненияОтчета <> Неопределено Тогда
		СвойстваЗаполненияОтчета.ИсточникЗаполнения.ВывестиОтчетРасшифровку("РегламентированныйОтчетПФР", ЭтотОбъект, ЭтаФорма);	
	КонецЕсли;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеТабличногоДокументаРаздел2Выбор
//
Процедура ПолеТабличногоДокументаРаздел2Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел2Выбор

// ПолеТабличногоДокументаРаздел21Выбор
//
Процедура ПолеТабличногоДокументаРаздел21Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел21Выбор

// ПолеТабличногоДокументаРаздел22Выбор
//
Процедура ПолеТабличногоДокументаРаздел22Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел22Выбор

// ПолеТабличногоДокументаРаздел23Выбор
//
Процедура ПолеТабличногоДокументаРаздел23Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел23Выбор

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный, "ВидДок", "НомКоррект");

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

Процедура ПолеТабличногоДокументаФизЛицаПриИзменении(Элемент)

	Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(Элемент.Значение) Тогда
		стрУказаннаяДата = Формат(ДатаПодписи, "ДФ=""ддММгггг""");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ДатаПодписи", 8, стрУказаннаяДата);
	Иначе
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ДатаПодписи", 8, "        ");
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "Выбор" поля табличного документа
// на странице "Физ. лица" основной панели формы.
// Вызывается при двойном щелчке на ячейку.
//
Процедура ПолеТабличногоДокументаФизЛицаВыбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ВРегОбластьИмя = Лев(ВРег(Область.Имя), 13);
	Если (Найти(Область.Имя, "ФизЛицИнд") > 0)
	   Или (Область.Имя = "ФизЛицСубъект")
	   Или (Область.Имя = "ФизЛицРайон")
	   Или (Область.Имя = "ФизЛицГород")
	   Или (Область.Имя = "ФизЛицС1")
	   Или (Область.Имя = "ФизЛицС2")
	   Или (Область.Имя = "ФизЛицНП")
	   Или (Область.Имя = "ФизЛицУлица")
	   Или (Область.Имя = "ФизЛицДом")
	   Или (Область.Имя = "ФизЛицКорпус")
	   Или (Область.Имя = "ФизЛицКвартира") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВводаАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");

		СтруктураАдресныхДанных = Новый Структура;

		СтруктураАдресныхДанных.Вставить("Индекс", мФизЛица.Области.ФизЛицИнд1.Значение
		   + мФизЛица.Области.ФизЛицИнд2.Значение
		   + мФизЛица.Области.ФизЛицИнд3.Значение
		   + мФизЛица.Области.ФизЛицИнд4.Значение
		   + мФизЛица.Области.ФизЛицИнд5.Значение
		   + мФизЛица.Области.ФизЛицИнд6.Значение);

		СтруктураАдресныхДанных.Вставить("Регион", мФизЛица.Области.ФизЛицС1.Значение
		   + мФизЛица.Области.ФизЛицС2.Значение);

		СтруктураАдресныхДанных.Вставить("НазваниеРегиона", мФизЛица.Области.ФизЛицСубъект.Значение);

		СтруктураАдресныхДанных.Вставить("Район", мФизЛица.Области.ФизЛицРайон.Значение);
		СтруктураАдресныхДанных.Вставить("Город", мФизЛица.Области.ФизЛицГород.Значение);
		СтруктураАдресныхДанных.Вставить("НаселенныйПункт", мФизЛица.Области.ФизЛицНП.Значение);
		СтруктураАдресныхДанных.Вставить("Улица", мФизЛица.Области.ФизЛицУлица.Значение);
		СтруктураАдресныхДанных.Вставить("Дом", мФизЛица.Области.ФизЛицДом.Значение);
		СтруктураАдресныхДанных.Вставить("Корпус", мФизЛица.Области.ФизЛицКорпус.Значение);
		СтруктураАдресныхДанных.Вставить("Квартира", мФизЛица.Области.ФизЛицКвартира.Значение);

		ФормаВводаАдреса.НачальноеЗначениеВыбора = СтруктураАдресныхДанных;

		Если ФормаВводаАдреса.ОткрытьМодально() Тогда

			Индекс = "";
			Регион = "";
			НазваниеРегиона = "";
			Район = "";
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Дом = "";
			Корпус = "";
			Квартира = "";

			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Индекс", Индекс);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Регион", Регион);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НазваниеРегиона", НазваниеРегиона);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Район", Район);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Город", Город);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("НаселенныйПункт", НаселенныйПункт);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Улица", Улица);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Дом", Дом);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Корпус", Корпус);
			ФормаВводаАдреса.НачальноеЗначениеВыбора.Свойство("Квартира", Квартира);

			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицИнд", 6, Индекс);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "ФизЛица", "ФизЛицС", 2, Регион);

			мФизЛица.Области.ФизЛицСубъект.Значение = НазваниеРегиона;
			мФизЛица.Области.ФизЛицРайон.Значение = Район;
			мФизЛица.Области.ФизЛицГород.Значение = Город;
			мФизЛица.Области.ФизЛицНП.Значение = НаселенныйПункт;
			мФизЛица.Области.ФизЛицУлица.Значение = Улица;

			мФизЛица.Области.ФизЛицДом.Значение = Дом;
			мФизЛица.Области.ФизЛицКорпус.Значение = Корпус;
			мФизЛица.Области.ФизЛицКвартира.Значение = Квартира;
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли (ВРегОбластьИмя = "ФИЗЛИЦДОКДАТА") ИЛИ (ВРегОбластьИмя = "ФИЗЛИЦДАТАРОЖ") Тогда

		СтандартнаяОбработка = Ложь;

		ШаблонИмениЯчейки = Лев(Область.Имя, СтрДлина(Область.Имя) - 1);

		стрУказаннаяДата = Элемент.Области[ШаблонИмениЯчейки + "5"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "6"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "7"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "8"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "3"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "4"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "1"].Значение
		                 + Элемент.Области[ШаблонИмениЯчейки + "2"].Значение;

		Если ПустаяСтрока(стрУказаннаяДата) Тогда
			стрУказаннаяДата = "00010101000000";
		Иначе
			стрУказаннаяДата = стрУказаннаяДата + "000000";
		КонецЕсли;

		УказанннаяДата = Дата(стрУказаннаяДата);

		Если ВвестиДату(УказанннаяДата, "Введите дату", ЧастиДаты.Дата) Тогда

			стрУказаннаяДата = Формат(УказанннаяДата, "ДФ=""ддММгггг""");

			Для Поз = 1 По 8 Цикл
				Элемент.Области[ШаблонИмениЯчейки + Поз].Значение = Сред(стрУказаннаяДата, Поз, 1);
			КонецЦикла;

			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаФизЛицаВыбор()

Процедура ВыполнитьИзменениеТочностиПоказателей()

	РегламентированнаяОтчетность.ПроверитьТочность(ЭтаФорма);
	УстановитьФорматВывода();

	// перезаполним поля "за месяц", "за квартал" и "за отчетный период" по данным ИБ, применяя  
	// новое округление к показателям, рассчитываемым нарастающим итогом
	ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИдКонф <> "ББУ" И ИдКонф <> "БГУ" И НЕ ФлажокВнешДанные Тогда
		ТекстВопроса = "Для получения точных значений показателей, рассчитываемых нарастающим итогом за отчетный период, рекомендуется перезаполнить эти показатели по данным информационной базы.";
		ТекстВопроса = ТекстВопроса + Символы.ПС + "Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаполнитьАвтоВнутренний(Ложь); 
		КонецЕсли;
	КонецЕсли;
	
	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	ПоследовательноеЗаполнениеЛистовДеклРасчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	Если СвойстваЗаполненияОтчета = Неопределено Тогда  
		ВыполнитьИзменениеТочностиПоказателей();
		
	Иначе
		ПроверитьТочность();
		УстановитьФорматВывода();
		
		// Итоговые поля надо пересчитывать, потому что при расчете они округлются
		// в соответствии с установленной единицей изменения и точностью.
		ПоследовательноеЗаполнениеЛистовДеклРасчет();
		
		Модифицированность = Истина;
	КонецЕсли
           
КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	Если СвойстваЗаполненияОтчета = Неопределено Тогда  
		ВыполнитьИзменениеТочностиПоказателей();
	Иначе
		ПроверитьТочность();
		УстановитьФорматВывода();
		
		// Итоговые поля надо пересчитывать, потому что при расчете они округлются
		// в соответствии с установленной единицей изменения и точностью.
		ПоследовательноеЗаполнениеЛистовДеклРасчет();
		
		Модифицированность = Истина;
	КонецЕсли;
	

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// КнопкаДобавитьДопСтраницуФизЛицаНажатие
//
Процедура КнопкаДобавитьДопСтраницуФизЛицаНажатие(Элемент)
	ВставитьДополнительнуюСтраницу("ФизЛица");
КонецПроцедуры // КнопкаДобавитьДопСтраницуФизЛицаНажатие

// КнопкаУдалитьДопСтраницуФизЛицаНажатие
//
Процедура КнопкаУдалитьДопСтраницуФизЛицаНажатие(Элемент)
	УдалитьДополнительнуюСтраницу("ФизЛица");
КонецПроцедуры // КнопкаУдалитьДопСтраницуФизЛицаНажатие

// КнопкаПерейтиНаСтраницуФизЛицаНажатие
//
Процедура КнопкаПерейтиНаСтраницуФизЛицаНажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

КонецПроцедуры // КнопкаПерейтиНаСтраницуФизЛицаНажатие

// КнопкаПредыдущаяСтраницаФизЛицаНажатие
//
Процедура КнопкаПредыдущаяСтраницаФизЛицаНажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "ФизЛица");
КонецПроцедуры // КнопкаПредыдущаяСтраницаФизЛицаНажатие

// КнопкаСледующаяСтраницаФизЛицаНажатие
//
Процедура КнопкаСледующаяСтраницаФизЛицаНажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "ФизЛица");
КонецПроцедуры // КнопкаСледующаяСтраницаФизЛицаНажатие

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении

// ПолеТабличногоДокументаТитульныйВыбор
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если (Найти(Область.Имя, "РегНомерПФР") > 0) Тогда
		ПФР = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "РегНомерПФР");
		ПФР = Сред(ПФР, 1, 3) + "-" + Сред(ПФР, 4, 3) + "-" + Сред(ПФР, 7);
		ПФР = ?(ПФР = "--", "", ПФР);
		Если ВвестиСтроку(ПФР, "Введите рег. номер страхователя", 14) Тогда
			ПФР = Сред(ПФР, 1, 3) + Сред(ПФР, 5, 3) + Сред(ПФР, 9);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "РегНомерПФР", 14, ПФР);
			Модифицированность = Истина;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФизЛица";
	СтрокаУровня1.Представление            = "Сведения о физических лицах";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаФизЛица";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 0;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел21";
	СтрокаУровня1.Представление            = "Раздел 2.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел21";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел22";
	СтрокаУровня1.Представление            = "Раздел 2.2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел22";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел23";
	СтрокаУровня1.Представление            = "Раздел 2.3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел23";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ФизЛица";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "ФизЛицФИО";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела1_2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел21";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел22";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел23";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			// КодПоказателя по структуре , под 9-й колонке
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре    = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Загружает данные из Списков
// Параметры:
// РазделвМакете - раздел в макете
// КодДляКБКБюджет - код для кбк, чтоб выбор был из соответствующих бюджетов
//
Процедура ЗагрузитьПоказателиИзМакета (РазделВМакете, КодДляКБКБюджет = Неопределено)

	МакетСоставаПоказателей = ПолучитьМакет("Списки");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	// Очистим
	Если РазделВМакете = "КБК2005Раздел1" Тогда

		Если мКБК2005Раздел1 <> Неопределено Тогда
			Если мКБК2005Раздел1.Количество() > 0 Тогда
				мКБК2005Раздел1.Очистить();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Если ТекОбласть <> Неопределено Тогда

		НеобходимоДобавитьСтроку = Неопределено;

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.

			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда

				Прервать;

			Иначе

				Если (РазделВМакете = "КБК2005Раздел1") И (КодПоказателя = "") Тогда

					НеобходимоДобавитьСтроку = Истина; // Пустое значение

				ИначеЕсли (РазделВМакете = "КБК2005Раздел1") И (КодДляКБКБюджет = 1) Тогда

					Если КодПоказателя = "18210202010061000160" Тогда
						НеобходимоДобавитьСтроку = Истина;
					КонецЕсли;

				ИначеЕсли (РазделВМакете = "КБК2005Раздел1") И (КодДляКБКБюджет = 2) Тогда

					Если КодПоказателя = "18210202020061000160" Тогда
						НеобходимоДобавитьСтроку = Истина;
					КонецЕсли;

				ИначеЕсли РазделВМакете = "ТипНалогоплательщика2006Кв1" Тогда

					НовСтрока = мТипНалогоплательщика.Добавить();

				КонецЕсли;

					Если НеобходимоДобавитьСтроку <> Неопределено Тогда

						Если НеобходимоДобавитьСтроку Тогда
							НовСтрока = мКБК2005Раздел1.Добавить();
							НовСтрока.Код= КодПоказателя;
							НовСтрока.Название = Название;
							НеобходимоДобавитьСтроку = Ложь;
						КонецЕсли;

					Иначе
						НовСтрока.Код= КодПоказателя;
						НовСтрока.Название = Название;

					КонецЕсли;

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ЗагрузитьПоказателиИзМакета

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Функция возвращает структуру с показателями титульного листа и листов раздела "ФизЛица"
//
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак вывода сообщений в окно сообщений
//
// Возвращаемое значение:
//	Структура - данные с титульного листа и листа "ФизЛица"
//
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
	
	СтруктураМногостраничныхРазделов = Неопределено;
	Если БратьИзФормы Тогда
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
		ПоказателиОтчета = Новый Структура();
		Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЦикла;
	Иначе
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	КонецЕсли;
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	
	Возврат СписокДляВозврата;
	
КонецФункции

// Процедура добавляет строку в таблицу сообщений, заполняемую по ходу проверки правильности 
// заполнения показателей перед выгрузкой
//
// Параметры:
//	Описание - строка, описание ошибки
//	Раздел - строка, имя раздела, при проверке которого произошла ошибка
//	ИмяЯчейки - строка, имя области табличного документа, соответвующей неверно заполненному показателю
//	ФИО - строка, ФИО физлица. Заполняется для раздела "ФизЛица"
//
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры
	
// Функция проверяет правильность заполнения титульного листа и листов раздела "ФизЛица".
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	//определение источников данных для проверки
	Если БратьИзформы Тогда
	     Орг = Организация;
	Иначе
		Если мСохраненныйДок = Неопределено Тогда
			Если ВыводитьСообщения Тогда
				Сообщить("Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		Данные = мСохраненныйДок.ДанныеОтчета.Получить();
		Если Данные = Неопределено Тогда
			Если ВыводитьСообщения Тогда
				Сообщить("Источник данных для формирования отчета не определен!", СтатусСообщения.Важное);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		Орг = мСохраненныйДок.Организация;
	КонецЕсли;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы, ВыводитьСообщения);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	//Определим основные показатели
	ОргКПП = Орг.КПП;
	ОргИНН = Орг.ИНН;
	ОргНазв = ПоказателиТитульный.ОргНазв;
	КатегорияНП = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг), 2, 1);
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер = ПоказателиТитульный.ОргБухгалтер;
	РегНомПФР = СокрЛП(ПоказателиТитульный.РегНомерПФР);
	
	Если НЕ ЗначениеЗаполнено(РегНомПФР) Тогда
		Если ВыводитьСообщения Тогда
			СообщитьВТС("Не задан регистрационный номер страхователя!", "Титульный", "РегНомерПФР");
		КонецЕсли;
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если КатегорияНП = 1 Тогда
		Если РабочаяДата >= '20080101' Тогда
			Если ПустаяСтрока(ОргДиректор) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не задано Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(ОргДиректор) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не указаны Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");  
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;  
			Если ПустаяСтрока(ОргБухгалтер) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не указаны Ф.И.О. (полностью) гл. бухгалтера!", "Титульный", "ОргБухгалтер"); 
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;  
		КонецЕсли;
	КонецЕсли;
	
	Если КатегорияНП = 1 Тогда
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ОргИНН) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ИНН организации!", "Титульный", "ИНН1");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргБухгалтер, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество главного бухгалтера содержат недопустимые символы!", "Титульный", "ОргБухгалтер");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	Иначе//КатегорияНП = 2
		Если ПустаяСтрока(ОргНазв) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не заданы фамилия, имя, отчество индивидуального предпринимателя!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ОргИНН, Истина) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ИНН индивидуального предпринимателя!", "Титульный", "ИНН1");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргНазв, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество индивидуального предпринимателя содержат недопустимые символы!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат (СтатусПроверки <> 1);
	
КонецФункции

// Процедура добавляет в текст c электронным представлением информацию о показателях титульного листа и 
// листов раздела "ФизЛица"
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который следует добавлять строки
//
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст)
	
	//определение источников данных для проверки
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	//Получили данные
	
	//Определим основные показатели
	ОргКПП = Орг.КПП;
	ОргИНН = Орг.ИНН;
	КатегорияНП = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг), 2, 1);
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер = ПоказателиТитульный.ОргБухгалтер;
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргТелефон = ВРЕГ(СокрЛП(Лев(ПоказателиТитульный.ТелОрганизации, 20)));
	ВидДок = ПоказателиТитульный.ВидДок;
	ПризнВидаДок = Число(ВидДок);
	НомерКорректировки = ?(ПустаяСтрока(ПоказателиТитульный.НомКоррект), 0, Число(ПоказателиТитульный.НомКоррект));
	РегНомПФР = СокрЛП(ПоказателиТитульный.РегНомерПФР);
	Если ЗначениеЗаполнено(РегНомПФР) Тогда
		РегНомПФР = Лев(РегНомПФР, 3) + "-" + Сред(РегНомПФР, 4, 3) + "-" + Сред(РегНомПФР, 7);
	КонецЕсли;
	
	Если КатегорияНП = 1 Тогда
		// Блок <СВЕДЕНИЯ ОБ ОРГАНИЗАЦИИ>
		Текст.ДобавитьСтроку("НаимЮЛПол:" + ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, ""))));
		Текст.ДобавитьСтроку("ИННЮЛ:" + ОргИНН);  
		Текст.ДобавитьСтроку("КППЮЛ:" + ОргКПП);
		Текст.ДобавитьСтроку("ОГРН:"  + СокрЛП(ПоказателиТитульный.ОГРН));
		Текст.ДобавитьСтроку("РегНомПФР:"	+	РегНомПФР);
		Текст.ДобавитьСтроку("ТелНП:" + ОргТелефон);
		Текст.ДобавитьСтроку("###");
		// Блок <СВЕДЕНИЯ О РУКОВОДСТВЕ ОРГАНИЗАЦИИ>
		Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор)); 
		Текст.ДобавитьСтроку("ФИОБух:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргБухгалтер)); 
		Текст.ДобавитьСтроку("###");
	Иначе//КатегорияНП = 2
		// Блок <СВЕДЕНИЯ ОБ ИНДИВИДУАЛЬНОМ ПРЕДПРИНИМАТЕЛЕ>
		Текст.ДобавитьСтроку("ФИО:"   + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргНазв)); 
		Текст.ДобавитьСтроку("ИННФЛ:" + ОргИНН);
		Текст.ДобавитьСтроку("ОГРНИП:"  + СокрЛП(ПоказателиТитульный.ОГРНИП));
		Текст.ДобавитьСтроку("РегНомПФР:" + РегНомПФР);
		Текст.ДобавитьСтроку("ТелНП:" + ОргТелефон);
		Текст.ДобавитьСтроку("###");
	КонецЕсли;
	
	// Блок <ОПИСАНИЕ ФОРМЫ ОТЧЕТНОСТИ>
	Текст.ДобавитьСтроку("ПризФОтч:1");
	Текст.ДобавитьСтроку("КНД:" + КНД);
	Текст.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(НаименованиеОтчетаДляВыгрузки));
	Текст.ДобавитьСтроку("ВерФОтч:3.00002");
	Текст.ДобавитьСтроку("ПериодВерОтч:23.03.2006,");
	Текст.ДобавитьСтроку("ПризВидДок:"     + ПризнВидаДок);
	Если ПризнВидаДок = 3 Тогда
		Текст.ДобавитьСтроку("НомерКорр:"      + НомерКорректировки);
	Конецесли;     
	Текст.ДобавитьСтроку("ПризПериодОтч:0");
	Текст.ДобавитьСтроку("ГодПериодОтч:"   + Формат(Год(мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	Текст.ДобавитьСтроку("ОКЕИ:383"); 
	Текст.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется 
	Текст.ДобавитьСтроку("###");
	
КонецПроцедуры

// Процедура формирует текст выгрузки в части предписанных показателей
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который выгружаются показатели
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	
	//Если (НЕ БратьИзФормы) Тогда
	//	ЗаполнитьНачальныеНастройки();
	//КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	//Показатели.ВыбратьСтроку("");
	ТекСостРазд = Неопределено;
	
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Если БратьИзФормы Тогда
		// обновляем структуру многостраничных разделов
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	КонецЕсли;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		ПустойРаздел = РазделПуст(Разд, ПоказателиОтчета);
		
		Если ПустойРаздел И ОбязРазделов.НайтиПоЗначению(ИмяРаздела) = Неопределено Тогда
			//Если раздел пустой и необязательный для выгрузки, то продолжим
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//Продолжить;//не реализовано
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если (СтраницаПустая = 1) И (НЕ ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							СтрокаПустая = 1;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
								
							КонецЦикла;
							
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					
				КонецЦикла;
				
				Если (СтраницаПустая = 1) И (Не ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Текст.ДобавитьСтроку("###");
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						СтрокаПустая = 1;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
							
						КонецЦикла;
						
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
					Текст.ДобавитьСтроку("###");
					
				КонецЕсли;
				
			Конеццикла;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяРаздела]);
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Текст.ДобавитьСтроку("###");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет раздел на наличие в нем заполненных значимых показателей
// Параметры:
//	Разд - КлючИЗначение, описатель раздела (Ключ - имя, Значение - вид)
//	ПоказателиОтчета - структура, хранящая значения показателей
//
// Возвращаемое значение:
//	Булево - Истина означает, что раздел пуст; Ложь - раздел заполнен
//
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	
	СтраницаПустая = 1;
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		НомСтр = 0;
		
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			
			НомСтр = НомСтр + 1;
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла;
							КонецЕсли;
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						
					КонецЦикла;
					
				КонецЕсли;//многострочный или обычный подраздел
				
			Конеццикла;//по подразделам

		КонецЦикла;//по страницам
		
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		
		//выгрузка многостраничного раздела
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
			
			НомСтр = НомСтр + 1;
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
				
			КонецЦикла;
			
		КонецЦикла;
		//конец выгрузки многостраничного раздела
		
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
			//Продолжить;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
					
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				
				Пока Истина Цикл
					
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						
						Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
							Перейти ~ВыходИзДвойногоЦикла_;
						КонецЕсли;
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
							
					КонецЦикла;
					
					ном = ном + 1;
					
				КонецЦикла;
				
				~ВыходИзДвойногоЦикла_:
				
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
											
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Конеццикла;
		
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			//Продолжить;
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
		
КонецФункции

// Функция проверяет правильность заполнения разделов с предписанными показателями.
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//	ЧтоПроверять - строка. Если в строке присутствует "1" - проверять значения на заполненность, "2" - на корректность заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	
	ИмяРазделаПред = "";
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	Если БратьИзФормы Тогда
		ПоказателиОтчета = Новый Структура();

		Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

		КонецЦикла;
	Иначе
		
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если ДанныеОтчета = Неопределено Тогда
			Сообщить("Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		мСтруктураМногострочныхРазделов = ДанныеОтчета.ДанныеМногострочныхРазделов;

		//мСтруктураМногостраничныхРазделов = ДанныеОтчета.ДанныеМногостраничныхРазделов;этот объект инициализируется раньше

		мСтруктураВариантыЗаполнения = ДанныеОтчета.ДанныеВариантовАвтоЗаполнения;
		
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
		
	КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Если БратьИзФормы Тогда
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если РазделПуст(Разд, ПоказателиОтчета) Тогда
			//Если ОбязРазделов.НайтиПоЗначению(ИмяРаздела) <> Неопределено Тогда
			//	СообщитьВТС("Обязательный к заполнению раздел пуст!", ИмяРаздела, "");
			//	СтатусПроверки = 1;
			//КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			//
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла;
							
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦиклаВ:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;

							//СтатусПроверки = Макс(ПроверитьПоказатель(СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр), СтатусПроверки);
							//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле));
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					Если Найти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					//СтатусПроверки = Макс(ПроверитьПоказатель(Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр), СтатусПроверки);
					//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						//проверка на то, что строка пустая
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						//конец проверки
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							//СтатусПроверки = Макс(ПроверитьПоказатель(ТекОписатель, ЗначениеПоля, ВыводитьСообщения), СтатусПроверки);
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_В:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если Найти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						Если Найти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						//СтатусПроверки = Макс(ПроверитьПоказатель(СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения), СтатусПроверки);
						//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
				КонецЕсли;
				
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			//ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяРаздела]);
			
			//проверка на то, что раздел пуст
			//ПустойРаздел = Истина;
			//СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			//Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			//	
			//	КодПоказателя = Стр3.КодПоказателяПоСоставу;
			//	ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			//	ПризнакФормата = Стр3.ТипДанныхПоказателя;
			//	
			//	Если КодПоказателя="###" Тогда
			//		Продолжить;
			//	ИначеЕсли КодПоказателя="===" Тогда
			//		Прервать;	
			//	КонецЕсли;
			//	
			//	ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			//	Если Найти(ЧтоПроверять, "1") <> 0 Тогда
			//		
			//		Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, Ложь) = 1 Тогда
			//			ПустойРаздел = Ложь;
			//			Прервать;
			//		КонецЕсли;
			//		
			//	КонецЕсли;
			//	
			//КонецЦикла;
			//
			//Если ПустойРаздел И ОбязРазделов.НайтиПоЗначению(ИмяРаздела) <> Неопределено Тогда
			//	Если ВыводитьСообщения Тогда
			//		Сообщить(ПредставлениеОтчета + "Обязательный к заполнению " + ИмяРаздела + " пуст!", СтатусСообщения.Важное);
			//	КонецЕсли;
			//	СтатусПроверки = 1;
			//КонецЕсли;
			//конец проверки на пустой раздел
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				Если Найти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				Если Найти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				//СтатусПроверки = Макс(ПроверитьПоказатель(Стр3, ЗначениеЯчейки, ВыводитьСообщения), СтатусПроверки);
				//РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;//цикл по разделам
	
	Если СтатусПроверки = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	ИзвлечьДанные();
	ТаблицаСообщений.Очистить();
	Возврат (ПроверитьТитульныйЛистИСведенияОФизЛицах(Ложь) И ПроверитьПредписанныеПоказатели(Ложь));
	
КонецФункции

Процедура Выгрузить() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НЕ НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		//Сообщить("Не удалось выгрузить отчет!", СтатусСообщения.Внимание);
	Иначе
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициализирует переменные модуля, необходимые для выгрузки
//
// Параметры:
//	Нет.
//
Процедура ИзвлечьДанные()
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	мСтруктураМногоСтраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	
КонецПроцедуры

// Процедура обрабатывает результирующий текст выгрузки, 
// полученный после работы универсального процедур и функций
// В процедуре обрабатываются нестандартные ситуации, непредусмотренные универсальным механизмом выгрузки
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст выгрузки
//
Процедура ОбработатьРезультирующийТекстВыгрузки(Текст)
		
	Возврат;
	
КонецПроцедуры

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	//выводим общие сведения информационной части
	РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Орг, , мСохраненныйДок.КПП, мСохраненныйДок.ДатаНачала, мСохраненныйДок.КодИМНС);
	
	//выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, Ложь);
	
	ОбработатьРезультирующийТекстВыгрузки(Текст);
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:" + РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Процедура заполняет переменную модуля мТаблицаСоставПоказателей из соответствующего макета отчета
// 
// Параметры:
//	Нет.
//
Процедура ИнициализацияСоставаПоказателей() Экспорт

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	// Таблица значений хранит состав показателей отчета.
	// В колонках таблицы хранятся следующие данные:
	//    - имя поля табличного документа;
	//    - код показатели по составу показателей;
	//    - код показателя по форме (имя области табличного документа);
	//    - признак многострочности;
	//    - тип данных показателя.
	//
	мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
	мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",		      ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",    	  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСтруктуре",ОписаниеТиповСтрока50);

	МакетСоставаПоказателей = ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// доп. описание показателя
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.КодПоказателяПоСтруктуре   = КодПоказателяПоСтруктуре;

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////

// ПолеТабличногоДокументаРаздел1Выбор
//
Процедура ПолеТабличногоДокументаРаздел1Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если Найти(Область.Имя, "КБКв") > 0 Тогда

		СтандартнаяОбработка = Ложь;

		ОпределениеБюджета = Сред(Область.Имя, 5, 5);

		Если Найти(ОпределениеБюджета, "Страх") > 0 Тогда
			ТипКБК = 1;
			ПервоначальноеЗначение = мКБКРаздел1_1;
		ИначеЕсли Найти(ОпределениеБюджета, "Накоп") > 0 Тогда
			ТипКБК = 2;
			ПервоначальноеЗначение = мКБКРаздел1_2;
		КонецЕсли;

		МаксДлина = 20; // ?(Год(ДатаПодписи) <= 2004, 7, 20);

		СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя);

		Если мАвтоВыборКодов Тогда

			Если ВвестиСтроку(ПервоначальноеЗначение, "Введите КБК", МаксДлина) Тогда

				Если ОбновитьПеременныеМодуля("КБКРаздел1_" + Строка(ТипКБК), ПервоначальноеЗначение) Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, МаксДлина, ПервоначальноеЗначение);
					Модифицированность = Истина;
				КонецЕсли;

			КонецЕсли;

			Возврат;

		КонецЕсли;

		ЗагрузитьПоказателиИзМакета("КБК2005Раздел1", ТипКБК);

		НайденнаяСтрока = мКБК2005Раздел1.Найти(ПервоначальноеЗначение, "Код");

		Если НайденнаяСтрока <> Неопределено Тогда
			Результат = мКБК2005Раздел1.ВыбратьСтроку("Выбор КБК", НайденнаяСтрока);
		Иначе
			Результат = мКБК2005Раздел1.ВыбратьСтроку("Выбор КБК");
		КонецЕсли;

		Если Результат <> Неопределено Тогда
			Если ОбновитьПеременныеМодуля("КБКРаздел1_" + Строка(ТипКБК), Результат.Получить(0)) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, 20, Результат.Получить(0));
				Модифицированность = Истина;
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли (Найти(Область.Имя, "СумНалог") > 0) И (ФлажокОтклАвтоРасчет) Тогда
		ТипСуммы = -2;
		Если (Найти(Область.Имя, "СумНалогСтрахВсего") = 1) Или (Найти(Область.Имя, "СумНалогНакопВсего") = 1) Тогда
			ТипСуммы = (-1) * ?(Найти(Область.Имя, "СумНалогСтрахВсего") = 1, 1, 2);
			МесяцСуммы = "0";
		Иначе
			СуммаДля   = Сред(Область.Имя, 9, 5);
			МесяцСуммы = Сред(Область.Имя, 14, 1);
		КонецЕсли;

		СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя);

		СтандартнаяОбработка = Ложь;

		Если ТипСуммы = - 2 Тогда
			Если Найти(СуммаДля, "Страх") > 0 Тогда
				ТипСуммы = 1;
			ИначеЕсли Найти(СуммаДля, "Накоп") > 0 Тогда
				ТипСуммы = 2;
			КонецЕсли;
		КонецЕсли;

		ИмяПеременной = "Сумма" + Строка(МесяцСуммы) + "Раздел1_" + Строка(Модуль(ТипСуммы));
		ПервоначальноеЗначение = ПолучитьЗначениеКвадратногоЗначенияПоИмени(ИмяПеременной);

		Если ВвестиЧисло(ПервоначальноеЗначение, "Введите сумму", 14, 2) Тогда
			Если ОбновитьПеременныеМодуля(ИмяПеременной, ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, 15, ПервоначальноеЗначение, Истина);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (Найти(Область.Имя, "КодОКАТО") > 0) Тогда

		СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя);
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мОКАТОРаздел1;

		Если ВвестиСтроку(ПервоначальноеЗначение, "Введите ОКАТО", 11) Тогда

			Если (ПервоначальноеЗначение = "") Или (ОбщегоНазначения.ТолькоЦифрыВСтроке(ПервоначальноеЗначение)) И (СтрДлина(ПервоначальноеЗначение) = 11) Тогда

				Если ОбновитьПеременныеМодуля("ОКАТОРаздел1", ПервоначальноеЗначение) Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, 11, ПервоначальноеЗначение);
					Модифицированность = Истина;
				КонецЕсли;

			Иначе

				Сообщить("Код ОКАТО должен состоять из 11 цифр.");

			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(Область.Имя, "ТипНП") > 0 Тогда

		СмысловаяЧасть = РегламентированнаяОтчетность.роПолучитьСмысловуюЧастьИмениЯчейки(Область.Имя);
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мКодПлательщикаРаздел1;

		Если мАвтоВыборКодов Тогда

			Если ВвестиСтроку(ПервоначальноеЗначение, "Введите тип налогоплательщика", 2) Тогда
				Если ОбновитьПеременныеМодуля("КодПлательщикаРаздел1", ПервоначальноеЗначение) Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, 2, ПервоначальноеЗначение);
					Модифицированность = Истина;
				КонецЕсли;
			КонецЕсли;

			Возврат;

		КонецЕсли;

		НайденнаяСтрока = мТипНалогоплательщика.Найти(ПервоначальноеЗначение, "Код");

		Если НайденнаяСтрока <> Неопределено Тогда
			Результат = мТипНалогоплательщика.ВыбратьСтроку("Выбор типа страхователя", НайденнаяСтрока);
		Иначе
			Результат = мТипНалогоплательщика.ВыбратьСтроку("Выбор типа страхователя");
		КонецЕсли;

		Если Результат <> Неопределено Тогда

			Если ОбновитьПеременныеМодуля("КодПлательщикаРаздел1", Результат.Получить(0)) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", СмысловаяЧасть, 2, Результат.Получить(0));
				Модифицированность = Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1Выбор

// ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел2");

КонецПроцедуры // ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел21ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел21ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел21");

КонецПроцедуры // ПолеТабличногоДокументаРаздел21ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел22ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел22ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел22");

КонецПроцедуры // ПолеТабличногоДокументаРаздел22ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел23ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел23ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел23");

КонецПроцедуры // ПолеТабличногоДокументаРаздел23ПриАктивизацииОбласти

// ПолеВыбораВариантЗаполненияРаздел2ПриИзменении
//
Процедура ПолеВыбораВариантЗаполненияРаздел2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел2ПриИзменении

// ПолеВводаЗначениеКорректировкиРаздел2ПриИзменении
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел2ПриИзменении

// ПолеВводаКомментарийРаздел2ПриИзменении
//
Процедура ПолеВводаКомментарийРаздел2ПриИзменении(Элемент)
	Перем Комментарий1;

	Комментарий1 = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий1);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел2ПриИзменении

// ПолеВыбораВариантЗаполненияРаздел21ПриИзменении
//
Процедура ПолеВыбораВариантЗаполненияРаздел21ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел21ПриИзменении

// ПолеВводаЗначениеКорректировкиРаздел21ПриИзменении
//
Процедура ПолеВводаЗначениеКорректировкиРаздел21ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел21ПриИзменении

// ПолеВводаКомментарийРаздел21ПриИзменении
//
Процедура ПолеВводаКомментарийРаздел21ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел21ПриИзменении

// ПолеВыбораВариантЗаполненияРаздел22ПриИзменении
//
Процедура ПолеВыбораВариантЗаполненияРаздел22ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел22ПриИзменении

// ПолеВводаЗначениеКорректировкиРаздел22ПриИзменении
//
Процедура ПолеВводаЗначениеКорректировкиРаздел22ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел22ПриИзменении

Процедура ПолеВводаКомментарийРаздел22ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел22ПриИзменении

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если ИмяТекущейСтраницыПанели <> "Титульный" И ИмяТекущейСтраницыПанели <> "ФизЛица" Тогда
		Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
			Расчет("Раздел2");
			Расчет("Раздел21");
			Расчет("Раздел1");
		ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел22" Тогда
			Расчет("Раздел22");
			Расчет("Раздел2");
			Расчет("Раздел21");
			Расчет("Раздел1");
		Иначе
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Если ПолучитьСвойствоРаздела(ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
			ОбновитьПараметрыАвтозаполненияЯчейки();
		КонецЕсли;
	КонецЕсли;

	ВзаимныеПереходыПозиций(ОбластьИмя);

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

// ВзаимныеПереходыПозиций
//
Процедура ВзаимныеПереходыПозиций(ОбластьИмя)

	// Взаимные переходы
	Если ОбластьИмя = "П000020030006" И ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000020031003", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000020030006" И НЕ ФлажокОтклАвтоРасчет Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000020032003", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000230003104" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000230004003", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000230004004" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000230004103", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000220022005" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000220022104", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000220022105" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000220022204", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210001804" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210001903", ОбластьИмя);
	ИначеЕсли ОбластьИмя = "П000210001904" Тогда
		мСтруктураВзаимныхПереходов = Новый Структура("ИмяНужнойОбластиДляПереходов, ИмяОткудаПереход", "П000210001904", ОбластьИмя);

	КонецЕсли;

КонецПроцедуры // ВзаимныеПереходыПозиций

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта "Показать машиночитаемый бланк" подменю "Печать"
// командной панели действий формы. 
//
// Обработчик уставливается динамически методом "Действие" из общего модуля
// "Регламентированная отчетность".
//
Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

// для ЗУП вводится свой состав показателей, отличающийся параметрами автозаполнения, колонка 6.

ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
Если ИдКонф = "ЗУП" ИЛИ ИдКонф = "ЗБУ" Тогда
	мСоставПоказателей = "СоставПоказателей2006Кв1ДляЗУП";
Иначе
	мСоставПоказателей = "СоставПоказателей2006Кв1";
КонецЕсли;

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);
мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме, КодПоказателяПоСтруктуре";

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

мКБК2005Раздел1 = Новый ТаблицаЗначений;
мКБК2005Раздел1.Колонки.Добавить("Код",,, 18);
мКБК2005Раздел1.Колонки.Добавить("Название",,, 50);

мТипНалогоплательщика = Новый ТаблицаЗначений;
мТипНалогоплательщика.Колонки.Добавить("Код",,, 4);
мТипНалогоплательщика.Колонки.Добавить("Название",,, 60);

ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//    - структура, элементы которой содержат данные дополнительных строк страницы, где
//      в качестве ключа используется имя многострочного блока, а в качестве значения-
//      таблица значений показателей многострочного блока.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", ОписаниеТиповБулево);

СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;

// Элемент структуры - данные дополнительных страниц раздела со сведениями
// о физических лицах
ТаблицаСтраницыФизЛиц = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("ФизЛица", ТаблицаСтраницыФизЛиц);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "15/03/2006"; // Первая версия

// Код отчета, равен КНД
мКодОтчета   = "1151065";

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
ОбязРазделов = Новый СписокЗначений;
ОбязРазделов.Добавить("Раздел1");
ОбязРазделов.Добавить("Раздел2");
ОбязРазделов.Добавить("Раздел21");
ОбязРазделов.Добавить("Раздел22");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 3.00002", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

КНД = "1151065";
НаименованиеОтчетаДляВыгрузки = "ДЕКЛАРАЦИЯ ПО СТРАХОВЫМ ВЗНОСАМ НА ОБЯЗАТЕЛЬНОЕ ПЕНСИОННОЕ СТРАХОВАНИЕ ДЛЯ ЛИЦ, ПРОИЗВОДЯЩИХ ВЫПЛАТЫ ФИЗИЧЕСКИМ ЛИЦАМ";

РежимОтладки = Ложь;

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;

МногострочныеИсключения = Новый СписокЗначений;
МногострочныеИсключения.Добавить("П000010003000");
МногострочныеИсключения.Добавить("П000010004000");
МногострочныеИсключения.Добавить("П000010005000");
МногострочныеИсключения.Добавить("П000010006000");
