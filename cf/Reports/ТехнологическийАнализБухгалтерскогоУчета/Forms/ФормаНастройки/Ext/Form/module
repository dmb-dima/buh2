////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// хранит вариант выбора страниц
Перем мВариантВыбора Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура формирует выбранное значение - дерево настроек параметров анализа, . 
// передает в форму, где была инициирована выборка и закрывает текущую форму.
Процедура СохранитьИЗакрыть()

	ДеревоСтраницОтчета = ЭлементыФормы.Дерево.Значение;
	Проводки            = ЭлементыФормы.Проводки.Значение;

	Стру = Новый Структура;
	Стру.Вставить("Дерево", ДеревоСтраницОтчета);
	Стру.Вставить("Проводки", Проводки);

	Закрыть(Стру);

КонецПроцедуры // СохранитьИЗакрыть()

// Процедура устанавливает (снимает) метки у всех строк дерева.
//
// Параметры:
//  Пометка - логическое выражение, значение пометки.
//
Процедура УстановитьПометкуСтрокДерева( Пометка, ТекКолонка)

	Если ТекКолонка = "Настройка" Тогда

		Для Каждого СтрокаУровня1 Из Дерево.Строки Цикл

			СтрокаУровня1[ТекКолонка] = Пометка;

			Если СтрокаУровня1.Строки.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл

				СтрокаУровня2[ТекКолонка] = Пометка;

				Если СтрокаУровня2.Строки.Количество() = 0 Тогда 
					Продолжить;
				КонецЕсли;

				Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл
					СтрокаУровня3[ТекКолонка] = Пометка;
				КонецЦикла;

			КонецЦикла;
		КонецЦикла;

	Иначе

		Предупреждение("Для установки или снятия меток по требуемой колонке
		               |предварительно активизируйте колонку.");

	КонецЕсли;

КонецПроцедуры // УстановитьПометкуСтрокДерева()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ЭтаФорма.АвтоЗаголовок = Ложь;

	НЗВ = "";
	Проводки = "";
	ПСчетов = "";
	НачальноеЗначениеВыбора.Свойство("Дерево", НЗВ);
	НачальноеЗначениеВыбора.Свойство("Проводки", Проводки);
	НачальноеЗначениеВыбора.Свойство("ПланСчетов", ПСчетов);

	ДеревоСтраницОтчета  = НЗВ;

	// Если список одноуровневый, то показывать иерархию не будем
	ЭлементыФормы.Дерево.Колонки["Представление"].ОтображатьИерархию = Ложь;

	Для Каждого Строка Из ДеревоСтраницОтчета.Строки Цикл
		Если Строка.Строки.Количество() > 0 Тогда
			ЭлементыФормы.Дерево.Колонки["Представление"].ОтображатьИерархию = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ПланСчетовБУ = Новый таблицаЗначений;
	ПланСчетовБУ.Колонки.Добавить( "ИмяСчетаНУ");
	ПланСчетовБУ.Колонки.Добавить( "КодСчетаБУ");
	ПланСчетовБУ.Колонки.Добавить( "ТипСчета");
	ПланСчетовБУ.Колонки.Добавить( "Валютный");
	ПланСчетовБУ.Колонки.Добавить( "Количественный");
	ПланСчетовБУ.Колонки.Добавить( "Субконто1");
	ПланСчетовБУ.Колонки.Добавить( "Субконто2");
	ПланСчетовБУ.Колонки.Добавить( "Субконто3");
	//ПланСчетовБУ.ЗаполнитьЗначения(ПСчетов, "ИмяСчетаНУ");
	Для Каждого Стр Из ПСчетов Цикл
		НоваяСтр = ПланСчетовБУ.Добавить();
		НоваяСтр.ИмяСчетаНУ     =  Стр.НаименованиеСчетаБУ;
		НоваяСтр.КодСчетаБУ     =  Стр.КодСчетаБУ;
		НоваяСтр.ТипСчета       =  Стр.ТипСчета;
		НоваяСтр.Валютный       =  Стр.Валютный;
		НоваяСтр.Количественный =  Стр.Количественный;
		НоваяСтр.Субконто1      =  Стр.Субконто1;
		НоваяСтр.Субконто2      =  Стр.Субконто2;
		НоваяСтр.Субконто3      =  Стр.Субконто3;
	КонецЦикла;
	// , КодСчетаБУ, ТипСчета, Валютный, Количественный, Субконто1, Субконто2, Субконто3");
	ЭлементыФормы.ПС.Значение       = ПланСчетовБУ;
	ЭлементыФормы.Проводки.Значение = Проводки;

	//ЭлементыФормы.НедопустимыеПроводки.ТекущиеДанные
	ЭлементыФормы.Дерево.Значение = ДеревоСтраницОтчета;
	ЭлементыФормы.КнопкаУстановитьВсе.Видимость = Истина;
	ЭлементыФормы.КнопкаСнятьВсе.Видимость      = Истина;

	Если мВариантВыбора = "ВыбратьДляПечати" Тогда
		ЭтаФорма.Заголовок = "Выберите листы для печати";

		ЭлементыФормы.Дерево.Колонки.ВыгрузитьСтраницу.Видимость = Ложь;
		ЭлементыФормы.Дерево.Колонки.ПоказатьСтраницу.Видимость  = Ложь;

	ИначеЕсли мВариантВыбора = "ВыбратьДляНастройки" Тогда
		ЭтаФорма.Заголовок = "Параметры анализа";

	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "ОК" командной панели формы.
// Отрабатывает выбранное значение.
//
Процедура ОсновныеДействияФормыКнопкаВыбратьНажатие(Кнопка)

	Если мВариантВыбора = "ВыбратьДляПечати" Тогда

		//УстановитьСоставПечатаемыхЛистов();

	ИначеЕсли мВариантВыбора = "ВыбратьДляНастройки" Тогда

		СохранитьИЗакрыть();

	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыКнопкаВыбратьНажатие()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура вызывается по нажатию кнопки "УстановитьВсе".
//   Устанавливает пометку у всех строк дерева.
//
Процедура КнопкаУстановитьВсеНажатие(Элемент)

	ТекКолонка = ЭлементыФормы.Дерево.ТекущаяКолонка.Имя;

	УстановитьПометкуСтрокДерева(1, ТекКолонка);

КонецПроцедуры // УстановитьВсеНажатие()

// Процедура вызывается по нажатию кнопки "СнятьВсе".
// Снимает пометку у всех строк дерева.
//
Процедура КнопкаСнятьВсеНажатие(Элемент)

	ТекКолонка = ЭлементыФормы.Дерево.ТекущаяКолонка.Имя;

	УстановитьПометкуСтрокДерева(0, ТекКолонка);

КонецПроцедуры // СнятьВсеНажатие()

// Процедура - обработчик события "ПриИзмененииФлажка" в колонке
// табличного поля.
//   Ставит/снимает пометку у всех подчиненных строк выбранного уровня
// 
Процедура ДеревоПриИзмененииФлажка(Элемент, Колонка)

	НоваяПометка = Элемент.ТекущиеДанные[Колонка.Имя];

	Если Колонка.Имя = "ПоказатьСтраницу" Тогда
		Если НоваяПометка = 1 Тогда

			// Для составляющих страниц титульного листа 
			// запрещаем варирование показом страницы.
			// Флаг показа определяется только по титульному
			// листу в целом.
			НоваяПометка = 2;

		ИначеЕсли НоваяПометка = 0 Тогда
			// Предполагаем, что если пользователь отключил 
			// показ какой-либо страницы, то и необходимость
			// вывода этой страницы на печать отпадает
			Элемент.ТекущаяСтрока.ВыводНаПечать = НоваяПометка;

			Для Каждого Строка Из Элемент.ТекущаяСтрока.Строки Цикл
				Строка.ВыводНаПечать = НоваяПометка;
			КонецЦикла;

		КонецЕсли;

	ИначеЕсли Колонка.Имя = "ВыводНаПечать" Тогда

		ВерхняяГруппировка = Элемент.ТекущаяСтрока.Родитель;
		Если ВерхняяГруппировка <> Неопределено Тогда
			// Проверяем все вложенные строки на предмет
			// того, установлены или сняты ли везде метки.
			// Если нет, то устанавливаем третье состояние
			// метки строки-родителя 
			НеВсеОтмечены = 0;

			Для каждого СтрокаУровня Из ВерхняяГруппировка.Строки Цикл

				Если СтрокаУровня.ВыводНаПечать <> НоваяПометка Тогда

					НеВсеОтмечены = 1;

					Прервать;
				КонецЕсли; 

			КонецЦикла; 

			Если НеВсеОтмечены = 1 Тогда
				ВерхняяГруппировка.ВыводНаПечать = 2;
			Иначе
				ВерхняяГруппировка.ВыводНаПечать = НоваяПометка;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Для Каждого Строка Из Элемент.ТекущаяСтрока.Строки Цикл
		Для Каждого Строка2 из Строка.Строки Цикл
			Строка2[Колонка.Имя] = НоваяПометка;
		КонецЦикла;
		Строка[Колонка.Имя] = НоваяПометка;
	КонецЦикла;

	Если Колонка.Имя = "Настройка" Тогда

		Для Каждого СтрокаУровня1 Из Дерево.Строки Цикл

			С1 = 0;
			С2 = 0;

			Для Каждого СтрокаУровня2 из СтрокаУровня1.Строки Цикл
				Если СтрокаУровня2.Настройка = 1 Тогда
					С1 = С1 + 1;
				ИначеЕсли СтрокаУровня2.Настройка = 0 Тогда
					С2 = С2 + 1;
				КонецЕсли;
			КонецЦикла;

			Если ((С1 > 0) И (С1 <> СтрокаУровня1.Строки.Количество())) Или ((С2 > 0) И (С2 <> СтрокаУровня1.Строки.Количество()))Тогда
				СтрокаУровня1.Настройка = 2;
			ИначеЕсли С1 = СтрокаУровня1.Строки.Количество() И СтрокаУровня1.Строки.Количество() > 0 Тогда
				СтрокаУровня1.Настройка = 1;
			ИначеЕсли  С2 = СтрокаУровня1.Строки.Количество() И СтрокаУровня1.Строки.Количество() > 0 Тогда
				СтрокаУровня1.Настройка = 0;
			КонецЕсли;


		КонецЦикла;


	КонецЕсли;

КонецПроцедуры // ДеревоПриИзмененииФлажка()

// Процедура - обработчик события "ПередНачаломИзменения" строки табличного поля.
//
Процедура ДеревоПередНачаломИзменения(Элемент, Отказ)

	ТекКолонка  = Элемент.ТекущаяКолонка.Имя;
	ТекЗначение = Элемент.ТекущиеДанные[ТекКолонка];

КонецПроцедуры // ДеревоПередНачаломИзменения()

// Процедура - обработчик события "ПередНачаломДобавления" строки
// табличного поля.
//
Процедура ДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)

	Отказ = Истина;

КонецПроцедуры // ДеревоПередНачаломДобавления()

// Процедура - обработчик события "ПередУдалением" строки табличного поля.
//
Процедура ДеревоПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры // ДеревоПередУдалением()

Процедура ВосстановитьЭталонныйСписок(Кнопка)

	Если Вопрос("Восстановить исходный список недопустимых проводок?",РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
		// Восстановим проводки
		ЭлементыФормы.Проводки.Значение = НачальноеЗначениеВыбора.ЭталонныеПроводки.Скопировать();
	КонецЕсли;

КонецПроцедуры // ВосстановитьЭталонныйСписок


