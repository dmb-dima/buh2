// Табличное поле
Перем мТехАнализБУ;

Перем мБухИтоги;            // Основные суммы

Перем мБухИтогиРС;          // По аналитике
Перем мБухИтогиКоличество;  // По ресурсу Количество
Перем мБухИтогиВалюта;      // По ресурсу Валюта

// Хранят координаты групп многострочных частей.
Перем мИдГруппы1;
Перем мИдГруппы2;
Перем мИдГруппы3;
Перем мИдГруппы4;

// Хранят кол-во найденных ошибок по группам.
Перем мКолвоОшибокПервойГруппы;
Перем мКолвоОшибокВторойГруппы;
Перем мКолвоОшибокТретийГруппы;
Перем мКолвоОшибокЧетвертойГруппы;

// Переменная для работы с алгоритмом выбора периода.
Перем НП;

// В случае, если в последующих версиях отчета будет изменяться состав 
// настраиваемых элементов, необходимо будет обрабатывать уже сохраненные 
// настройки пользователя, чтобы привести их структуру к новой структуре 
// хранения настроки. Чтобы определять, какая версия настроек сохранена 
// у пользователя, вводится сохраняемая переменная мВерсияНастройки.
Перем мВерсияНастройки;

// Таблица для расшифровки, заполняется в процессе нахождения ошибок.
Перем мТаблицаСсылокСчетов;

// Хранят структуру многострочных разделов.
Перем мСтруктураМногострочныхРазделов Экспорт;

// Кол-во исходных строк в многострочных частях, на стадии проектировки = 1.
Перем мСтруктураИсхКолвоСтрокРазделов;

// Таблица недопустимых проводок из макета СвойстваСчетов.
Перем мТаблицаНедопустимыхПроводок;

// Таблица недопустимых проводок, выбранная или измененная пользователем.
Перем мТаблицаНедопустимыхПроводокВыбранная;

// Настройки отчета.
Перем мНастройки;

// Настройки отчета, выбранные пользователем.
Перем мНастройкиВыбранные;

Перем ДатаКон;
Перем ДатаНач;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Создание структуры таблицы для хранения данных об отборе по субконто каждой корреспонденции
Функция СоздатьТаблицуДляХраненияОтбора(Знач ДобавлятьКолонкуИспользования = Ложь) Экспорт
	
	ТаблицаОтбора = Новый ТаблицаЗначений();
		
	ТаблицаОтбора.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаОтбора.Колонки.Добавить("ПутьКДанным", Новый ОписаниеТипов("Строка"));
	ТаблицаОтбора.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаОтбора.Колонки.Добавить("ВидСравнения", Новый ОписаниеТипов("ВидСравнения"));
	ТаблицаОтбора.Колонки.Добавить("Значение");
	ТаблицаОтбора.Колонки.Добавить("ЗначениеС");
	ТаблицаОтбора.Колонки.Добавить("ЗначениеПо");
	
	Если ДобавлятьКолонкуИспользования Тогда
		ТаблицаОтбора.Колонки.Добавить("Использование");
	КонецЕсли;
	
	Возврат ТаблицаОтбора;
	
КонецФункции

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.с именем, переданным в параметре ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы)
	Перем ТекТабличноеПоле;

	Если (ИдГруппы = мИдГруппы1) Или (ИдГруппы = мИдГруппы2) Или (ИдГруппы = мИдГруппы3) Или (ИдГруппы = мИдГруппы4) Тогда
		ТекТабличноеПоле = мТехАнализБУ;
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяСтраницы = Неопределено)
	Перем ИмяГруппы;

	Если ИмяСтраницы = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяСтраницы;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "ТехАнализБУ" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мТехАнализБУ.ТекущаяОбласть);
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы)
	Перем СтруктураГруппы;

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Заполняем таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями.
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];

		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки    = Колонка.Имя;
			ИмяЯчейки     = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;

			ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Обработчик события "Нажатие" кнопки "Настройка" верхней командной панели.
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	НП.ВариантНастройки = ВариантНастройкиПериода.Период;
	НП.РедактироватьКакПериод = Истина;
	НП.РедактироватьКакИнтервал = Ложь;

	Если НП.Редактировать() Тогда

		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();
		ПоказатьПериод();

	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку(НаЛисте = Неопределено)
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	Если НаЛисте <> Неопределено Тогда
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(НаЛисте);
	Иначе
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	КонецЕсли;
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(КолСтрок, "ЧГ=0");

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	Предел = 400;
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(КолСтрок, "ЧГ=0");
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат((КолСтрок + 1), "ЧГ=0");

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > Предел, Формат(НовыйПорядковыйНомер, "ЧГ=0"), "");

		КонецЕсли;
	КонецЦикла;

	//// Назначаем новый номер добавленной строке
	//// (данный фрагмент используется в отдельных формах).
	//
	НомерСтрокиОбласть       = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,      3, НомерНижнЯчейкиОбласти,      3);
	НомераСтрокиНоваяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти, 3, НомерНижнЯчейкиНовойОбласти, 3);
	ПоследнийНомер           = НомерСтрокиОбласть.Текст;

	Если Не ПустаяСтрока(ПоследнийНомер) Тогда
		ИсходныйНомер = Число(ПоследнийНомер);
	Иначе
		ИсходныйНомер = МаксимальноеКоличествоСтрокГруппы;
	КонецЕсли;

	НовыйПорядковыйНомер = ИсходныйНомер + 1;

	// МаксимальноеКоличествоСтрокГруппы

	Если НомераСтрокиНоваяОбласть.СодержитЗначение Тогда
		НомераСтрокиНоваяОбласть.Значение = ? (НЕ НовыйПорядковыйНомер > Предел, Строка(НовыйПорядковыйНомер) + ".", "");
	Иначе
		НомераСтрокиНоваяОбласть.Текст = ? (НЕ НовыйПорядковыйНомер > Предел, Строка(НовыйПорядковыйНомер) + ".", "");
	КонецЕсли;

	//// Назначаем новый номер добавленной строке

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат((КолСтрок + 1), "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Открывает форму ФормаНастройки с целью выбора или корректировки текущей
// настройки анализа учета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуНастройкиОтчета(ВариантВыбора)

	ФормаНастройкиОтчета = ПолучитьФорму("ФормаНастройки", ЭтаФорма, "дляВыбораСтраницОтчета");

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	// Переменная мНастройкиВыбранные - всегда дерево значений, инициализируется в обработчике ПередОткрытием
	Если ТипЗнч(мНастройкиВыбранные) <> Тип("ДеревоЗначений") Тогда
		мНастройкиВыбранные = "";
		ДеревоНастроекОтчета = мНастройки.Скопировать();
	Иначе
		ДеревоНастроекОтчета = мНастройкиВыбранные.Скопировать();
	КонецЕсли;

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяНастройки", АктивныйПланСчетов());

	// Структура, которая будет передаваться в форму настройки, содержит
	// Дерево             - дерево настройки функций отчета
	// Проводки           - таблица недопустимых проводок
	// Эталонные проводки - таблица изначальных проводок
	// ПланСчетов         - таблица плана счетов (только для показа)
	Стру = Новый Структура;
	Стру.Вставить("Дерево", ДеревоНастроекОтчета);
	Стру.Вставить("Проводки", мТаблицаНедопустимыхПроводокВыбранная.Скопировать());
	Стру.Вставить("ЭталонныеПроводки", мТаблицаНедопустимыхПроводок.Скопировать());
	Стру.Вставить("ПланСчетов", мТаблицаСвойстваСчетов.НайтиСтроки(СтруктураПоиска));

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = Стру;
	//ФормаНастройкиОтчета.Проводки1               = мТаблицаНедопустимыхПроводок;
	ФормаНастройкиОтчета.мВариантВыбора          = ВариантВыбора;

	// Открыть форму модально
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();

	// Получаем результат
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда

		ДеревоНастроекОтчета = "";
		Проводки = "";
		ДеревоНастроекОтчета = РезультатВыбора.Дерево;
		Проводки = РезультатВыбора.Проводки;

		мНастройкиВыбранные = ДеревоНастроекОтчета.Скопировать();
		мТаблицаНедопустимыхПроводокВыбранная = Проводки.Скопировать();

	КонецЕсли;

КонецПроцедуры // ОткрытьФормуНастройкиОтчета()

// Формирует струкутуру данных строк многострочных блоков табличного документа
// на заданной странице основной панели формы.
//
// Параметры
//  ИмяСтраницы  - строка - имя страницы основной панели формы.
//
// Возвращаемое значение:
//   структура   - элементы струкутуры содержат данные дополнительных строк страницы, где
//                 в качестве ключа используется имя многострочного блока, а в качестве
//                 значения - таблица показателей и их значений многострочного блока.
//
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяСтраницы)
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяСтраницы = "ТехАнализБУ" Тогда

		// Так как раздел "Технологическии анализ" содержит несколько многострочных блоков,
		// то поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы1);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы2);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы3);
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы4);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		// Обновим структуру, хранящую данные строк многострочных блоков.

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы1 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы1, ТаблицаДопСтрокГруппы1);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы2 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы2, ТаблицаДопСтрокГруппы2);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы3, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы3 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы3, ТаблицаДопСтрокГруппы3);

		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы4, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокГруппы4 = ПромТаблицаДопСтрокРаздела.Скопировать();
		СтруктураДанныхДопСтрокРаздела.Вставить(мИдГруппы4, ТаблицаДопСтрокГруппы4);

	КонецЕсли;

	Возврат СтруктураДанныхДопСтрокРаздела;

КонецФункции // СформироватьСтруктуруДанныхДопСтрокСтраницы()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле )

	ИмяТабличногоПоля = ВыбТабличноеПоле.Имя;
	ИмяСтраницыФормы  = СтрЗаменить(ИмяТабличногоПоля, "ПолеТабличногоДокумента", "");

	// Сначала получим структуру данных многострочных блоков табличного поля.
	СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяСтраницыФормы);

	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.
	Если СтруктураДанныхДопСтрокРаздела <> Неопределено Тогда

		// Табличное поле содержит многострочные блоки.
		// Удалим все созданные дополнительные строки в блоке.
		Для Каждого МногострочныйБлок Из СтруктураДанныхДопСтрокРаздела Цикл

			ИмяГруппыДопСтрок = МногострочныйБлок.Ключ;

			// Получим таблицу значений, содержащую данные дополнительных строк.
			ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

			ИсходноеКоличествоСтрокГруппы = 0;
			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);

			ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

			Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
				// Имеются дополнительные строки.
				// Удаляем их.

				НСтр = ПромТаблицаДопСтрокРаздела.Количество();
				Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

					ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

					ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
					ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + Формат(НСтр, "ЧГ=0");

					// область первой ячейки удаляемой строки многострочного раздела
					ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

					// номера строк удаляемой области
					НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
					НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

					// Определим область удаляемой строки
					УдаляемаяОбласть = ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

					// непосредственно удаляем область строки табличного документа
					ВыбТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

					// удаляем из структуры многострочного раздела соответствующую строку
					ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);

					НСтр = НСтр - 1;

				КонецЦикла;

			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если (ВыбТабличноеПоле.Имя <> "ПолеТабличногоДокументаФизЛица") Тогда
		//  Для ФизЛица защищенные ячейки нужно очищать, кроме ИНН КПП
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если (Найти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (Найти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	Если СтруктураДанныхДопСтрокРаздела <> Неопределено Тогда

		Для Каждого МногострочныйБлок Из СтруктураДанныхДопСтрокРаздела Цикл
			ИмяГруппыДопСтрок = МногострочныйБлок.Ключ;
			ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Получает из дерева свойств параметр, имя которго передано в функцию.
//
// Параметры
//   ИмяСтраница - название страницы, для которой необходимо получить свойство.
//   ИмяСвойства - имя настройки.
//
Функция ПолучитьСвойствоРаздела(Знач ИмяСтраницы, Знач ИмяСвойства)

	Результат = Неопределено;

	Если ТипЗнч(мНастройкиВыбранные) <> Тип("ДеревоЗначений") Тогда
		Возврат Результат;
	КонецЕсли;

	Если Найти(ИмяСтраницы, "ПолеТабличногоДокумента") > 0 Тогда
		ИмяСтраницыП = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");
	Иначе
		ИмяСтраницыП = ИмяСтраницы;
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мНастройкиВыбранные.Строки Цикл

		Если ИмяСтраницыП <> СтрокаУровня1.ИмяСтраницы Тогда
			Продолжить;
		КонецЕсли;

		Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл

			Если ИмяСвойства = СтрокаУровня2.ИмяСтраницы Тогда

				Результат = СтрокаУровня2.Настройка;
				Прервать;

			Иначе
				Если СтрокаУровня2.Строки.Количество() > 0 Тогда

					// Есть еще уровень
					Для Каждого СтрокаУровня3 из СтрокаУровня2.Строки Цикл
						Если ИмяСвойства = СтрокаУровня3.ИмяСтраницы Тогда
							Результат = СтрокаУровня3.Настройка;
							Прервать
						КонецЕсли;
					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат Результат;

КонецФункции // ПолучитьСвойствоРаздела

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить()
	Перем ИсходноеКоличествоСтрокГруппы;

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если (СтраницаПанели.Имя <> "Титульный") И (СтраницаПанели.Имя <> "ФизЛица") Тогда
			ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле = ЭлементыФормы[ИмяТекТабличногоПоля];
			ОчиститьТабличноеПоле(ТекТабличноеПоле);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // Очистить()

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если КлючУникальности = Неопределено Тогда
		КлючУникальности = Новый УникальныйИдентификатор();
	КонецЕсли;

	ЭтаФорма.РежимВыбора = Ложь;

	// Считываем из макета св-ва счетов
	ЗаполнитьСвойстваСчетов();
	ЗаполнитьСчетаРО();

	// Формируем структуру страниц отчета
	// ФормироватьСтруктуруСтраницОтчета();

	// Восстанавливаем настройки отчета

	// СохранитьЗначение("РегламентированныйТехнологическийАнализБухгалтерскогоУчетаХозрасчетныйНастройки", Неопределено);

	ВерсияНастройки = ВосстановитьЗначение("ТехнологическийАнализБухгалтерскогоУчетаХозрасчетныйВерсия");

	// Загрузим эталонные проводки.
	ЗагрузитьПоказателиИзМакета ("НедопустимыеПроводки");

	// Если вариант, когда версии ранее не было, то перезапишем настройки, которые нельзя определить без версиии.
	Если (ВерсияНастройки = Неопределено) ИЛИ (ВерсияНастройки < мВерсияНастройки) Тогда
		ПереписатьДанные = Истина;

		Если ВерсияНастройки <> Неопределено И ВерсияНастройки = 2 И мВерсияНастройки = 3 Тогда
			// Восстановим настройку, которая бала ДО обновления.
			НедопустимыеПроводки = ВосстановитьЗначение("ТехнологическийАнализБухгалтерскогоУчетаХозрасчетныйПроводки");
			Если ТипЗнч(НедопустимыеПроводки) = Тип("ТаблицаЗначений") Тогда

				НедопустимыеПроводкиАнализ = НедопустимыеПроводки.Скопировать();

				// Дополним таблицу актуальным изменением.
				НайденныеСтроки = НедопустимыеПроводкиАнализ.НайтиСтроки(Новый Структура("Дт", "09"));
				Для каждого Строка Из НайденныеСтроки Цикл
					Если Строка.КтИскл = "68.04.2" Тогда
						// Точечно добавим адресное изменение.
						Строка.КтИскл = "68.04.2, 99";
					КонецЕсли;
				КонецЦикла;

				// Сравним таблицу пользователя и эталонный список.
				ТаблицыИдентичны = НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(НедопустимыеПроводкиАнализ, мТаблицаНедопустимыхПроводок);

				Если НЕ ТаблицыИдентичны Тогда
					// Зададим вопрос о перезаписи.
					Ответ = Вопрос("Изменен эталонный список недопустимых проводок." + Символы.ПС
						  + "Произвести обновление?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

					Если Ответ = КодВозвратаДиалога.Нет Тогда
						Предупреждение("Обновить список недопустимых проводок можно в любой момент," + Символы.ПС + "в настройках, на вкладке ""Недопустимые проводки"".");
						ПереписатьДанные = Ложь;

					КонецЕсли;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;

		Если ПереписатьДанные Тогда
			СохранитьЗначение("ТехнологическийАнализБухгалтерскогоУчетаХозрасчетныйНастройки", мНастройкиВыбранные);
			СохранитьЗначение("ТехнологическийАнализБухгалтерскогоУчетаХозрасчетныйПроводки", мТаблицаНедопустимыхПроводокВыбранная);
		КонецЕсли;

	КонецЕсли;

	мНастройкиВыбранные                   = ВосстановитьЗначение("ТехнологическийАнализБухгалтерскогоУчетаХозрасчетныйНастройки");
	мТаблицаНедопустимыхПроводокВыбранная = ВосстановитьЗначение("ТехнологическийАнализБухгалтерскогоУчетаХозрасчетныйПроводки");

	// Формируем эталонные настройки.
	ФормироватьНастройкиОтчетов();

	// Если сохраненных настроек нет, то берем из эталоннной натсройки.
	Если мНастройкиВыбранные = Неопределено Тогда
		мНастройкиВыбранные = мНастройки.Скопировать();
	КонецЕсли;

	// Если сохраненных проводок нет, то берем из эталона.
	Если мТаблицаНедопустимыхПроводокВыбранная = Неопределено Тогда
		мТаблицаНедопустимыхПроводокВыбранная = мТаблицаНедопустимыхПроводок.Скопировать();
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	Перем ИсходноеКоличествоСтрокГруппы;

	// Проверка ведения однофирменности
	Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();

	ЭлементыФормы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	// Времено выбор организации по умолчанию организован таким образом

	АвтоЗаголовок = Ложь;

	мТехАнализБУ = ЭлементыФормы.ПолеТабличногоДокументаТехАнализБУ;
	мТехАнализБУ.АвтоМасштаб = Истина;
	мТехАнализБУ.ОтображатьСетку = Ложь;
	мТехАнализБУ.ОтображатьЗаголовки = Ложь;
	мТехАнализБУ.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;

	// Счетчики ошибок по группам
	мКолвоОшибокПервойГруппы = 0;
	мКолвоОшибокВторойГруппы = 0;
	мКолвоОшибокТретийГруппы = 0;
	мКолвоОшибокЧетвертойГруппы = 0;

	ДатаКон  = КонецДня(КонецКвартала(ДобавитьМесяц(КонецКвартала(РабочаяДата), -3)));
	ДатаНач  = НачалоГода(ДатаКон);

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

			СтрокаГруппы = СтруктураГруппы.Добавить();

			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки    = Колонка.Имя;
				КодПоказателя = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
				ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	ПоказатьПериод();

	мТехАнализБУ.ТолькоПросмотр             =  Истина;
	ТекущийЭлемент = мТехАнализБУ;

КонецПроцедуры // ПриОткрытии()

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Ответ = Вопрос("Внимание! Будут очищены все показатели отчета." + Символы.ПС
		  + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Если Ответ = КодВозвратаДиалога.Нет Тогда

		Возврат;

	Иначе

		Очистить();
		мТехАнализБУ.Области.Заголовок1.Текст = "Названия выполняемых операций";

	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// ПолучитьРасшифровку
// выводит из таблицы расшифровку, при контроле сально в 13 графе макета
//
Функция ПолучитьРасшифровку(СчетКод)

	Стру = Новый Структура;
	Стру.Вставить("ИмяНастройки", АктивныйПланСчетов());
	Стру.Вставить("КодСчетаБУ", СчетКод);
	Результат = "";

	ПоисковоеЗначение = мТаблицаСвойстваСчетов.НайтиСтроки(Стру);

	Если ПоисковоеЗначение <> Неопределено И ПоисковоеЗначение.Количество() > 0 Тогда
		Результат = ПоисковоеЗначение[0].КонтрольСальдоКомментарий;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьРасшифровку(СчетКод)

// Выполняет начальные подготовительные операции перед формированием отчета.
// Вызывается из процедуры Заполнить().
//
Процедура ПодготовительныеОперации()

	// Очистим лист анализа
	ОчиститьТабличноеПоле(ЭлементыФормы["ПолеТабличногоДокументаТехАнализБУ"]);

	// Таблица для расшифровки
	мТаблицаСсылокСчетов.Очистить();

	// Счетчики ошибок по группам
	мКолвоОшибокПервойГруппы    = 0;
	мКолвоОшибокВторойГруппы    = 0;
	мКолвоОшибокТретийГруппы    = 0;
	мКолвоОшибокЧетвертойГруппы = 0;

	// Создаем РС - для аналитики
	мБухИтогиРС           = Обработки.БухгалтерскиеИтоги.Создать();
	мБухИтоги            =  Обработки.БухгалтерскиеИтоги.Создать();
	мБухИтогиКоличество  =  Обработки.БухгалтерскиеИтоги.Создать();
	мБухИтогиВалюта      =  Обработки.БухгалтерскиеИтоги.Создать();

	Итоги = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт,
	        |НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
	        |КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт,
	        |КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт";

	// Бухгалтерские итоги по счетам, без аналитики
	мБухИтоги.РассчитатьИтоги          ("Хозрасчетный", Итоги, "Сумма",         "Счет", ДатаНач, ДатаКон, , , , , , "Организация", Организация);

	// Количество
	мБухИтогиКоличество.РассчитатьИтоги("Хозрасчетный", Итоги, "Количество",    "Счет", ДатаНач, ДатаКон, , , , , , "Организация", Организация);

	// Валютная сумма
	мБухИтогиВалюта.РассчитатьИтоги    ("Хозрасчетный", Итоги, "ВалютнаяСумма", "Счет", ДатаНач, ДатаКон, , , , , , "Организация", Организация);

КонецПроцедуры // ПодготовительныеОперации

// ПолучитьБухгалтерскийИтогПоСчетуИВидуЗатрат
//
Функция ПолучитьБухгалтерскийИтогПоСчетуИВидуЗатрат(Счет, ВидЗатрат, ВидУчета = Неопределено, НомерСуб = Неопределено, ТипСуб = Неопределено,Корр = Неопределено)

	Результат = Новый Структура("НачальныйОстатокДт, НачальныйОстатокКт, ОборотДт, ОборотКт, КонечныйОстатокДт, КонечныйОстатокКт, ВидЗатратНУСубконто", 0, 0, 0, 0, 0, 0, ?(НЕ ЗначениеЗаполнено(ВидЗатрат), Неопределено, ВидЗатрат));
	//Результат = Новый Структура("НачальныйОстатокДт, НачальныйОстатокКт, ОборотДт, ОборотКт, КонечныйОстатокДт, КонечныйОстатокКт, ВидЗатратНУСубконто", 0, 0, 0, 0, 0, 0, Неопределено);

	Запрос = Новый Запрос;

	ВидУчетаСтр = "";
	Если ВидУчета = Неопределено Тогда
		// БУ
		РегистрУчета = "Хозрасчетный";
	Иначе
		РегистрУчета = "Налоговый";
		ВидУчетаСтр = " И ВидУчета = &ВидУчета";
		Запрос.УстановитьПараметр("ВидУчета", ВидУчета); // Перечисления.ВидыУчетаПоПБУ18.НУ
	КонецЕсли;

	Если ВидЗатрат <> Неопределено Тогда
		Субконто = "Субконто" + Формат(НомерСуб, "ЧГ=0");
		ТочноеСуб = " И " + Субконто + "." + ?(ТипСуб = 1, "ВидРасходовНУ", "ВидПрочихДоходовИРасходов") + " = &ЗначениеСуб";
		ТочноеСуб1 = Субконто + "." + ?(ТипСуб = 1, "ВидРасходовНУ", "ВидПрочихДоходовИРасходов") + " = &ЗначениеСуб";
		Запрос.УстановитьПараметр("ЗначениеСуб", ВидЗатрат);
	Иначе
		ТочноеСуб = "";
		Субконто = "";
	КонецЕсли;

	Если Корр <> Неопределено Тогда
		Итоги = "	Сумма(СуммаОборотДт) КАК СуммаОборотДт,
				|	Сумма(СуммаОборотКт) КАК СуммаОборотКт,
				|	КорСчет";
		Запрос.УстановитьПараметр("КорСчет", Корр);
	Иначе
		Итоги = "	Сумма(СуммаНачальныйОстатокДт) КАК СуммаНачальныйОстатокДт,
				|	Сумма(СуммаНачальныйОстатокКт) КАК СуммаНачальныйОстатокКт,
				|	Сумма(СуммаОборотДт) КАК СуммаОборотДт,
				|	Сумма(СуммаОборотКт) КАК СуммаОборотКт,
				|	Сумма(СуммаКонечныйОстатокДт) КАК СуммаКонечныйОстатокДт,
				|	Сумма(СуммаКонечныйОстатокКт) КАК СуммаКонечныйОстатокКт";

	КонецЕсли;

	ОтборОргКорр = ?(Корр = Неопределено, "", "Организация = &Организация");
	ОтборОрг = ?(Корр <> Неопределено, "КорСчет = &КорСчет", "Организация = &Организация");

	УслПоСчетуКорр = ?(Корр = Неопределено, "", "Счет = &Счет");
	УслПоСчету = ?(Корр <> Неопределено, "", "Счет = &Счет");

	Запрос.Текст = "
	|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.Счет КАК Счет,
	|	" + Итоги + "
	|	ИЗ
	|		РегистрБухгалтерии." + РегистрУчета + "." + ?(Корр = Неопределено, "ОстаткиИОбороты", "Обороты") + "(&ДатаНач, &ДатаКон, , " + УслПоСчетуКорр + " , " + УслПоСчету + ", "+ ОтборОргКорр + "
	|	, " + ОтборОрг + ВидУчетаСтр + ?(Корр = Неопределено, ТочноеСуб, "") + ") КАК ОстаткиИОбороты " + ?(Корр = Неопределено, "", " Где " + ТочноеСуб1) + "
	// |	СГРУППИРОВАТЬ По Счет" + ?(Субконто = "", "", ", " + Субконто) + ?(Корр <> Неопределено, ", КорСчет", "");
	|	СГРУППИРОВАТЬ По Счет" + ?(Корр <> Неопределено, ", КорСчет", "");

	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет", Счет);
	ТаблРезультат = Запрос.Выполнить().Выгрузить();
	Если ТаблРезультат.Количество() > 0 Тогда

		Результат.ОборотДт = ПроверкаПоказателя(ТаблРезультат[0].СуммаОборотДт);
		Результат.ОборотКт = ПроверкаПоказателя(ТаблРезультат[0].СуммаОборотКт);
		Если НЕ ПустаяСтрока(Субконто) Тогда
			//Результат.ВидЗатратНУСубконто = ТаблРезультат[0][Субконто];
		КонецЕсли;

		Если Корр = Неопределено Тогда
			Результат.НачальныйОстатокДт = ПроверкаПоказателя(ТаблРезультат[0].СуммаНачальныйОстатокДт);
			Результат.НачальныйОстатокКт = ПроверкаПоказателя(ТаблРезультат[0].СуммаНачальныйОстатокКт);
			Результат.КонечныйОстатокДт = ПроверкаПоказателя(ТаблРезультат[0].СуммаКонечныйОстатокДт);
			Результат.КонечныйОстатокКт = ПроверкаПоказателя(ТаблРезультат[0].СуммаКонечныйОстатокКт);
		КонецЕсли;

		// Проверка валидности полей.
		Если Счет.Вид = ВидСчета.Активный Тогда

			Если Результат.НачальныйОстатокКт <> 0 Тогда
				Результат.НачальныйОстатокДт = Результат.НачальныйОстатокДт + (-Результат.НачальныйОстатокКт);
				Результат.НачальныйОстатокКт = 0;
			КонецЕсли;

			Если Результат.КонечныйОстатокКт <> 0 Тогда
				Результат.КонечныйОстатокДт = Результат.КонечныйОстатокДт + (-Результат.КонечныйОстатокКт);
				Результат.КонечныйОстатокКт =0;
			КонецЕсли;

		КонецЕсли;

		Если Счет.Вид = ВидСчета.Пассивный Тогда

			Если Результат.НачальныйОстатокДт <> 0 Тогда
				Результат.НачальныйОстатокКт = Результат.НачальныйОстатокКт + (-Результат.НачальныйОстатокДт);
				РезультатСуммаНачальныйОстатокДт = 0;
			КонецЕсли;

			Если Результат.КонечныйОстатокДт <> 0 Тогда
				Результат.КонечныйОстатокКт = Результат.КонечныйОстатокКт + (-Результат.КонечныйОстатокДт);
				Результат.КонечныйОстатокДт =0;
			КонецЕсли;

		КонецЕсли;

		Возврат Результат;

	Иначе
		Возврат Результат; // Возвратим пустой результат.
	КонецЕсли;

КонецФункции // ПолучитьБухгалтерскийИтогПоСчетуИВидуЗатрат

// ПроверкаПоказателя
//
Функция ПроверкаПоказателя(Значение)
	Если Значение = Null Тогда
		Возврат 0;
	Иначе
		Возврат Значение;
	КонецЕсли;
КонецФункции // ПроверкаПоказателя

// Заполнить
// Выполняет основные операции отчета
//
Процедура Заполнить()

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Необходимо выбрать организацию, по которой будет производиться анализ.");
		Возврат;
	КонецЕсли;

	ПодготовительныеОперации();

	// Организуме цикл по св-вам счетов
	ПС = ПланыСчетов.Хозрасчетный;

	// Возможно получаемые итоги
	Итоги = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт,
	        |НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
	        |КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт,
	        |КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт";

	// Создадим список значений для субконто
	ВидыЭталонныхСубконто = Новый СписокЗначений;

	// Считываем пользовательские настройки
	АРПС = ?(ПолучитьСвойствоРаздела("ТехАнализБУ", "АРПС") = 1, Истина, Ложь); // код ошибки 1
	АСПЗ = ?(ПолучитьСвойствоРаздела("ТехАнализБУ", "АСПЗ") = 1, Истина, Ложь); // код ошибки 2
	АБИ  = ?(ПолучитьСвойствоРаздела("ТехАнализБУ", "АБИ" ) = 1, Истина, Ложь); // код ошибки 3
	АБП  = ?(ПолучитьСвойствоРаздела("ТехАнализБУ", "АБП" ) = 1, Истина, Ложь); // код ошибки 4

	Если АБИ И (НачалоДня(ДатаКон) <> НачалоДня(КонецМесяца(ДатаКон))) Тогда

		Сообщить("Проверка валютных остатков и счетов осуществляется только на конечную");
		Сообщить("дату отчетного периода. Функция проверки будет отключена.");

	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСвойстваСчетов Цикл

		// Считываем данные из настройки
		ИмяНастройки             = СокрП(СтрПоказатели.ИмяНастройки);
		ИмяСчетаБУ               = СокрП(СтрПоказатели.ИмяСчетаБУ);
		КодСчетаБУ               = СокрП(СтрПоказатели.КодСчетаБУ);
		ТипСчета                 = СокрП(СтрПоказатели.ТипСчета);

		// Пока не используются, значение берется из ПС пользователя
		Количественный           = СокрП(СтрПоказатели.Количественный);
		Валютный                 = СокрП(СтрПоказатели.Валютный);

		Субконто1                = СокрП(СтрПоказатели.Субконто1);
		Субконто2                = СокрП(СтрПоказатели.Субконто2);
		Субконто3                = СокрП(СтрПоказатели.Субконто3);

		ПодлежитЗакрытию         = СокрП(СтрПоказатели.ПодлежитЗакрытию);

		// Т.к. в настройках два пс, для БП и УПП то работаем только с активным
		Если ИмяНастройки <> АктивныйПланСчетов() Тогда
			Продолжить;
		КонецЕсли;

		// Находим счет в ПС
		Счет = ПС.НайтиПоКоду(КодСчетаБУ); // КодСчетаБУ из эталонного ПС
		// Вставка.
		//Если Счет.Код <> "97.01" Тогда
		//	продолжить;
		//КонецЕсли;

		Если Счет <> ПС.ПустаяСсылка() Тогда
			Состояние("Анализируется счет " + Счет.Код);
		Иначе
			// Ошибка
			ВставкаСтрокиРасшифровки("Номер счета " + КодСчетаБУ, "Не найден в плане счетов бухгалтерского учета", 1);
			Продолжить;
		КонецЕсли;

		АнализСчетов44 = Ложь;
		Если (КодСчетаБУ = "44.01") Или (КодСчетаБУ = "44.02") Тогда
			АнализСчетов44 = Истина;
			СтруктураДляРасшифровкиПриРаскрытииБУ = ПолучитьБухгалтерскийИтогПоСчетуИВидуЗатрат(Счет, Перечисления.ВидыРасходовНУ.ТранспортныеРасходы, Неопределено, 1, 1);
		КонецЕсли;

		Если АРПС Тогда
			Если ((ТипСчета = "1") Или (ТипСчета = "Активный")) И (Счет.Вид <> ВидСчета.Активный) Тогда
			// Ошибка
				ВставкаСтрокиРасшифровки("Номер счета " + КодСчетаБУ + " счет должен быть активным.", "", 1,, Счет);
			КонецЕсли;

			Если ((ТипСчета = "2") Или (ТипСчета = "Пассивный")) И (Счет.Вид <> ВидСчета.Пассивный) Тогда
			// Ошибка
				ВставкаСтрокиРасшифровки("Номер счета " + КодСчетаБУ + " счет должен быть пассивным.", "", 1,, Счет);
			КонецЕсли;

			Если ((ТипСчета = "3") Или (ТипСчета = "Активный/Пассивный")) И (Счет.Вид <> ВидСчета.АктивноПассивный) Тогда
			// Ошибка
				ВставкаСтрокиРасшифровки("Номер счета " + КодСчетаБУ + " счет должен быть активно-пассивным.", "", 1,, Счет);
			КонецЕсли;
		КонецЕсли; // Флаг АРПС

		СуммаКонечныйОстатокДт = СКД_СКК(Счет, "СуммаКонечныйОстатокДт", "Сумма");
		СуммаКонечныйОстатокКт = СКД_СКК(Счет, "СуммаКонечныйОстатокКт", "Сумма");

		КоличествоКонечныйОстатокДт = СКД_СКК(Счет, "КоличествоКонечныйОстатокДт", "Количество");
		КоличествоКонечныйОстатокКт = СКД_СКК(Счет, "КоличествоКонечныйОстатокКт", "Количество");

		ВалютнаяСуммаКонечныйОстатокДт = СКД_СКК(Счет, "ВалютнаяСуммаКонечныйОстатокДт", "ВалютнаяСумма");
		ВалютнаяСуммаКонечныйОстатокКт = СКД_СКК(Счет, "ВалютнаяСуммаКонечныйОстатокКт", "ВалютнаяСумма");

		Если (ПодлежитЗакрытию = "1") И (АСПЗ) Тогда
			// У счетов не должно быть сумм, счета должны быть закрыты
			Если ((СуммаКонечныйОстатокДт <> 0 Или СуммаКонечныйОстатокКт <> 0) И (НЕ АнализСчетов44))
			 Или ((АнализСчетов44) И (СуммаКонечныйОстатокДт <> СтруктураДляРасшифровкиПриРаскрытииБУ.КонечныйОстатокДт)) Тогда
				ВставкаСтрокиРасшифровки("Счет " + КодСчетаБУ + " найден остаток по " + ?(СуммаКонечныйОстатокДт <> 0, " дебету", "кредиту") + " Сумма " + ?(СуммаКонечныйОстатокДт <> 0, Формат(СуммаКонечныйОстатокДт, "ЧЦ = 15; ЧДЦ = 2; ЧРД=,; ЧН=-; ЧС = 0"), Формат(СуммаКонечныйОстатокКт, "ЧЦ = 15; ЧДЦ = 2; ЧРД=,; ЧН=-; ЧС = 0")), ПолучитьРасшифровку(Счет.Код), 2,, Счет);
			КонецЕсли;
		КонецЕсли;

		Если Не АБИ Тогда
			Продолжить;
		КонецЕсли;

		// На активном счете всегда будет дебетовый остаток, на пассивном - кредитовый.
		// На активно-пассивном, если остаток больше нуля, то дебетовый, если меньше, то кредитовый
		Если (СуммаКонечныйОстатокДт >= 0) И (СуммаКонечныйОстатокКт > 0) И ((ТипСчета = "1") Или (ТипСчета = "Активный")) Тогда
			// Ошибка
			ВставкаСтрокиРасшифровки("Номер счета " + КодСчетаБУ + " найден остаток по кредиту. Сумма " + Формат(СуммаКонечныйОстатокКт, "ЧЦ = 15; ЧДЦ = 2; ЧРД=,; ЧН=-; ЧС = 0"), "На активном счете всегда дебетовый остаток.", 2,, Счет);
		КонецЕсли;

		Если (СуммаКонечныйОстатокДт > 0) И (СуммаКонечныйОстатокКт >= 0) И ((ТипСчета = "2") Или (ТипСчета = "Пассивный")) Тогда
			// Ошибка
			ВставкаСтрокиРасшифровки("Номер счета " + КодСчетаБУ + " найден остаток по дебету. Сумма " + Формат(СуммаКонечныйОстатокДт, "ЧЦ = 15; ЧДЦ = 2; ЧРД=,; ЧН=-; ЧС = 0"), "На пассивном счете всегда кредитовый остаток.", 2,, Счет);
		КонецЕсли;

		// Просматриваем список видов субконто, которые должны быть у выбранного счета, 
		// и ищем их в плане счетов. Если не находим - выдает строку в результаты анализа.

		// Аналитика
		Если (РегламентированнаяОтчетность.ПустоеЗначение(Субконто1)) И
			 (РегламентированнаяОтчетность.ПустоеЗначение(Субконто2)) И
			 (РегламентированнаяОтчетность.ПустоеЗначение(Субконто3)) Тогда

			// Обрабатываем синтетические счета, по данным эталонного плана счетов, соответствует ТРЕТИЙ стадии

			Если (СуммаКонечныйОстатокДт < 0) И ((ТипСчета = "1") Или (ТипСчета = "Активный")) Тогда
				// Ошибка
				ВставкаСтрокиРасшифровки("Отрицательный остаток в рублях по дебету активного счета " + КодСчетаБУ + ". Сумма " + Формат(СуммаКонечныйОстатокДт, "ЧЦ = 15; ЧДЦ = 2; ЧРД=,; ЧН=-; ЧС = 0"), "Откройте карточку счета, проверьте проведенные операции.",  3,, Счет);
			КонецЕсли;

			Если (СуммаКонечныйОстатокКт < 0) И ((ТипСчета = "2") Или (ТипСчета = "Пассивный")) Тогда
				// Ошибка
				ВставкаСтрокиРасшифровки("Отрицательный остаток в рублях по кредиту пассивного счета " + КодСчетаБУ + ". Сумма " + Формат(СуммаКонечныйОстатокКт, "ЧЦ = 15; ЧДЦ = 2; ЧРД=,; ЧН=-; ЧС = 0"), "Откройте карточку счета, проверьте проведенные операции.",  3,, Счет);
			КонецЕсли;

			// Анализ бухгалтерских итогов

			// Проверим, если ли счет в списке счетов используемых в Рег. отчетности.
			РезультатПоискаРО = мПроверяемаяАналитикаНаСчетах.Найти(Счет.Код, "СчетБУ");

			// Возможно, неправильно: в эталонном плане счетов нет субконто, а в базе - есть.
			// Необходимо дороботать: если субконто пользовательские, то не анализировать.
			Если (Счет.ВидыСубконто.Количество() > 0) И (РезультатПоискаРО <> Неопределено) Тогда
				ВставкаСтрокиРасшифровки("Возможно наличие ошибки. Счет " + Счет.Код + " субконто в ПС есть, в эталонном макете нет.", "", 2);
				Продолжить;
			КонецЕсли;

			Если НЕ Счет.Количественный Тогда
				// Обороты счетов без субконто
				Если (Счет.Вид = ВидСчета.Активный) И (НЕ Счет.Валютный) Тогда
					Если СуммаКонечныйОстатокДт < 0 Тогда
						ВставкаСтрокиРасшифровки("Отрицательный остаток в рублях по дебету активного счета " + Счет.Код, "Откройте карточку счета, проверьте проведенные операции.", 3,, Счет);
					КонецЕсли;
				КонецЕсли;

				Если (Счет.Вид = ВидСчета.Пассивный) И (НЕ Счет.Валютный) Тогда
					Если СуммаКонечныйОстатокКт < 0 Тогда
						ВставкаСтрокиРасшифровки("Отрицательный остаток в рублях по кредиту пассивного счета " + Счет.Код, "Откройте карточку счета, проверьте проведенные операции.", 3,, Счет);
					КонецЕсли;
				КонецЕсли;

				Если (Счет.Вид = ВидСчета.Активный) И (Счет.Валютный) Тогда
					Если ВалютнаяСуммаКонечныйОстатокДт < 0 Тогда
						ВставкаСтрокиРасшифровки("Отрицательный остаток в валюте по дебету активного счета " + Счет.Код, "Откройте карточку счета, проверьте проведенные операции. Возможно необходимо пересчитать валютные остатки.", 3,, Счет);
					КонецЕсли;
				КонецЕсли;

				Если (Счет.Вид = ВидСчета.Пассивный) И (Счет.Валютный) Тогда
					Если ВалютнаяСуммаКонечныйОстатокКт < 0 Тогда
						ВставкаСтрокиРасшифровки("Отрицательный остаток в валюте по кредиту пассивного счета " + Счет.Код, "Откройте карточку счета, проверьте проведенные операции. Возможно необходимо пересчитать валютные остатки.", 3,, Счет);
					КонецЕсли;
				КонецЕсли;

			ИначеЕсли Счет.Количественный Тогда // Если счет количественный

				Если СуммаКонечныйОстатокДт = 0 И КоличествоКонечныйОстатокДт <> 0 Тогда
					ВставкаСтрокиРасшифровки("Отсутствует денежная оценка количественного остатка по дебету счета " + Счет.Код, "", 3,, Счет);
				КонецЕсли;

				Если СуммаКонечныйОстатокКт = 0 И КоличествоКонечныйОстатокКт <> 0 Тогда
					ВставкаСтрокиРасшифровки("Отсутствует денежная оценка количественного остатка по кредиту счета " + Счет.Код, "", 3,, Счет);
				КонецЕсли;

				Если СуммаКонечныйОстатокДт <> 0 И КоличествоКонечныйОстатокДт = 0 Тогда
					ВставкаСтрокиРасшифровки("Отсутствует остаток на конец периода в количественном выражении, при остатке в денежном выражении на сумму " + СуммаКонечныйОстатокДт + " по дебету счета " + Счет.Код, "", 3, , Счет);
				КонецЕсли;

				Если СуммаКонечныйОстатокКт <> 0 И КоличествоКонечныйОстатокКт = 0 Тогда
					ВставкаСтрокиРасшифровки("Отсутствует остаток на конец периода в количественном выражении, при остатке в денежном выражении на сумму " + СуммаКонечныйОстатокКт + " по кредиту счета " + Счет.Код, "", 3, , Счет);
				КонецЕсли;

			КонецЕсли; // Если счет количественный/не_количественный

			Если Счет.Валютный Тогда

				Если ВалютнаяСуммаКонечныйОстатокДт < 0 И Счет.Вид = ВидСчета.Активный Тогда
					ВставкаСтрокиРасшифровки("Отрицательный остаток по дебету активного валютного счета счет " + Счет.Код, "", 3, , Счет);
				КонецЕсли;

				Если ВалютнаяСуммаКонечныйОстатокКт < 0 И Счет.Вид = ВидСчета.Пассивный Тогда
					ВставкаСтрокиРасшифровки("Отрицательный остаток по кредиту пассивного валютного счета " + Счет.Код, "", 3,, Счет);
				КонецЕсли;

				// ПолучитьКурсВалюты(Валюта, ДатаКурса).Кратность
			КонецЕсли;

		ИначеЕсли НЕ ((РегламентированнаяОтчетность.ПустоеЗначение(Субконто1)) И
			      (РегламентированнаяОтчетность.ПустоеЗначение(Субконто2)) И
			      (РегламентированнаяОтчетность.ПустоеЗначение(Субконто3))) И АСПЗ Тогда
			// Если в ЭТАЛОННОМ ПС есть субчета, поехали аналитику

			// До конца блока, этот участок программы просматривает список видов субконто, которые должны быть у счета

			// Проверим, если ли счет в списке счетов используемых в Рег. отчетности.
			РезультатПоискаРО = мПроверяемаяАналитикаНаСчетах.Найти(Счет.Код, "СчетБУ");

			Если (Счет.ВидыСубконто.Количество() = 0) И (РезультатПоискаРО <> Неопределено) Тогда
				ВставкаСтрокиРасшифровки("Возможно наличие ошибки. Счет " + Счет.Код + " субконто в макете есть, в базе нет.", "Разное кол-во субконто в эталонном макете и ПС.", 2,, Счет);
				Продолжить;
			КонецЕсли;

			СубконтоСовпалоСЭталоном = Ложь;
			ПустоеСубконто = Ложь;

			ВидыЭталонныхСубконто.Очистить();

			СтрокаСубконто = "";

			// Запишем в список значений, эталонные субконто
			Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(Субконто1) Тогда
				ВидыЭталонныхСубконто.Добавить(Субконто1);
			КонецЕсли;

			Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(Субконто2) Тогда
				ВидыЭталонныхСубконто.Добавить(Субконто2);
			КонецЕсли;

			Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(Субконто3) Тогда
				ВидыЭталонныхСубконто.Добавить(Субконто3);
			КонецЕсли;

			// Взводим флаг
			ПриАналитическойСхемеОшибкаВыведена = Ложь;

			// Выполним анализ для каждого эталонного субконто в цикле
			Для Инд1 = 0 По ВидыЭталонныхСубконто.Количество() - 1 Цикл

				СубконтоСовпалоСЭталоном = Ложь;
				// Субконто пользователя, может быть неограниченное кол-во
				Для Каждого ТекСубконто из Счет.ВидыСубконто Цикл

					// Субконто пользователей не анализируем
					Если НЕ ТекСубконто.ВидСубконто.Предопределенный Тогда
						Продолжить;
					КонецЕсли;

					Попытка
						// В случае, если субконто в макете задано с ошибкой (наша ошибка), то выдастся сообщение стандартного плана.
						НаименованиеСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ВидыЭталонныхСубконто[Инд1].Значение].Наименование
					Исключение

						// Выведем ошибку
						ВставкаСтрокиРасшифровки("Нет предполагаемого субконто. Счет " + Счет.Код + ".", "Искомое значение " + Субконто1 + " " + Субконто2 + " " + Субконто3, 2);
						Продолжить;

					КонецПопытки;

					Если НаименованиеСубконто = ТекСубконто.ВидСубконто.Наименование Тогда

						СубконтоСовпалоСЭталоном = Истина;
						// Смотрим на бухгалтерские остатки по субконто

						// Следующий блок всегда будет исполнятся один раз, завязан на флаг ПриАналитическойСхемеОшибкаВыведена.
						Если НЕ ПриАналитическойСхемеОшибкаВыведена Тогда

							ПриАналитическойСхемеОшибкаВыведена = Истина;
							мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма, Количество, ВалютнаяСумма", "Счет, Субконто" + Строка(Инд1 + 1), ДатаНач, ДатаКон, , Счет.Код, ТекСубконто.ВидСубконто, , , "Организация", Организация);
							ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет);

							Если ВыборкаПоСчету = Неопределено Тогда
								ВыборкаПоСчетуОпределена = Ложь;
							Иначе
								КонОстатокДт = ВыборкаПоСчету.СуммаКонечныйОстатокДт;
								КонОстатокКт = ВыборкаПоСчету.СуммаКонечныйОстатокКт;
								ВыборкаПоСчетуОпределена = Истина;
							КонецЕсли;

							Если (ВыборкаПоСчетуОпределена) И (НЕ Счет.Валютный) И (НЕ Счет.Количественный) И (КонОстатокДт < 0) И (Счет.Вид = ВидСчета.Активный) Тогда
								ВставкаСтрокиРасшифровки("Отрицательный остаток в рублях по дебету активного счета " + Счет.Код + ". Сумма " + КонОстатокДт, "", 3, , Счет);
							КонецЕсли;

							Если (ВыборкаПоСчетуОпределена) И (НЕ Счет.Валютный) И (НЕ Счет.Количественный) И (КонОстатокКт < 0) И (Счет.Вид = ВидСчета.Пассивный) Тогда
								ВставкаСтрокиРасшифровки("Отрицательный остаток в рублях по кредиту пассивного счета " + Счет.Код + ". Сумма " + КонОстатокКт, "", 3, , Счет);
							КонецЕсли;

							Если Счет.Валютный И ВыборкаПоСчетуОпределена Тогда

								КонОстатокДт = ВыборкаПоСчету.ВалютнаяСуммаКонечныйОстатокДт;
								КонОстатокКт = ВыборкаПоСчету.ВалютнаяСуммаКонечныйОстатокКт;

								Если (КонОстатокДт < 0) И (Счет.Вид = ВидСчета.Активный) Тогда
									ВставкаСтрокиРасшифровки("Отрицательный остаток в валюте по дебету активного счета " + Счет.Код + ". Сумма " + КонОстатокДт, "Возможно, необходимо пересчитать валютные остатки.", 3, , Счет);
								КонецЕсли;

								Если (КонОстатокКт < 0) И (Счет.Вид = ВидСчета.Пассивный) Тогда
									ВставкаСтрокиРасшифровки("Отрицательный остаток в валюте по кредиту пассивного счета " + Счет.Код + ". Сумма " + КонОстатокКт, "Возможно, необходимо пересчитать валютные остатки.", 3, , Счет);
								КонецЕсли;

							КонецЕсли; // Валютный

							Если Счет.Количественный И ВыборкаПоСчетуОпределена Тогда

								КонОстатокДт = ВыборкаПоСчету.КоличествоКонечныйОстатокДт;
								КонОстатокКт = ВыборкаПоСчету.КоличествоКонечныйОстатокКт;

								Если (КонОстатокДт < 0) И (Счет.Вид = ВидСчета.Активный) Тогда
									ВставкаСтрокиРасшифровки("Отрицательный остаток в количественном выражении по дебету активного счета " + Счет.Код + ". Сумма " + КонОстатокДт, "", 3, , Счет);
								КонецЕсли;

								Если (КонОстатокКт < 0) И (Счет.Вид = ВидСчета.Пассивный) Тогда
									ВставкаСтрокиРасшифровки("Отрицательный остаток в количественном выражении по кредиту пассивного счета " + Счет.Код + ". Сумма " + КонОстатокКт, "", 3, , Счет);
								КонецЕсли;

							КонецЕсли; // Количественный
						КонецЕсли;


						// Субконто с индексом Инд1 найдено в списке субконтов к счету Счет.Код
						// поэтому прерываем цикл и переходим к следующему субконто от этого же счета
						Прервать;

					КонецЕсли;

				КонецЦикла;

				// Проверим, если ли счет в списке счетов используемых в Рег. отчетности.
				РезультатПоискаРО = мПроверяемаяАналитикаНаСчетах.Найти(Счет.Код, "СчетБУ");

				Если (НЕ СубконтоСовпалоСЭталоном) И (РезультатПоискаРО <> Неопределено) Тогда
					ВставкаСтрокиРасшифровки("Возможно наличие ошибки. Счет " + Счет.Код + ". Аналитика в эталонном ПС отличается от аналитики текущего ПС.", "Предпологается наличие на счете субконто " + ВидыЭталонныхСубконто[0].Значение + ".", 2);
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла; // Основной цикл программы

	Если АБП Тогда
		Проводки();
	КонецЕсли;

	Если АБИ И (НЕ (НачалоДня(ДатаКон) <> НачалоДня(КонецМесяца(ДатаКон)))) Тогда
		Валюта2();
	КонецЕсли;

	Состояние("Проверяется корректность расчета остаточной стоимости объектов ОС...");
	ПроверитьИтогиДляЦелейДекларированияПоИмуществу();

	// Выводим итоговые строки
	Если НЕ АРПС Тогда
		ВставкаСтрокиРасшифровки("Раздел не анализировался.", "Анализ отключен в настройке.", 1, Истина);
	ИначеЕсли мКолвоОшибокПервойГруппы = 0 Тогда
		ВставкаСтрокиРасшифровки("Ошибок в данном разделе не обнаружено.", "", 1, Истина);
	Иначе
		ВставкаСтрокиРасшифровки("По анализу плана счетов обнаружены ошибки.", "Приведите план счетов в соответствие рекомендованному фирмой ""1С"". В противном случае, возможно, формы бухгалтерской отчетности будут заполнены некорректно.", 1, Истина);
	КонецЕсли;

	Если НЕ АСПЗ Тогда
		ВставкаСтрокиРасшифровки("Раздел не анализировался.", "Анализ отключен в настройке.", 2, Истина);
	ИначеЕсли мКолвоОшибокВторойГруппы = 0 Тогда
		ВставкаСтрокиРасшифровки("Ошибок в данном разделе не обнаружено.", "", 2, Истина);
	Иначе
		ВставкаСтрокиРасшифровки("По анализу плана счетов обнаружены ошибки.", "", 2, Истина);
	КонецЕсли;

	Если НЕ АБИ Тогда
		ВставкаСтрокиРасшифровки("Раздел не анализировался.", "Анализ отключен в настройке.", 3, Истина);
	ИначеЕсли мКолвоОшибокТретийГруппы = 0 Тогда
		ВставкаСтрокиРасшифровки("Ошибок в данном разделе не обнаружено.", "", 3, Истина);
	Иначе
		ВставкаСтрокиРасшифровки("При анализе бухгалтерских итогов были обнаружены ошибки.", "", 3, Истина);
	КонецЕсли;

	Если НЕ АБП Тогда
		ВставкаСтрокиРасшифровки("Раздел не анализировался.", "Анализ отключен в настройке.", 4, Истина);
	ИначеЕсли мКолвоОшибокЧетвертойГруппы = 0 Тогда
		ВставкаСтрокиРасшифровки("Ошибок в данном разделе не обнаружено.", "", 4, Истина);
	Иначе
		ВставкаСтрокиРасшифровки("При анализе бухгалтерских проводок обнаружены ошибки.", "Возможно неверное формирование отчетных форм", 4, Истина);
	КонецЕсли;

	мТехАнализБУ.Области.Заголовок1.Текст = "Названия выполненных операций и найденные ошибки";

КонецПроцедуры // Заполнить

// Процедура вызывается при нажатии кнопки "Сформировать" 
// верхней командной панели формы.
//
Процедура КоманднаяПанельФормыСформировать(Кнопка)

	// Основная процедура заполнения отчета
	Заполнить();

КонецПроцедуры // КоманднаяПанельФормыСформировать

// Формирует строку расшифровки, которая будет передаваться в итоговый отчет 
// использоваться для вызова стандартных отчетов.
//
// Параметры:
//  Текст        - строка, краткое описание ошибки.
//  Комментарий  - сторка, развренутое описание ошибки
//  ГруппаОшибок - число, обозначает тип оишбки. Прнимает значения 1, 2, 3 или 4.
//  ПоследняяСтрока - булево, обозначет последнюю строку отчета о результатах
//                 анализа - итоговое заключение. Истина, если последняя строка.
//
Процедура ВставкаСтрокиРасшифровки(Знач Текст, Знач Комментарий, Знач ГруппаОшибок, Знач ПоследняяСтрока = Ложь, Счет = Неопределено, СсылкаНаОС = Неопределено)

	Если ГруппаОшибок = 1 Тогда
		мКолвоОшибокПервойГруппы = мКолвоОшибокПервойГруппы + 1;
		СтрокаФокусировки = мКолвоОшибокПервойГруппы;
	ИначеЕсли ГруппаОшибок = 2 Тогда
		мКолвоОшибокВторойГруппы = мКолвоОшибокВторойГруппы + 1;
		СтрокаФокусировки = мКолвоОшибокВторойГруппы;
	ИначеЕсли ГруппаОшибок = 3 Тогда
		мКолвоОшибокТретийГруппы = мКолвоОшибокТретийГруппы + 1;
		СтрокаФокусировки = мКолвоОшибокТретийГруппы;
	ИначеЕсли ГруппаОшибок = 4 Тогда
		мКолвоОшибокЧетвертойГруппы = мКолвоОшибокЧетвертойГруппы + 1;
		СтрокаФокусировки = мКолвоОшибокЧетвертойГруппы;
	КонецЕсли;

	// Текущая сфокусированная строка
	мТехАнализБУ.ТекущаяОбласть = мТехАнализБУ.Области["П" + Формат(ГруппаОшибок, "ЧГ=0") + "00000000003_" + Формат(СтрокаФокусировки, "ЧГ=0")];

	ВставитьДополнительнуюСтроку("ТехАнализБУ");

	мТехАнализБУ.Области["П" + Формат(ГруппаОшибок, "ЧГ=0") + "00000000001_" + Формат(СтрокаФокусировки + 1, "ЧГ=0")].Значение = "";

	Если Не ПоследняяСтрока Тогда
		мТехАнализБУ.Области["П" + Формат(ГруппаОшибок, "ЧГ=0") + "00000000002_" + Формат(СтрокаФокусировки + 1, "ЧГ=0")].Значение = Формат(-1 + СтрокаФокусировки + 1, "ЧГ=0");
	КонецЕсли;

	мТехАнализБУ.Области["П" + Формат(ГруппаОшибок, "ЧГ=0") + "00000000003_" + Формат(СтрокаФокусировки + 1, "ЧГ=0")].Значение = Текст;
	мТехАнализБУ.Области["П" + Формат(ГруппаОшибок, "ЧГ=0") + "00000000003_" + Формат(СтрокаФокусировки + 1, "ЧГ=0")].ЦветТекста = Новый Цвет(38, 113, 153);
	мТехАнализБУ.Области["П" + Формат(ГруппаОшибок, "ЧГ=0") + "00000000004_" + Формат(СтрокаФокусировки + 1, "ЧГ=0")].Значение = Комментарий;

	//Попытка
	//	СчетКод = Счет.Код;
	//Исключение

	//КонецПопытки;

	Если Счет <> Неопределено Тогда
		НоваяСтрока = мТаблицаСсылокСчетов.Добавить();
		НоваяСтрока.Ссылка = Счет;
		НоваяСтрока.НомерГруппы = ГруппаОшибок;
		НоваяСтрока.НомерОшибки = СтрокаФокусировки;
		Если СсылкаНаОС <> Неопределено Тогда
			НоваяСтрока.ОС = СсылкаНаОС;
		КонецЕсли;

		// Ставим признак расшифровки, у третий и четвертой колонки
		мТехАнализБУ.Области["П" + Формат(ГруппаОшибок, "ЧГ=0") + "00000000003_" + Формат(СтрокаФокусировки + 1, "ЧГ=0")].Расшифровка = Истина;
		мТехАнализБУ.Области["П" + Формат(ГруппаОшибок, "ЧГ=0") + "00000000004_" + Формат(СтрокаФокусировки + 1, "ЧГ=0")].Расшифровка = Истина;
	Иначе
		// Ставим признак расшифровки, у третий и четвертой колонки
		мТехАнализБУ.Области["П" + Формат(ГруппаОшибок, "ЧГ=0") + "00000000003_" + Формат(СтрокаФокусировки + 1, "ЧГ=0")].Расшифровка = Неопределено;
		мТехАнализБУ.Области["П" + Формат(ГруппаОшибок, "ЧГ=0") + "00000000004_" + Формат(СтрокаФокусировки + 1, "ЧГ=0")].Расшифровка = Неопределено;

	КонецЕсли;

КонецПроцедуры // ВставкаСтрокиРасшифровки

// Функция вычисляет конечный остаток по дебету/кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - конечный остаток по дебету счета, указанного в параметре.
//
Функция СКД_СКК(Счет, ДтКт, Ресурс)

	Перем Итог;

	// СуммаКонечныйОстатокДт
	// СуммаКонечныйОстатокКт

	Если Ресурс = "Сумма" Тогда
		Итог = мБухИтоги.ПолучитьИтог(ДтКт, "Счет", Счет);
	ИначеЕсли Ресурс = "Количество" Тогда
		Итог = мБухИтогиКоличество.ПолучитьИтог(ДтКт, "Счет", Счет);
	ИначеЕсли Ресурс = "ВалютнаяСумма" Тогда
		Итог = мБухИтогиВалюта.ПолучитьИтог(ДтКт, "Счет", Счет);
	КонецЕсли;

	Возврат Итог;

КонецФункции // СКД_СКК()

// Процедура вызывается при нажатии кнопки "Настройка" верхней командной панели
// формы.
//
// Вызывает диалог настройки анализа.
//
Процедура КоманднаяПанельФормыКнопкаНастройка(Кнопка)

	ОткрытьФормуНастройкиОтчета("ВыбратьДляНастройки");

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройка()

// Формирует дерево значений - структуру параметров анализа учета.,
//
Процедура ФормироватьНастройкиОтчетов()

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мНастройки                  = Новый ДеревоЗначений;
	мНастройки.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100); // Название настройки
	мНастройки.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100); // Для какой страницы
	мНастройки.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100); // Табл поле
	мНастройки.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мНастройки.Колонки.Добавить("Настройка", ОписаниеТиповЧисло1);

	мНастройки.Строки.Очистить();

	СтрокаУровня1 = мНастройки.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ТехАнализБУ";
	СтрокаУровня1.Представление            = "Технологический анализ";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТехАнализБУ";
	СтрокаУровня1.Настройка                = 1;

	СтрокаУровня2 = СтрокаУровня1.Строки.Добавить();
	СтрокаУровня2.ИмяСтраницы              = "АРПС";
	СтрокаУровня2.Представление            = "Анализировать рабочий план счетов";
	СтрокаУровня2.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТехАнализБУ";
	СтрокаУровня2.Настройка                = 1;

	СтрокаУровня2 = СтрокаУровня1.Строки.Добавить();
	СтрокаУровня2.ИмяСтраницы              = "АСПЗ";
	СтрокаУровня2.Представление            = "Анализ счетов подлежащих закрытию";
	СтрокаУровня2.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТехАнализБУ";
	СтрокаУровня2.Настройка                = 1;

	СтрокаУровня2 = СтрокаУровня1.Строки.Добавить();
	СтрокаУровня2.ИмяСтраницы              = "АБИ";
	СтрокаУровня2.Представление            = "Анализ бухгалтерских итогов";
	СтрокаУровня2.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТехАнализБУ";
	СтрокаУровня2.Настройка                = 1;

	СтрокаУровня2 = СтрокаУровня1.Строки.Добавить();
	СтрокаУровня2.ИмяСтраницы              = "АБП";
	СтрокаУровня2.Представление            = "Анализ бухгалтерских проводок";
	СтрокаУровня2.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТехАнализБУ";
	СтрокаУровня2.Настройка                = 1;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// По данным макета СвойстваСчетов задает первоначальные натсройки 
// анализа плана счетов бухгалтеркого учета.
//
Процедура ЗаполнитьСвойстваСчетов()

	МакетСвойстваСчетов = ЭтотОбъект.ПолучитьМакет("СвойстваСчетов");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	мТаблицаСвойстваСчетов.Очистить();

	Для Инд = 0 По МакетСвойстваСчетов.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСвойстваСчетов.Области[Инд];

		Если ТекОбласть.Имя <> АктивныйПланСчетов() Тогда
			Продолжить;
		КонецЕсли;

		ИмяНастройки = ТекОбласть.Имя;
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			ТекОбласть    = МакетСвойстваСчетов.Области[Инд];

			// Имя счета бухгалтерского учета, первая колонка
			ИмяСчетаБУ = СокрЛП(МакетСвойстваСчетов.Область(Ном, 1).Текст);

			// Код счета бухгалтерского учета
			КодСчетаБУ = СокрЛП(МакетСвойстваСчетов.Область(Ном, 2).Текст);

			// Имя счета налогового учета
			НаименованиеСчетаБУ = СокрЛП(МакетСвойстваСчетов.Область(Ном, 3).Текст);

			// Тип счета А, П, АП - 0
			ТипСчета            = СокрЛП(МакетСвойстваСчетов.Область(Ном, 4).Текст);

			// Тип счета А, П, АП - 0
			Забалансовый        = СокрЛП(МакетСвойстваСчетов.Область(Ном, 5).Текст);

			// Тип счета, валютный
			Валютный            =  СокрЛП(МакетСвойстваСчетов.Область(Ном, 7).Текст);

			// Тип счета, количественный
			Количественный      =  СокрЛП(МакетСвойстваСчетов.Область(Ном, 8).Текст);

			Субконто1 =  СокрЛП(МакетСвойстваСчетов.Область(Ном, 9).Текст);
			Субконто2 =  СокрЛП(МакетСвойстваСчетов.Область(Ном, 10).Текст);
			Субконто3 =  СокрЛП(МакетСвойстваСчетов.Область(Ном, 11).Текст);

			// Счет подлежит закрытию 1, пусто - нет
			ПодлежитЗакрытию =  СокрЛП(МакетСвойстваСчетов.Область(Ном, 12).Текст);

			// 12-я колонка не занята
			КонтрольСальдоКомментарий =  СокрЛП(МакетСвойстваСчетов.Область(Ном, 13).Текст);

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСвойстваСчетов.Добавить();

			НоваяСтрока.ИмяНастройки        = ИмяНастройки;

			НоваяСтрока.ИмяСчетаБУ          = ИмяСчетаБУ;
			НоваяСтрока.КодСчетаБУ          = КодСчетаБУ;

			НоваяСтрока.НаименованиеСчетаБУ = НаименованиеСчетаБУ;
			НоваяСтрока.ТипСчета            = ТипСчета;
			НоваяСтрока.Забалансовый        = Забалансовый;
			НоваяСтрока.Валютный            = Валютный;
			НоваяСтрока.Количественный      = Количественный;

			НоваяСтрока.Субконто1 = Субконто1;
			НоваяСтрока.Субконто2 = Субконто2;
			НоваяСтрока.Субконто3 = Субконто3;

			НоваяСтрока.ПодлежитЗакрытию = ПодлежитЗакрытию;
			НоваяСтрока.КонтрольСальдоКомментарий = КонтрольСальдоКомментарий;

		КонецЦикла; // Весь макет

	КонецЦикла; // Все области макета

КонецПроцедуры // ЗаполнитьСвойстваСчетов()

// По данным макета СвойстваСчетов задает список счетов используемых в РО
//
Процедура ЗаполнитьСчетаРО()

	МакетСвойстваСчетов = ПолучитьМакет("СвойстваСчетов");

	мПроверяемаяАналитикаНаСчетах.Очистить();

	ТекОбласть    = МакетСвойстваСчетов.Области.ПроверяемаяАналитикаНаСчетах;
	Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл

		// Имя счета бухгалтерского учета, первая колонка
		СчетБУ = СокрЛП(МакетСвойстваСчетов.Область(Ном, 1).Текст);

		// формируем таблицу значений, содержащей состав показателей отчета
		НоваяСтрока = мПроверяемаяАналитикаНаСчетах.Добавить();
		НоваяСтрока.СчетБУ = СчетБУ;

	КонецЦикла; // Весь макет

КонецПроцедуры // ЗаполнитьСчетаРО

// На основании макета СвойстваСчетов формирует эталонный список
// недопустимых проводок.
//
Процедура ЗагрузитьПоказателиИзМакета(РазделВМакете)

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СвойстваСчетов");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.

			Дт         = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Кт         = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ДтИскл     = СокрП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			КтИскл     = СокрП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			Инструкция = СокрП(МакетСоставаПоказателей.Область(Ном, 5).Текст);


			Если РазделВМакете = "НедопустимыеПроводки" Тогда
				НовСтрока = мТаблицаНедопустимыхПроводок.Добавить();
			КонецЕсли;

			НовСтрока.Дт         = Дт;
			НовСтрока.Кт         = Кт;
			НовСтрока.ДтИскл     = ДтИскл;
			НовСтрока.КтИскл     = КтИскл;
			НовСтрока.Инструкция = Инструкция;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ЗагрузитьПоказателиИзМакета

// По данным расшифровки ячейки отчета, вызывает стандартный отчет 
// с требуемыми параметрами формирования.
//
Процедура РаботаСРасшифровкойЭлементов(ИмяЯчейки)
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	РедакцияКонфигурации = РегламентированнаяОтчетность.РедакцияКонфигурации();
	Если (ИДКонфигурации = "БП" И РедакцияКонфигурации = "2.0") ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		Если Найти(ИмяЯчейки, "П2") > 0 Тогда
			СтандартнаяОбработка = Ложь;
			НомерСтр = Сред(ИмяЯчейки, 15);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("НомерГруппы", 2);
			
			Группа2 = мТаблицаСсылокСчетов.НайтиСтроки(СтруктураПоиска);
			Попытка
				Счет = Группа2[Число(НомерСтр) - 1 -1].Ссылка;
			Исключение
				Возврат;
			КонецПопытки;
			
			СтандартнаяОбработка = Ложь;
			
			ФормаОтчета = Отчеты.КарточкаСчета.ПолучитьФорму();
			ФормаОтчета.РежимРасшифровки = Истина;
			ФормаОтчета.Счет          = Счет;
			ФормаОтчета.НачалоПериода = ДатаНач;
			ФормаОтчета.КонецПериода  = ДатаКон;
			ФормаОтчета.Организация   = Организация;
			ФормаОтчета.Настроить();
			ФормаОтчета.Открыть();
			ФормаОтчета.ОбновитьОтчет();
			
		ИначеЕсли Найти(ИмяЯчейки, "П3") > 0 Тогда
			СтандартнаяОбработка = Ложь;
			НомерСтр = Сред(ИмяЯчейки, 15);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("НомерГруппы", 3);
			
			Группа3 = мТаблицаСсылокСчетов.НайтиСтроки(СтруктураПоиска);
			Попытка
				Счет = Группа3[Число(НомерСтр) - 1 -1].Ссылка;
				ОС = Группа3[Число(НомерСтр) - 1 -1].ОС;
			Исключение
				Возврат;
			КонецПопытки;
			
			СтандартнаяОбработка = Ложь;
			
			ФормаОтчета = Отчеты.КарточкаСчета.ПолучитьФорму();
			ФормаОтчета.РежимРасшифровки = Истина;
			ФормаОтчета.Счет          = Счет;
			ФормаОтчета.НачалоПериода = ДатаНач;
			ФормаОтчета.КонецПериода  = ДатаКон;
			ФормаОтчета.Организация   = Организация;
			Если ЗначениеЗаполнено(ОС) Тогда
				ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроек, "Субконто1", ОС);
			КонецЕсли;
			ФормаОтчета.Настроить();
			ФормаОтчета.Открыть();
			ФормаОтчета.ОбновитьОтчет();
			
		ИначеЕсли Найти(ИмяЯчейки, "П4") > 0 Тогда
			НомерСтр = Сред(ИмяЯчейки, 15);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("НомерГруппы", 4);
			
			Группа4 = мТаблицаСсылокСчетов.НайтиСтроки(СтруктураПоиска);
			Попытка
				ВыбраннаяСтрока = Группа4[Число(НомерСтр) - 1 -1].Ссылка;
			Исключение
				Возврат;
			КонецПопытки;
			
			СтандартнаяОбработка = Ложь;
			
			Если ТипЗнч(ВыбраннаяСтрока) = Тип("ДокументСсылка.ОперацияБух") Тогда
				
				ФормаОперации = ВыбраннаяСтрока.ПолучитьОбъект().ПолучитьФорму();
				//ФормаОперации.ПараметрТекущаяСтрока = ВыбраннаяСтрока.НомерСтроки;
				ФормаОперации.ПараметрРегистр       = "Хозрасчетный";
				ФормаОперации.Открыть();
			Иначе
				ФормаОперации = ВыбраннаяСтрока.ПолучитьОбъект().ПолучитьФорму();
				//ФормаОперации.ПараметрТекущаяСтрока = ВыбраннаяСтрока.НомерСтроки;
				//ФормаОперации.ПараметрРегистр       = "Хозрасчетный";
				ФормаОперации.Открыть();
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Найти(ИмяЯчейки, "П2") > 0 Тогда
			СтандартнаяОбработка = Ложь;
			НомерСтр = Сред(ИмяЯчейки, 15);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("НомерГруппы", 2);
			
			Группа2 = мТаблицаСсылокСчетов.НайтиСтроки(СтруктураПоиска);
			Попытка
				Счет = Группа2[Число(НомерСтр) - 1 -1].Ссылка;
			Исключение
				Возврат;
			КонецПопытки;
			
			СтандартнаяОбработка = Ложь;
			
			ФормаОтчета = Отчеты.КарточкаСчетаХозрасчетный.ПолучитьФорму();
			ФормаОтчета.Открыть();
			ФормаОтчета.Счет = Счет;
			ФормаОтчета.ДатаНач = ДатаНач;
			ФормаОтчета.ДатаКон = ДатаКон;
			ФормаОтчета.Организация = Организация;
			ФормаОтчета.ОбновитьОтчет();
			
		ИначеЕсли Найти(ИмяЯчейки, "П3") > 0 Тогда
			СтандартнаяОбработка = Ложь;
			НомерСтр = Сред(ИмяЯчейки, 15);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("НомерГруппы", 3);
			
			Группа3 = мТаблицаСсылокСчетов.НайтиСтроки(СтруктураПоиска);
			Попытка
				Счет = Группа3[Число(НомерСтр) - 1 -1].Ссылка;
				ОС = Группа3[Число(НомерСтр) - 1 -1].ОС;
			Исключение
				Возврат;
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ОС) Тогда
				Отбор = СоздатьТаблицуДляХраненияОтбора(Истина);
				НовСтр = Отбор.Добавить();
				НовСтр.ПутьКДанным = "Субконто1";
				НовСтр.ВидСравнения = ВидСравнения.Равно;
				НовСтр.Значение = ОС;
				НовСтр.Использование = Истина;
			КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
			
			Отчет = Отчеты.КарточкаСчетаХозрасчетный.Создать();
			
			КарточкаСчета = Новый Структура;
			Если ЗначениеЗаполнено(ОС) Тогда
				КарточкаСчета.Вставить("Отбор", Отбор);
			КонецЕсли;
			
			КарточкаСчета.Вставить("Счет", Счет);
			КарточкаСчета.Вставить("ДатаНач", ДатаНач);
			КарточкаСчета.Вставить("ДатаКон", ДатаКон);
			КарточкаСчета.Вставить("Организация", Организация);
			Отчет.Настроить(КарточкаСчета);
			ФормаОтчета = Отчет.ПолучитьФорму(, , Новый УникальныйИдентификатор());
			ФормаОтчета.ПоказыватьЗаголовок = Истина;
			ФормаОтчета.ОбновитьОтчет();
			ФормаОтчета.Открыть();
			
		ИначеЕсли Найти(ИмяЯчейки, "П4") > 0 Тогда
			НомерСтр = Сред(ИмяЯчейки, 15);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("НомерГруппы", 4);
			
			Группа4 = мТаблицаСсылокСчетов.НайтиСтроки(СтруктураПоиска);
			Попытка
				ВыбраннаяСтрока = Группа4[Число(НомерСтр) - 1 -1].Ссылка;
			Исключение
				Возврат;
			КонецПопытки;
			
			СтандартнаяОбработка = Ложь;
			
			Если ТипЗнч(ВыбраннаяСтрока) = Тип("ДокументСсылка.ОперацияБух") Тогда
				
				ФормаОперации = ВыбраннаяСтрока.ПолучитьОбъект().ПолучитьФорму();
				//ФормаОперации.ПараметрТекущаяСтрока = ВыбраннаяСтрока.НомерСтроки;
				ФормаОперации.ПараметрРегистр       = "Хозрасчетный";
				ФормаОперации.Открыть();
			Иначе
				ФормаОперации = ВыбраннаяСтрока.ПолучитьОбъект().ПолучитьФорму();
				//ФормаОперации.ПараметрТекущаяСтрока = ВыбраннаяСтрока.НомерСтроки;
				//ФормаОперации.ПараметрРегистр       = "Хозрасчетный";
				ФормаОперации.Открыть();
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РаботаСРасшифровкойЭлементов

// ПроверитьИтогиДляЦелейДекларированияПоИмуществу
//
Процедура ПроверитьИтогиДляЦелейДекларированияПоИмуществу()

	ГодДанных = Год(ДатаКон);
	Запрос = Новый Запрос();
	МассивСчетов01 = Новый Массив;
	МассивСчетов01.Добавить(ПланыСчетов.Хозрасчетный.ОСвОрганизации); // 01.01
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		МассивСчетов01.Добавить(ПланыСчетов.Хозрасчетный.ОСвРамкахЦелевогоФинансирования); // 01.11
	КонецЕсли;
	
	МассивСчетов01.Добавить(ПланыСчетов.Хозрасчетный.МЦвОрганизации); // 03.01
	МассивСчетов01.Добавить(ПланыСчетов.Хозрасчетный.МЦ_ПредоставленныеВоВременноеВладение); // 03.02
	МассивСчетов01.Добавить(ПланыСчетов.Хозрасчетный.МЦ_ПредоставленныеВоВременноеПользование); // 03.03
	МассивСчетов01.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходныеВложения); // 03.04
	ТекстНадпись = "01 и 03";

	МассивСчетов02 = Новый Массив;
	МассивСчетов02.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_01);
	МассивСчетов02.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_03);
	ТекстНадпись2 = "02.01 и 02.02";

	Запрос.УстановитьПараметр("Счет01", МассивСчетов01);
	Запрос.УстановитьПараметр("Счет02", МассивСчетов02);

	Запрос.УстановитьПараметр("Счет010", ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств);
	Запрос.УстановитьПараметр("Суб", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("Орг", Организация);

	СтруктураМес = Новый Структура("_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12", "январе", "феврале", "марте", "апреле", "мае", "июне", "июле", "августе", "сентябре", "октябре", "ноябре", "декабре");

	Для Инд = 1 по Месяц(ДатаКон) Цикл
		Запрос.Текст = "";
		СформироватьЗапросДляСбораДанных(Запрос, Инд, ГодДанных);

		Запрос.Текст = "ВЫБРАТЬ
		| ОбщиеДанные.СУБКОНТО
		|, СУММА(ОбщиеДанные.СНД01) КАК СНД01
		|, СУММА(ОбщиеДанные.СНК02) КАК СНК02
		|, СУММА(ОбщиеДанные.СНД010) СНД010
		|, ОбщиеДанные.НомерМесяца
		| ИЗ ( " + Запрос.Текст + " ) КАК ОбщиеДанные
		| СГРУППИРОВАТЬ ПО ОбщиеДанные.Субконто
		|                , ОбщиеДанные.НомерМесяца
		| ИМЕЮЩИЕ СУММА(ОбщиеДанные.СНД01) - СУММА(ОбщиеДанные.СНК02) - СУММА(ОбщиеДанные.СНД010) < 0
		| УПОРЯДОЧИТЬ ПО ОбщиеДанные.НомерМесяца";

		Результат = Запрос.Выполнить().Выгрузить();

		Для каждого Стр Из Результат Цикл
			ВставкаСтрокиРасшифровки("Для основного средства " + Стр.Субконто.Наименование + ", в " + СтруктураМес["_" + Строка(Стр.НомерМесяца)] + " месяце обнаружена отрицательная остаточная стоимость, рассчитываемая как
			| сальдо начальное по дебету счета " + ТекстНадпись + " минус сальдо начальное по кредиту счета " + ТекстНадпись2 + " минус сальдо начальное по дебету счета 010. Расшифровка " + Строка(Стр.СНД01) + " - " + Строка(Стр.СНК02) + " - " + Строка(Стр.СНД010), "", 3);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ПроверитьИтогиДляЦелейДекларированияПоИмуществу

Процедура СформироватьЗапросДляСбораДанных(Запрос, НомерМесяца, ГодДанных)
	ТекстЗапрос = ?(НЕ ПустаяСтрока(Запрос.Текст), Запрос.Текст + " ОБЪЕДИНИТЬ ", "");
	Запрос.Текст = ТекстЗапрос + "
	|ВЫБРАТЬ 
	|ИтоговыйЗапрос.Субконто КАК Субконто,
	|ИтоговыйЗапрос.СНД01 КАК СНД01,
	|ИтоговыйЗапрос.СНК02 КАК СНК02,
	|ИтоговыйЗапрос.СНД010 КАК СНД010
	|, " + НомерМесяца + " КАК НомерМесяца
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Субконто,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт
	|		КОНЕЦ КАК СНД01,
	|		0 КАК СНК02, 0 КАК СНД010
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач" + Строка(НомерМесяца) + ", &ДатаКон" + Строка(НомерМесяца) + ", , , Счет В (&Счет01), &Суб, Организация = &Орг) КАК ХозрасчетныйОстаткиИОбороты
	|
	|	ОБЪЕДИНИТЬ
	|
	|	ВЫБРАТЬ
	|		ХозрасчетныйОстаткиИОбороты2.Субконто1 КАК Субконто,
	|		0 КАК СНД01,
	|		ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты2.СуммаНачальныйОстатокКт ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ ХозрасчетныйОстаткиИОбороты2.СуммаНачальныйОстатокКт
	|		КОНЕЦ КАК СНК02, 0 КАК СНД010
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач" + Строка(НомерМесяца) + ", &ДатаКон" + Строка(НомерМесяца) + ", , , Счет В (&Счет02), &Суб, Организация = &Орг) КАК ХозрасчетныйОстаткиИОбороты2

	|	ОБЪЕДИНИТЬ
	|
	|	ВЫБРАТЬ
	|		ХозрасчетныйОстаткиИОбороты3.Субконто1 КАК Субконто
	|		,0 КАК СНД01,0 КАК СНК02,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОстаткиИОбороты3.СуммаНачальныйОстатокДт ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ ХозрасчетныйОстаткиИОбороты3.СуммаНачальныйОстатокДт
	|		КОНЕЦ КАК СНД010
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач" + Строка(НомерМесяца) + ", &ДатаКон" + Строка(НомерМесяца) + ", , , Счет = &Счет010, &Суб, Организация = &Орг) КАК ХозрасчетныйОстаткиИОбороты3
	|	) КАК ИтоговыйЗапрос";
	//|СГРУППИРОВАТЬ ПО
	//|	ИтоговыйЗапрос.Субконто
	//| ИМЕЮЩИЕ Сумма(ИтоговыйЗапрос.СНД01)- Сумма(ИтоговыйЗапрос.СНК02)- Сумма(ИтоговыйЗапрос.СНД010) < 0";
	ДатаНачалоПров = Дата(ГодДанных, НомерМесяца, 1);
	ДатаКонцаПров = КонецМесяца(ДатаНачалоПров);
	Запрос.УстановитьПараметр("ДатаНач" + Строка(НомерМесяца), Новый МоментВремени(ДатаНачалоПров));
	Запрос.УстановитьПараметр("ДатаКон" + Строка(НомерМесяца), Новый МоментВремени(ДатаКонцаПров));
КонецПроцедуры

// ВернутьУсловиеПроводки
//
Функция ВернутьУсловиеПроводки(Баланс, ВыборкаСчет, ТаблПроводок = Неопределено)

	Результат = Неопределено;

	СчетТекст = ВыборкаСчет.Код;

	Если ТаблПроводок = Неопределено Тогда
		ТаблицаПроводок = мТаблицаНедопустимыхПроводокВыбранная;
	Иначе
		ТаблицаПроводок = ТаблПроводок;
	КонецЕсли;

	РезультатПоискаСчета = ТаблицаПроводок.Найти(СчетТекст, Баланс);

	Родитель = "";
	Если РезультатПоискаСчета = Неопределено Тогда
		// Точного совпадения нет, поэтому возьмем родительский верхний счет.

		Если СтрЧислоВхождений(СчетТекст, ".") = 0 Тогда

			// Это и есть головной счет, оставляем всё без изменений.
			Родитель = СчетТекст;

		ИначеЕсли СтрЧислоВхождений(СчетТекст, ".") = 1 Тогда

			Родитель = ВыборкаСчет.Родитель.Код;
			Если РегламентированнаяОтчетность.ПустоеЗначение(Родитель) Тогда
				Родитель = Сред(СчетТекст, 1, Найти(СчетТекст, ".") - 1);
			КонецЕсли;

		ИначеЕсли СтрЧислоВхождений(СчетТекст, ".") = 2 Тогда

			Родитель = ВыборкаСчет.Родитель.Родитель.Код;

			Если РегламентированнаяОтчетность.ПустоеЗначение(Родитель) Тогда
				Родитель = Сред(СчетТекст, 1, Найти(СчетТекст, ".") - 1);
			КонецЕсли;

		КонецЕсли;

		// В некоторых ситуациях возможно, что у субсчета может быть родитель быть пустым. Такого не должно быть, но бывает.
		Если СчетТекст <> Родитель И Родитель <> "" Тогда
			// Осуществляем повторный поиск уже по родительскому счету
			РезультатПоискаСчета = ТаблицаПроводок.Найти(Родитель, Баланс);
			Возврат РезультатПоискаСчета;
		Иначе
			Возврат Неопределено;

		КонецЕсли;

	Иначе

		Возврат РезультатПоискаСчета;

	КонецЕсли;

КонецФункции // ВернутьУсловиеПроводки()

// НайтиЗначениеВСтроке
// Функция находит требуемое значение в строке, разделенных запятой.
// Заменяет запятые на Символы.ПС и затем берет нужное значение
// Параметры:
//  Строка1        - строка с данными
//  ИскомоеЗначение- испокомое значение
// Возвращаемое значение:
//  Истина         - в строке есть искомое значение
//  Ложь           - в строке нет искомого значения
//
Функция НайтиЗначениеВСтроке(Строка1, ИскомоеЗначение)
	Строка1 = СтрЗаменить(Строка1, ",", Символы.ПС);
	ВсегоВх = СтрЧислоВхождений(Строка1, Символы.ПС);
	Если ВсегоВх = 0 Тогда
		Если СокрЛП(Строка1) = ИскомоеЗначение Тогда
			Возврат Истина
		Иначе
			Возврат Ложь;
		КонецЕсли;

	Иначе

		Результат = Ложь;
		Для Инд = 1 По ВсегоВх + 1 Цикл

			ЗначСтр = СтрПолучитьСтроку(Строка1, Инд);
			Если СокрЛП(ЗначСтр) = ИскомоеЗначение Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;

		КонецЦикла;

		Возврат Результат;

	КонецЕсли;

КонецФункции // НайтиЗначениеВСтроке

// НайтиСчет
// Функция из списка счетов находит нужный или из группы счетов находит родительский
// Параметры:
//  СписокСчетов   - текст, список счетов, через зпт.
//  ВыборкаСчет    - выборка из общего журнала
// Возвращаемое значение:
//  Истина если найдено значение, ложь - в противном случае.
//
Функция НайтиСчет(СписокСчетов, ВыборкаСчет, РежимКонецГода = Ложь)

	СчетТекст = ВыборкаСчет.Код;
	Если НайтиЗначениеВСтроке(СписокСчетов, СчетТекст) Тогда
		// Нашли прямое указание счета в настройках
		Возврат Истина;
	КонецЕсли;

	// Прямого указания счета нет, ищем по родительскому счету
	// Например 20.01 нет, а счет 20 есть.

	Родитель = "";
	Если СтрЧислоВхождений(СчетТекст, ".") = 0 Тогда

		// Это и есть головной счет, оставляем всё без изменений.
		Родитель = СчетТекст;
		// ранее произвели поиск и не нашли, значит выход
		Возврат Ложь;

	ИначеЕсли СтрЧислоВхождений(СчетТекст, ".") = 1 Тогда

		Родитель = ВыборкаСчет.Родитель.Код;

	ИначеЕсли СтрЧислоВхождений(СчетТекст, ".") = 2 Тогда

		Родитель = ВыборкаСчет.Родитель.Родитель.Код;
		Если РежимКонецГода Тогда
			// Если счет 99.02.х или 90.01.х
			Если (Найти(СчетТекст, "99.02.") > 0)
			 Или (Найти(СчетТекст, "90.01.") > 0) 
			 Или (Найти(СчетТекст, "90.02.") > 0)
			 Или (Найти(СчетТекст, "90.07.") > 0)
			 Или (Найти(СчетТекст, "90.08.") > 0) Тогда
				Родитель = ВыборкаСчет.Родитель.Код;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если НайтиЗначениеВСтроке(СписокСчетов, Родитель) > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // НайтиСчет

// Выполняет сверку проводок в информационной базе с списком недопустимых проводок.
//
Процедура Проводки()

	// Исключаем из запроса на отбор проводок все проводки со вспомогательным счетом 000,
	// чтобы при проверке отчет не ругался на проводки ввода начальных остатков.
	СчетаИсключения = Новый СписокЗначений;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.Вспомогательный);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборПоОрганизации", Организация);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Код", СчетаИсключения);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ХозрасчетныйДвиженияССубконто.Период,
	               |	ХозрасчетныйДвиженияССубконто.Регистратор,
	               |	ХозрасчетныйДвиженияССубконто.СчетДт,
	               |	ХозрасчетныйДвиженияССубконто.СчетКт
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ДатаНач, &ДатаКон, Организация = &ОтборПоОрганизации) КАК ХозрасчетныйДвиженияССубконто
	               |ГДЕ
	               |	ХозрасчетныйДвиженияССубконто.СчетДт НЕ В(&Код)
	               |	И ХозрасчетныйДвиженияССубконто.СчетКт НЕ В(&Код)";

	Выборка = Запрос.Выполнить().Выбрать();

	Состояние("Проверяются проводки ...");

	//СписокСубсч = Новый СписокЗначений;
	//СписокСубсч.Добавить("16.02");
	//СписокСубсч.Добавить("76.Н");
	//СписокСубсч.Добавить("76.АВ");

	//СписокСубсч.Добавить("68.04.2");

	//СписокСубсч.Добавить("99.02.1");
	//СписокСубсч.Добавить("99.02.2");
	//СписокСубсч.Добавить("99.02.3");

	// Организуем список проводок, которые формируются по итогам года. В другие периоды, проводки могут тестироваться как ошибочные, в зависимости
	// от общего списка некорректных проводок.

	СписокВерныхПроводокДляКонцаГода = Новый ТаблицаЗначений;
	СписокВерныхПроводокДляКонцаГода.Колонки.Добавить("Дт");
	СписокВерныхПроводокДляКонцаГода.Колонки.Добавить("Кт");

	НовСтр = СписокВерныхПроводокДляКонцаГода.Добавить();
	НовСтр.Дт = "99.01.1";
	НовСтр.Кт = "99.01.2, 99.02";

	НовСтр = СписокВерныхПроводокДляКонцаГода.Добавить();
	НовСтр.Дт = "99.01.2";
	НовСтр.Кт = "99.01.2";

	// По дебету всегда указываем точный счет. Нельзя указать 99.02, подразумевая, что войдут все подсчета.
	НовСтр = СписокВерныхПроводокДляКонцаГода.Добавить();
	НовСтр.Дт = "99.02.1";
	НовСтр.Кт = "99.01.1";

	НовСтр = СписокВерныхПроводокДляКонцаГода.Добавить();
	НовСтр.Дт = "99.02.2";
	НовСтр.Кт = "99.01.1";

	НовСтр = СписокВерныхПроводокДляКонцаГода.Добавить();
	НовСтр.Дт = "99.02.3";
	НовСтр.Кт = "99.01.1";
	// Дт 99.02 Кт 99.01.1

	// По дебету всегда указываем точный счет. Нельзя указать 99.02, подразумевая, что войдут все подсчета.
	НовСтр = СписокВерныхПроводокДляКонцаГода.Добавить();
	НовСтр.Дт = "90.01.1";
	НовСтр.Кт = "90.09";

	НовСтр = СписокВерныхПроводокДляКонцаГода.Добавить();
	НовСтр.Дт = "90.01.2";
	НовСтр.Кт = "90.09";
	// Дт 90 Кт 90.09

	НовСтр = СписокВерныхПроводокДляКонцаГода.Добавить();
	НовСтр.Дт = "91.01";
	НовСтр.Кт = "91.09";

	НовСтр = СписокВерныхПроводокДляКонцаГода.Добавить();
	НовСтр.Дт = "91.09";
	НовСтр.Кт = "91.02";

	НовСтр = СписокВерныхПроводокДляКонцаГода.Добавить();
	НовСтр.Дт = "90.09";
	НовСтр.Кт = "90.01, 90.02, 90.07, 90.08, 90.09";

	Пока Выборка.Следующий() Цикл

		// Получаем реквизиты проводки
		Дт = Выборка.СчетДт.Код;
		Кт = Выборка.СчетКт.Код;

		ОригинальныйТекст = "Проводка -  Дт " + Дт + " Кт " + Кт;

		Если Выборка.Период <> '00010101000000' Тогда
			Если Месяц(Выборка.Период) = 12 Тогда
				// Операции при закрытии года проверяются в т.ч. на специальные проводки, осуществляемые при закрытии года.
				УсловиеТестаПроводки = ВернутьУсловиеПроводки("Дт", Выборка.СчетДт, СписокВерныхПроводокДляКонцаГода);
				Если УсловиеТестаПроводки <> Неопределено Тогда

					// Получим ограничения по кредиту
					СписокК = УсловиеТестаПроводки.Кт;
					РезультатПоискаСчетаПоДт = УсловиеТестаПроводки;

					// Если найден, то выдаем ошибку
					Если НайтиСчет(СписокК, Выборка.СчетКт, Истина) Тогда
						// Проводка обнанурежа в списке разрешенных проводок для конца года, поэтому дальше не тестируем.
						Продолжить;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		// Проводка Дт76.ОТ Кт 68.02 и 90.03 (91.1) Кт 76.ОТ - считаются верными.
		Если ((Дт = "76.ОТ") И (Кт = "68.02"))
		 Или (((Дт = "90.03") Или (Дт = 91.01)) И (Кт = "76.ОТ")) Тогда
			Продолжить;
		КонецЕсли;

		// Проводки Дт 99.02.4 в корреспонденции со счетами 09, 77, 99.01.1 с 31.12.2010 считаются верными
		Если Выборка.Период >= '20101231000000' И Дт = "99.02.4" И (Кт = "09" ИЛИ Кт = "77" ИЛИ Кт = "99.01.1") Тогда
			Продолжить;
		КонецЕсли;
		
		// Проводки Кт 99.02.4 в корреспонденции со счетами 09, 77, 99.01.1 с 31.12.2010 считаются верными
		Если Выборка.Период >= '20101231000000' И Кт = "99.02.4" И (Дт = "09" ИЛИ Дт = "77" ИЛИ Дт = "99.01.1") Тогда
			Продолжить;
		КонецЕсли;
		
		УсловиеТестаПроводки = ВернутьУсловиеПроводки("Дт", Выборка.СчетДт);

		Если УсловиеТестаПроводки <> Неопределено Тогда
			// Если требуемого условия в макете нет по дебету данного счета, то далее проверим по Кредиту

			// Получим ограничения по кредиту
			СписокК = УсловиеТестаПроводки.Кт;
			РезультатПоискаСчетаПоДт = УсловиеТестаПроводки;

			// Если найден, то выдаем ошибку
			Если НайтиСчет(СписокК, Выборка.СчетКт) Тогда
				ВставкаСтрокиРасшифровки("Найдена некорректная проводка. Операция требует дополнительной проверки. Документ """ + Выборка.Регистратор + """. " + ОригинальныйТекст, РезультатПоискаСчетаПоДт.Инструкция, 4, , Выборка.Регистратор);
				Продолжить;
			Иначе
			// Иначе, ищем по дополнительной колонке исключений
				СписокКДоп = РезультатПоискаСчетаПоДт.КтИскл;
				Если РегламентированнаяОтчетность.ПустоеЗначение(СписокКДоп) Тогда

					// Колонка пуста

					Продолжить;
				КонецЕсли;

				Если НайтиСчет(СписокКДоп, Выборка.СчетКт) Тогда
					// Значение найдено - это не ошибка
					Продолжить;
				Иначе
					// Значение не найдено - это ошибка, тип 2
					ВставкаСтрокиРасшифровки("Найдена некорректная проводка. Операция требует дополнительной проверки. Документ """ + Выборка.Регистратор + """. " + ОригинальныйТекст, РезультатПоискаСчетаПоДт.Инструкция, 4, , Выборка.Регистратор);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли УсловиеТестаПроводки = Неопределено Тогда
			// Если в макете есть недопустимые проводки с таким Кт, то проверяем далее

			// Найдем по кредиту, т.к. по дебету ничего нет
			РезультатПоискаСчетаПоКт = ВернутьУсловиеПроводки("Кт", Выборка.СчетКт);

			Если РезультатПоискаСчетаПоКт <> Неопределено Тогда
				СписокДДоп = РезультатПоискаСчетаПоКт.ДтИскл;
				Если РегламентированнаяОтчетность.ПустоеЗначение(СписокДДоп) Тогда
					Продолжить;
				КонецЕсли;

				Если НайтиСчет(СписокДДоп, Выборка.СчетДт) > 0 Тогда
					// это допустимая проводка
					Продолжить;
				Иначе
					ВставкаСтрокиРасшифровки("Найдена некорректная проводка. Операция требует дополнительной проверки. Документ """ + Выборка.Регистратор + """. " + ОригинальныйТекст, РезультатПоискаСчетаПоКт.Инструкция, 4, , Выборка.Регистратор);
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // Проводки

// Процедура формирует реест валютных остатков, анализирет валютные итоги, 
// производит вычисления с курсом валюты, при необходимости выдает соответствующие 
// предупреждения.
//
Процедура Валюта2()

	ПС = ПланыСчетов.Хозрасчетный;
	МоментДокумента = Новый Граница(ДатаКон, ВидГраницы.Включая);

	ВидыСубконто = Новый Массив();

	СтруктураОтбора = Новый Структура;

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяНастройки", АктивныйПланСчетов());
	СтруктураПоиска.Вставить("Валютный", "истина");
	ВалютныеСчета = мТаблицаСвойстваСчетов.НайтиСтроки(СтруктураПоиска);

	Состояние("Проверяются валютные счета ...");

	ТаблицаОбработанныхВалют = Новый СписокЗначений;
	Для Каждого Счета из ВалютныеСчета Цикл

		Счет = ПС.НайтиПоКоду(Счета.КодСчетаБУ); // КодСчетаБУ из эталонного ПС

		Если НЕ Счет.Валютный Тогда
			Продолжить;
		КонецЕсли;

		ВидыСубконто.Очистить();
		СтруктураОтбора.Очистить();

		СтруктураОтбора.Вставить("Организация", Организация);
		СтруктураОтбора.Вставить("Счет", Счет);

		// Соберем субконто
		Реквизиты    = "Счет,Валюта";
		Для Каждого ТекВидСубконто из Счет.ВидыСубконто Цикл

			Если Не (ТекВидСубконто.ТолькоОбороты) Тогда
				ВидыСубконто.Добавить(ТекВидСубконто.ВидСубконто);
				Реквизиты = Реквизиты + ",Субконто" + (ВидыСубконто.ВГраница() + 1);
			КонецЕсли;

		КонецЦикла;

		// Посчитаем остатки
		РеестрОстатков = РегистрыБухгалтерии.Хозрасчетный.Остатки(МоментДокумента,ВидыСубконто,СтруктураОтбора,Реквизиты,"Сумма,ВалютнаяСумма");

		Для каждого Стр из РеестрОстатков цикл

			Если НЕ (Стр.Валюта.Код <> "0") И (Стр.Валюта.Код <> "000") И (Стр.Валюта <> Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Стр.Валюта) Тогда

				СтрокаСообщения = "Обнаружены остатки по валютному счету без указания валюты - счет: "+ Счет.Код + " <"+Счет.Наименование+">";

				Для НомерСубконто = 1 по ВидыСубконто.Количество() Цикл
					СтрокаСообщения=СтрокаСообщения + "    - субконто <"+ВидыСубконто[НомерСубконто-1].Наименование+"> : """+ Стр["Субконто"+НомерСубконто]+"""";
				КонецЦикла;

				ВставкаСтрокиРасшифровки(СтрокаСообщения, "", 3,, Счет);
				Продолжить;
			КонецЕсли;

			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Стр.Валюта, датаКон);
			Кратность = СтруктураКурса.Кратность;
			Курс = СтруктураКурса.Курс / ?(Кратность = 0, 1, Кратность);

			Если (Курс = 0) И (ТаблицаОбработанныхВалют.НайтиПоЗначению(Стр.Валюта.Наименование) = Неопределено) Тогда
				СтрокаСообщения = "Не установлен курс валюты " + Стр.Валюта.Наименование + ". Валютная сумма по дебету счета " + Стр.Счет.Код + " " + Стр.ВалютнаяСуммаОстатокДт + " по кредиту " + Стр.ВалютнаяСуммаОстатокКт;
				ВставкаСтрокиРасшифровки(СтрокаСообщения, "", 3,, Счет);
			КонецЕсли;

			ПоследняяДатаВОтчетномПериоде = МаксимальнаяДатаДляВалюты(Стр.Валюта, ДатаКон);

			Если (ТипЗнч(ПоследняяДатаВОтчетномПериоде) = Тип("Число")) И (ТаблицаОбработанныхВалют.НайтиПоЗначению(Стр.Валюта.Наименование) = Неопределено) Тогда
				// Курс установлен не на последнюю дату отчетного периода
				СтрокаСообщения = "Не установлен курс валюты " + Стр.Валюта.Наименование + ". Необходимо указать курс на последнюю дату отчетного периода " + Формат(ДатаКон, "ДФ=дд.ММ.гггг");
				ВставкаСтрокиРасшифровки(СтрокаСообщения, "", 3,, Счет);
			КонецЕсли;

			Если (ПоследняяДатаВОтчетномПериоде <> ДатаКон) И (ТаблицаОбработанныхВалют.НайтиПоЗначению(Стр.Валюта.Наименование) = Неопределено) Тогда
				СтрокаСообщения = "Валюта " + Стр.Валюта.Наименование + ", курс " + Курс + " установленная дата курса " + Формат(ПоследняяДатаВОтчетномПериоде, "ДФ=дд.ММ.гггг") + " не равна дате конца отчетного периода " + Формат(ДатаКон, "ДФ=дд.ММ.гггг");
				ВставкаСтрокиРасшифровки(СтрокаСообщения, "", 3,, Счет);
			КонецЕсли;

			Если СчетаСособымПорядкомПереоценкиБУ(Стр.Счет) Тогда
				// Пропустим счета с особым порядком переоценки
				Продолжить;
			КонецЕсли;

			Если Счет.Забалансовый Тогда
				Продолжить;
			КонецЕсли;

			Если (Окр(Стр.СуммаОстатокДт / Курс, 2, 1) <> Стр.ВалютнаяСуммаОстатокДт) Или
			     (Окр(Стр.СуммаОстатокКт / Курс, 2, 1) <> Стр.ВалютнаяСуммаОстатокКт) Тогда

				СтрокаСообщения = "Необходимо пересчитать валютные остатки по курсу ЦБ РФ на " + Формат(ДатаКон, "ДФ=дд.ММ.гггг") + ". Счет " + Стр.Счет.Код;
				ВставкаСтрокиРасшифровки(СтрокаСообщения, "", 3,, Счет);
			КонецЕсли;

			ТаблицаОбработанныхВалют.Добавить(Стр.Валюта.Наименование);

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // Валюта2

// Возвращает дату, на которую установлен курс валюты, последнюю перед переданной датой.
//
// Параметры:
//  Валюта       - Ссылка.СправочникВалюты; валюта,для которй требуется узнать дату курса;
//  ТребуемаяДата - дата; дата, не позже которой надо анализировать курс.
//
// Возвращаемое значение:
//  дата, на которую послдений раз устанавливался курс валюты.
//
Функция МаксимальнаяДатаДляВалюты(Валюта, ТребуемаяДата)

	ОтборСтру = Новый Структура("Валюта");
	ОтборСтру.Валюта = Валюта;

	Переб = РегистрыСведений.КурсыВалют.Выбрать( ,, ОтборСтру, "Убыв");

	Результат = 0;
	Пока Переб.Следующий() Цикл

		Если ТребуемаяДата >= Переб.Период Тогда
			Результат = КонецДня(Переб.Период);
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции // МаксимальнаяДатаДляВалюты()

// Проверяет вхождение счета из плана счетов бухгалтерского учета в списко
// с особым порядком переоценки валютных остатков.
// 
// Параметры:
//  АнализируемыейСчет - счет плана счетов.
//
// Возвращаемое значение
//  булево. Истина, если переданный счет является счетом с особым порядком переоценки.
//
Функция СчетаСособымПорядкомПереоценкиБУ(АнализируемыйСчет)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("АнализируемыйСчет", АнализируемыйСчет);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетаСОсобымПорядкомПереоценкиБУ.Счет
	|ИЗ
	|	РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценкиБУ
	|ГДЕ
	|	СчетаСОсобымПорядкомПереоценкиБУ.Счет = &АнализируемыйСчет";
	
	Результат = НЕ Запрос.Выполнить().Пустой();

	Возврат Результат;

КонецФункции // СчетаСособымпорядкомПереоценкиБУ

// Обработчик события "ПриЗакрытии" формы.
// 
// Процедура сохраняет данные о настройках пользователя.
//
Процедура ПриЗакрытии()

	// Сохраним настройки, чтобы при открытии их же загрузить
	СохранитьЗначение("ТехнологическийАнализБухгалтерскогоУчетаХозрасчетныйНастройки", мНастройкиВыбранные);
	СохранитьЗначение("ТехнологическийАнализБухгалтерскогоУчетаХозрасчетныйПроводки", мТаблицаНедопустимыхПроводокВыбранная);
	СохранитьЗначение("ТехнологическийАнализБухгалтерскогоУчетаХозрасчетныйВерсия", мВерсияНастройки);

КонецПроцедуры // ПриЗакрытии

// Функция возвращает название активного плана счетов, ПланСчетов или ПланСчетовУПП,
// в зависимости от конфигурации, в которой запущен отчет.
//
Функция АктивныйПланСчетов()

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	РедакцияКонфигурации = РегламентированнаяОтчетность.РедакцияКонфигурации();
	
	Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
		Возврат "ПланСчетовУПП";
	ИначеЕсли ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" ИЛИ (ИДКонфигурации = "БП" И РедакцияКонфигурации = "2.0") Тогда
		Возврат "ПланСчетовБПКОРПБАУ";
	Иначе
		Возврат "ПланСчетов";
	КонецЕсли;


КонецФункции // АктивныйПланСчетов

// СравнитьПС_БП_и_УПП()
// Техническа процедура
//
Процедура СравнитьПС_БП_и_УПП()

	Поисковая = мТаблицаСвойстваСчетов.Скопировать();
	ПоисковаяСтруктура = Новый Структура;

	Для Каждого Строка из мТаблицаСвойстваСчетов Цикл

		ПоисковаяСтруктура.Очистить();

		ТекИмяСчетаБУ = Строка.ИмяСчетаБУ;
		ТекКодСчетаБУ = Строка.КодСчетаБУ;
		ТекНаименованиеСчетаБУ = Строка.НаименованиеСчетаБУ;
		ТекТипСчета = Строка.ТипСчета;
		ТекЗабалансовый = Строка.Забалансовый;
		ТекВалютный = Строка.Валютный;
		ТекКоличественный = Строка.Количественный;
		ТекСубконто1 = Строка.Субконто1;
		ТекСубконто2 = Строка.Субконто2;
		ТекСубконто3 = Строка.Субконто3;

		КодСчетаБУ = ТекКодСчетаБУ;
		ПоисковаяСтруктура.Вставить("КодСчетаБУ", КодСчетаБУ);
		Если Строка.ИмяНастройки = "ПланСчетов" Тогда
			ПС = "ПланСчетовУПП";
			ПоисковаяСтруктура.Вставить("ИмяНастройки", ПС);
		ИначеЕсли Строка.ИмяНастройки = "ПланСчетовУПП" Тогда
			ПС = "ПланСчетов";
			ПоисковаяСтруктура.Вставить("ИмяНастройки", ПС);
		КонецЕсли;

		НайденныйМассив = Поисковая.НайтиСтроки(ПоисковаяСтруктура);
		Если (НайденныйМассив.Количество() = 0) Или (НайденныйМассив = Неопределено) Тогда
			Сообщить("Счет " + КодСчетаБУ + " отсутствует в " + ПС);
		Иначе
			Для Каждого НайденногоЭлемента Из НайденныйМассив Цикл

				Если ТекИмяСчетаБУ <> НайденногоЭлемента.ИмяСчетаБУ Тогда
					// Сообщить("Счет " + КодСчетаБУ + ". Имя счета в " + Строка.ИмяНастройки + " = " + ТекИмяСчетаБУ + ", в " + ПС + " = " +НайденногоЭлемента.ИмяСчетаБУ);
				КонецЕсли;

				Если ТекНаименованиеСчетаБУ <> НайденногоЭлемента.НаименованиеСчетаБУ Тогда
					//Сообщить("Счет " + КодСчетаБУ + ". Наименование в " + Строка.ИмяНастройки + " = " + ТекНаименованиеСчетаБУ + ", в " + ПС + " = " +НайденногоЭлемента.НаименованиеСчетаБУ);
				КонецЕсли;

				Если ТекТипСчета <> НайденногоЭлемента.ТипСчета Тогда
					Сообщить("Счет " + КодСчетаБУ + ". Тип счета в " + Строка.ИмяНастройки + " = " + ТекТипСчета + ", в " + ПС + " = " + НайденногоЭлемента.ТипСчета);
				КонецЕсли;

				Если ТекЗабалансовый <> НайденногоЭлемента.Забалансовый Тогда
					Сообщить("Счет " + КодСчетаБУ + ". Тип счета в " + Строка.ИмяНастройки + " = " + ТекЗабалансовый + ", в " + ПС + " = " + НайденногоЭлемента.Забалансовый);
				КонецЕсли;

				Если ТекВалютный <> НайденногоЭлемента.Валютный Тогда
					Сообщить("Счет " + КодСчетаБУ + ". Тип счета в " + Строка.ИмяНастройки + " = " + ТекВалютный + ", в " + ПС + " = " + НайденногоЭлемента.Валютный);
				КонецЕсли;

				Если ТекКоличественный <> НайденногоЭлемента.Количественный Тогда
					Сообщить("Счет " + КодСчетаБУ + ". Тип счета в " + Строка.ИмяНастройки + " = " + ТекКоличественный + ", в " + ПС + " = " + НайденногоЭлемента.Количественный);
				КонецЕсли;

				Если ТекСубконто1 <> НайденногоЭлемента.Субконто1 Тогда
					Сообщить("Счет " + КодСчетаБУ + ". Субконто1 " + Строка.ИмяНастройки + " = " + ТекСубконто1 + ", в " + ПС + " = " + НайденногоЭлемента.Субконто1);
				КонецЕсли;

				Если ТекСубконто2 <> НайденногоЭлемента.Субконто2 Тогда
					Сообщить("Счет " + КодСчетаБУ + ". Субконто2 " + Строка.ИмяНастройки + " = " + ТекСубконто2 + ", в " + ПС + " = " + НайденногоЭлемента.Субконто2);
				КонецЕсли;

				Если ТекСубконто3 <> НайденногоЭлемента.Субконто3 Тогда
					Сообщить("Счет " + КодСчетаБУ + ". Субконто3 " + Строка.ИмяНастройки + " = " + ТекСубконто3 + ", в " + ПС + " = " + НайденногоЭлемента.Субконто3);
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;


	КонецЦикла;

КонецПроцедуры // СравнитьПС_БП_и_УПП()

//СравнитьПС_БП_и_УПП()
// вызывается из меню Действия
//
Процедура КоманднаяПанельФормыДействие2(Кнопка)

	СравнитьПС_БП_и_УПП();

КонецПроцедуры

// ПолеТабличногоДокументаТехАнализБУОбработкаРасшифровки
// Обработчик события "Расшифровки"
// запускается на ячейках, у которых св-во Расшифровка = Истина
//
Процедура ПолеТабличногоДокументаТехАнализБУОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	РаботаСрасшифровкойЭлементов(Элемент.ТекущаяОбласть.Имя);

КонецПроцедуры // ПолеТабличногоДокументаТехАнализБУОбработкаРасшифровки

// Процедура вызывается по нажатию кнопки "<" формы.
//   Инициализирует изменение периода построения отчета.
//
Процедура КнопкаПредыдущийПериодНажатие(Элемент)

	// Бухгалтерская отчетность составляется помесячно
	ИзменитьПериод(-1);

КонецПроцедуры // КнопкаПредыдущийПериодНажатие()

// Процедура вызывается по нажатию кнопки ">" формы.
//   Инициализирует изменение периода построения отчета.
//
Процедура КнопкаСледующийПериодНажатие(Элемент)

	// Бухгалтерская отчетность составляется помесячно
	ИзменитьПериод(1);

КонецПроцедуры // КнопкаСледующийПериодНажатие()

// Процедура устанавливает границы периода построения отчета.
//
// Параметры:
//  Шаг          - число, количество стандартных периодов, на которое необходимо
//                 сдвигать период построения отчета.
//
Процедура ИзменитьПериод(Шаг)

	ДатаКон = КонецМесяца(ДобавитьМесяц(ДатаКон, Шаг));
	ДатаНач = НачалоГода(ДатаКон);

	ПоказатьПериод();

КонецПроцедуры // ИзменитьПериод()

// Процедура управляет показом в форме периода построения отчета.
//
Процедура ПоказатьПериод()

	Если Месяц(ДатаКон) = 1 И ДатаКон <> '00010101000000' Тогда 
		СтрПериодОтчета = Формат(ДатаКон, "ДФ='ММММ гггг'") + " г." ;
	Иначе

		//ДатаНач = '00010101000000'

		Если НачалоДня(ДатаНач) <> НачалоДня(НачалоМесяца(ДатаНач)) Тогда
			Часть1 = формат(ДатаНач, "ДФ=дд.ММ.гггг") + " - ";
		Иначе
			Если ДатаНач = '00010101000000' Тогда
				Часть1 = "... - ";
			Иначе
				Часть1 = Формат(ДатаНач, "ДФ=ММММ") + " - ";
			КонецЕсли;
		КонецЕсли;

		Если НачалоДня(ДатаКон) <> НачалоДня(КонецМесяца(ДатаКон)) Тогда
			Если ДатаКон = '00010101000000' Тогда
				Часть2 = " ...";
			Иначе
				Часть2 = формат(ДатаКон, "ДФ=дд.ММ.гггг");
			КонецЕсли;
		Иначе
			Часть2 = Формат(ДатаКон, "ДФ='ММММ гггг'") + " г." ;
		КонецЕсли;

		СтрПериодОтчета = Часть1 + Часть2;

	КонецЕсли;
	
	// Покажем период в диалоге
	ЭлементыФормы.НадписьПериодСоставленияОтчета.Заголовок = СтрПериодОтчета;
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(ДатаНач), НачалоДня(ДатаКон), "ФП = Истина" );

	СтрПериодОтчета = СтрЗаменить(СтрПериодОтчета, "0:00:00", "");
	
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

	СтрПериодОтчета = СтрЗаменить(СтрПериодОтчета, "0:00:00", "");

	мТехАнализБУ.Области.ОсновнойТекст.Текст = "Контроль баланса бухгалтерских счетов и выявление технологических ошибок учета с целью подготовки данных для формирования документов внешней отчетности за период " + СтрПериодОтчета;

КонецПроцедуры // ПоказатьПериод()

// Версия настройки параметров анализа
// Версия эталонной настройки 6. Добавлены верные проводки:
// Дт 90.08.1 Кт 84.03
// Дт 84.01   Кт 84.03
// Дт 84.01   Кт 70
// Дт 84.02   Кт 25  
// Дт 90.08.1 Кт 25
// Дт 99.01.2 Кт 99.01.1
мВерсияНастройки = 6;

мТаблицаНедопустимыхПроводок = Новый ТаблицаЗначений;
мТаблицаНедопустимыхПроводок.Колонки.Добавить("Дт");
мТаблицаНедопустимыхПроводок.Колонки.Добавить("Кт");
мТаблицаНедопустимыхПроводок.Колонки.Добавить("ДтИскл");
мТаблицаНедопустимыхПроводок.Колонки.Добавить("КтИскл");
мТаблицаНедопустимыхПроводок.Колонки.Добавить("Инструкция");

мТаблицаСсылокСчетов    = Новый ТаблицаЗначений;
мТаблицаСсылокСчетов.Колонки.Добавить("Ссылка");
мТаблицаСсылокСчетов.Колонки.Добавить("НомерГруппы");
мТаблицаСсылокСчетов.Колонки.Добавить("НомерОшибки");
мТаблицаСсылокСчетов.Колонки.Добавить("ОС");

ОписаниеТиповСтрока15   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
ОписаниеТиповСтрока254  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

// Для работы с выборами периодов.
НП = Новый НастройкаПериода;

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1  = "П0000000000";
мИдГруппы2  = "П2000000000";
мИдГруппы3  = "П3000000000";
мИдГруппы4  = "П4000000000";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 1;
КолИсхСтрокИдГруппы2 = 1;
КолИсхСтрокИдГруппы3 = 1;
КолИсхСтрокИдГруппы4 = 1;

СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П100000000001", ОписаниеТиповСтрока15);
СтруктураГруппы1.Колонки.Добавить("П100000000002", ОписаниеТиповСтрока15);
СтруктураГруппы1.Колонки.Добавить("П100000000003", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П100000000004", ОписаниеТиповСтрока254);

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П200000000001", ОписаниеТиповСтрока15);
СтруктураГруппы2.Колонки.Добавить("П200000000002", ОписаниеТиповСтрока15);
СтруктураГруппы2.Колонки.Добавить("П200000000003", ОписаниеТиповСтрока254);
СтруктураГруппы2.Колонки.Добавить("П200000000004", ОписаниеТиповСтрока254);

СтруктураГруппы3 = Новый ТаблицаЗначений;
СтруктураГруппы3.Колонки.Добавить("П300000000001", ОписаниеТиповСтрока15);
СтруктураГруппы3.Колонки.Добавить("П300000000002", ОписаниеТиповСтрока15);
СтруктураГруппы3.Колонки.Добавить("П300000000003", ОписаниеТиповСтрока254);
СтруктураГруппы3.Колонки.Добавить("П300000000004", ОписаниеТиповСтрока254);

СтруктураГруппы4 = Новый ТаблицаЗначений;
СтруктураГруппы4.Колонки.Добавить("П400000000001", ОписаниеТиповСтрока15);
СтруктураГруппы4.Колонки.Добавить("П400000000002", ОписаниеТиповСтрока15);
СтруктураГруппы4.Колонки.Добавить("П400000000003", ОписаниеТиповСтрока254);
СтруктураГруппы4.Колонки.Добавить("П400000000004", ОписаниеТиповСтрока254);

мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1,  СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2,  СтруктураГруппы2);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы3,  СтруктураГруппы3);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы4,  СтруктураГруппы4);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы3, КолИсхСтрокИдГруппы3);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы4, КолИсхСтрокИдГруппы4);
