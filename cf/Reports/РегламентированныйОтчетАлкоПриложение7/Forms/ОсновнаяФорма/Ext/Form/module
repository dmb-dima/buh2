
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура управляет показом в форме периода построения отчета.
//
Процедура ПоказатьПериодОтчета(НарастающийИтог)

	Если НарастающийИтог Тогда
		Если ПолеВыбораПериодичность = Перечисления.Периодичность.Квартал Тогда  // ежеквартально
			СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );
		Иначе
			Если Месяц(мДатаКонцаПериодаОтчета) = 1 Тогда 
				СтрПериодОтчета = Формат(мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
			Иначе
				СтрПериодОтчета = "Январь - " + Формат(мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
			КонецЕсли;
		
		КонецЕсли;

		// Покажем период в диалоге
		ЭлементыФормы.НадписьПериодСоставленияОтчета.Заголовок = СтрПериодОтчета;

	Иначе
		СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

		// Покажем период в диалоге
		ЭлементыФормы.НадписьПериодСоставленияОтчета.Заголовок = СтрПериодОтчета;

	КонецЕсли;

	КоличествоФорм = РегламентированнаяОтчетность.КоличествоФормСоответствующихВыбранномуПериоду(ЭтаФорма);
	Если КоличествоФорм >= 1 Тогда

		Если КоличествоФорм > 1 Тогда
			ЭлементыФормы.КнопкаВыбораФормы.Доступность = Истина;
		Иначе
			ЭлементыФормы.КнопкаВыбораФормы.Доступность = Ложь;
		КонецЕсли;

		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОК.Доступность = Истина;

	Иначе
		ЭлементыФормы.КнопкаВыбораФормы.Доступность = Ложь;
		ЭлементыФормы.ОписаниеНормативДок.Значение = "";
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОК.Доступность = Ложь;
	КонецЕсли;

	РегламентированнаяОтчетность.ВыборФормыРегламентированногоОтчетаПоУмолчанию(ЭтаФорма);
	мНаименованиеОтчета = РегламентированнаяОтчетность.ПолучитьНазваниеРегОтчетаПоДатамДействия(ЭтаФорма);
	Заголовок = мНаименованиеОтчета;

КонецПроцедуры // ПоказатьПериод()

// ПоказатьПериод
//
Процедура ПоказатьПериод()

	НарастающийИтог = ПолучитьПризнакНарастающегоИтога(ПолучитьФормуДляПериода(мДатаКонцаПериодаОтчета));
	ПоказатьПериодОтчета(НарастающийИтог);
	
КонецПроцедуры // ПоказатьПериод

// УстановитьДатыНачалаИКонцаОтчетногоПериода
//
Процедура УстановитьДатыНачалаИКонцаОтчетногоПериода(НарастающийИтог, Шаг)

	Если ПолеВыбораПериодичность = Перечисления.Периодичность.Квартал Тогда  // ежеквартально
		Если НарастающийИтог Тогда
			мДатаКонцаПериодаОтчета  = КонецКвартала(ДобавитьМесяц(мДатаКонцаПериодаОтчета, Шаг * 3));
			мДатаНачалаПериодаОтчета = НачалоГода(мДатаКонцаПериодаОтчета);
		Иначе
			мДатаКонцаПериодаОтчета  = КонецКвартала(ДобавитьМесяц(мДатаКонцаПериодаОтчета, Шаг * 3));
			мДатаНачалаПериодаОтчета = НачалоКвартала(мДатаКонцаПериодаОтчета);
		КонецЕсли;
	Иначе
		Если НарастающийИтог Тогда
			мДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета, Шаг));
			мДатаНачалаПериодаОтчета = НачалоГода(мДатаКонцаПериодаОтчета);
		Иначе
			мДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета, Шаг));
			мДатаНачалаПериодаОтчета = НачалоМесяца(мДатаКонцаПериодаОтчета);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // УстановитьДатыНачалаИКонцаОтчетногоПериода

// Процедура устанавливает границы периода построения отчета.
//
// Параметры:
//  Шаг          - число, количество стандартных периодов, на которое необходимо
//                 сдвигать период построения отчета;
//
Процедура ИзменитьПериод(Шаг)

	НарастающийИтог = ПолучитьПризнакНарастающегоИтога(ПолучитьФормуДляПериода(мДатаКонцаПериодаОтчета));
	УстановитьДатыНачалаИКонцаОтчетногоПериода(НарастающийИтог, Шаг);

	НарастающийИтогПослеСменыДат = ПолучитьПризнакНарастающегоИтога(ПолучитьФормуДляПериода(мДатаКонцаПериодаОтчета));
	Если НарастающийИтогПослеСменыДат <> НарастающийИтог Тогда
		УстановитьДатыНачалаИКонцаОтчетногоПериода(НарастающийИтогПослеСменыДат, 0);
	КонецЕсли;
	ПоказатьПериод();

КонецПроцедуры // ИзменитьПериод()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемОсновнойФормыРегламентиованногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	// Устнавливаем границы периода построения отчета как квартал
	// предшествующий текущему, нарастающим итогом с начала года.
	Если НЕ ЗначениеЗаполнено(мДатаНачалаПериодаОтчета) И НЕ ЗначениеЗаполнено(мДатаКонцаПериодаОтчета) Тогда
		мДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(КонецКвартала(РабочаяДата), -3));
		мДатаНачалаПериодаОтчета = НачалоМесяца(мДатаКонцаПериодаОтчета);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(мПериодичность) ИЛИ НЕ (мПериодичность = Перечисления.Периодичность.Месяц ИЛИ мПериодичность = Перечисления.Периодичность.Квартал) Тогда
		мПериодичность = Перечисления.Периодичность.Квартал;
	КонецЕсли;
	ПолеВыбораПериодичность = мПериодичность;

	ПоказатьПериод();
	ИзменитьПериод(0);

	Если НЕ мТаблицаФормОтчета.Количество() > 1 Тогда
		ЭлементыФормы.КнопкаВыбораФормы.Доступность = Ложь;
	КонецЕсли;

	Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
		ОргПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ОргПоУмолчанию) Тогда
			Организация = ОргПоУмолчанию;
		КонецЕсли;
	КонецЕсли;

	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	ЭлементыФормы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	// здесь отключаем стандартную обработку ПередЗакрытием формы
	// для подавления выдачи запроса на сохранение формы.
	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ПередЗакрытием()

Процедура КонвертироватьСтруктуруДанныхКв2ВКв3()
	// Изменим форму.
	мВыбраннаяФорма = "ФормаОтчета2006Кв3";
	мСохраненныйДок.ВыбраннаяФорма = мВыбраннаяФорма;
	СтруктураОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	// Титульный лист был в показателях отчета.
	ПоказателиОтчета = РегламентированнаяОтчетность.СкопированнаяСтруктура(СтруктураОтчета.ПоказателиОтчета);

	// Получим эталонную таблицу многостраничного раздела, без многострочной части (титульный лист).
	ТаблицаМногостраничногоРаздела = РегламентированнаяОтчетность.ПолучитьТаблицуМногостраничногоРаздела();
	// Запишем в полученную таблицу в первый экземпляр структуру титульного листа.
	ТаблицаМногостраничногоРаздела[0].Данные = РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный);
	// Удалим из структуры ПоказателиОтчета данные по многостраничному титульному листу.
	СтруктураОтчета.ПоказателиОтчета.Удалить("ПолеТабличногоДокументаТитульный");
	// Изменим структуру многостраничного раздела, добавив таблицу титульного листа.
	СтруктураОтчета.ДанныеМногостраничныхРазделов.Вставить("Титульный", ТаблицаМногостраничногоРаздела);

	ОписаниеТиповДата      = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);

	СтруктураГруппы3 = Новый ТаблицаЗначений;
	СтруктураГруппы3.Колонки.Добавить("П000010000001",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(5)); // номер
	СтруктураГруппы3.Колонки.Добавить("П000010000002",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1000)); // наименование продукции
	СтруктураГруппы3.Колонки.Добавить("П000010000003",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3)); // код
	СтруктураГруппы3.Колонки.Добавить("П000010000004",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1000)); // Получатель
	СтруктураГруппы3.Колонки.Добавить("П000010000005",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(2)); // Код региона РФ
	СтруктураГруппы3.Колонки.Добавить("П000010000006",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(12)); // ИНН
	СтруктураГруппы3.Колонки.Добавить("П000010000007",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9)); // КПП
	СтруктураГруппы3.Колонки.Добавить("П000010000008",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254)); // Адрес
	СтруктураГруппы3.Колонки.Добавить("П000010001109",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10)); // Серия
	СтруктураГруппы3.Колонки.Добавить("П000010001209",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10)); // номер
	СтруктураГруппы3.Колонки.Добавить("П000010001309", ОписаниеТиповДата); // дата
	СтруктураГруппы3.Колонки.Добавить("П000010001409", ОписаниеТиповДата); // дата
	СтруктураГруппы3.Колонки.Добавить("П000010000010",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1000)); // Кем выд.
	СтруктураГруппы3.Колонки.Добавить("П000010001111",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15)); // Номер уведомления
	СтруктураГруппы3.Колонки.Добавить("П000010001211", ОписаниеТиповДата); // Дата
	СтруктураГруппы3.Колонки.Добавить("П000010000012", ОписаниеТиповДата); // Дата отгрузки
	СтруктураГруппы3.Колонки.Добавить("П000010000013",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(30)); // номер ТТС
	СтруктураГруппы3.Колонки.Добавить("П000010000014",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(30)); // номер груз. там. декл.
	СтруктураГруппы3.Колонки.Добавить("П000010000015", ОписаниеТиповДата); // номер груз. там. декл.
	СтруктураГруппы3.Колонки.Добавить("П000010000016", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 7));

	СтруктураГруппы4 = Новый ТаблицаЗначений;
	СтруктураГруппы4.Колонки.Добавить("П000010001001",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(5)); // номер
	СтруктураГруппы4.Колонки.Добавить("П000010001004",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1000)); // номер
	СтруктураГруппы4.Колонки.Добавить("П000010001005",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(2));
	СтруктураГруппы4.Колонки.Добавить("П000010001006",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(12)); // ИНН
	СтруктураГруппы4.Колонки.Добавить("П000010001007",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9)); // КПП
	СтруктураГруппы4.Колонки.Добавить("П000010001008",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254)); // Адрес
	СтруктураГруппы4.Колонки.Добавить("П000010001016", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 7));

	// Добавим в структуру многострочных блоков строки по умолчанию, 2 и 1 соответственно.
	НовСтр1 = СтруктураГруппы3.Добавить();
	НовСтр2 = СтруктураГруппы3.Добавить();
	НовСтр3 = СтруктураГруппы4.Добавить();

	// Вставим ИдМногострочной части по листу Возвраты.
	СтруктураОтчета.ДанныеМногострочныхРазделов.Вставить("П0000100000", СтруктураГруппы3);
	СтруктураОтчета.ДанныеМногострочныхРазделов.Вставить("П0000100010", СтруктураГруппы4);

	// Добавим лист Возвратов в дерево страниц отчета.
	ДеревоСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	СтрокаУровня1 = ДеревоСтраниц.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Возвраты";
	СтрокаУровня1.Представление            = "Возвраты";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаВозвраты";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	ХранилищеДанных = Новый ХранилищеЗначения(СтруктураОтчета);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	ХранилищеДанныхД = Новый ХранилищеЗначения(ДеревоСтраниц);
	мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанныхД;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура вызывается при изменении периодичности проедставления декларации.
//
Процедура ПолеВыбораПериодичностьПриИзменении(Элемент)

//	Периодичность = ЭлементыФормы.ПолеВыбораПериодичность.Значение;

	Если ПолеВыбораПериодичность = Перечисления.Периодичность.Квартал Тогда  // ежеквартально
		мДатаКонцаПериодаОтчета  = КонецКвартала(мДатаКонцаПериодаОтчета);
		мДатаНачалаПериодаОтчета = НачалоКвартала(мДатаКонцаПериодаОтчета);
	Иначе
		мДатаКонцаПериодаОтчета  = КонецМесяца(мДатаКонцаПериодаОтчета);
		мДатаНачалаПериодаОтчета = НачалоМесяца(мДатаКонцаПериодаОтчета);
	КонецЕсли;

	мПериодичность = ПолеВыбораПериодичность;
	ИзменитьПериод(0);
	ПоказатьПериод();

КонецПроцедуры

// Процедура вызывается по нажатию кнопки "ОК" формы.
//   Инициализирует открытие нужной формы документа.
//
Процедура ОсновныеДействияФормыОК(Кнопка)

	Если мСкопированаФорма <> Неопределено Тогда
		// Документ был скопиран. 
		// Проверяем соответствие форм.
		Если мВыбраннаяФорма <> мСкопированаФорма Тогда

			Если (мВыбраннаяФорма = "ФормаОтчета2006Кв3")
			   И (мСкопированаФорма = "ФормаОтчета2006Кв2") Тогда
				КонвертироватьСтруктуруДанныхКв2ВКв3();
			Иначе
				Предупреждение("Форма отчета изменилась, копирование невозможно!");
			Возврат;

			//// очищаем данные скопированного отчета
			//СписокСохранения = Новый Структура();
			//ХранилищеДанных  = Новый ХранилищеЗначения(СписокСохранения);
			//мСохраненныйДок.ДанныеОтчета    = ХранилищеДанных;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить(РегламентированнаяОтчетность.ОсновнаяФормаОрганизацияНеЗаполненаВывестиТекст(), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

	// устанавливаем дату представления отчета как рабочая дата
	ДатаПодписи                = РабочаяДата;

	ВыбФормаОтчета             = ПолучитьФорму(мВыбраннаяФорма);
	РегламентированнаяОтчетность.ДобавитьНадписьВнешнийОтчет(ВыбФормаОтчета);
	ВыбФормаОтчета.РежимВыбора = Ложь;
	ВыбФормаОтчета.Организация = Организация;

	ЭтаФорма.Закрыть();

	ВыбФормаОтчета.Открыть();
	ВыбФормаОтчета.Модифицированность = Истина;

КонецПроцедуры // ОсновныеДействияФормыОК()

// Процедура вызывается по нажатию кнопки "<" формы.
//   Инициализирует изменение периода построения отчета.
//
Процедура КнопкаПредыдущийПериодНажатие(Элемент)

	ИзменитьПериод(-1);

КонецПроцедуры // КнопкаПредыдущийПериодНажатие()

// Процедура вызывается по нажатию кнопки ">" формы.
//   Инициализирует изменение периода построения отчета.
//
Процедура КнопкаСледующийПериодНажатие(Элемент)

	ИзменитьПериод(1);

КонецПроцедуры // КнопкаСледующийПериодНажатие()

// Процедура вызывается по нажатию кнопки "..." формы.
//   Инициализирует выбор из списка требуемой формы отчета.
//
Процедура КнопкаВыбораФормыНажатие(Элемент)

	ВыбраннаяФорма = РегламентированнаяОтчетность.ВыбратьФормуОтчетаИзДействующегоСписка(ЭтаФорма);
	Если ВыбраннаяФорма <> Неопределено Тогда
		мВыбраннаяФорма = ВыбраннаяФорма;
	КонецЕсли;

КонецПроцедуры // КнопкаВыбораФормыНажатие()

////////////////////////////////////////////////////////////////////////////////
Функция ПолучитьВерсиюФорматаВыгрузки(Знач НаДату = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = РабочаяДата;
	КонецЕсли;
	
	Если НаДату < '20060101' Тогда
		Возврат Перечисления.ВерсииФорматовВыгрузки.Версия201алко;
	ИначеЕсли НаДату >= '20110301' Тогда
		Возврат Перечисления.ВерсииФорматовВыгрузки.Версия401алко;
	Иначе
		Если мСохраненныйДок.ВыбраннаяФорма = "ФормаОтчета2006Кв1" Тогда
			Возврат Неопределено;
		ИначеЕсли мСохраненныйДок.ВыбраннаяФорма = "ФормаОтчета2006Кв2" Тогда
			Возврат Неопределено;
		Иначе
			Возврат Перечисления.ВерсииФорматовВыгрузки.Версия302алко;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьФормуДляПериода(НаДату) Экспорт
	
	Для Каждого Строка Из мТаблицаФормОтчета Цикл
		Если (Строка.ДатаНачалоДействия > КонецДня(НаДату)) ИЛИ
			((Строка.ДатаКонецДействия > '00010101000000') И (Строка.ДатаКонецДействия < НачалоДня(НаДату))) Тогда

			Продолжить;
		КонецЕсли;

		мВыбраннаяФорма = Строка.ФормаОтчета;

		Возврат мВыбраннаяФорма;
	КонецЦикла;

	// Если не удалось найти форму, соответствующую выбранному периоду,
	// то по умолчанию выдаем текущую (действующую) форму.
	Если мВыбраннаяФорма = Неопределено Тогда
		мВыбраннаяФорма = мТаблицаФормОтчета[0].ФормаОтчета;
	КонецЕсли;
	
	Возврат мВыбраннаяФорма;

КонецФункции

// ПолучитьПризнакНарастающегоИтога
//
Функция ПолучитьПризнакНарастающегоИтога(ВыбраннаяФормаОтчета) Экспорт

	НайденнаяСтрока = мТаблицаФормОтчета.Найти(ВыбраннаяФормаОтчета, "ФормаОтчета");
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока.НарастающийИтог;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ПолучитьПризнакНарастающегоИтога

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ОСНОВНОЙ ПРОГРАММЫ

ЭлементыФормы.ПолеВыбораПериодичность.СписокВыбора.Добавить(Перечисления.Периодичность.Месяц,   "Ежемесячно");
ЭлементыФормы.ПолеВыбораПериодичность.СписокВыбора.Добавить(Перечисления.Периодичность.Квартал, "Ежеквартально");
