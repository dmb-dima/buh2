////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мРаздел1;
Перем мРаздел2_3;
Перем мРаздел4_6;
Перем мРаздел7;
Перем мРаздел8;
Перем мРаздел9;
Перем мРаздел10;
Перем мПодписи;

// Используется на титульном листе
Перем мАдресвФорматеДляВыгрузки;
Перем мАдресвФорматеДляВыгрузкиРаздел9;
Перем мАдресвФорматеДляВыгрузкиРаздел10;

// Хранит номер телефона организации, используется в листе ФЛ, в качестве
// рабочего телефона физического лица в данной организации.
// Инициализируется в процедуре ЗаполнитьСведенияОбОрганизации
Перем мТелИсп;

Перем мВПрограммеИзмененаОрганизация;

// Хранят имена многострочных разделов
Перем мИдГруппы1; // Раздел 4_6
Перем мИдГруппы2; // Раздел 8
Перем мИдГруппы3; // Раздел 9.
Перем мИдГруппы4; // Раздел 10.

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов Экспорт;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

Перем мОписаниеТиповЧислоЕ;
Перем мОписаниеТиповБулево;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

// Настройка св-в листов
Перем мСвойстваРазделовДекларации Экспорт;

Перем мДокументВосстановлен;

////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ОбновитьСтруктуруМногостраничныхРазделов
// Обновляет структуру многостраничных разделов формы.
// После обновления структуры выводит в табличный документ
// данные первой страницы из набора страниц.
//
Процедура ОбновитьСтруктуруМногостраничныхРазделов(ИмяСтраницы = Неопределено)

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, имяСтраницы);

КонецПроцедуры // ОбновитьСтруктуруМногостраничныхРазделов()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления()

	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// ОткрытьФормуСпискаДопСтраниц
// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
//
Процедура ОткрытьФормуСпискаДопСтраниц()

	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма);

КонецПроцедуры // ОткрытьФормуСпискаДопСтраниц()

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПолучитьСвойствоРаздела
// Получает из дерево св-в необходимый параметр
// Параметры
// ИмяСтраница - название страницы, для которой необходимо получить св-во
// ИмяСвойства - имя настройки
//
Функция ПолучитьСвойствоРаздела(Знач ИмяСтраницы, Знач ИмяСвойства)

	Возврат РегламентированнаяОтчетность.роПолучитьСвойствоРаздела( ЭтаФорма, ИмяСтраницы, ИмяСвойства);

КонецФункции // ПолучитьСвойствоРаздела

// ЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения
//
// Процедура считывает св-ва всех разделов и если раздел является автозаполняемым, то добавляется 3 параметра в элементы форм
//
Процедура ЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(Форма) Экспорт

	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения

// Блок обязательных процедур
// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе");
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  мОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", мОписаниеТиповБулево);

	// В случае, если на листе содержатся адреса и лист является многостраничным, то при переходе
	// по листам и через кнопку Перейти, необходимо обновлять переменные.

	//мСвойстваРазделовДекларации.Колонки.Добавить("ЯчейкиСАдресами");
	//ЯчейкиСАдресами = Новый СписокЗначений;
	//ЯчейкиСАдресами.Добавить("ОргАдрес");

	МногострочностьНастройка = Новый ТаблицаЗначений;
	МногострочностьНастройка.Колонки.Добавить("ИдГруппы");
	МногострочностьНастройка.Колонки.Добавить("Область");
	МногострочностьНастройка.Колонки.Добавить("ВысотаСтроки");
	МногострочностьНастройка.Колонки.Добавить("НезаполняемыеПоказателиЕсть", мОписаниеТиповБулево);

	МнгРаздел4_6 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел4_6.Добавить();
	НовСтр.ИдГруппы = мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	МнгРаздел8 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел8.Добавить();
	НовСтр.ИдГруппы = мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	МнгРаздел9 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел9.Добавить();
	НовСтр.ИдГруппы = мИдГруппы3;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	МнгРаздел10 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел10.Добавить();
	НовСтр.ИдГруппы = мИдГруппы4;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 2_3
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 4_6
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4_6";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел4_6;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;       // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 7
	СтрокаУровня1.ИмяСтраницы                          = "Раздел7";
	СтрокаУровня1.МногострочностьВРазделе              = 0;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;       // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 8
	СтрокаУровня1.ИмяСтраницы                          = "Раздел8";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел8;   // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;         // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;       // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 9
	СтрокаУровня1.ИмяСтраницы                          = "Раздел9";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел9;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;       // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 10
	СтрокаУровня1.ИмяСтраницы                          = "Раздел10";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел10;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;       // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;       // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "ОргНазв";    // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	//СтрокаУровня1.ЯчейкиСАдресами                      = ЯчейкиСАдресами;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела Подписи
	СтрокаУровня1.ИмяСтраницы                          = "Подписи";
	СтрокаУровня1.МногострочностьВРазделе              = 0;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = мРаздел4_6;
	ИначеЕсли ИдГруппы = мИдГруппы2 Тогда
		ТекТабличноеПоле = мРаздел8;
	ИначеЕсли ИдГруппы = мИдГруппы3 Тогда
		ТекТабличноеПоле = мРаздел9;
	ИначеЕсли ИдГруппы = мИдГруппы4 Тогда
		ТекТабличноеПоле = мРаздел10;
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Имя листа, если известно, на каком листе должна быть многострочность;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел4_6" Тогда
		ИмяГруппы = мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел8" Тогда
		ИмяГруппы = мИдГруппы2;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел9" Тогда
		ИмяГруппы = мИдГруппы3;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел10" Тогда
		ИмяГруппы = мИдГруппы4;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	КонецЦикла;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаТитульный" Тогда
		СтруктураДанныхПоля.Вставить("ОргАдрес", мАдресвФорматеДляВыгрузки);
	ИначеЕсли ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел9" Тогда
		СтруктураДанныхПоля.Вставить("ОргАдрес", мАдресвФорматеДляВыгрузкиРаздел9);
	ИначеЕсли ТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел10" Тогда
		СтруктураДанныхПоля.Вставить("ОргАдрес", мАдресвФорматеДляВыгрузкиРаздел10);
	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	СтрПериод = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'") + " год";

	ПериодОтчета = " " + СтрПериод;

	// Период в заголовке отчета
	мТитульный.Области.ПериодОтчета.Значение = ПериодОтчета;

	// Период в заголовке отчета
	// Для показа периода в заголовке берется текст из заголовка основной формы
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + ПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// ЗаполнитьДатуВЯчейках
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	мПодписи.Области.ДатаСоставленияОтчета.Значение = Формат(ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'""");

КонецПроцедуры // ЗаполнитьДатуВЯчейках

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "ОКПО");  // ОКПО
		Сведения.Добавить("", "АдрПочт");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОснВидДеят");
		Сведения.Добавить("", "ОКВЭД");
		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКАТО");
	КонецЕсли;

	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "ДолжнИсп");
	Сведения.Добавить("", "ФИОИсп");

	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ИННЮЛ = "";
		ОКПО = "";
		АдрПочт     = "";
		НаимЮЛПол = "";
		ОснВидДеят = "";
		ОКВЭД = "";
		ОКПО = "";
		ОКАТО = "";

	КонецЕсли;

	ДолжнИсп = "";
	ФИОИсп = "";
	ТелИсп = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ОргСведения.Свойство("ИННЮЛ",          ИННЮЛ);
		ОргСведения.Свойство("ОКПО",           ОКПО);
		ОргСведения.Свойство("АдрПочт",        АдрПочт);
		ОргСведения.Свойство("ТелИсп", ТелИсп);
		ОргСведения.Свойство("НаимЮЛПол",      НаимЮЛПол);
		ОргСведения.Свойство("ОКВЭД",          ОКВЭД);
		ОргСведения.Свойство("ОКПО",           ОКПО);
		ОргСведения.Свойство("ОКАТО",          ОКАТО);

	КонецЕсли;

	ОргСведения.Свойство("ФИОИсп",         ФИОИсп);
	ОргСведения.Свойство("ДолжнИсп",       ДолжнИсп);

	Если ВПрограммеИзмененаДатаПодписи Тогда

		мПодписи.Области.ОргИсполнитель.Значение = ФИОИсп;
		мПодписи.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
		мПодписи.Области.ОргТелефонИсп.Значение = ТелИсп;

		Возврат;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мТитульный.Области.ОргКодОКПО.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда

		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			мТитульный.Области.ОргКодОКПО.Значение = "";
		Иначе
			мТитульный.Области.ОргКодОКПО.Значение = ОКПО;
		КонецЕсли;

	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мТитульный.Области.ОргНазв.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мТитульный.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргАдрес.Значение)) Тогда

		Если (НЕ РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(АдрПочт, ",", ""))) Тогда
			
			мТитульный.Области.ОргАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(АдрПочт);
			мАдресвФорматеДляВыгрузки = АдрПочт;
		Иначе
			мТитульный.Области.ОргАдрес.Значение = "";
			мАдресвФорматеДляВыгрузки = "";
		КонецЕсли;

	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мПодписи.Области.ОргИсполнитель.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мПодписи.Области.ОргИсполнитель.Значение = ФИОИсп;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мПодписи.Области.ОргДолжностьИсп.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мПодписи.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мПодписи.Области.ОргТелефонИсп.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мПодписи.Области.ОргТелефонИсп.Значение = ТелИсп;
	КонецЕсли;

	СписокОрганизаций = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);

	Если СписокОрганизаций.Количество() = 0 Тогда

		// Если обособленных подразделений нет - всё очищаем.
		мРаздел9.Области.ОргКодОКАТО.Значение = "";
		мРаздел9.Области.ОргКодОКВЭД.Значение = "";
		мРаздел9.Области.ОргНазв.Значение = "";
		мРаздел9.Области.Код.Значение = "";
		мРаздел9.Области.ОргАдрес.Значение = "";
		мАдресвФорматеДляВыгрузкиРаздел9 = "";
		Возврат;
	Иначе
		мРаздел9.Области.ОргКодОКАТО.Значение = ОКАТО;
		мРаздел9.Области.ОргКодОКВЭД.Значение = ОКВЭД;
		мРаздел9.Области.ОргНазв.Значение = НаимЮЛПол;
		Если НЕ РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			мРаздел9.Области.Код.Значение = ОКПО;
		КонецЕсли;

		Если (НЕ РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(АдрПочт, ",", ""))) Тогда
			мРаздел9.Области.ОргАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(АдрПочт);
			мАдресвФорматеДляВыгрузкиРаздел9 = АдрПочт;
		Иначе
			мРаздел9.Области.ОргАдрес.Значение = "";
			мАдресвФорматеДляВыгрузкиРаздел9 = "";
		КонецЕсли;

	КонецЕсли;

	ТаблицаСтраницРаздела10 = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел10", ТаблицаСтраницРаздела10);

	// Если через кнопку обновить.
	Если (мВПрограммеИзмененаОрганизация)
	    // Если больше одного экз. листов уже есть в разделе
	    И ((ТаблицаСтраницРаздела10.Количество() > 1)
	    // В случае, если есть 1, но заполненный лист
	    Или ((ТаблицаСтраницРаздела10.Количество() = 1) И (НЕ ПустаяСтрока(мРаздел10.Области.ОргНазв.Значение)))) Тогда

		Ответ = Вопрос("Внимание. У организации есть обособленные подразделения.
			|Экземпляры листов с данными территориально-обособленных подразделений будут перезаполнены.
			|Вы согласны?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;

	ОчиститьТабличноеПоле(мРаздел10);

	// Удалим доп. страницы, если они есть
	Если ТаблицаСтраницРаздела10.Количество() > 1 Тогда

		ИндексСтраницы = 0;
		Пока Не (ИндексСтраницы > (ТаблицаСтраницРаздела10.Количество()-1)) Цикл
			// Пропускаем активную страницу по той причине,
			// что данные активной страницы былы очищены ранее.
			СтрокаТаблицы = ТаблицаСтраницРаздела10[ИндексСтраницы];
			Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
				// удаляем дополнительную страницу
				ТаблицаСтраницРаздела10.Удалить(СтрокаТаблицы);

				Продолжить;
			КонецЕсли;

			ИндексСтраницы = ИндексСтраницы + 1;
		КонецЦикла;

	КонецЕсли;

	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел10", Ложь);
	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, "Раздел10");

	ПервыйПроход = Истина;
	Для каждого Орг Из СписокОрганизаций Цикл
		Если НЕ ПервыйПроход Тогда
			РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел10");
			мАдресвФорматеДляВыгрузкиРаздел10 = "";
		КонецЕсли;
		ЗаполнитьРаздел10(Орг.Значение);
		ПервыйПроход = Ложь;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// ЗаполнитьРаздел10
//
Процедура ЗаполнитьРаздел10(ОрганизацияДляЗаполнения)
	ДанныеОрг = "НаимЮЛПол, ОКПО, АдрПочт, ОКАТО, ОКВЭД";
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(ОрганизацияДляЗаполнения, ДатаПодписи, ДанныеОрг);
	мРаздел10.Области.ОргНазв.Значение = ОргСведения.НаимЮЛПол;
	мРаздел10.Области.КодЗн.Значение = ОргСведения.ОКПО;
	мРаздел10.Области.Код.Значение = ОргСведения.ОКАТО;
	мРаздел10.Области.ОргКодОКВЭД.Значение = ОргСведения.ОКВЭД;

	АдрПочт = ОргСведения.АдрПочт;
	Если (НЕ РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(АдрПочт, ",", ""))) Тогда
			
		мРаздел10.Области.ОргАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(АдрПочт);
		мАдресвФорматеДляВыгрузкиРаздел10 = АдрПочт;
	Иначе
		мРаздел10.Области.ОргАдрес.Значение = "";
		мАдресвФорматеДляВыгрузкиРаздел10 = "";
	КонецЕсли;

КонецПроцедуры // ЗаполнитьРаздел10

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = 0; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = 0; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = 0; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;

	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;
	ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Ложь;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяСтраницы) Экспорт

	ИмяСтраницыР = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");
	// Процедура "Заглушка" не удалять!

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	РегламентированнаяОтчетность.роВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле) Экспорт
	РегламентированнаяОтчетность.роОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПоле);
	ИмяСтраницыПанели = СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", "");
	Если ИмяСтраницыПанели = "Раздел10" Тогда
		мАдресвФорматеДляВыгрузкиРаздел10 = "";
	ИначеЕсли ИмяСтраницыПанели = "Раздел9" Тогда
		мАдресвФорматеДляВыгрузкиРаздел9 = "";
	КонецЕсли;
КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	// ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	КонецЕсли;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма,, Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = Неопределено;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = 0;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	// Сохраняем все текущие страницы многостраничных разделов в структуру
	ОбновитьСтруктуруМногострочныхРазделов();
	ОбновитьСтруктуруМногостраничныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!

		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;

	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоСтраницОтчета();

	КлючУникальности = мСохраненныйДок.Ссылка;

	// всё прошло без ошибок
	Модифицированность = Ложь;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			РегламентированнаяОтчетность.роВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// ДанныеВариановАвтоЗаполнения - всегда восстанавливаем первее чем Данные Многостраничных Разделов
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета);

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда

		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
		КонецЦикла;
	КонецЕсли;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ИмяЛиста = СтрЗаменить(ТекТабличноеПоле.Имя,"ПолеТабличногоДокумента","");

		ПредставлениеДанных = ПолучитьСвойствоРаздела(ИмяТекТабличноеПоле, "ПредставлениеДанных");
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	мАдресвФорматеДляВыгрузки = мТитульный.Области.ОргАдрес.Значение;
	мТитульный.Области.ОргАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузки);

	мАдресвФорматеДляВыгрузкиРаздел9 = мРаздел9.Области.ОргАдрес.Значение;
	мРаздел9.Области.ОргАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузкиРаздел9);

	мАдресвФорматеДляВыгрузкиРаздел10 = мРаздел10.Области.ОргАдрес.Значение;
	мРаздел10.Области.ОргАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузкиРаздел10);

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВывода();

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;

	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	// Функция "заглушка" для универсальности. Не удалять.
	Возврат Ложь;

КонецФункции // ОбновитьПеременныеМодуля

// Процедура РАСЧЕТ ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Если ИмяТекущейСтраницыПанели = "Раздел2_3" Тогда

		мРаздел2_3.Области.П030001901.Значение = мРаздел2_3.Области.П030002001.Значение
		                                       + мРаздел2_3.Области.П030002101.Значение
		                                       + мРаздел2_3.Области.П030002201.Значение
		                                       + мРаздел2_3.Области.П030002301.Значение
		                                       + мРаздел2_3.Области.П030002501.Значение
		                                       + мРаздел2_3.Области.П030002601.Значение
		                                       + мРаздел2_3.Области.П030002701.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4_6" Тогда
		ТаблДанных = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, ТаблДанных);
		ОбщЗначение = 0;
		Для Инд = 1 По ТаблДанных.Количество() Цикл
			ОбщЗначение = ОбщЗначение + мРаздел4_6.Области["П000040001004_" + Строка(Инд)].Значение;
		КонецЦикла;

		ОбщЗначение = ОбщЗначение + мРаздел4_6.Области.П04000320101.Значение;
		мРаздел4_6.Области.П04000310100.Значение = ОбщЗначение;


		мРаздел4_6.Области.П060003601.Значение = мРаздел4_6.Области.П060003701.Значение
		                                       + мРаздел4_6.Области.П060004001.Значение
		                                       + мРаздел4_6.Области.П060004401.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел7" Тогда
		мРаздел7.Области.П070015601.Значение = мРаздел7.Области.П070007501.Значение
		                                     + мРаздел7.Области.П070007901.Значение
		                                     + мРаздел7.Области.П070008401.Значение
		                                     + мРаздел7.Области.П070008801.Значение
		                                     + мРаздел7.Области.П070008901.Значение
		                                     + мРаздел7.Области.П070009001.Значение
		                                     - мРаздел7.Области.П070009101.Значение
		                                     + мРаздел7.Области.П070009201.Значение
		                                     - мРаздел7.Области.П070009301.Значение
											 - мРаздел7.Области.П070009401.Значение
		                                     - мРаздел7.Области.П070009501.Значение
		                                     + мРаздел7.Области.П070009801.Значение
		                                     + мРаздел7.Области.П070010001.Значение
		                                     + мРаздел7.Области.П070010101.Значение
		                                     + мРаздел7.Области.П070010201.Значение
		                                     + мРаздел7.Области.П070010301.Значение
		                                     + мРаздел7.Области.П070010401.Значение
		                                     + мРаздел7.Области.П070010701.Значение
		                                     + мРаздел7.Области.П070010801.Значение
		                                     + мРаздел7.Области.П070011001.Значение
		                                     + мРаздел7.Области.П070011101.Значение
		                                     + мРаздел7.Области.П070011201.Значение
		                                     + мРаздел7.Области.П070011301.Значение
		                                     + мРаздел7.Области.П070011801.Значение
		                                     + мРаздел7.Области.П070011901.Значение
		                                     + мРаздел7.Области.П070012001.Значение
		                                     + мРаздел7.Области.П070015501.Значение;
	ИначеЕсли (ИмяТекущейСтраницыПанели = "Раздел8")
	   Или (ИмяТекущейСтраницыПанели = "Раздел8_Колонка1")
	   Или (ИмяТекущейСтраницыПанели = "Раздел8_Колонка2")
	   Или (ИмяТекущейСтраницыПанели = "Раздел8_Колонка3")
	   Или (ИмяТекущейСтраницыПанели = "Раздел8_Колонка4")
	   Или (ИмяТекущейСтраницыПанели = "Раздел8_Колонка5") Тогда
		ТаблДанных = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, ТаблДанных);

		Колонка = ?(Найти(ИмяТекущейСтраницыПанели, "Колонка") > 0, Прав(ИмяТекущейСтраницыПанели, 1), "0");
		ОбщЗначениеКолонка1 = 0;
		ОбщЗначениеКолонка2 = 0;
		ОбщЗначениеКолонка3 = 0;
		ОбщЗначениеКолонка4 = 0;
		ОбщЗначениеКолонка5 = 0;

		Для Инд = 1 По ТаблДанных.Количество() Цикл
			Если (Колонка = "0") Или (Колонка = "1") Тогда
				ОбщЗначениеКолонка1 = ОбщЗначениеКолонка1 + мРаздел8.Области["П000080001004_" + Строка(Инд)].Значение;
			КонецЕсли;

			Если (Колонка = "0") Или (Колонка = "2") Тогда
				ОбщЗначениеКолонка2 = ОбщЗначениеКолонка2 + мРаздел8.Области["П000080001005_" + Строка(Инд)].Значение;
			КонецЕсли;

			Если (Колонка = "0") Или (Колонка = "3") Тогда
				ОбщЗначениеКолонка3 = ОбщЗначениеКолонка3 + мРаздел8.Области["П000080001006_" + Строка(Инд)].Значение;
			КонецЕсли;

			Если (Колонка = "0") Или (Колонка = "4") Тогда
				ОбщЗначениеКолонка4 = ОбщЗначениеКолонка4 + мРаздел8.Области["П000080001007_" + Строка(Инд)].Значение;
			КонецЕсли;

			Если (Колонка = "0") Или (Колонка = "5") Тогда
				ОбщЗначениеКолонка5 = ОбщЗначениеКолонка5 + мРаздел8.Области["П000080001008_" + Строка(Инд)].Значение;
			КонецЕсли;

		КонецЦикла;

		Если (Колонка = "0") Или (Колонка = "1") Тогда
			мРаздел8.Области.П080016801.Значение = ОбщЗначениеКолонка1;
		КонецЕсли;

		Если (Колонка = "0") Или (Колонка = "2") Тогда
			мРаздел8.Области.П080016802.Значение = ОбщЗначениеКолонка2;
		КонецЕсли;

		Если (Колонка = "0") Или (Колонка = "3") Тогда
			мРаздел8.Области.П080016803.Значение = ОбщЗначениеКолонка3;
		КонецЕсли;

		Если (Колонка = "0") Или (Колонка = "4") Тогда
			мРаздел8.Области.П080016804.Значение = ОбщЗначениеКолонка4;
		КонецЕсли;

		Если (Колонка = "0") Или (Колонка = "5") Тогда
			мРаздел8.Области.П080016805.Значение = ОбщЗначениеКолонка5;
		КонецЕсли;

	ИначеЕсли (ИмяТекущейСтраницыПанели = "Раздел9")
	   Или (ИмяТекущейСтраницыПанели = "Раздел9_Колонка1")
	   Или (ИмяТекущейСтраницыПанели = "Раздел9_Колонка2")
	   Или (ИмяТекущейСтраницыПанели = "Раздел9_Колонка3")
	   Или (ИмяТекущейСтраницыПанели = "Раздел9_Колонка4")
	   Или (ИмяТекущейСтраницыПанели = "Раздел9_Колонка5") Тогда
		ТаблДанных = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы3, ТаблДанных);

		Колонка = ?(Найти(ИмяТекущейСтраницыПанели, "Колонка") > 0, Прав(ИмяТекущейСтраницыПанели, 1), "0");
		ОбщЗначениеКолонка1 = 0;
		ОбщЗначениеКолонка2 = 0;
		ОбщЗначениеКолонка3 = 0;
		ОбщЗначениеКолонка4 = 0;
		ОбщЗначениеКолонка5 = 0;

		Для Инд = 1 По ТаблДанных.Количество() Цикл
			Если (Колонка = "0") Или (Колонка = "1") Тогда
				ОбщЗначениеКолонка1 = ОбщЗначениеКолонка1 + мРаздел9.Области["П000090001004_" + Строка(Инд)].Значение;
			КонецЕсли;

			Если (Колонка = "0") Или (Колонка = "2") Тогда
				ОбщЗначениеКолонка2 = ОбщЗначениеКолонка2 + мРаздел9.Области["П000090001005_" + Строка(Инд)].Значение;
			КонецЕсли;

			Если (Колонка = "0") Или (Колонка = "3") Тогда
				ОбщЗначениеКолонка3 = ОбщЗначениеКолонка3 + мРаздел9.Области["П000090001006_" + Строка(Инд)].Значение;
			КонецЕсли;

			Если (Колонка = "0") Или (Колонка = "4") Тогда
				ОбщЗначениеКолонка4 = ОбщЗначениеКолонка4 + мРаздел9.Области["П000090001007_" + Строка(Инд)].Значение;
			КонецЕсли;

			Если (Колонка = "0") Или (Колонка = "5") Тогда
				ОбщЗначениеКолонка5 = ОбщЗначениеКолонка5 + мРаздел9.Области["П000090001008_" + Строка(Инд)].Значение;
			КонецЕсли;

		КонецЦикла;

		Если (Колонка = "0") Или (Колонка = "1") Тогда
			мРаздел9.Области.П09001810101.Значение = ОбщЗначениеКолонка1;
		КонецЕсли;

		Если (Колонка = "0") Или (Колонка = "2") Тогда
			мРаздел9.Области.П09001810201.Значение = ОбщЗначениеКолонка2;
		КонецЕсли;

		Если (Колонка = "0") Или (Колонка = "3") Тогда
			мРаздел9.Области.П09001810301.Значение = ОбщЗначениеКолонка3;
		КонецЕсли;

		Если (Колонка = "0") Или (Колонка = "4") Тогда
			мРаздел9.Области.П09001810401.Значение = ОбщЗначениеКолонка4;
		КонецЕсли;

		Если (Колонка = "0") Или (Колонка = "5") Тогда
			мРаздел9.Области.П09001810501.Значение = ОбщЗначениеКолонка5;
		КонецЕсли;

	ИначеЕсли (ИмяТекущейСтраницыПанели = "Раздел10")
	   Или (ИмяТекущейСтраницыПанели = "Раздел10_Колонка1")
	   Или (ИмяТекущейСтраницыПанели = "Раздел10_Колонка2")
	   Или (ИмяТекущейСтраницыПанели = "Раздел10_Колонка3")
	   Или (ИмяТекущейСтраницыПанели = "Раздел10_Колонка4")
	   Или (ИмяТекущейСтраницыПанели = "Раздел10_Колонка5") Тогда
		ТаблДанных = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы4, ТаблДанных);

		Колонка = ?(Найти(ИмяТекущейСтраницыПанели, "Колонка") > 0, Прав(ИмяТекущейСтраницыПанели, 1), "0");
		ОбщЗначениеКолонка1 = 0;
		ОбщЗначениеКолонка2 = 0;
		ОбщЗначениеКолонка3 = 0;
		ОбщЗначениеКолонка4 = 0;
		ОбщЗначениеКолонка5 = 0;

		Для Инд = 1 По ТаблДанных.Количество() Цикл
			Если (Колонка = "0") Или (Колонка = "1") Тогда
				ОбщЗначениеКолонка1 = ОбщЗначениеКолонка1 + мРаздел10.Области["П000000001004_" + Строка(Инд)].Значение;
			КонецЕсли;

			Если (Колонка = "0") Или (Колонка = "2") Тогда
				ОбщЗначениеКолонка2 = ОбщЗначениеКолонка2 + мРаздел10.Области["П000000001005_" + Строка(Инд)].Значение;
			КонецЕсли;

			Если (Колонка = "0") Или (Колонка = "3") Тогда
				ОбщЗначениеКолонка3 = ОбщЗначениеКолонка3 + мРаздел10.Области["П000000001006_" + Строка(Инд)].Значение;
			КонецЕсли;

			Если (Колонка = "0") Или (Колонка = "4") Тогда
				ОбщЗначениеКолонка4 = ОбщЗначениеКолонка4 + мРаздел10.Области["П000000001007_" + Строка(Инд)].Значение;
			КонецЕсли;

			Если (Колонка = "0") Или (Колонка = "5") Тогда
				ОбщЗначениеКолонка5 = ОбщЗначениеКолонка5 + мРаздел10.Области["П000000001008_" + Строка(Инд)].Значение;
			КонецЕсли;

		КонецЦикла;

		Если (Колонка = "0") Или (Колонка = "1") Тогда
			мРаздел10.Области.П09001830101.Значение = ОбщЗначениеКолонка1;
		КонецЕсли;

		Если (Колонка = "0") Или (Колонка = "2") Тогда
			мРаздел10.Области.П09001830201.Значение = ОбщЗначениеКолонка2;
		КонецЕсли;

		Если (Колонка = "0") Или (Колонка = "3") Тогда
			мРаздел10.Области.П09001830301.Значение = ОбщЗначениеКолонка3;
		КонецЕсли;

		Если (Колонка = "0") Или (Колонка = "4") Тогда
			мРаздел10.Области.П09001830401.Значение = ОбщЗначениеКолонка4;
		КонецЕсли;

		Если (Колонка = "0") Или (Колонка = "5") Тогда
			мРаздел10.Области.П09001830501.Значение = ОбщЗначениеКолонка5;
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		Расчет("Раздел10");
		Расчет("Раздел9");
		Расчет("Раздел8");
		Расчет("Раздел7");
		Расчет("Раздел4_6");
		Расчет("Раздел2_3");
	КонецЕсли;

КонецПроцедуры // Расчет()

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	мАдресвФорматеДляВыгрузки = "";
	мАдресвФорматеДляВыгрузкиРаздел9 = "";
	мАдресвФорматеДляВыгрузкиРаздел10 = "";

	// ФормируемСтруктуруСтраницОтчета
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	мВПрограммеИзмененаОрганизация = Ложь;

	мТитульный      = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1        = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	мРаздел2_3      = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_3;
	мРаздел4_6      = ЭлементыФормы.ПолеТабличногоДокументаРаздел4_6;
	мРаздел7        = ЭлементыФормы.ПолеТабличногоДокументаРаздел7;
	мРаздел8        = ЭлементыФормы.ПолеТабличногоДокументаРаздел8;
	мРаздел9        = ЭлементыФормы.ПолеТабличногоДокументаРаздел9;
	мРаздел10       = ЭлементыФормы.ПолеТабличногоДокументаРаздел10;
	мПодписи        = ЭлементыФормы.ПолеТабличногоДокументаПодписи;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	// ФлОтклВыборЗначений
	мДокументВосстановлен = Ложь;

	// Инициализируем все переменные хранящиеся в квадратных значениях
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления();

	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	КонецЕсли;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ТочностьЕдиницыИзмерения = 0;
			мПодписи.Области.ДатаСоставленияОтчета.Значение = Формат(ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'""");

			// По умолчанию - выбраны все листы
			// при восстановлении - сохраненные ранее
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

			УстановитьФорматВывода();
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		Если НЕ БезОткрытияФормы Тогда
			УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);
		КонецЕсли;

	КонецЦикла;

	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма);
	КонецЕсли;

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// ПолеТабличногоДокументаРаздел7ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел7ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел7");

КонецПроцедуры // ПолеТабличногоДокументаРаздел7ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел9ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел9ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел9");

КонецПроцедуры // ПолеТабличногоДокументаРаздел9ПриАктивизацииОбласти

// КнопкаДобавитьДопСтрокиРаздел10Нажатие
//
Процедура КнопкаДобавитьДопСтрокиРаздел10Нажатие(Элемент)

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтроку(ЭтаФорма);

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел10Нажатие

// ПолеТабличногоДокументаРаздел10ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел10ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел10");

КонецПроцедуры // ПолеТабличногоДокументаРаздел10ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел1Выбор
//
Процедура ПолеТабличногоДокументаРаздел1Выбор(Элемент, Область, СтандартнаяОбработка)

	Если Область.Имя = "Дата1_1"
	 Или Область.Имя = "Дата1_2"
	 Или Область.Имя = "Дата1_3"
	 Или Область.Имя = "Дата2_1"
	 Или Область.Имя = "Дата2_2"
	 Или Область.Имя = "Дата2_3"
	 Или Область.Имя = "Дата3_1"
	 Или Область.Имя = "Дата3_2"
	 Или Область.Имя = "Дата3_3"
	 Тогда
		СтандартнаяОбработка = Ложь;

		Если Найти(Область.Имя, "1_") > 0 Тогда
			ПерваяДата = "1";
		ИначеЕсли Найти(Область.Имя, "2_") > 0 Тогда
			ПерваяДата = "2";
		Иначе
			ПерваяДата = "3";
		КонецЕсли;

		стрУказаннаяДата = Элемент.Области["Дата" + ПерваяДата + "_3"].Значение
		   + Элемент.Области["Дата" + ПерваяДата + "_2"].Значение
		   + Элемент.Области["Дата" + ПерваяДата + "_1"].Значение;

		Если ПустаяСтрока(стрУказаннаяДата) Тогда
			стрУказаннаяДата = "00010101000000";
		Иначе
			стрУказаннаяДата = стрУказаннаяДата + "000000";
		КонецЕсли;

		УказанннаяДата = Дата(стрУказаннаяДата);

		Если ВвестиДату(УказанннаяДата, "Введите дату", ЧастиДаты.Дата) Тогда

			стрУказаннаяДата = Формат(УказанннаяДата, "ДФ=""ддММгггг""");

			Элемент.Области["Дата" + ПерваяДата + "_1"].Значение = Сред(стрУказаннаяДата, 1, 2); // День
			Элемент.Области["Дата" + ПерваяДата + "_2"].Значение = Сред(стрУказаннаяДата, 3, 2); // Мес
			Элемент.Области["Дата" + ПерваяДата + "_3"].Значение = Сред(стрУказаннаяДата, 5); // Мес
			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1Выбор

// Процедура ПолеТабличногоДокументаТитульныйВыбор
// процедура обработчик "Выбор"
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	Если Область.Имя = "ОргАдрес" Тогда

		СтандартнаяОбработка = Ложь;

		ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", мАдресвФорматеДляВыгрузки);

		Если ВводАдреса.ОткрытьМодально() Тогда

			мАдресвФорматеДляВыгрузки = ВводАдреса.НачальноеЗначениеВыбора.Представление;
			Если мАдресвФорматеДляВыгрузки = ",,,,,,,,," Тогда
				мАдресвФорматеДляВыгрузки = "";
			КонецЕсли;

			Область.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузки);

			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

// Процедура ПолеТабличногоДокументаРаздел9Выбор
// процедура обработчик "Выбор"
//
Процедура ПолеТабличногоДокументаРаздел9Выбор(Элемент, Область, СтандартнаяОбработка)

	Если Область.Имя = "ОргАдрес" Тогда

		СтандартнаяОбработка = Ложь;

		ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", мАдресвФорматеДляВыгрузкиРаздел9);

		Если ВводАдреса.ОткрытьМодально() Тогда

			мАдресвФорматеДляВыгрузкиРаздел9 = ВводАдреса.НачальноеЗначениеВыбора.Представление;
			Если мАдресвФорматеДляВыгрузкиРаздел9 = ",,,,,,,,," Тогда
				мАдресвФорматеДляВыгрузкиРаздел9 = "";
			КонецЕсли;

			Область.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузкиРаздел9);

			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел9Выбор

// Процедура ПолеТабличногоДокументаРаздел10Выбор
// процедура обработчик "Выбор"
//
Процедура ПолеТабличногоДокументаРаздел10Выбор(Элемент, Область, СтандартнаяОбработка)

	Если Область.Имя = "ОргАдрес" Тогда

		СтандартнаяОбработка = Ложь;

		ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", мАдресвФорматеДляВыгрузкиРаздел10);

		Если ВводАдреса.ОткрытьМодально() Тогда

			мАдресвФорматеДляВыгрузкиРаздел10 = ВводАдреса.НачальноеЗначениеВыбора.Представление;
			Если мАдресвФорматеДляВыгрузкиРаздел10 = ",,,,,,,,," Тогда
				мАдресвФорматеДляВыгрузкиРаздел10 = "";
			КонецЕсли;

			Область.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузкиРаздел10);

			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел10Выбор

// КнопкаПредыдущаяСтраницаРаздела10Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздела10Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, -1, "Раздел10");

	мАдресвФорматеДляВыгрузкиРаздел10 = мРаздел10.Области.ОргАдрес.Значение;
	мРаздел10.Области.ОргАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузкиРаздел10);

КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздела10Нажатие

// КнопкаСледующаяСтраницаРаздела10Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздела10Нажатие(Элемент)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, 1, "Раздел10");

	мАдресвФорматеДляВыгрузкиРаздел10 = мРаздел10.Области.ОргАдрес.Значение;
	мРаздел10.Области.ОргАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузкиРаздел10);

КонецПроцедуры // КнопкаСледующаяСтраницаРаздела10Нажатие

// КнопкаПерейтиНаСтраницуРаздел10Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел10Нажатие(Элемент)

	ОткрытьФормуСпискаДопСтраниц();

	// Обновим адрес в переменной, после перехода. Даже в случае отказа от перехода по страницам.
	мАдресвФорматеДляВыгрузкиРаздел10 = мСтруктураМногостраничныхРазделов.Раздел10.Найти(Истина, "АктивнаяСтраница").Данные.ОргАдрес;
	мРаздел10.Области.ОргАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузкиРаздел10);

КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел10Нажатие

// КнопкаУдалитьДопСтраницуРаздел10Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел10Нажатие(Элемент)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма);

КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел10Нажатие

// КнопкаДобавитьДопСтраницуРаздела10Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздела10Нажатие(Элемент)

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел10");
	мАдресвФорматеДляВыгрузкиРаздел10 = "";

КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздела10Нажатие

// КнопкаУдалитьДопСтрокиРаздел10Нажатие
//
Процедура КнопкаУдалитьДопСтрокиРаздел10Нажатие(Элемент)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтроку(ЭтаФорма);
	Расчет("Раздел10");

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел10Нажатие

// КнопкаУдалитьДопСтрокиРаздел9Нажатие
//
Процедура КнопкаУдалитьДопСтрокиРаздел9Нажатие(Элемент)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтроку(ЭтаФорма);
	Расчет("Раздел9");

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел9Нажатие

// КнопкаДобавитьДопСтрокиРаздел9Нажатие
//
Процедура КнопкаДобавитьДопСтрокиРаздел9Нажатие(Элемент)

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтроку(ЭтаФорма);

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел9Нажатие

// ПолеТабличногоДокументаРаздел8ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел8ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел8");

КонецПроцедуры // ПолеТабличногоДокументаРаздел8ПриАктивизацииОбласти

// КнопкаУдалитьДопСтрокиРаздел8Нажатие
//
Процедура КнопкаУдалитьДопСтрокиРаздел8Нажатие(Элемент)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтроку(ЭтаФорма);
	Расчет("Раздел8");

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел8Нажатие

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную
// строку. Общая.
//
Процедура КнопкаДобавитьДопСтрокиРаздел8Нажатие(Элемент)

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтроку(ЭтаФорма);

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел8Нажатие()

// ПолеТабличногоДокументаТитульныйПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаТитульныйПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаТитульныйПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел1ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел1ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел1");

КонецПроцедуры // ПолеТабличногоДокументаРаздел1ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел2_3ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел2_3ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел2_3");

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_3ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел4_6ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел4_6ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел4_6");

КонецПроцедуры // ПолеТабличногоДокументаРаздел4_6ПриАктивизацииОбласти

// ПолеТабличногоДокументаПодписиПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаПодписиПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Подписи");

КонецПроцедуры // ПолеТабличногоДокументаПодписиПриАктивизацииОбласти

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

Процедура СохранитьДеревоСтраницОтчета()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	СохранитьДеревоСтраницОтчета();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мТитульный);

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	КолвоМнгБлоков = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
	Если ТипЗнч(КолвоМнгБлоков) = Тип("ТаблицаЗначений") Тогда
		КолвоМнгБлоков = КолвоМнгБлоков.Количество();
	КонецЕсли;

	Если КолвоМнгБлоков > 0 Тогда
		ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИдГруппы <> Неопределено Тогда
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
			ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
		КонецЕсли;
		// управляем доступностью кнопок "Добавить" и "Удалить"
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма, ТекущаяОбласть, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Истина;

	// Заполним дату на листах
	ЗаполнитьДатуВЯчейках();

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Ложь;

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик нажатия кнопки "Добавить" дополнительную
// строку. Общая.
//
Процедура КнопкаДобавитьДопСтрокиРаздел4_6Нажатие(Элемент)

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтроку(ЭтаФорма);

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел4_6Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" дополнительную
// строку. Общая.
//
Процедура КнопкаУдалитьДопСтрокиРаздел4_6Нажатие(Элемент)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтроку(ЭтаФорма);

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел4_6Нажатие()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОТ ТАБЛИЧНЫХ ПОЛЕЙ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт

	// Процедура "заглушка" оставлена для совместимости.
	// Не удалять.
	Возврат;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// ПроставитьВКвадратыЗначения(Лист, Показатель, Размерность, Значение)
// проставляет в квадратики необходимые значения
//
Процедура ПроставитьВКвадратыЗначения(Знач Лист, Знач Показатель, Знач Размерность,Знач Значение, ДополнитьЗначение = Ложь, НужноСтавитьЗнакРавенства = Истина) Экспорт

	Раздел = ЭлементыФормы["ПолеТабличногоДокумента" + СтрЗаменить(Лист, "ПолеТабличногоДокумента", "")];

	ПризнакДаты = Ложь;

	ДопРазряд = ""; // дополнительный разряд в счетчике
	ТестОк = Истина;
	Попытка // определим, есть ли дополнительный разряд или нет, ДЛЯ универсальности
		Тест = Раздел     .Области[Показатель + ДопРазряд+"1"].Значение;
	Исключение
		ТестОк = Ложь;
	КонецПопытки;

	Если НЕ ТестОк Тогда
		Если ДопРазряд = "0" Тогда
			ДопРазряд = "";
		Иначе
			ДопРазряд = "0";
		КонецЕсли;
	КонецЕсли;

	СтрокаФорматаЯчейки = СтрЗаменить(мСтрокаФормата, "; ЧН=-", "");
	// Убираем пробелы между группами разрядов числа
	СтрокаФорматаЯчейки = СтрокаФорматаЯчейки + "; ЧГ=0";

	Если (ДополнитьЗначение) Или ((РегламентированнаяОтчетность.роЯвляетсяЧислом(Значение)) И (Значение = 0)) Тогда

		Если ((РегламентированнаяОтчетность.роЯвляетсяЧислом(Значение)) И (Значение = 0)) Тогда

			ЗначениеДопСтрока = РегламентированнаяОтчетность.ДополнитьСтроку("", Размерность," ");

		Иначе

			ЗначениеДопСтрока = Формат(Значение, СтрокаФорматаЯчейки) + ?(НужноСтавитьЗнакРавенства, "=", "");
			ЗначениеДопСтрока = РегламентированнаяОтчетность.ДополнитьСтроку(ЗначениеДопСтрока, Размерность," ",1);

		КонецЕсли;

		Иначе

		ЗначениеДопСтрока = Значение;

	КонецЕсли; // ДополнитьЗначение

	ДопЗначение = 0;
	Для НомЯчейки = 1 По Размерность Цикл

			Если ПризнакДаты Тогда
				Если (НомЯчейки = 3) Или (НомЯчейки = 5) Тогда
					ДопЗначение = ДопЗначение+1; // перескакиваем точкку
				КонецЕсли;
			Раздел.Области[Показатель + ?(СтрДлина(НомЯчейки)=1,ДопРазряд+НомЯчейки,НомЯчейки) ].Значение = Сред(ЗначениеДопСтрока, НомЯчейки + ДопЗначение, 1);
			Иначе
попытка
			Раздел.Области[Показатель + ?(СтрДлина(НомЯчейки)=1,ДопРазряд+НомЯчейки,НомЯчейки) ].Значение = Сред(ЗначениеДопСтрока, НомЯчейки, 1);
исключение
сообщить("ош");
конецпопытки;
			КонецЕсли; // ПризнакДаты
	КонецЦикла;
КонецПроцедуры // ПроставитьВКвадратыЗначения(Лист, Показатель, Размерность, Значение)

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() 

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел I";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_3";
	СтрокаУровня1.Представление            = "Раздел II-III";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4_6";
	СтрокаУровня1.Представление            = "Раздел IV-VI";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел4_6";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел7";
	СтрокаУровня1.Представление            = "Раздел VII";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел7";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел8";
	СтрокаУровня1.Представление            = "Раздел VIII";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел8";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел9";
	СтрокаУровня1.Представление            = "Раздел IX";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел9";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел10";
	СтрокаУровня1.Представление            = "Терр.-обособ. подразделения";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел10";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Подписи";
	СтрокаУровня1.Представление            = "Подписи";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПодписи";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если ((ИмяТекущейСтраницыПанели = "Раздел8") Или (ИмяТекущейСтраницыПанели = "Раздел9") Или (ИмяТекущейСтраницыПанели = "Раздел10"))
	 И (Найти(ОбластьИмя, "_") > 0) Тогда
		Расчет(ИмяТекущейСтраницыПанели + "_Колонка" + Строка(Число(Сред(ОбластьИмя, 13, 1) - 3)));
	Иначе
		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Цвета раскраски автозаполняемых ячеек
ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);  // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);  // Белый, Ввод запрещен
ЦветАвто                         = Новый Цвет(0, 0, 0);        // Белый, Ввод запрещен

// Структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
мСтруктураЦветовРаскраски.Вставить("_6", ЦветАвто);

ОписаниеТиповСтрока3    = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3);
ОписаниеТиповСтрока8    = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(8);
ОписаниеТиповСтрока20    = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(20);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2);
ОписаниеТиповЧисло9_1 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(9, 1);
ОписаниеТиповЧисло10_0 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10, 0);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1 = "П0000400010"; // 4_6
мИдГруппы2 = "П0000800010"; // 8
мИдГруппы3 = "П0000900010"; // 9
мИдГруппы4 = "П0000000010"; // 10


// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 4;
КолИсхСтрокИдГруппы2 = 13;
КолИсхСтрокИдГруппы3 = 2;
КолИсхСтрокИдГруппы4 = 6;

// структура строк многострочных разделов
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000040001001", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П000040001002", ОписаниеТиповСтрока3);
СтруктураГруппы1.Колонки.Добавить("П000040001003", ОписаниеТиповСтрока20);
СтруктураГруппы1.Колонки.Добавить("П000040001004", ОписаниеТиповЧисло9_1);

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000080001001", ОписаниеТиповСтрока254);
СтруктураГруппы2.Колонки.Добавить("П000080001002", ОписаниеТиповСтрока3);
СтруктураГруппы2.Колонки.Добавить("П000080001003", ОписаниеТиповСтрока8);
СтруктураГруппы2.Колонки.Добавить("П000080001004", ОписаниеТиповЧисло10_0);
СтруктураГруппы2.Колонки.Добавить("П000080001005", ОписаниеТиповЧисло9_1);
СтруктураГруппы2.Колонки.Добавить("П000080001006", ОписаниеТиповЧисло9_1);
СтруктураГруппы2.Колонки.Добавить("П000080001007", ОписаниеТиповЧисло9_1);
СтруктураГруппы2.Колонки.Добавить("П000080001008", ОписаниеТиповЧисло9_1);

СтруктураГруппы3 = Новый ТаблицаЗначений;
СтруктураГруппы3.Колонки.Добавить("П000090001001", ОписаниеТиповСтрока254);
СтруктураГруппы3.Колонки.Добавить("П000090001002", ОписаниеТиповСтрока3);
СтруктураГруппы3.Колонки.Добавить("П000090001003", ОписаниеТиповСтрока8);
СтруктураГруппы3.Колонки.Добавить("П000090001004", ОписаниеТиповЧисло10_0);
СтруктураГруппы3.Колонки.Добавить("П000090001005", ОписаниеТиповЧисло9_1);
СтруктураГруппы3.Колонки.Добавить("П000090001006", ОписаниеТиповЧисло9_1);
СтруктураГруппы3.Колонки.Добавить("П000090001007", ОписаниеТиповЧисло9_1);
СтруктураГруппы3.Колонки.Добавить("П000090001008", ОписаниеТиповЧисло9_1);

СтруктураГруппы4 = Новый ТаблицаЗначений;
СтруктураГруппы4.Колонки.Добавить("П000000001001", ОписаниеТиповСтрока254);
СтруктураГруппы4.Колонки.Добавить("П000000001002", ОписаниеТиповСтрока3);
СтруктураГруппы4.Колонки.Добавить("П000000001003", ОписаниеТиповСтрока8);
СтруктураГруппы4.Колонки.Добавить("П000000001004", ОписаниеТиповЧисло10_0);
СтруктураГруппы4.Колонки.Добавить("П000000001005", ОписаниеТиповЧисло9_1);
СтруктураГруппы4.Колонки.Добавить("П000000001006", ОписаниеТиповЧисло9_1);
СтруктураГруппы4.Колонки.Добавить("П000000001007", ОписаниеТиповЧисло9_1);
СтруктураГруппы4.Колонки.Добавить("П000000001008", ОписаниеТиповЧисло9_1);


// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы3, СтруктураГруппы3);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы4, СтруктураГруппы4);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы3, КолИсхСтрокИдГруппы3);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы4, КолИсхСтрокИдГруппы4);

ТаблицаСтраницыРазделаДляМногострочныхРазделов            = Новый ТаблицаЗначений;
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Данные");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("ДанныеДопСтрок");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

СтрПерваяСтраница2 = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Добавить();
СтрПерваяСтраница2.Представление      = "Новая страница";
СтрПерваяСтраница2.АктивнаяСтраница   = Истина;
СтрПерваяСтраница2.АвтоматическоеПредставление = Истина;
СтрПерваяСтраница2.ДанныеДопСтрок = Неопределено; // В разделе есть многострочность, поэтому поле объявлено

// Структура содержит данные дополнительных страниц
мСтруктураМногостраничныхРазделов = Новый Структура;

ТаблицаРаздела10 = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("Раздел10", ТаблицаРаздела10);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "30/11/2009";

// Код отчета, равен КНД
мКодОтчета   = 0601009;

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;
