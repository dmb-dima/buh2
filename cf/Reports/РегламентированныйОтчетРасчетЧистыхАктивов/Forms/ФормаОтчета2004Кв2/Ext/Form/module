////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
Перем мФормаОтчета;

// переменный для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураМногостраничныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

// хранит код отчета по КНД
Перем мКодОтчета;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы Экспорт;

Перем мПечатныеФормы Экспорт;

Перем СпП Экспорт;

// Хранит признак измененности организации
Перем мВПрограммеИзмененаОрганизация;

// Настройка свойств листов
Перем мСвойстваРазделовДекларации Экспорт;

// Хранит название макета состава показателей
Перем мСоставПоказателей Экспорт;

Перем мДокументВосстановлен;

Перем мСохранятьРасшифровку Экспорт;

Перем мБезКонсолидации Экспорт;

// Переменная ссылка на справочник "Организации" для подставки в процедуре _ДобавитьСтрокуРасшифровки.
// Расшифровка для организации ОргРасшифровка. Через параметр в процедуру _ДобавитьСтрокуРасшифровки. не передается,
// т.к. слишком много уже имеется параметров, тяжело контролировать.
// Может принимать значение Неопределено, в этом случае в механизмах расшифровки будет браться организация из реквизита объекта отчета.
Перем мОргРасшифровка Экспорт;

// Переменная используется для хранения показателей в режиме сбора отчета за несколько организаций.
// Предстовляет собой таблицу значений. Наполнение происходит в процедуре УстановитьЗначениеПоказателя,
// в том случае, если отчет формируется за несколько организаций.
Перем мТаблицаИтоговыхПоказателейПриКонсолидации;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
Функция СНД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНД()

// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по кредиту счета, указанного в параметре.
//
Функция СНК(Счет)

	Перем Итог;

	Возврат мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНК()

// Функция вычисляет конечный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - конечный остаток по дебету счета, указанного в параметре.
//
Функция СКД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКД()

// Функция вычисляет конечный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка по кредиту указаного счета.
//
Функция СКК(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКК()

// Функция вычисляет начальный остаток счета, указанного в качестве параметра 
// функции, развернутый по дебету субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма начального остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СНДР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНДР()

// Функция вычисляет начальный остаток счета, указанного в качестве параметра 
// функции, развернутый по кредиту субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма начального остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СНКР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНКР()

// Функция вычисляет конечный остаток счета, указанного в качестве параметра 
// функции, развернутый по дебету субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СКДР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКДР()

// Функция вычисляет конечный остаток счета, указанного в качестве параметра 
// функции, развернутый по кредиту субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СККР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКДР()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция собирает значения редактирукемых ячеек +табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		//Если ТекущаяОбласть.Защита Тогда
		//	Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	// Период для показа в шапке отчета
	//ПериодОтчета = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'");
	Если НачалоМесяца(мДатаКонцаПериодаОтчета) = мДатаНачалаПериодаОтчета Тогда
		СтрПериод = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	Иначе
		СтрПериод = "Январь - " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	КонецЕсли;  

	ПериодОтчета = " за " + СтрПериод;
	
	// Период в заголовке отчета
	//мФормаОтчета.Области.ПериодОтчета.Значение = ПериодОтчета;

	// Период в списке кодов в форме отчета
	//мФормаОтчета.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	//мФормаОтчета.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
	//мФормаОтчета.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд'");

	// Период в заголовке отчета
	// Для показа периода в заголовке берется текст из заголовка основной формы
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (на " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.)";

КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "КППЮЛ"); // КПП
		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 

	КонецЕсли;

	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	Сведения.Добавить("", "ФИО"); // ФИО ПБОЮЛа

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	// Инициализируем переменные
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ИННЮЛ = "";
		КППЮЛ = "";
		НаимЮЛПол = "";

	КонецЕсли;

	ФИОРук = "";
	ФИОБух = "";
	ФИО = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		// Получаем данные
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ", КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);

	КонецЕсли;

	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	ОргСведения.Свойство("ФИО", ФИО);

	ЧП = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	Если ЧП Тогда
		НаимЮлПол = ФИО;
	КонецЕсли;

	Если ВПрограммеИзмененаДатаПодписи Тогда

		// Обновим только то, что зависит от даты подписи и выйдем
		мФормаОтчета.Области.ОргДиректор.Значение  = ФИОРук;
		мФормаОтчета.Области.ОргБухгалтер.Значение = ФИОБух;

		Если ЧП Тогда
			мФормаОтчета.Области.ОргДиректор.Значение = ФИО;
		КонецЕсли;

		Возврат;
	КонецЕсли;

	// Работаем с ФИО руководителя
	Если ( ((мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргДиректор.Значение)))) Тогда
		мФормаОтчета.Области.ОргДиректор.Значение  = ФИОРук;
	КонецЕсли;

	// Работаем с ФИО бухгалтера
	Если (((мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргБухгалтер.Значение)))) Тогда
		мФормаОтчета.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить("Расчет чистых активов: при выводе сумм в рублях точность не может превышать 2 знака.", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить("Расчет чистых активов: при выводе сумм в тысячах рублей точность не может превышать 3 знака.", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить("Расчет чистых активов: при выводе сумм в миллионах рублей точность не может превышать 6 знаков.", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";

	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
			ФорматируемаяОбласть.Формат = мСтрокаФормата;
			ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ФормаОтчета";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		Если ВариантЗаполнения = 4 Тогда

			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;

		Иначе

			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;

		КонецЕсли;

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			Если ВариантЗаполнения = 4 Тогда
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
			Иначе
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
			КонецЕсли;

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
	         |Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	Если ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяЯчейка);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)

	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, Вариант, ТекущаяОбласть);

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";

	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//   ЗаписьВОтчет       - Булево, Истина, осуществлять запись показателей в отчет, Ложь - ничего не делать.
//                        Необходимо для режима консолидации отчета.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя, ЗаписьВОтчет = Ложь)

	// В случае, отчет заполняется с использованием режима консолидации, тогда анализируем флаг ЗаписьВОтчет и мБезКонсолидации.
	Если (НЕ ЗаписьВОтчет) И (НЕ мБезКонсолидации) Тогда
		// Добавим показатель в таблицу итогового расчета при заполнении отчета за несколько организаций.
		НовСтр = мТаблицаИтоговыхПоказателейПриКонсолидации.Добавить();
		НовСтр.ИмяПоказателя = ИмяПоказателя;
		НовСтр.Сумма = ЗначениеПоказателя;

		Возврат;

	КонецЕсли;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("ФормаОтчета");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

			// В случае, если предлагаемое значение не числовое и второй тип (с корректировкой)
			// тогда принимаем предложенное значение за 0.
			Если (НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя)) И (ВариантЗаполнения = 2) Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя) Тогда
				НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;
			КонецЕсли;

			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	мФормаОтчета.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Имя = "ОргДиректор" Или ТекущаяОбласть.Имя = "ОргБухгалтер" Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	// Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мФормаОтчета;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	СпП.Очистить();
	
	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // Очистить()

// Процедура выводит на печать заполненные строки секции (именованных строк)
// табличного документа с заданным именем.
//
// Параметры
//  ПечатнаяФорма          – табличный документ – печатная форма;
//  ИмяСекции              – строка – имя выводимой на печать секции;
//  НоваяСтраница          – булево – признак начала новой строки;
//  ИмяНовойСтраницы       – строка – имя секции - шапки новой страницы;
//  СписокВложенныхСекций  – список значений – список выведенных на печать вложенных секций.
//
Процедура ВывестиНепустыеСтроки(ПечатнаяФорма, ИмяСекции, НоваяСтраница = Ложь, ИмяНовойСтраницы = "", СписокВложенныхСекций = Неопределено)

	ОбластьСекции = мФормаОтчета.ПолучитьОбласть(ИмяСекции);

	КолвоВложенныхСекций   = 0;
	ВыведенЗаголовокСекции = Ложь;

	Если СписокВложенныхСекций = Неопределено Тогда
		СписокВложенныхСекций = Новый СписокЗначений();
	КонецЕсли;

	Для каждого Строка Из ОбластьСекции.Области Цикл

		Если Строка.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			Продолжить;
		КонецЕсли;

		Если Строка.Имя = ИмяСекции Тогда
			Продолжить;
		КонецЕсли;

		// Проверяем, была ли выведена на печать вложенная секция
		Если СписокВложенныхСекций.НайтиПоЗначению(Строка.Имя) <> Неопределено Тогда
			// Секция ранее была выведена на печать
			Продолжить;
		КонецЕсли;

		КолвоВложенныхСекций = КолвоВложенныхСекций + 1;

		ОбластьСтроки = мФормаОтчета.ПолучитьОбласть(Строка.Имя);

		ЕстьЗаполненныеЯчейки = Ложь;

		ВложеннаяСекция = Ложь;

		Для каждого Ячейка Из ОбластьСтроки.Области Цикл

			Если Ячейка.Имя = Строка.Имя Тогда
				Продолжить;
			КонецЕсли;

			Если ВложеннаяСекция Тогда
				Если Ячейка.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если Ячейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				// Это есть вложенная секция. Проверяем ее на наличие заполненных строк
				ВложеннаяСекция = Истина;
				
				ОбластьСтроки2 = мФормаОтчета.ПолучитьОбласть(Ячейка.Имя);

				Для каждого Ячейка2 Из ОбластьСтроки2.Области Цикл

					Если Ячейка2.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
						Продолжить;
					КонецЕсли;

					Если Не Ячейка2.СодержитЗначение Тогда
						Продолжить;
					КонецЕсли;

					ЗначениеЯчейки = Ячейка2.Значение;

					Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
						ЕстьЗаполненныеЯчейки = Истина;
						
						Прервать;
					КонецЕсли;

				КонецЦикла;

				Если ЕстьЗаполненныеЯчейки Тогда
					// Выводим заголовок секции
					Если Не ВыведенЗаголовокСекции Тогда

						// Сначала проверим, передан ли признак начала новой строки
						Если НоваяСтраница Тогда
							ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
							Если Не ПустаяСтрока(ИмяНовойСтраницы) Тогда
								ОбластьЗаголовокСтраницы = мФормаОтчета.ПолучитьОбласть(ИмяНовойСтраницы);
								ПечатнаяФорма.Вывести(ОбластьЗаголовокСтраницы);
							КонецЕсли;
						КонецЕсли;

						Если мФормаОтчета.Области.Найти("Заголовок" + ИмяСекции) <> Неопределено Тогда
							ОбластьЗаголовокСекции = мФормаОтчета.ПолучитьОбласть("Заголовок" + ИмяСекции);
							ПечатнаяФорма.Вывести(ОбластьЗаголовокСекции);
						КонецЕсли;

						ВыведенЗаголовокСекции = Истина;
					КонецЕсли;

					// Добавляем в список выведенных на печать секций имя текущей секции
					СписокВложенныхСекций.Добавить(Строка.Имя);

					// Выводим на печать непустую вложенную секцию
					ВывестиНепустыеСтроки(ПечатнаяФорма, Строка.Имя,,, СписокВложенныхСекций);
					ЕстьЗаполненныеЯчейки = Ложь;

					Прервать;
				КонецЕсли;

			Иначе

				Если Не Ячейка.СодержитЗначение Тогда
					Продолжить;
				КонецЕсли;

				// Следующие показатели, несмотря на то, что содержат значение,
				// не могут служить признаком заполненной строки, так как их значение
				// (отчетный год) всегда отображается в форме отчета.
				//Если (Ячейка.Имя = "П000010001101") ИЛИ (Ячейка.Имя = "П000010007101") Тогда
				//	Продолжить;
				//КонецЕсли;

				ЗначениеЯчейки = Ячейка.Значение;

				Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
					ЕстьЗаполненныеЯчейки = Истина;

					Прервать;
				КонецЕсли; 

			КонецЕсли;

		КонецЦикла;

		Если ЕстьЗаполненныеЯчейки Тогда
			// Выводим заголовок секции
			Если Не ВыведенЗаголовокСекции Тогда

				// Сначала проверим, передан ли признак начала новой строки
				Если НоваяСтраница Тогда
					ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
					Если Не ПустаяСтрока(ИмяНовойСтраницы) Тогда
						ОбластьЗаголовокСтраницы = мФормаОтчета.ПолучитьОбласть(ИмяНовойСтраницы);
						ПечатнаяФорма.Вывести(ОбластьЗаголовокСтраницы);
					КонецЕсли;
				КонецЕсли;

				Если мФормаОтчета.Области.Найти("Заголовок" + ИмяСекции) <> Неопределено Тогда
					ОбластьЗаголовокСекции = мФормаОтчета.ПолучитьОбласть("Заголовок" + ИмяСекции);
					ПечатнаяФорма.Вывести(ОбластьЗаголовокСекции);
				КонецЕсли;

				ВыведенЗаголовокСекции = Истина;
			КонецЕсли;

			СписокВложенныхСекций.Добавить(Строка.Имя);

			Если ВРег(Лев(Строка.Имя, 6)) = "ГРУППА" Тогда
				ВывестиНепустыеСтроки(ПечатнаяФорма, Строка.Имя,,, СписокВложенныхСекций);
			Иначе
				ПечатнаяФорма.Вывести(ОбластьСтроки);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	// Выводим подвал секции
	Если ВыведенЗаголовокСекции Тогда
		Если мФормаОтчета.Области.Найти("Подвал" + ИмяСекции) <> Неопределено Тогда
			ОбластьЗаголовокСекции = мФормаОтчета.ПолучитьОбласть("Подвал" + ИмяСекции);
			ПечатнаяФорма.Вывести(ОбластьЗаголовокСекции);
		КонецЕсли;
	КонецЕсли;

	Если КолвоВложенныхСекций = 0 Тогда
		// Это тот случай, когда секция состоит из единственной строки.
		// Проверяем эту строку на предмет заполненных ячеек.
		ЕстьЗаполненныеЯчейки = Ложь;

		Для каждого Ячейка Из ОбластьСекции.Области Цикл

			Если Ячейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Продолжить;
			КонецЕсли;

			Если Не Ячейка.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;

			ЗначениеЯчейки = Ячейка.Значение;

			Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				ЕстьЗаполненныеЯчейки = Истина;

				Прервать;
			КонецЕсли; 

		КонецЦикла;

		Если ЕстьЗаполненныеЯчейки Тогда
			ПечатнаяФорма.Вывести(ОбластьСекции);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ВывестиНепустыеСтроки()

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ЧтоИскать <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяТабличногоПоля, НаименованиеЛиста, ЧтоИскать", "ПолеТабличногоДокументаФормаОтчета", "Расчет чистых активов", ЧтоИскать);
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПоиска);
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;

	ПечатнаяФорма.Вывести(мФормаОтчета);
	
	мПечатныеФормы.Добавить(ПечатнаяФорма, "Расчет чистых активов");
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	
КонецПроцедуры // Печать()


// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Вид                        = Вариант;
	мСохраненныйДок.Комментарий                = КомментарийОбщ;

	мВариант = Вариант;

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	//Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаФормаОтчета";// + СтраницаПанели.Имя;
	ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", мСохранятьРасшифровку);

	Если мСохранятьРасшифровку = Истина Тогда
		СписокСохранения.Вставить("Расшифровка", СпП);
	КонецЕсли;

	// Сохраним список организаций, по которому необходимо собирать отчет.
	СписокСохранения.Вставить("ГруппаОрганизаций", мГруппаОрганизаций);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем Расшифровка;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	КомментарийОбщ			 = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение = Автозаполнение;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	СписокСохранения.Свойство("СохранятьРасшифровку", мСохранятьРасшифровку);
	Если мСохранятьРасшифровку = Неопределено Тогда
		мСохранятьРасшифровку = Истина;
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.ПодменюРасшифровка.Кнопки.КнопкаСохранятьРасшифровку.Пометка = мСохранятьРасшифровку;

	СписокСохранения.Свойство("Расшифровка", Расшифровка);
	Если Расшифровка <> Неопределено Тогда
		СпП = Расшифровка;
	КонецЕсли;

	СписокСохранения.Свойство("ГруппаОрганизаций", мГруппаОрганизаций);
	Если мГруппаОрганизаций = Неопределено Тогда
		мГруппаОрганизаций = Новый СписокЗначений;
	КонецЕсли;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	УстановитьФорматВывода();

	Модифицированность = Ложь;

	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Если ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;

	мФормаОтчета.Области.П010001203.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010011003.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010012003.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010013003.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010013503.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010014003.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010015003.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010021003.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010022003.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010023003.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010026003.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010027003.Значение);

	мФормаОтчета.Области.П010001204.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010011004.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010012004.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010013004.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010013504.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010014004.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010015004.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010021004.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010022004.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010023004.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010026004.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010027004.Значение);
			  
	мФормаОтчета.Области.П010002003.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010051003.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010052003.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010061003.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010062003.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010063003.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010065003.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010066003.Значение);
	
	мФормаОтчета.Области.П010002004.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010051004.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010052004.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010061004.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010062004.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010063004.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010065004.Значение)
	                                         + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010066004.Значение);
	
	мФормаОтчета.Области.П010002103.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010001203.Значение)
	                                         - ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010002003.Значение);
	
	мФормаОтчета.Области.П010002104.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010001204.Значение)
	                                         - ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П010002004.Значение);

КонецПроцедуры // Расчет()

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто()

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//////// ИНСТРУКЦИЯ ПО ЗАПОЛНЕНИЮ ОТЧЕТА ПО ДАННЫМ УЧЕТА
	//
	// Для присвоения показателям отчета вычисленного значения  необходимо
	// использовать процедуру
	//
	//     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).
	//
	//// ПОРЯДОК АВТОЗАПОЛНЕНИЯ МНОГОСТРОЧНЫХ РАЗДЕЛОВ ФОРМЫ
	//
	// Для создания и заполнения дополнительных строк в многострочных разделах
	// необходимо предварительно заполнить таблицу значений ТаблДанныхДопСтрок,
	// далее вызвать процедуру АвтозаполнениеДопСтрок(), передав в качестве
	// параметра таблицу значений ТаблДанныхДопСтрок.
	//
	// Примечание 1. Идентификаторы многострочных разделов:
	//                  строка       идентификатор
	//                   030    -     мИдГруппы1;
	//                   181    -     мИдГруппы2;
	//                   260    -     мИдГруппы3;
	//                   320    -     мИдГруппы4;
	//                   370    -     мИдГруппы5;
	//                   410    -     мИдГруппы6;
	//
	////////

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 

	СпП.Очистить();
	мТаблицаИтоговыхПоказателейПриКонсолидации.Очистить();

	ТаблДанныхДопСтрок = Новый ТаблицаЗначений();
	ТаблДанныхДопСтрок.Колонки.Добавить("Наименование");
	ТаблДанныхДопСтрок.Колонки.Добавить("НачОстаток");
	ТаблДанныхДопСтрок.Колонки.Добавить("КонОстаток");

	// Инициализация
	ПС = ПланыСчетов["Хозрасчетный"];
	
	// Проверим есть ли счет 76.НА в ПС
	Ссылка = ПС.НайтиПоКоду("76.НА");
	Если Ссылка.Код <> "" Тогда
		Есть76НА = Истина
	Иначе 
		Есть76НА = Ложь
	КонецЕсли;
	
	// Проверим есть ли счет 68.32 в ПС
	Ссылка = ПС.НайтиПоКоду("68.32");
	Если Ссылка.Код <> "" Тогда
		Есть68_32 = Истина
	Иначе 
		Есть68_32 = Ложь
	КонецЕсли;


	Счет01      = ПС.ОсновныеСредства;
	Счет02_01   = ПС.АмортизацияОС_01;
	Счет02_02   = ПС.АмортизацияОС_03;
	Счет03      = ПС.ДоходныеВложенияВ_МЦ;
	
	Счет04_01   = ПС.НематериальныеАктивыОрганизации;
	Счет04_02   = ПС.РасходыНаНИОКР;
	Счет05      = ПС.АмортизацияНематериальныхАктивов;
	Счет07      = ПС.ОборудованиеКУстановке;
	Счет08_01   = ПС.ПриобретениеЗемельныхУчастков;
	Счет08_02   = ПС.ПриобретениеОбъектовПриродопользования;
	Счет08_03   = ПС.СтроительствоОбъектовОсновныхСредств;
	Счет08_04   = ПС.ПриобретениеОбъектовОсновныхСредств;
	Счет08_05   = ПС.ПриобретениеНематериальныхАктивов;
	Счет08_06   = ПС.ПереводМолоднякаЖивотныхВОсновноеСтадо;
	Счет08_07   = ПС.ПриобретениеВзрослыхЖивотных;
	Счет08_08   = ПС.ВыполнениеНИОКР;
	Счет09      = ПС.ОтложенныеНалоговыеАктивы;
	Счет10      = ПС.Материалы;
	Счет11      = ПС.ЖивотныеНаВыращиванииИОткорме;
	Счет14_01   = ПС.РезервыПодСнижениеСтоимостиМатериалов;
	Счет14_02   = ПС.РезервыПодСнижениеСтоимостиТоваров;
	Счет14_03   = ПС.РезервыПодСнижениеСтоимостиГотовойПродукции;
	Счет14_04   = ПС.РезервыПодСнижениеСтоимостиНезавершенногоПроизводства;
	Счет15_01   = ПС.ЗаготовлениеИПриобретениеМатериалов;
	Счет15_02   = ПС.ПриобретениеТоваров;
	Счет16_01   = ПС.ОтклонениеВСтоимостиМатериалов;
	Счет16_02   = ПС.ОтклонениеВСтоимостиТоваров;
	Счет19      = ПС.НДСпоПриобретеннымЦенностям;
	Счет20      = ПС.ОсновноеПроизводство;
	Счет21      = ПС.Полуфабрикаты;
	Счет23      = ПС.ВспомогательныеПроизводства;
	Счет28      = ПС.БракВПроизводстве;
	Счет29      = ПС.ОбслуживающиеПроизводства;
	Счет41      = ПС.Товары;
	Счет42      = ПС.ТорговаяНаценка;
	Счет43      = ПС.ГотоваяПродукция;
	Счет44      = ПС.РасходыНаПродажу;
	Счет45      = ПС.ТоварыОтгруженные;
	Счет46      = ПС.ВыполненныеЭтапыПоНезавершеннымРаботам;
	
	Счет58_01_1 = ПС.Паи;
	Счет58_01_2 = ПС.Акции;
	Счет58_02   = ПС.ДолговыеЦенныеБумаги;
	Счет58_03   = ПС.ПредоставленныеЗаймы;
	Счет58_04   = ПС.ВкладыПоДоговоруПростогоТоварищества;
	Счет58_05   = ПС.ПриобретенныеПрава;
	Счет59      = ПС.РезервыПодОбесценениеФинансовыхВложений;
	Счет50      = ПС.Касса;
	Счет51      = ПС.РасчетныеСчета;
	Счет52      = ПС.ВалютныеСчета;
	Счет55_01   = ПС.Аккредитивы;
	Счет55_02   = ПС.ЧековыеКнижки;
	Счет55_03   = ПС.ДепозитныеСчета;
	Счет55_04   = ПС.ПрочиеСпециальныеСчета;
	Счет55_21   = ПС.АккредитивыВал;
	Счет55_23   = ПС.ДепозитныеСчетаВал;
	Счет55_24   = ПС.ПрочиеСпециальныеСчетаВал;
	Счет57      = ПС.ПереводыВПути_;
	
	Счет60_01   = ПС.РасчетыСПоставщиками;
	Счет60_02   = ПС.РасчетыПоАвансамВыданным;
	Счет60_03   = ПС.ВекселяВыданные;
	Счет60_21   = ПС.РасчетыСПоставщикамиВал;
	Счет60_22   = ПС.РасчетыПоАвансамВыданнымВал;
	Счет60_31   = ПС.РасчетыСПоставщикамиУЕ;
	Счет60_32   = ПС.РасчетыПоАвансамВыданнымУЕ;
	
	Счет62_01   = ПС.РасчетыСПокупателями;
	Счет62_02   = ПС.РасчетыПоАвансамПолученным;
	Счет62_03   = ПС.ВекселяПолученные;
	Счет62_21   = ПС.РасчетыСПокупателямиВал;
	Счет62_22   = ПС.РасчетыПоАвансамПолученнымВал;
	Счет62_31   = ПС.РасчетыСПокупателямиУЕ;
	Счет62_32   = ПС.РасчетыПоАвансамПолученнымУЕ;
	Счет63      = ПС.РезервыПоСомнительнымДолгам;
	Счет66      = ПС.РасчетыПоКраткосрочнымКредитамИЗаймам;
	Счет67      = ПС.РасчетыПоДолгосрочнымКредитамИЗаймам;

	Счет68_01   = ПС.НДФЛ;
	Счет68_02   = ПС.НДС;
	Счет68_03   = ПС.Акцизы;
	Счет68_04_1 = ПС.РасчетыСБюджетом;
	Счет68_04_2 = ПС.РасчетНалогаНаПрибыль;
	Счет68_07   = ПС.ТранспортныйНалог;
	Счет68_08   = ПС.НалогНаИмущество;
	Счет68_09   = ПС.НалогНаРекламу;
	Счет68_10   = ПС.ПрочиеНалогиИСборы;
	Счет68_11   = ПС.ЕНВД;
	Счет68_12   = ПС.ЕНприУСН;
	Счет68_22   = ПС.НДСпоЭкспортуКВозмещению;
	
	Если Есть68_32 = Истина Тогда
		Счет68_32   = ПС.НДСНалоговогоАгента;
	КонецЕсли;
	
	Счет69      = ПС.РасчетыПоСоциальномуСтрахованию;
	Счет70      = ПС.РасчетыСПерсоналомПоОплатеТруда;
	Счет71      = ПС.РасчетыСПодотчетнымиЛицами_;
	Счет73      = ПС.РасчетыСПерсоналомПоПрочимОперациям;

	Счет75_02   = ПС.РасчетыПоВыплатеДоходов;

	Счет76_01   = ПС.РасчетыПоИмущественномуЛичномуИДобровольномуСтрахованию;
	Счет76_02   = ПС.РасчетыПоПретензиям;
	Счет76_03   = ПС.РасчетыПоПричитающимсяДивидендам;
	Счет76_04   = ПС.РасчетыПоДепонированнымСуммам;
	Счет76_05   = ПС.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	Счет76_06   = ПС.РасчетыСПрочимиПокупателямиИЗаказчиками;
	Счет76_09   = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
	Счет76_21   = ПС.РасчетыПоИмущественномуИЛичномуСтрахованиюВал;
	Счет76_22   = ПС.РасчетыПоПретензиямВал;
	Счет76_25   = ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал;
	Счет76_26   = ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиВал;
	Счет76_29   = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал;
	Счет76_32   = ПС.РасчетыПоПретензиямУЕ;
	Счет76_35   = ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ;
	Счет76_36   = ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ;
	Счет76_39   = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ;
	Счет76_41   = ПС.РасчетыПоИсполнительнымДокументамРаботников;
	Счет76_ВА   = ПС.НДСпоАвансамИПредоплатамВыданным;
	Счет76_АВ   = ПС.НДСпоАвансамИПредоплатам;
	Счет76_Н    = ПС.РасчетыПоНДСотложенномуДляУплатыВБюджет;
	Если Есть76НА = Истина Тогда
		Счет76_НА   = ПС.РасчетыНДСНалоговогоАгента;
	КонецЕсли;
	Счет77      = ПС.ОтложенныеНалоговыеОбязательства;
	Счет79      = ПС.ВнутрихозяйственныеРасчеты;
	Счет94      = ПС.НедостачиИПотериОтПорчиЦенностей;
	Счет96      = ПС.РезервыПредстоящихРасходов;
	Счет97      = ПС.РасходыБудущихПериодов;

	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);

	Для каждого Орг Из СписокОрганизаций Цикл

		мОргРасшифровка = Орг.Значение;

		// Бухгалтерский итоги по счетам
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();

		// Бухгалтерские итоги по аналитике
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
		
		Итоги = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
		        |НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
		        |КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
		        |КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт";
		
		// Счета учета расчетов, на которых допустим учет авансов, - для расчета развернутого сальдо
		СчетаУчетаРасчетов = Новый Массив;
		СчетаУчетаРасчетов.Добавить(Счет60_01);
		СчетаУчетаРасчетов.Добавить(Счет60_21);
		СчетаУчетаРасчетов.Добавить(Счет60_31);
		СчетаУчетаРасчетов.Добавить(Счет62_01);
		СчетаУчетаРасчетов.Добавить(Счет62_21);
		СчетаУчетаРасчетов.Добавить(Счет62_31);

		// Виды субконто для расчета развернутого сальдо по счетам учета расчетов
		ВидыСубконтоДляРасчета = Новый Массив;
		ВидыСубконтоДляРасчета.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		ВидыСубконтоДляРасчета.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);

		// Бухгалтерские итоги по счетам, без аналитики
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , , , , , "Организация", мОргРасшифровка);

		// строка 1 "Нематериальные активы"
		П010011003_04 = СНД(Счет04_01);
		П010011003_05 = СНК(Счет05);

		П010011003 = П010011003_04 - П010011003_05;
		УстановитьЗначениеПоказателя("П010011003", П010011003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010011003","Строка ""1. Нематериальные активы"", графа ""На начало отчетного года""","+","!СНД", П010011003_04, Счет04_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010011003","","-","!СНК", -П010011003_05, Счет05);
		
		П010011004_04 = СКД(Счет04_01);
		П010011004_05 = СКК(Счет05);

		П010011004 = П010011004_04 - П010011004_05;
		УстановитьЗначениеПоказателя("П010011004", П010011004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010011004","Строка ""1. Нематериальные активы"", графа ""На конец отчетного периода""","+","!СКД", П010011004_04, Счет04_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010011004","","-","!СКК", -П010011004_05, Счет05);
		
		// строка 2 "Основные средства"
		П010012003_01    = СНД(Счет01);
		П010012003_02_01 = СНК(Счет02_01);

		П010012003 = П010012003_01 - П010012003_02_01;
		УстановитьЗначениеПоказателя("П010012003", П010012003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010012003", "Строка ""2. Основные средства (01, 02)"", графа ""На начало отчетного года""", "+", "!СНД", П010012003_01, Счет01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010012003", "", "-", "!СНК", -П010012003_02_01, Счет02_01);

		П010012004_01    = СКД(Счет01);
		П010012004_02_01 = СКК(Счет02_01);
		
		П010012004 = П010012004_01 - П010012004_02_01;
		УстановитьЗначениеПоказателя("П010012004", П010012004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010012004", "Строка ""2. Основные средства (01, 02)"", графа ""На конец отчетного периода""", "+", "!СКД", П010012004_01, Счет01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010012004", "", "-", "!СКК", -П010012004_02_01, Счет02_01);

		// строка 3 "Незавершенное строительство"
		П010013003_07    = СНД(Счет07);
		П010013003_08_01 = СНД(Счет08_01);
		П010013003_08_02 = СНД(Счет08_02);
		П010013003_08_03 = СНД(Счет08_03);
		П010013003_08_04 = СНД(Счет08_04);
		П010013003_08_06 = СНД(Счет08_06);
		П010013003_08_07 = СНД(Счет08_07);

		П010013003 = П010013003_07 + П010013003_08_01 + П010013003_08_02 + П010013003_08_03 + П010013003_08_04 + П010013003_08_06 + П010013003_08_07;
		УстановитьЗначениеПоказателя("П010013003", П010013003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013003", "Строка ""3. Незавершенное строительство"", графа ""На начало отчетного года""", "+", "!СНД", П010013003_07, Счет07);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013003", "", "+", "!СНД", П010013003_08_01, Счет08_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013003", "", "+", "!СНД", П010013003_08_02, Счет08_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013003", "", "+", "!СНД", П010013003_08_03, Счет08_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013003", "", "+", "!СНД", П010013003_08_04, Счет08_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013003", "", "+", "!СНД", П010013003_08_06, Счет08_06);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013003", "", "+", "!СНД", П010013003_08_07, Счет08_07);

		П010013004_07    = СКД(Счет07);
		П010013004_08_01 = СКД(Счет08_01);
		П010013004_08_02 = СКД(Счет08_02);
		П010013004_08_03 = СКД(Счет08_03);
		П010013004_08_04 = СКД(Счет08_04);
		П010013004_08_06 = СКД(Счет08_06);
		П010013004_08_07 = СКД(Счет08_07);
		
		П010013004 = П010013004_07 + П010013004_08_01 + П010013004_08_02 + П010013004_08_03 + П010013004_08_04 + П010013004_08_06 + П010013004_08_07;
		УстановитьЗначениеПоказателя("П010013004", П010013004);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013004", "Строка ""3. Незавершенное строительство"", графа ""На конец отчетного периода""", "+", "!СКД", П010013004_07, Счет07);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013004", "", "+", "!СКД", П010013004_08_01, Счет08_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013004", "", "+", "!СКД", П010013004_08_02, Счет08_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013004", "", "+", "!СКД", П010013004_08_03, Счет08_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013004", "", "+", "!СКД", П010013004_08_04, Счет08_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013004", "", "+", "!СКД", П010013004_08_06, Счет08_06);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013004", "", "+", "!СКД", П010013004_08_07, Счет08_07);

		// строка 4 "Доходные вложения в материальные ценности"
		П010013503_03    = СНД(Счет03);
		П010013503_02_02 = СНК(Счет02_02);

		П010013503 = П010013503_03 - П010013503_02_02;
		УстановитьЗначениеПоказателя("П010013503", П010013503);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013503", "Строка ""4. Доходные вложения в материальные ценности"", графа ""На начало отчетного года""", "+", "!СНД", П010013503_03, Счет03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013503", "", "-", "!СНК", -П010013503_02_02, Счет02_02);

		П010013504_03    = СКД(Счет03);
		П010013504_02_02 = СКК(Счет02_02);

		П010013504 = П010013504_03 - П010013504_02_02;
		УстановитьЗначениеПоказателя("П010013504", П010013504);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013504", "Строка ""4. Доходные вложения в материальные ценности"", графа ""На конец отчетного периода""", "+", "!СКД", П010013504_03, Счет03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010013504", "", "-", "!СКК", -П010013504_02_02, Счет02_02);

		// Строка 5 "Долгосрочные и краткосрочные финансовые вложения".

		// строка 140 "Долгосрочные финансовые вложения"
		П010014003_58_01_1 = СНД(Счет58_01_1);
		П010014004_58_01_1 = СКД(Счет58_01_1);

		// строка 250 "Краткосрочные финансовые вложения"
		П010025003_58_01_2 = СНД(Счет58_01_2);
		П010025003_58_02   = СНД(Счет58_02);
		П010025003_58_03   = СНД(Счет58_03);
		П010025003_58_04   = СНД(Счет58_04);
		П010025003_58_05   = СНД(Счет58_05);
		П010025003_59      = СНК(Счет59);

		П010025004_58_01_2 = СКД(Счет58_01_2);
		П010025004_58_02   = СКД(Счет58_02);
		П010025004_58_03   = СКД(Счет58_03);
		П010025004_58_04   = СКД(Счет58_04);
		П010025004_58_05   = СКД(Счет58_05);
		П010025004_59      = СКК(Счет59);

		П010025003_55_03 = СНД(Счет55_03);
		П010025003_55_23 = СНД(Счет55_23);
		
		П010025004_55_03 = СКД(Счет55_03);
		П010025004_55_23 = СКД(Счет55_23);
		
		П010014003 = П010014003_58_01_1
		           + П010025003_58_01_2
		           + П010025003_58_02
		           - П010025003_59
		           + П010025003_58_03
		           + П010025003_58_04
		           + П010025003_58_05
		           + П010025003_55_03
		           + П010025003_55_23;

		УстановитьЗначениеПоказателя("П010014003", П010014003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014003", "Строка ""5. Долгосрочные и краткосрочные финансовые вложения"", графа ""На начало отчетного года""", "+", "!СНД", П010014003_58_01_1, Счет58_01_1);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014003", "", "+", "!СНД", П010025003_58_01_2, Счет58_01_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014003", "", "+", "!СНД", П010025003_58_02, Счет58_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014003", "", "-", "!СНК", -П010025003_59, Счет59);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014003", "", "+", "!СНД", П010025003_58_03, Счет58_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014003", "", "+", "!СНД", П010025003_58_04, Счет58_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014003", "", "+", "!СНД", П010025003_58_05, Счет58_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014003", "", "+", "!СНД", П010025003_55_03, Счет55_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014003", "", "+", "!СНД", П010025003_55_23, Счет55_23);

		П010014004 = П010014004_58_01_1
		           + П010025004_58_01_2
		           + П010025004_58_02
		           - П010025004_59
		           + П010025004_58_03
		           + П010025004_58_04
		           + П010025004_58_05
		           + П010025004_55_03
		           + П010025004_55_23;

		   УстановитьЗначениеПоказателя("П010014004", П010014004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014004", "Строка ""5. Долгосрочные и краткосрочные финансовые вложения"", графа ""На конец отчетного периода""", "+", "!СКД", П010014004_58_01_1, Счет58_01_1);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014004", "", "+", "!СКД", П010025004_58_01_2, Счет58_01_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014004", "", "+", "!СКД", П010025004_58_02, Счет58_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014004", "", "-", "!СКК", -П010025004_59, Счет59);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014004", "", "+", "!СКД", П010025004_58_03, Счет58_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014004", "", "+", "!СКД", П010025004_58_04, Счет58_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014004", "", "+", "!СКД", П010025004_58_05, Счет58_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014004", "", "+", "!СКД", П010025004_55_03, Счет55_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010014004", "", "+", "!СКД", П010025004_55_23, Счет55_23);

		// строка 6 "Прочие внеоборотные активы"

		// Так как расходы на НИОКР, учитываемые на счете 04.02, не амортизируются, 
		// а списываются на расходы по обычным видам деятельности, остаток 
		// на счете 04.02 равен остатку не списанных расходов на НИОКР
		
		П010015003_04_02 = СНД(Счет04_02);
		П010015003_08_05 = СНД(Счет08_05);
		П010015003_08_08 = СНД(Счет08_08);
		
		П010015004_04_02 = СКД(Счет04_02);
		П010015004_08_05 = СКД(Счет08_05);
		П010015004_08_08 = СКД(Счет08_08);
		
		// строка 145 "Отложенные налоговые активы"
		П010014503 = СНД(Счет09);
		П010014504 = СКД(Счет09);

		П010015003 = П010015003_04_02
		           + П010015003_08_05
		           + П010015003_08_08
		           + П010014503;

		УстановитьЗначениеПоказателя("П010015003", П010015003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010015003", "Строка ""6. Прочие внеоборотные активы"", графа ""На начало отчетного года""", "+", "!СНД", П010015003_04_02, Счет04_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010015003", "", "+", "!СНД", П010015003_08_05, Счет08_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010015003", "", "+", "!СНД", П010015003_08_08, Счет08_08);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010015003", "", "+", "!СНД", П010014503, Счет09);
		
		П010015004 = П010015004_04_02
		           + П010015004_08_05
		           + П010015004_08_08
		           + П010014504;

		   УстановитьЗначениеПоказателя("П010015004", П010015004);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010015004", "Строка ""6. Прочие внеоборотные активы"", графа ""На конец отчетного периода""", "+", "!СКД", П010015004_04_02, Счет04_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010015004", "", "+", "!СКД", П010015004_08_05, Счет08_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010015004", "", "+", "!СКД", П010015004_08_08, Счет08_08);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010015004", "", "+", "!СКД", П010014504, Счет09);

		// Строка 7 "Запасы"

		// строка 211 "сырье, материалы и другие аналогичные ценности"
		П010021103_10      = СНД(Счет10);
		П010021103_14_01   = СНК(Счет14_01);
		П010021103_15_01   = СНД(Счет15_01);
		П010021103_16_01_Д = СНД(Счет16_01);
		П010021103_16_01_К = СНК(Счет16_01);

		П010021103 = П010021103_10 - П010021103_14_01 + П010021103_15_01 + П010021103_16_01_Д - П010021103_16_01_К;

		П010021104_10      = СКД(Счет10);
		П010021104_14_01   = СКК(Счет14_01);
		П010021104_15_01   = СКД(Счет15_01);
		П010021104_16_01_Д = СКД(Счет16_01);
		П010021104_16_01_К = СКК(Счет16_01);

		П010021104 = П010021104_10 - П010021104_14_01 + П010021104_15_01 + П010021104_16_01_Д - П010021104_16_01_К;

		// строка 212 "животные на выращивании и откорме"
		П010021203 = СНД(Счет11);
		П010021204 = СКД(Счет11);

		// строка 213 "затраты в незавершенном производстве (издержках обращения)"
		П010021303_20    = СНД(Счет20);
		П010021303_21    = СНД(Счет21);
		П010021303_23    = СНД(Счет23);
		П010021303_29    = СНД(Счет29);
		П010021303_44    = СНД(Счет44);
		П010021303_46    = СНД(Счет46);
		П010021303_14_04 = СНК(Счет14_04);

		П010021303 = П010021303_20 + П010021303_21 + П010021303_23 + П010021303_29 + П010021303_44 + П010021303_46 - П010021303_14_04;

		П010021304_20    = СКД(Счет20);
		П010021304_21    = СКД(Счет21);
		П010021304_23    = СКД(Счет23);
		П010021304_29    = СКД(Счет29);
		П010021304_44    = СКД(Счет44);
		П010021304_46    = СКД(Счет46);
		П010021304_14_04 = СКК(Счет14_04);

		П010021304 = П010021304_20 + П010021304_21 + П010021304_23 + П010021304_29 + П010021304_44 + П010021304_46 - П010021304_14_04;

		// строка 214 "готовая продукция и товары для перепродажи"
		П010021403_43      = СНД(Счет43);
		П010021403_14_02   = СНК(Счет14_02);
		П010021403_41      = СНД(Счет41);
		П010021403_14_03   = СНК(Счет14_03);
		П010021403_15_02   = СНД(Счет15_02);
		П010021403_16_02_Д = СНД(Счет16_02);
		П010021403_16_02_К = СНК(Счет16_02);
		П010021403_42      = СНК(Счет42);

		П010021403 = П010021403_43 - П010021403_14_02 + П010021403_41 - П010021403_14_03 + П010021403_15_02 + П010021403_16_02_Д - П010021403_16_02_К - П010021403_42;

		П010021404_43      = СКД(Счет43);
		П010021404_14_02   = СКК(Счет14_02);
		П010021404_41      = СКД(Счет41);
		П010021404_14_03   = СКК(Счет14_03);
		П010021404_15_02   = СКД(Счет15_02);
		П010021404_16_02_Д = СКД(Счет16_02);
		П010021404_16_02_К = СКК(Счет16_02);
		П010021404_42      = СКК(Счет42);

		П010021404 = П010021404_43 - П010021404_14_02 + П010021404_41 - П010021404_14_03 + П010021404_15_02 + П010021404_16_02_Д - П010021404_16_02_К - П010021404_42;

		// строка 215 "товары отгруженные"
		П010021503 = СНД(Счет45);
		П010021504 = СКД(Счет45);

		// строка 216 "расходы будущих периодов"
		П010021603 = СНД(Счет97);
		П010021604 = СКД(Счет97);

		// строка 217 "прочие запасы и затраты"
		П010021703 = СНД(Счет28);
		П010021704 = СКД(Счет28);

		// строка 210
		П010021003 = П010021103 + П010021203 + П010021303 + П010021403 + П010021503 + П010021603 + П010021703;
		УстановитьЗначениеПоказателя("П010021003", П010021003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "Строка ""7. Запасы"", графа ""На начало отчетного года""", "+", "!СНД", П010021103_10, Счет10);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "+", "!СНД", П010021103_14_01, Счет14_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "+", "!СНД", П010021103_15_01, Счет15_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "+", "!СНД", П010021103_16_01_Д, Счет16_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "-", "!СНК", -П010021103_16_01_К, Счет16_01);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "+", "!СНД", П010021203, Счет11);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "+", "!СНД", П010021303_20, Счет20);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "+", "!СНД", П010021303_21, Счет21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "+", "!СНД", П010021303_23, Счет23);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "+", "!СНД", П010021303_29, Счет29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "+", "!СНД", П010021303_44, Счет44);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "+", "!СНД", П010021303_46, Счет46);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "-", "!СНК", -П010021303_14_04, Счет14_04);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "+", "!СНД", П010021403_43, Счет43);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "-", "!СНК", -П010021403_14_02, Счет14_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "+", "!СНД", П010021403_41, Счет41);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "-", "!СНК", -П010021403_14_03, Счет14_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "+", "!СНД", П010021403_15_02, Счет15_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "+", "!СНД", П010021403_16_02_Д, Счет16_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "-", "!СНК", -П010021403_16_02_К, Счет16_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "-", "!СНК", -П010021403_42, Счет42);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "+", "!СНД", П010021503, Счет45);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "+", "!СНД", П010021603, Счет97);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021003", "", "+", "!СНД", П010021703, Счет28);

		П010021004 = П010021104 + П010021204 + П010021304 + П010021404 + П010021504 + П010021604 + П010021704;
		УстановитьЗначениеПоказателя("П010021004", П010021004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "Строка ""7. Запасы"", графа ""На конец отчетного периода""", "+", "!СКД", П010021104_10, Счет10);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "+", "!СКД", П010021104_14_01, Счет14_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "+", "!СКД", П010021104_15_01, Счет15_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "+", "!СКД", П010021104_16_01_Д, Счет16_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "-", "!СКК", -П010021104_16_01_К, Счет16_01);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "+", "!СКД", П010021204, Счет11);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "+", "!СКД", П010021304_20, Счет20);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "+", "!СКД", П010021304_21, Счет21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "+", "!СКД", П010021304_23, Счет23);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "+", "!СКД", П010021304_29, Счет29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "+", "!СКД", П010021304_44, Счет44);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "+", "!СКД", П010021304_46, Счет46);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "-", "!СКК", -П010021304_14_04, Счет14_04);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "+", "!СКД", П010021404_43, Счет43);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "-", "!СКК", -П010021404_14_02, Счет14_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "+", "!СКД", П010021404_41, Счет41);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "-", "!СКК", -П010021404_14_03, Счет14_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "+", "!СКД", П010021404_15_02, Счет15_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "+", "!СКД", П010021404_16_02_Д, Счет16_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "-", "!СКК", -П010021404_16_02_К, Счет16_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "-", "!СКК", -П010021404_42, Счет42);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "+", "!СКД", П010021504, Счет45);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "+", "!СКД", П010021604, Счет97);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010021004", "", "+", "!СКД", П010021704, Счет28);
		
		// Строка 8 "Налог на добавленную стоимость по приобретенным ценностям"
		П010022003 = СНД(Счет19);
		УстановитьЗначениеПоказателя("П010022003", П010022003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010022003", "Строка ""8. Налог на добавленную стоимость по приобретенным ценностям"", графа ""На начало отчетного года""", "+", "!СНД", П010022003, Счет19);

		П010022004 = СКД(Счет19);
		УстановитьЗначениеПоказателя("П010022004", П010022004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010022004", "Строка ""8. Налог на добавленную стоимость по приобретенным ценностям"", графа ""На конец отчетного периода""", "+", "!СКД", П010022004, Счет19);

		// строка 9 "Дебиторская задолженность"
		
		// Из-за отсутствия необходимой аналитики для анализа срока погашения задолженности, 
		// всю задолженность считаем краткосрочной.

		ИтогиРС = "НачальныйРазвернутыйОстатокДт, НачальныйРазвернутыйОстатокКт, КонечныйРазвернутыйОстатокДт, КонечныйРазвернутыйОстатокКт";

		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "76", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, , , "Организация", мОргРасшифровка);

		П010024003_76_01 = 0;
		П010024004_76_01 = 0;
		
		П010062503_76_01 = 0;
		П010062504_76_01 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_01);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_76_01 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_76_01 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062503_76_01 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062504_76_01 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024003_76_21 = 0;
		П010024004_76_21 = 0;

		П010062503_76_21 = 0;
		П010062504_76_21 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_21);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_76_21 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_76_21 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062503_76_21 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062504_76_21 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024003_76_05 = 0;
		П010024004_76_05 = 0;

		П010062103_76_05 = 0;
		П010062104_76_05 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_05);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_76_05 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_76_05 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062103_76_05 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062104_76_05 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024003_76_25 = 0;
		П010024004_76_25 = 0;

		П010062103_76_25 = 0;
		П010062104_76_25 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_25);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_76_25 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_76_25 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062103_76_25 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062104_76_25 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024003_76_35 = 0;
		П010024004_76_35 = 0;

		П010062103_76_35 = 0;
		П010062104_76_35 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_35);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_76_35 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_76_35 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062103_76_35 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062104_76_35 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024103_76_06 = 0;
		П010024104_76_06 = 0;

		П010062103_76_06 = 0;
		П010062104_76_06 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_06);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024103_76_06 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024104_76_06 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062103_76_06 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062104_76_06 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024103_76_26 = 0;
		П010024104_76_26 = 0;

		П010062103_76_26 = 0;
		П010062104_76_26 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_26);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024103_76_26 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024104_76_26 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062103_76_26 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062104_76_26 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024103_76_36 = 0;
		П010024104_76_36 = 0;

		П010062103_76_36 = 0;
		П010062104_76_36 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_36);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024103_76_36 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024104_76_36 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062103_76_36 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062104_76_36 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024003_76_09 = 0;
		П010024004_76_09 = 0;
		
		П010062503_76_09 = 0;
		П010062504_76_09 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_09);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_76_09 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_76_09 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062503_76_09 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062504_76_09 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024003_76_29 = 0;
		П010024004_76_29 = 0;
		
		П010062503_76_29 = 0;
		П010062504_76_29 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_29);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_76_29 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_76_29 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062503_76_29 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062504_76_29 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		П010024003_76_39 = 0;
		П010024004_76_39 = 0;
		
		П010062503_76_39 = 0;
		П010062504_76_39 = 0;

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_39);

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_76_39 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_76_39 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062503_76_39 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062504_76_39 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;
		
		Если Есть76НА = Истина Тогда
			
			П010024003_76_НА = 0;
			П010024004_76_НА = 0;
			
			П010062503_76_НА = 0;
			П010062504_76_НА = 0;
			
			ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет76_НА);
			
			Если НЕ ВыборкаПоСчету = Неопределено Тогда
				
				П010024003_76_НА = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
				П010024004_76_НА = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
				
				П010062503_76_НА = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
				П010062504_76_НА = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
				
			КонецЕсли;
		КонецЕсли;
		
		// На активных счетах учета расчетов с покупателями и заказчиками, на которых
		// допускается учет авансов, может возникать ситуация, когда полученный аванс
		// "уводит" остаток в минус, то есть в кредит. В этом случае этот отрицательый
		// остаток надо извлечь и затем прибавить к кредитоской  задолженности, которая
		// образовалась на счетах учета полученных авансов.
		
		ИтогиРС = "НачальныйРазвернутыйОстатокДт, НачальныйРазвернутыйОстатокКт, КонечныйРазвернутыйОстатокДт, КонечныйРазвернутыйОстатокКт";

		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, Субконто2", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , СчетаУчетаРасчетов, ВидыСубконтоДляРасчета, , , "Организация", мОргРасшифровка);

		// В дебиторской задолженнотси учитываем только дебетовое развернутое сальдо
		П010024103_62_01_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет62_01);
		П010024104_62_01_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет62_01);

		П010024103_62_21_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет62_21);
		П010024104_62_21_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет62_21);

		П010024103_62_31_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет62_31);
		П010024104_62_31_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет62_31);

		// Кредитовое сальдо учитываем в кредиторской задолженности
		П010062503_62_01_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет62_01);
		П010062504_62_01_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет62_01);
		
		П010062503_62_21_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет62_21);
		П010062504_62_21_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет62_21);

		П010062503_62_31_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет62_31);
		П010062504_62_31_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет62_31);

		// На пассивных счетах учета расчетов с поставщиками и подрядчиками, на которых допускается 
		// учет авансов, может возникать ситуация, когда выплаченный аванс "уводит" 
		// остаток в минус, то есть в дебет. В этом случае этот отрицательый кредитовый остаток 
		// надо извлечь и затем прибавить к дебиторской задолженности, которая 
		// образовалась на счетах учета выплаченных авансов.
		
		// В кредиторской задолженности учитываем только кредитовое слаьдо
		П010062103_60_01_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет60_01);
		П010062104_60_01_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет60_01);

		П010062103_60_21_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет60_21);
		П010062104_60_21_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет60_21);

		П010062103_60_31_СНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет60_31);
		П010062104_60_31_СКК = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет60_31);

		// Дебетовое сальдо учитываем в дебиторской задолженности.
		П010024003_60_01_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет60_01);
		П010024004_60_01_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет60_01);

		П010024003_60_21_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет60_21);
		П010024004_60_21_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет60_21);

		П010024003_60_31_СНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет60_31);
		П010024004_60_31_СКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет60_31);

		П010024103_62_03 = СНД(Счет62_03);
		П010024103_63    = СНК(Счет63);

		// строка 241 "покупатели и заказчики"
		П010024103 = П010024103_62_01_СНД
		           + П010024103_62_21_СНД
		           + П010024103_62_31_СНД
		           - П010024103_63
		           + П010024103_62_03
		           + П010024103_76_06
		           + П010024103_76_26
		           + П010024103_76_36;

		П010024104_62_03 = СКД(Счет62_03);
		П010024104_63    = СКК(Счет63);

		П010024104 = П010024104_62_01_СКД
		           + П010024104_62_21_СКД
		           + П010024104_62_31_СКД
		           + П010024104_62_03
		           - П010024104_63
		           + П010024104_76_06
		           + П010024104_76_26
		           + П010024104_76_36;

		// строка 240 "Дебиторская задолженность"
		П010024003_60_02 = СНД(Счет60_02);
		П010024003_60_22 = СНД(Счет60_22);
		П010024003_60_32 = СНД(Счет60_32);

		// в строку 240 входят данные по строке 241
		П010024003 = П010024103
		           + П010024003_60_02
		           + П010024003_60_01_СНД
		           + П010024003_60_22
		           + П010024003_60_21_СНД
		           + П010024003_60_32
		           + П010024003_60_31_СНД;

		П010024004_60_02 = СКД(Счет60_02);
		П010024004_60_22 = СКД(Счет60_22);
		П010024004_60_32 = СКД(Счет60_32);

		// в строку 240 входят данные по строке 241
		П010024004 = П010024104
		           + П010024004_60_02
		           + П010024004_60_01_СКД
		           + П010024004_60_22
		           + П010024004_60_21_СКД
		           + П010024004_60_32
		           + П010024004_60_31_СКД;

		// Собираем данные по субсчетам счета 68
		
		// Развернутые итоги по субсчету 68.04.1 по бюджетам
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "68.04.1", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов, , , "Организация", мОргРасшифровка);

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет68_04_1);

		П010024003_68_04_1 = 0;
		П010024004_68_04_1 = 0;

		П010062403_68_04_1 = 0;
		П010062404_68_04_1 = 0;

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_68_04_1 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_68_04_1 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062403_68_04_1 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062404_68_04_1 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;
		
		// Развернутые итоги по субсчету 68.10 по бюджетам
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "68.10", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов, , , "Организация", мОргРасшифровка);

		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет68_10);

		П010024003_68_10 = 0;
		П010024004_68_10 = 0;

		П010062403_68_10 = 0;
		П010062404_68_10 = 0;

		Если НЕ ВыборкаПоСчету = Неопределено Тогда
			П010024003_68_10 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_68_10 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062403_68_10 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062404_68_10 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
		КонецЕсли;


		П010024003_68_01   = СНД(Счет68_01);
		П010024003_68_02   = СНД(Счет68_02);
		П010024003_68_03   = СНД(Счет68_03);

		П010024003_68_04_2 = СНД(Счет68_04_2);
		П010024003_68_07   = СНД(Счет68_07);
		П010024003_68_08   = СНД(Счет68_08);
		П010024003_68_09   = СНД(Счет68_09);

		П010024003_68_11   = СНД(Счет68_11);
		П010024003_68_12   = СНД(Счет68_12);
		П010024003_68_22   = СНД(Счет68_22);

		П010024003_68 = 0;

		П010024003_68 = П010024003_68_01
		              + П010024003_68_02
		              + П010024003_68_03
		              + П010024003_68_04_1
		              + П010024003_68_04_2
		              + П010024003_68_07
		              + П010024003_68_08
		              + П010024003_68_09
		              + П010024003_68_10
		              + П010024003_68_11
		              + П010024003_68_12
		              + П010024003_68_22;

		П010024004_68_01   = СКД(Счет68_01);
		П010024004_68_02   = СКД(Счет68_02);
		П010024004_68_03   = СКД(Счет68_03);

		П010024004_68_04_2 = СКД(Счет68_04_2);
		П010024004_68_07   = СКД(Счет68_07);
		П010024004_68_08   = СКД(Счет68_08);
		П010024004_68_09   = СКД(Счет68_09);

		П010024004_68_11   = СКД(Счет68_11);
		П010024004_68_12   = СКД(Счет68_12);
		П010024004_68_22   = СКД(Счет68_22);

		П010024004_68 = 0;
		
		П010024004_68 = П010024004_68_01
		              + П010024004_68_02
		              + П010024004_68_03
		              + П010024004_68_04_1
		              + П010024004_68_04_2
		              + П010024004_68_07
		              + П010024004_68_08
		              + П010024004_68_09
		              + П010024004_68_10
		              + П010024004_68_11
		              + П010024004_68_12
		              + П010024004_68_22;

		П010062403_68_01   = СНК(Счет68_01);
		П010062403_68_02   = СНК(Счет68_02);
		П010062403_68_03   = СНК(Счет68_03);

		П010062403_68_04_2 = СНК(Счет68_04_2);
		П010062403_68_07   = СНК(Счет68_07);
		П010062403_68_08   = СНК(Счет68_08);
		П010062403_68_09   = СНК(Счет68_09);

		П010062403_68_11   = СНК(Счет68_11);
		П010062403_68_12   = СНК(Счет68_12);
		П010062403_68_22   = СНК(Счет68_22);
		
		Если Есть68_32 = Истина Тогда
			П010062403_68_32   = СНК(Счет68_32);
		КонецЕсли;

		П010062403_68 = 0;
		
		П010062403_68 = П010062403_68_01
		              + П010062403_68_02
		              + П010062403_68_03
		              + П010062403_68_04_1
		              + П010062403_68_04_2
		              + П010062403_68_07
		              + П010062403_68_08
		              + П010062403_68_09
		              + П010062403_68_10
		              + П010062403_68_11
		              + П010062403_68_12
		              + П010062403_68_22;
					  
		Если Есть68_32 = Истина Тогда
		  П010062403_68 = П010062403_68 + П010062403_68_32;
	    КонецЕсли;
	  
		П010062404_68_01   = СКК(Счет68_01);
		П010062404_68_02   = СКК(Счет68_02);
		П010062404_68_03   = СКК(Счет68_03);

		П010062404_68_04_2 = СКК(Счет68_04_2);
		П010062404_68_07   = СКК(Счет68_07);
		П010062404_68_08   = СКК(Счет68_08);
		П010062404_68_09   = СКК(Счет68_09);

		П010062404_68_11   = СКК(Счет68_11);
		П010062404_68_12   = СКК(Счет68_12);
		П010062404_68_22   = СКК(Счет68_22);
		
		Если Есть68_32 = Истина Тогда
			П010062404_68_32   = СКК(Счет68_32);
		КонецЕсли;

		П010062404_68 = 0;
		
		П010062404_68 = П010062404_68_01
		              + П010062404_68_02
		              + П010062404_68_03
		              + П010062404_68_04_1
		              + П010062404_68_04_2
		              + П010062404_68_07
		              + П010062404_68_08
		              + П010062404_68_09
		              + П010062404_68_10
		              + П010062404_68_11
		              + П010062404_68_12
		              + П010062404_68_22;
					  
		Если Есть68_32 = Истина Тогда
			П010062404_68 = П010062404_68 + П010062404_68_32;
		КонецЕсли;
		
		// Собираем данные по субсчетам счета 69
		П010024003_69 = СНДР(Счет69);
		П010024004_69 = СКДР(Счет69);

		П010062303_69 = СНКР(Счет69);
		П010062304_69 = СККР(Счет69);

		// Развернутые итоги по счету 71
		ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
		Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
			мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "71", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации, , , "Организация", мОргРасшифровка);
		ИначеЕсли ИДКонфигурации = "БП" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
			мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "71", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, , , "Организация", мОргРасшифровка);
		КонецЕсли;
		
		ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет71);
		
		П010024003_71 = 0;
		П010024004_71 = 0;

		П010062503_71 = 0;
		П010062504_71 = 0;

		Если НЕ ВыборкаПоСчету = Неопределено Тогда

			П010024003_71 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
			П010024004_71 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;

			П010062503_71 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
			П010062504_71 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;

		КонецЕсли;

		// Здесь продолжается сборка данных для строки 240
		
		П010024003_73    = СНД(Счет73);
		П010024003_76_02 = СНД(Счет76_02);
		П010024003_76_22 = СНД(Счет76_22);
		П010024003_76_32 = СНД(Счет76_32);
		П010024003_76_03 = СНД(Счет76_03);
		П010024003_76_41 = СНД(Счет76_41);
		П010024003_76_АВ = СНД(Счет76_АВ);
		П010024003_79    = СНД(Счет79);

		П010024003 = П010024003
		           + П010024003_68
		           + П010024003_69
		           + П010024003_71
		           + П010024003_73
		           + П010024003_76_01
		           + П010024003_76_21
		           + П010024003_76_02
		           + П010024003_76_22
		           + П010024003_76_32
		           + П010024003_76_05
		           + П010024003_76_25
		           + П010024003_76_35
		           + П010024003_76_03
		           + П010024003_76_09
		           + П010024003_76_29
		           + П010024003_76_39
		           + П010024003_76_41
		           + П010024003_76_АВ 				   
		           + П010024003_79;

		Если Есть76НА = Истина Тогда		   
			П010024003 = П010024003 + П010024003_76_НА;
		КонецЕсли;	
		УстановитьЗначениеПоказателя("П010023003", П010024003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "Строка ""9. Дебиторская задолженность"", графа ""На начало отчетного года""", "+", "Сальдо на начало периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024103_62_01_СНД, Счет62_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо на начало периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024103_62_21_СНД, Счет62_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо на начало периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024103_62_31_СНД, Счет62_31);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "-", "!СНК", -П010024103_63, Счет63);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо на начало периода по дебету счета 76.06, развернутое по субконто ""Контрагенты""", П010024103_76_06, Счет76_06);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо на начало периода по дебету счета 76.26, развернутое по субконто ""Контрагенты""", П010024103_76_26, Счет76_26);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо на начало периода по дебету счета 76.36, развернутое по субконто ""Контрагенты""", П010024103_76_36, Счет76_36);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо на начало периода по дебету счета 76.09, развернутое по субконто ""Контрагенты""", П010024003_76_09, Счет76_09);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо на начало периода по дебету счета 76.29, развернутое по субконто ""Контрагенты""", П010024003_76_29, Счет76_29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо на начало периода по дебету счета 76.39, развернутое по субконто ""Контрагенты""", П010024003_76_39, Счет76_39);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024103_62_03, Счет62_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_60_02, Счет60_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо отрицательное на начало периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024003_60_01_СНД, Счет60_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_60_22, Счет60_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо отрицательное на начало периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024003_60_21_СНД, Счет60_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_60_32, Счет60_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо отрицательное на начало периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024003_60_31_СНД, Счет60_31);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_68_01, Счет68_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_68_02, Счет68_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_68_03, Счет68_03);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо на начало периода по дебету счета 68.04.1 по субконто ""Уровни бюджетов""", П010024003_68_04_1, Счет68_04_1);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_68_04_2, Счет68_04_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_68_07, Счет68_07);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_68_08, Счет68_08);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_68_09, Счет68_09);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо на начало периода по дебету счета 68.10 по субконто ""Уровни бюджетов""", П010024003_68_10, Счет68_10);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_68_11, Счет68_11);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_68_12, Счет68_12);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_68_22, Счет68_22);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНДР", П010024003_69, Счет69);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо на начало периода по дебету счета 71, развернутое по субконто ""Работники организации""", П010024003_71, Счет71);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_73, Счет73);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо на начало периода по дебету счета 76.01, развернутое по субконто ""Контрагенты""", П010024003_76_01, Счет76_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо на начало периода по дебету счета 76.21, развернутое по субконто ""Контрагенты""", П010024003_76_21, Счет76_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_76_02, Счет76_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_76_22, Счет76_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_76_32, Счет76_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо на начало периода по дебету счета 76.05, развернутое по субконто ""Контрагенты""", П010024003_76_05, Счет76_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо на начало периода по дебету счета 76.25, развернутое по субконто ""Контрагенты""", П010024003_76_25, Счет76_25);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо на начало периода по дебету счета 76.35, развернутое по субконто ""Контрагенты""", П010024003_76_35, Счет76_35);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_76_03, Счет76_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_76_41, Счет76_41);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_76_АВ, Счет76_АВ);
		Если Есть76НА = Истина Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "Сальдо на начало периода по дебету счета 76.НА, развернутое по субконто ""Контрагенты""", П010024003_76_НА, Счет76_НА);
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023003", "", "+", "!СНД", П010024003_79, Счет79);

		П010024004_73    = СКД(Счет73);
		П010024004_76_02 = СКД(Счет76_02);
		П010024004_76_22 = СКД(Счет76_22);
		П010024004_76_32 = СКД(Счет76_32);
		П010024004_76_03 = СКД(Счет76_03);
		П010024004_76_41 = СКД(Счет76_41);
		П010024004_76_АВ = СКД(Счет76_АВ);
		П010024004_79    = СКД(Счет79);

		П010024004 = П010024004
		           + П010024004_68
		           + П010024004_69
		           + П010024004_71
		           + П010024004_73
		           + П010024004_76_01
		           + П010024004_76_21
		           + П010024004_76_02
		           + П010024004_76_22
		           + П010024004_76_32
		           + П010024004_76_05
		           + П010024004_76_25
		           + П010024004_76_35
		           + П010024004_76_03
		           + П010024004_76_09
		           + П010024004_76_29
		           + П010024004_76_39
		           + П010024004_76_41
		           + П010024004_76_АВ  				   
		           + П010024004_79;

		Если Есть76НА = Истина Тогда		   
			П010024004 = П010024004 + П010024004_76_НА;	   
		КонецЕсли;	
			
		УстановитьЗначениеПоказателя("П010023004", П010024004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "Строка ""9. Дебиторская задолженность"", графа ""На конец отчетного периода""", "+", "Сальдо на конец периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024104_62_01_СКД, Счет62_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо на конец периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024104_62_21_СКД, Счет62_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо на конец периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024104_62_31_СКД, Счет62_31);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "-", "!СКК", -П010024104_63, Счет63);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо на конец периода по дебету счета 76.06, развернутое по субконто ""Контрагенты""", П010024104_76_06, Счет76_06);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо на конец периода по дебету счета 76.26, развернутое по субконто ""Контрагенты""", П010024104_76_26, Счет76_26);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо на конец периода по дебету счета 76.36, развернутое по субконто ""Контрагенты""", П010024104_76_36, Счет76_36);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо на конец периода по дебету счета 76.09, развернутое по субконто ""Контрагенты""", П010024004_76_09, Счет76_09);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо на конец периода по дебету счета 76.29, развернутое по субконто ""Контрагенты""", П010024004_76_29, Счет76_29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо на конец периода по дебету счета 76.39, развернутое по субконто ""Контрагенты""", П010024004_76_39, Счет76_39);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024104_62_03, Счет62_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_60_02, Счет60_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024004_60_01_СКД, Счет60_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_60_22, Счет60_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024004_60_21_СКД, Счет60_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_60_32, Счет60_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010024004_60_31_СКД, Счет60_31);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_68_01, Счет68_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_68_02, Счет68_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_68_03, Счет68_03);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо на конец периода по дебету счета 68.04.1 по субконто ""Уровни бюджетов""", П010024004_68_04_1, Счет68_04_1);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_68_04_2, Счет68_04_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_68_07, Счет68_07);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_68_08, Счет68_08);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_68_09, Счет68_09);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо на конец периода по дебету счета 68.10 по субконто ""Уровни бюджетов""", П010024004_68_10, Счет68_10);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_68_11, Счет68_11);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_68_12, Счет68_12);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_68_22, Счет68_22);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКДР", П010024004_69, Счет69);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо на конец периода по дебету счета 71, развернутое по субконто ""Работники организации""", П010024004_71, Счет71);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_73, Счет73);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо на конец периода по дебету счета 76.01, развернутое по субконто ""Контрагенты""", П010024004_76_01, Счет76_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо на конец периода по дебету счета 76.21, развернутое по субконто ""Контрагенты""", П010024004_76_21, Счет76_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_76_02, Счет76_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_76_22, Счет76_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_76_32, Счет76_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо на конец периода по дебету счета 76.05, развернутое по субконто ""Контрагенты""", П010024004_76_05, Счет76_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо на конец периода по дебету счета 76.25, развернутое по субконто ""Контрагенты""", П010024004_76_25, Счет76_25);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо на конец периода по дебету счета 76.35, развернутое по субконто ""Контрагенты""", П010024004_76_35, Счет76_35);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_76_03, Счет76_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_76_41, Счет76_41);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_76_АВ, Счет76_АВ);
		Если Есть76НА = Истина Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "Сальдо на конец периода по дебету счета 76.НА, развернутое по субконто ""Контрагенты""", П010024004_76_НА, Счет76_НА);
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010023004", "", "+", "!СКД", П010024004_79, Счет79);
		
		// Строка 10 "Денежные средства"

		// строка 260 "Денежные средства"
		П010026003_50    = СНД(Счет50);
		П010026003_51    = СНД(Счет51);
		П010026003_52    = СНД(Счет52);
		П010026003_55_01 = СНД(Счет55_01);
		П010026003_55_02 = СНД(Счет55_02);
		П010026003_55_04 = СНД(Счет55_04);
		П010026003_55_21 = СНД(Счет55_21);
		П010026003_55_24 = СНД(Счет55_24);
		П010026003_57    = СНД(Счет57);

		П010026003 = П010026003_50
		           + П010026003_51
		           + П010026003_52
		           + П010026003_55_01
		           + П010026003_55_02
		           + П010026003_55_04
		           + П010026003_55_21
		           + П010026003_55_24
		           + П010026003_57;

		УстановитьЗначениеПоказателя("П010026003", П010026003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026003", "Строка ""10. Денежные средства"", графа ""На начало отчетного года""", "+", "!СНД", П010026003_50, Счет50);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026003", "", "+", "!СНД", П010026003_51, Счет51);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026003", "", "+", "!СНД", П010026003_52, Счет52);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026003", "", "+", "!СНД", П010026003_55_01, Счет55_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026003", "", "+", "!СНД", П010026003_55_02, Счет55_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026003", "", "+", "!СНД", П010026003_55_04, Счет55_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026003", "", "+", "!СНД", П010026003_55_21, Счет55_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026003", "", "+", "!СНД", П010026003_55_24, Счет55_24);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026003", "", "+", "!СНД", П010026003_57, Счет57);

		П010026004_50    = СКД(Счет50);
		П010026004_51    = СКД(Счет51);
		П010026004_52    = СКД(Счет52);
		П010026004_55_01 = СКД(Счет55_01);
		П010026004_55_02 = СКД(Счет55_02);
		П010026004_55_04 = СКД(Счет55_04);
		П010026004_55_21 = СКД(Счет55_21);
		П010026004_55_24 = СКД(Счет55_24);
		П010026004_57    = СКД(Счет57);

		П010026004 = П010026004_50
		           + П010026004_51
		           + П010026004_52
		           + П010026004_55_01
		           + П010026004_55_02
		           + П010026004_55_04
		           + П010026004_55_21
		           + П010026004_55_24
		           + П010026004_57;

		УстановитьЗначениеПоказателя("П010026004", П010026004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026004", "Строка ""10. Денежные средства"", графа ""На конец отчетного периода""", "+", "!СКД", П010026004_50, Счет50);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026004", "", "+", "!СКД", П010026004_51, Счет51);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026004", "", "+", "!СКД", П010026004_52, Счет52);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026004", "", "+", "!СКД", П010026004_55_01, Счет55_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026004", "", "+", "!СКД", П010026004_55_02, Счет55_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026004", "", "+", "!СКД", П010026004_55_04, Счет55_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026004", "", "+", "!СКД", П010026004_55_21, Счет55_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026004", "", "+", "!СКД", П010026004_55_24, Счет55_24);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010026004", "", "+", "!СКД", П010026004_57, Счет57);
		
		// Строка 11 "Прочие оборотные активы"

		// строка 270 "Прочие оборотные активы"
		П010027003_94 = СНД(Счет94);

		П010027003 = П010027003_94;
		УстановитьЗначениеПоказателя("П010027003", П010027003);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010027003", "Строка ""11. Прочие оборотные активы"", графа ""На начало отчетного года""", "+", "!СНД", П010027003_94, Счет94);

		П010027004_94 = СКД(Счет94);

		П010027004 = П010027004_94;
		УстановитьЗначениеПоказателя("П010027004", П010027004);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010027004", "Строка ""11. Прочие оборотные активы"", графа ""На конец отчетного периода""", "+", "!СКД", П010027004_94, Счет94);
		
		// Строка 13 "Долгосрочные обязательства по займам и кредитам"
		
		// строка 510 "Долгосрочные займы и кредиты" 
		П010051003 = СНК(Счет67);
		УстановитьЗначениеПоказателя("П010051003", П010051003);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010051003", "Строка ""13. Долгосрочные обязательства по займам и кредитам"", графа ""На начало отчетного года""", "+", "!СНК", П010051003, Счет67);

		П010051004 = СКК(Счет67);
		УстановитьЗначениеПоказателя("П010051004", П010051004);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010051004", "Строка ""13. Долгосрочные обязательства по займам и кредитам"", графа ""На конец отчетного периода""", "+", "!СКК", П010051004, Счет67);
		
		// Строка 14 "Прочие долгосрочные обязательства"
		
		// строка 515 "Отложенные налоговые обзательства"
		П010051503 = СНК(Счет77);
		УстановитьЗначениеПоказателя("П010052003", П010051503);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010052003", "Строка ""14. Прочие долгосрочные обязательства"", графа ""На начало отчетного года""", "+", "!СНК", П010051503, Счет77);

		П010051504 = СКК(Счет77);
		УстановитьЗначениеПоказателя("П010052004", П010051504);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010052004", "Строка ""14. Прочие долгосрочные обязательства"", графа ""На конец отчетного периода""", "+", "!СКК", П010051504, Счет77);

		// Строка 15 "Краткосрочные обязательства по займам и кредитам"

		// строка 610 "Займы и кредиты"
		П010061003 = СНК(Счет66);
		УстановитьЗначениеПоказателя("П010061003", П010061003);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010061003", "Строка ""15. Краткосрочные обязательства по займам и кредитам"", графа ""На начало отчетного года""", "+", "!СНК", П010061003, Счет66);

		П010061004 = СКК(Счет66);
		УстановитьЗначениеПоказателя("П010061004", П010061004);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010061004", "Строка ""15. Краткосрочные обязательства по займам и кредитам"", графа ""На конец отчетного периода""", "+", "!СКК", П010061004, Счет66);

		// Строка 16 "Кредиторская задолженность"

		// строка 621 "поставщики и подрядчики"

		П010062103_60_03 = СНК(Счет60_03);

		П010062103 = П010062103_60_01_СНК
		           + П010062103_60_21_СНК
		           + П010062103_60_31_СНК
		           + П010062103_60_03
		           + П010062103_76_05
		           + П010062103_76_25
		           + П010062103_76_35
		           + П010062103_76_06
		           + П010062103_76_26
		           + П010062103_76_36;

		П010062104_60_03 = СКК(Счет60_03);

		П010062104 = П010062104_60_01_СКК
		           + П010062104_60_21_СКК
		           + П010062104_60_31_СКК
		           + П010062104_60_03
		           + П010062104_76_05
		           + П010062104_76_25
		           + П010062104_76_35
		           + П010062104_76_06
		           + П010062104_76_26
		           + П010062104_76_36;

		// строка 622 "задолженность перед персоналом организации"
		П010062203 = СНК(Счет70);
		П010062204 = СКК(Счет70);

		// строка 625 "прочие кредиторы"
		П010062503_62_02 = СНК(Счет62_02);
		П010062503_62_22 = СНК(Счет62_22);
		П010062503_62_32 = СНК(Счет62_32);

		П010062503_76_03 = СНК(Счет76_03);
		П010062503_76_04 = СНК(Счет76_04);
		П010062503_76_41 = СНК(Счет76_41);
		П010062503_76_ВА = СНК(Счет76_ВА);
		П010062503_76_Н  = СНК(Счет76_Н);
		П010062503_79    = СНК(Счет79);

		П010062503 = П010062503_62_02
		           + П010062503_62_01_СНК
		           + П010062503_62_22
		           + П010062503_62_21_СНК
		           + П010062503_62_32
		           + П010062503_62_31_СНК
		           + П010062503_71
		           + П010062503_76_01
		           + П010062503_76_21
		           + П010062503_76_03
		           + П010062503_76_04
		           + П010062503_76_09
		           + П010062503_76_29
		           + П010062503_76_39
		           + П010062503_76_41
		           + П010062503_76_ВА
		           + П010062503_76_Н
		           + П010062503_79;

		Если Есть76НА = Истина Тогда		   
			П010062503 = П010062503 + П010062503_76_НА; 	   
		КонецЕсли;
		
		П010062504_62_02 = СКК(Счет62_02);
		П010062504_62_22 = СКК(Счет62_22);
		П010062504_62_32 = СКК(Счет62_32);

		П010062504_76_03 = СКК(Счет76_03);
		П010062504_76_04 = СКК(Счет76_04);
		П010062504_76_41 = СКК(Счет76_41);
		П010062504_76_ВА = СКК(Счет76_ВА);
		П010062504_76_Н  = СКК(Счет76_Н);
		П010062504_79    = СКК(Счет79);
		
		П010062504 = П010062504_62_02
		           + П010062504_62_01_СКК
		           + П010062504_62_22
		           + П010062504_62_21_СКК
		           + П010062504_62_32
		           + П010062504_62_31_СКК
		           + П010062504_71
		           + П010062504_76_01
		           + П010062504_76_21
		           + П010062504_76_03
		           + П010062504_76_04
		           + П010062504_76_09
		           + П010062504_76_29
		           + П010062504_76_39
		           + П010062504_76_41
		           + П010062504_76_ВА
		           + П010062504_76_Н
		           + П010062504_79;

		Если Есть76НА = Истина Тогда			   
			П010062504 = П010062504 + П010062504_76_НА;	   
		КонецЕсли;
		
		// Строка 620
		П010062003 = П010062103 + П010062203 + П010062303_69 + П010062403_68 + П010062503;
		УстановитьЗначениеПоказателя("П010062003", П010062003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "Строка ""16. Кредиторская задолженность"", графа ""На начало отчетного года""", "+", "Сальдо на начало периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062103_60_01_СНК, Счет60_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо на начало периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062103_60_21_СНК, Счет60_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо на начало периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062103_60_31_СНК, Счет60_31);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо на начало периода по кредиту счета 76.05, развернутое по субконто ""Контрагенты""", П010062103_76_05, Счет76_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо на начало периода по кредиту счета 76.25, развернутое по субконто ""Контрагенты""", П010062103_76_25, Счет76_25);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо на начало периода по кредиту счета 76.35, развернутое по субконто ""Контрагенты""", П010062103_76_35, Счет76_35);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо на начало периода по кредиту счета 76.09, развернутое по субконто ""Контрагенты""", П010062503_76_09, Счет76_09);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо на начало периода по кредиту счета 76.29, развернутое по субконто ""Контрагенты""", П010062503_76_29, Счет76_29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо на начало периода по кредиту счета 76.39, развернутое по субконто ""Контрагенты""", П010062503_76_39, Счет76_39);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062203, Счет70);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНКР", П010062303_69, Счет69);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062403_68_01, Счет68_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062403_68_02, Счет68_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062403_68_03, Счет68_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо на начало периода по кредиту счета 68.04.1 по субконто ""Уровни бюджетов""", П010062403_68_04_1, Счет68_04_1);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062403_68_04_2, Счет68_04_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062403_68_07, Счет68_07);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062403_68_08, Счет68_08);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062403_68_09, Счет68_09);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо на начало периода по кредиту счета 68.10 по субконто ""Уровни бюджетов""", П010062403_68_10, Счет68_10);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062403_68_11, Счет68_11);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062403_68_12, Счет68_12);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062403_68_22, Счет68_22);
		
		Если Есть68_32 = Истина Тогда
		   РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062403_68_32, Счет68_32);
	    КонецЕсли;
	
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062103_60_03, Счет60_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062503_62_02, Счет62_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо отрицательное на начало периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062503_62_01_СНК);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062503_62_22, Счет62_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо отрицательное на начало периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062503_62_21_СНК);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062503_62_32, Счет62_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо отрицательное на начало периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062503_62_31_СНК);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо на начало периода по кредиту счета 71, развернутое по субконто ""Работники организации""", П010062503_71, Счет71);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо на начало периода по кредиту счета 76.01, развернутое по субконто ""Контрагенты""", П010062503_76_01, Счет76_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо на начало периода по кредиту счета 76.21, развернутое по субконто ""Контрагенты""", П010062503_76_21, Счет76_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062503_76_03, Счет76_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062503_76_04, Счет76_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо на начало периода по кредиту счета 76.06, развернутое по субконто ""Контрагенты""", П010062103_76_06, Счет76_06);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо на начало периода по кредиту счета 76.26, развернутое по субконто ""Контрагенты""", П010062103_76_26, Счет76_26);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо на начало периода по кредиту счета 76.36, развернутое по субконто ""Контрагенты""", П010062103_76_36, Счет76_36);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062503_76_41, Счет76_41);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062503_76_ВА, Счет76_ВА);
		Если Есть76НА = Истина Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "Сальдо на начало периода по кредиту счета 76.НА, развернутое по субконто ""Контрагенты""", П010062503_76_НА, Счет76_НА);
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062503_76_Н, Счет76_Н);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062003", "", "+", "!СНК", П010062503_79, Счет79);

		П010062004 = П010062104 + П010062204 + П010062304_69 + П010062404_68 + П010062504;
		УстановитьЗначениеПоказателя("П010062004", П010062004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "Строка ""16. Кредиторская задолженность"", графа ""На конец отчетного периода""", "+", "Сальдо на конец периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062104_60_01_СКК, Счет60_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо на конец периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062104_60_21_СКК, Счет60_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо на конец периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062104_60_31_СКК, Счет60_31);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо на конец периода по кредиту счета 76.05, развернутое по субконто ""Контрагенты""", П010062104_76_05, Счет76_05);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо на конец периода по кредиту счета 76.25, развернутое по субконто ""Контрагенты""", П010062104_76_25, Счет76_25);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо на конец периода по кредиту счета 76.35, развернутое по субконто ""Контрагенты""", П010062104_76_35, Счет76_35);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо на конец периода по кредиту счета 76.09, развернутое по субконто ""Контрагенты""", П010062504_76_09, Счет76_09);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо на конец периода по кредиту счета 76.29, развернутое по субконто ""Контрагенты""", П010062504_76_29, Счет76_29);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо на конец периода по кредиту счета 76.39, развернутое по субконто ""Контрагенты""", П010062504_76_39, Счет76_39);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062204, Счет70);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СККР", П010062304_69, Счет69);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062404_68_01, Счет68_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062404_68_02, Счет68_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062404_68_03, Счет68_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо на конец периода по кредиту счета 68.04.1 по субконто ""Уровни бюджетов""", П010062404_68_04_1, Счет68_04_1);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062404_68_04_2, Счет68_04_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062404_68_07, Счет68_07);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062404_68_08, Счет68_08);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062404_68_09, Счет68_09);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо на конец периода по кредиту счета 68.10 по субконто ""Уровни бюджетов""", П010062404_68_10, Счет68_10);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062404_68_11, Счет68_11);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062404_68_12, Счет68_12);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062404_68_22, Счет68_22);
		
		Если Есть68_32 = Истина Тогда
		    РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062404_68_32, Счет68_32);
	    КонецЕсли;
	
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062104_60_03, Счет60_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062504_62_02, Счет62_02);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062504_62_01_СКК);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062504_62_22, Счет62_22);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062504_62_21_СКК);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062504_62_32, Счет62_32);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", П010062504_62_31_СКК);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо на конец периода по кредиту счета 71, развернутое по субконто ""Работники организации""", П010062504_71, Счет71);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо на конец периода по кредиту счета 76.01, развернутое по субконто ""Контрагенты""", П010062504_76_01, Счет76_01);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо на конец периода по кредиту счета 76.21, развернутое по субконто ""Контрагенты""", П010062504_76_21, Счет76_21);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062504_76_03, Счет76_03);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062504_76_04, Счет76_04);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо на конец периода по кредиту счета 76.06, развернутое по субконто ""Контрагенты""", П010062104_76_06, Счет76_06);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо на конец периода по кредиту счета 76.26, развернутое по субконто ""Контрагенты""", П010062104_76_26, Счет76_26);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо на конец периода по кредиту счета 76.36, развернутое по субконто ""Контрагенты""", П010062104_76_36, Счет76_36);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062504_76_41, Счет76_41);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062504_76_ВА, Счет76_ВА);
		Если Есть76НА = Истина Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "Сальдо на конец периода по кредиту счета 76.НА, развернутое по субконто ""Контрагенты""", П010062504_76_НА, Счет76_НА);
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062504_76_Н, Счет76_Н);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010062004", "", "+", "!СКК", П010062504_79, Счет79);

		// Строка 17 "Задолженность участникам (учредителям) по выплате доходов"

		// строка 630 "Задолженность участникам (учредителям) по выплате доходов"
		П010063003 = СНК(Счет75_02);
		УстановитьЗначениеПоказателя("П010063003", П010063003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010063003", "Строка ""17. Задолженность участникам (учредителям) по выплате доходов"", графа ""На начало отчетного года""", "+", "!СНК", П010063003, Счет75_02);

		П010063004 = СКК(Счет75_02);
		УстановитьЗначениеПоказателя("П010063004", П010063004);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010063004", "Строка ""17. Задолженность участникам (учредителям) по выплате доходов"", графа ""На конец отчетного периода", "+", "!СКК", П010063004, Счет75_02);
		
		// Строка 18 "Резервы предстоящих расходов"
		
		// строка 650 "Резервы предстоящих расходов"
		П010065003 = СНК(Счет96);
		УстановитьЗначениеПоказателя("П010065003", П010065003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010065003", "Строка ""18. Резервы предстоящих расходов"", графа ""На начало отчетного года""", "+", "!СНК", П010065003, Счет96);

		П010065004 = СКК(Счет96);
		УстановитьЗначениеПоказателя("П010065004", П010065004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П010065004", "Строка ""18. Резервы предстоящих расходов"", графа ""На конец отчетного периода""", "+", "!СКК", П010065004, Счет96);

		// Строка 19 "Прочие краткосрочные обязательства"
	КонецЦикла;

	// В случае, если отчет был консолидирован, то сложим все его показатели в таблице, а затем выведем их на лист.
	Если НЕ мБезКонсолидации Тогда
		мТаблицаИтоговыхПоказателейПриКонсолидации.Свернуть("ИмяПоказателя", "Сумма");
		Для каждого Пок Из мТаблицаИтоговыхПоказателейПриКонсолидации Цикл
			УстановитьЗначениеПоказателя(Пок.ИмяПоказателя, Пок.Сумма, Истина);
		КонецЦикла;
	КонецЕсли;

	Расчет();
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьАвто()

Функция ПолучитьНазванияОрганизацийСтрокой()
	Результат = Организация.Наименование;
	Если мБезКонсолидации Тогда
		Возврат Результат;
	Иначе
		Для каждого Зап Из мГруппаОрганизаций Цикл
			Результат = Результат + "; " + Зап.Значение.Наименование;
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// доп. описание показателя
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФормаОтчета";
	СтрокаУровня1.Представление            = "Расчет оценки стоимости чистых активов АО";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаФормаОтчета";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ФормаОтчета";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	мФормаОтчета = ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета;
	ТекТабличноеПоле = мФормаОтчета;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	мДокументВосстановлен = Ложь;

	мВПрограммеИзмененаОрганизация = Ложь;

	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			ТочностьЕдиницыИзмерения = 0;

			мСохранятьРасшифровку = Истина;
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.ПодменюРасшифровка.Кнопки.КнопкаСохранятьРасшифровку.Пометка = Истина;

			УстановитьФорматВывода();
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	УстановитьЦветФонаЯчейки(,,"ФормаОтчета");

	мБезКонсолидации = мГруппаОрганизаций.Количество() = 0;
	НазванияОрганизаций = ПолучитьНазванияОрганизацийСтрокой();
	ЭлементыФормы.Надпись30.Заголовок = НазванияОрганизаций;
	Если НЕ мБезКонсолидации Тогда
		ЭлементыФормы.Надпись30.ГиперСсылка = Истина;
		ЭлементыФормы.Надпись30.Подсказка = "Список организаций, по которым формируется отчет";
		ЭлементыФормы.Надпись.Заголовок = "Организации:";
		Если мСохраненныйДок = Неопределено Тогда
			// При первом открытии отчета, который должен собираться по нескольким организациям
			// в поле Комментарий запишем названия всех организаций.
			КомментарийОбщ = НазванияОрганизаций;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Ответ = Вопрос("Внимание! Будут очищены все показатели отчета." + Символы.ПС
		  + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Если Ответ = КодВозвратаДиалога.Нет Тогда

		Возврат;

	Иначе

		Очистить();

	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

Процедура КоманднаяПанельФормыРасшифровка(Кнопка)
	
	Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
	Обраб.Форма = ЭтаФорма;
	Обраб.ИмяЯчейки = ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть.Имя;
	Обраб.ПолучитьФорму(, ЭтаФорма).Показать();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыСохранять(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	мСохранятьРасшифровку = Кнопка.Пометка;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;

	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие


// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ЗаполнитьСведенияОбОрганизации(Истина);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленной единицей измерения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленной единицей измерения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаФормаОтчетаПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа.
//   Устанавливает признак модифицированности данных в форме, вызывает пересчет
// вычисляемых показателей  табличных полей и обновляет структуру данных
// многострочного раздела.
//
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзменении(Элемент)

	Расчет();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа.
//
Процедура ПолеВыбораВариантЗаполненияФормаОтчетаПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиФормаОтчетаПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// "Комментарий" по ячейке, для которой установлен алгоритм автозаполнения 
// [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийФормаОтчетаПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийПриИзменении()

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

// Надпись30Нажатие
//
Процедура Надпись30Нажатие(Элемент)
	// Вставить содержимое обработчика.
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	СписокОрганизаций.ВыбратьЭлемент("Список организаций, по которым формируется отчет");
КонецПроцедуры // Надпись30Нажатие

////////////////////////////////////////////////////////////////////////////////

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

мСоставПоказателей = "СоставПоказателей";

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияФормаОтчета.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияФормаОтчета.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияФормаОтчета.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

мСтруктураМногостраничныхРазделов = Новый Структура;

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
// мВерсияФормы = "30/09/2003"; - Первая версия
//мВерсияФормы = "30/09/2005";
мВерсияФормы = "26/03/2010";

// Код отчета, равен коду по ОКУД
мКодОтчета   = "0710007";

мПечатныеФормы = Новый СписокЗначений;

СпП = Новый ТаблицаЗначений;
СпП.Колонки.Добавить("НомСтроки");
СпП.Колонки.Добавить("ИмяЯчейки");
СпП.Колонки.Добавить("ИмяПоказателя");
СпП.Колонки.Добавить("ЗнакОперации");
СпП.Колонки.Добавить("ИмяСлагаемого");
СпП.Колонки.Добавить("Сумма");
СпП.Колонки.Добавить("КодСчета");
СпП.Колонки.Добавить("КодКорСчета");
СпП.Колонки.Добавить("ДатаНачала");
СпП.Колонки.Добавить("ДатаКонца");
СпП.Колонки.Добавить("Сдвиг");
СпП.Колонки.Добавить("Раздел");
СпП.Колонки.Добавить("Страница");
СпП.Колонки.Добавить("МнЧ");
СпП.Колонки.Добавить("СтрокаПП");
СпП.Колонки.Добавить("Субконто1");
СпП.Колонки.Добавить("Субконто2");
СпП.Колонки.Добавить("Субконто3");
СпП.Колонки.Добавить("Организация"); // Ссылка на организацию.

// Объявим таблицу значений мТаблицаИтоговыхПоказателейПриКонсолидации.
// Используется при заполнении отчета за несколько организаций. Хранит данные по показателям
// которые записываются через процедуру УстановитьЗначениеПоказателя.

мТаблицаИтоговыхПоказателейПриКонсолидации = Новый ТаблицаЗначений;
мТаблицаИтоговыхПоказателейПриКонсолидации.Колонки.Добавить("ИмяПоказателя");
мТаблицаИтоговыхПоказателейПриКонсолидации.Колонки.Добавить("Сумма");
