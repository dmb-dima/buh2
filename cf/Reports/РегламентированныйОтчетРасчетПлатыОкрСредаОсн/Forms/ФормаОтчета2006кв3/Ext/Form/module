////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// Поля табличного документа
Перем мТитульный;
Перем мРасчет;
Перем мРаздел1;
Перем мРаздел2;
Перем мРаздел3;
Перем мРаздел4;

// Хранят данные в квадратиках на Разделе 1, сохраняются в структурах

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;

Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматн\ую строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Для явной установки типа значения 17, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ;
Перем мОписаниеТиповБулево;

// Переменная для механизма обхода номеров страниц, при вводе показателей.
Перем мСтруктураВзаимныхПереходов Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;
// Хранит код отчета по КНД
Перем мКодОтчета;
// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

Перем мКодыБюджетнойКлассификации2005;
Перем мРасположениеОбъекта;
Перем мДополнительныйКоэф12;
Перем мКЭЗ_Раздел1;
Перем мКЭЗ_ВодныеОбъекты;
Перем мКлассыОпасности;
Перем мЭкологическийКлассРаздел2;
Перем мНормативыПлатыРаздел2;
Перем мВредныеВеществаРаздел1;
Перем мВредныеВеществаРаздел3;
Перем мФКТОРаздел4;
Перем мКоэфИнфляция;
Перем мКЭЗ_Раздел4;
Перем мДопКоэфТЗ;

Перем ТаблицаСообщений Экспорт;

// Инициализируется при открытии формы
// используется в ЗаполнитьСведенияОбОрганизации
Перем мВПрограммеИзмененаОрганизация;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;
Перем мСоставПоказателей Экспорт;

Перем мДокументВосстановлен;

Перем мРежимПечати;

Перем мСтруктураПеременных;

////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления()

	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда

		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);


	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  мОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателеньДляВыгрузки",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Расчет";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "ОКАТОРасчет1";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "НомерРазрешения";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "НомерРазрешения";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела3
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "НомерРазрешения";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела4
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "НомерРазрешения";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт

	ИмяСтраницы = СтрЗаменить(ИмяРаздела, "ПолеТабличногоДокумента", "");

	Если ИмяСтраницы = "Расчет" Тогда

		// Вставим КБК
		мСтруктураПеременных.Вставить("КБКРасчет1", "");
		мСтруктураПеременных.Вставить("КБКРасчет2", "");

		// Вставим коды ОКАТО
		мСтруктураПеременных.Вставить("ОКАТОРасчет1", "");
		мСтруктураПеременных.Вставить("ОКАТОРасчет2", "");

		// Вставим рег. номер
		мСтруктураПеременных.Вставить("РегНомРасчет1", "");
		мСтруктураПеременных.Вставить("РегНомРасчет2", "");

		// Вставим строку 040
		мСтруктураПеременных.Вставить("СуммаБезЛьготРасчет1", 0);
		мСтруктураПеременных.Вставить("СуммаБезЛьготРасчет2", 0);

		// Вставим строку 050
		мСтруктураПеременных.Вставить("СуммаЗачетРасчет1", 0);
		мСтруктураПеременных.Вставить("СуммаЗачетРасчет2", 0);

		// Вставим строку 060
		мСтруктураПеременных.Вставить("СуммаЛьготОргСоцРасчет1", 0);
		мСтруктураПеременных.Вставить("СуммаЛьготОргСоцРасчет2", 0);

		// Вставим строку 070
		мСтруктураПеременных.Вставить("СуммаЛьготОргРасчет1", 0);
		мСтруктураПеременных.Вставить("СуммаЛьготОргРасчет2", 0);

		// Вставим строку 080
		мСтруктураПеременных.Вставить("СуммаПлатРасчет1", 0);
		мСтруктураПеременных.Вставить("СуммаПлатРасчет2", 0);

	ИначеЕсли ИмяСтраницы = "Раздел1" Тогда
		мСтруктураПеременных.Вставить("РегНомРаздел1", "");
		мСтруктураПеременных.Вставить("РазрешениеДатаРаздел1", ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")));
		мСтруктураПеременных.Вставить("СрокДатаРаздел1", ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")));
		мСтруктураПеременных.Вставить("НомерРаздел1", "");

		мСтруктураПеременных.Вставить("ПДВРаздел1", 0);
		мСтруктураПеременных.Вставить("ВСВРаздел1", 0);
		мСтруктураПеременных.Вставить("ФактВыбросРаздел1", 0);
		мСтруктураПеременных.Вставить("ПДВОРаздел1", 0);
		мСтруктураПеременных.Вставить("ВыбросЛимитРаздел1", 0);
		мСтруктураПеременных.Вставить("СверхЛимРаздел1", 0);
		мСтруктураПеременных.Вставить("НормативПлРаздел1", 0);
		мСтруктураПеременных.Вставить("ПулРаздел1", 0);
		мСтруктураПеременных.Вставить("СверхУстЛимРаздел1", 0);
		мСтруктураПеременных.Вставить("КЭЗРаздел1", 0);

		мСтруктураПеременных.Вставить("ДКРаздел1", 0);
		мСтруктураПеременных.Вставить("КУИРаздел1", 0);
		мСтруктураПеременных.Вставить("СумПлВсегоРаздел1", 0);
		мСтруктураПеременных.Вставить("СумПДВРаздел1", 0);
		мСтруктураПеременных.Вставить("ВПредРаздел1", 0);
		мСтруктураПеременных.Вставить("СУЛимРаздел1", 0);
	ИначеЕсли ИмяСтраницы = "Раздел2" Тогда

		мСтруктураПеременных.Вставить("РегНомРаздел2", "");
		мСтруктураПеременных.Вставить("РазрешениеДатаРаздел2", ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")));
		мСтруктураПеременных.Вставить("СрокДатаРаздел2", ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")));
		мСтруктураПеременных.Вставить("НомерРаздел2", 0);

		мСтруктураПеременных.Вставить("КатегорияРаздел2", "");
		мСтруктураПеременных.Вставить("ЭкологическийКлассРаздел2", "");
		мСтруктураПеременных.Вставить("НормативВРаздел2", 0);
		мСтруктураПеременных.Вставить("ФактКолРаздел2", 0);

		мСтруктураПеременных.Вставить("НормативРаздел2", 0);
		мСтруктураПеременных.Вставить("КЭЗРаздел2", 0);

		мСтруктураПеременных.Вставить("ДКРаздел2", 0);
		мСтруктураПеременных.Вставить("КУИРаздел2", 0);
		мСтруктураПеременных.Вставить("СумПлатыРаздел2", 0);

	ИначеЕсли ИмяСтраницы = "Раздел3" Тогда
		мСтруктураПеременных.Вставить("РегНомРаздел3", "");
		мСтруктураПеременных.Вставить("РазрешениеДатаРаздел3", ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")));
		мСтруктураПеременных.Вставить("СрокДатаРаздел3", ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")));
		мСтруктураПеременных.Вставить("НомерРаздел3", "");

		мСтруктураПеременных.Вставить("ПДВРаздел3", 0);
		мСтруктураПеременных.Вставить("ВСВРаздел3", 0);
		мСтруктураПеременных.Вставить("ФактВыбросРаздел3", 0);
		мСтруктураПеременных.Вставить("ПДВОРаздел3", 0);
		мСтруктураПеременных.Вставить("ВыбросЛимитРаздел3", 0);
		мСтруктураПеременных.Вставить("СверхЛимРаздел3", 0);
		мСтруктураПеременных.Вставить("НормативПлРаздел3", 0);
		мСтруктураПеременных.Вставить("ПулРаздел3", 0);
		мСтруктураПеременных.Вставить("СверхУстЛимРаздел3", 0);
		мСтруктураПеременных.Вставить("КЭЗРаздел3", 0);

		мСтруктураПеременных.Вставить("КУИРаздел3", 0);
		мСтруктураПеременных.Вставить("СумПлВсегоРаздел3", 0);
		мСтруктураПеременных.Вставить("СумПДВРаздел3", 0);
		мСтруктураПеременных.Вставить("ВПредРаздел3", 0);
		мСтруктураПеременных.Вставить("СУЛимРаздел3", 0);

	ИначеЕсли ИмяСтраницы = "Раздел4" Тогда
		мСтруктураПеременных.Вставить("РегНомРаздел4", "");
		мСтруктураПеременных.Вставить("РазрешениеДатаРаздел4", ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")));
		мСтруктураПеременных.Вставить("СрокДатаРаздел4", ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")));
		мСтруктураПеременных.Вставить("НомерРаздел4", "");

		мСтруктураПеременных.Вставить("КлассОпасностиРаздел4", ""); // 060
		мСтруктураПеременных.Вставить("ЛимитЗРаздел4", 0); // 070
		мСтруктураПеременных.Вставить("ЛимитХРаздел4", 0); // 080
		мСтруктураПеременных.Вставить("ФННХНОПРаздел4", 0); // 090
		мСтруктураПеременных.Вставить("ФОЗОПВСПРаздел4", 0); // 100
		мСтруктураПеременных.Вставить("ФПОИДОВОПРаздел4", 0); // 110
		мСтруктураПеременных.Вставить("ФИВОПРаздел4", 0); // 120
		мСтруктураПеременных.Вставить("ФОВОПРаздел4", 0); // 130
		мСтруктураПеременных.Вставить("ФПДОВОПВРаздел4", 0); // 140
		мСтруктураПеременных.Вставить("ПДИРаздел4", 0); // 150
		мСтруктураПеременных.Вставить("ПДОРаздел4", 0); // 160
		мСтруктураПеременных.Вставить("ПДХРаздел4", 0); // 170
		мСтруктураПеременных.Вставить("ПДЗРаздел4", 0); // 180
		мСтруктураПеременных.Вставить("ННХВОПВРаздел4", 0); // 190
		мСтруктураПеременных.Вставить("ВПРЕДУЛИМРаздел4", 0); // 200
		мСтруктураПеременных.Вставить("СверхУЛимРаздел4", 0); // 210
		мСтруктураПеременных.Вставить("ЗахороненоВсегоРаздел4", 0); // 220
		мСтруктураПеременных.Вставить("ЗахороненоВПУЛРаздел4", 0); // 230
		мСтруктураПеременных.Вставить("ЗахороненоСУЛРаздел4", 0); // 240
		мСтруктураПеременных.Вставить("КОРНВХРаздел4", 0); // 250
		мСтруктураПеременных.Вставить("ННХНКОПРаздел4", 0); // 260
		мСтруктураПеременных.Вставить("ВПредУстЛимРаздел4", 0); // 270
		мСтруктураПеременных.Вставить("СверхУстЛимРаздел4", 0); // 280
		мСтруктураПеременных.Вставить("КЭЗРаздел4", 0); // 290
		//мСтруктураПеременных.Вставить("ДКРаздел4", 0); // 300
		мСтруктураПеременных.Вставить("КУИРаздел4", 0); // 310
		мСтруктураПеременных.Вставить("КМРОРаздел4", 0); // 320
		мСтруктураПеременных.Вставить("СУРОВРаздел4", 0); // 330
		мСтруктураПеременных.Вставить("СППУЛРаздел4", 0); // 340
		мСтруктураПеременных.Вставить("СЗСЛРРаздел4", 0); // 350

	КонецЕсли;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// Окончание блока обязательных функций

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ЕстьИзменения = Ложь;

	Для ПереборныйИнд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован Цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[ПереборныйИнд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",     ОписаниеТиповСтрока50  );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();
                                     
	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				//ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				// Если значение не отображается в квадратах, то и ставить формат ячейки не нужно
				Если НЕ ЗначениеВКвадратах Тогда
					ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
					Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
						ТекОбластьЯчеек.Примечание.Текст = Комментарий;
					КонецЕсли;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				// Если многострочность, то специальный механизм
				Если (ЗначениеВКвадратах) И (
				(ИмяПоказателя = "П000010008000") ) Тогда
					Если ИмяПоказателя = "П000010008000" Тогда
						МногострочностьИВариантыЗаполнения("СуммаПлат1_1",   ВариантЗаполнения);
						МногострочностьИВариантыЗаполнения("СуммаПлат2_1",   ВариантЗаполнения);
					КонецЕсли;

					Продолжить;
				КонецЕсли;

				Если ИмяПоказателя = "П000050033000" Тогда
					ИмяПоказателя = "СумПлЗаРазмОтх1";
				ИначеЕсли ИмяПоказателя = "П000050034000" Тогда
					ИмяПоказателя = "СумВПредУстЛим1";
				ИначеЕсли ИмяПоказателя = "П000050035000" Тогда
					ИмяПоказателя = "СумЗаСверхЛимРазм1";
				ИначеЕсли ИмяПоказателя = "П000050014000" Тогда
					ИмяПоказателя = "ПДО1";
				ИначеЕсли ИмяПоказателя = "П000020018000" Тогда // Раздел1
					ИмяПоказателя = "СумПлВсего1";
				ИначеЕсли ИмяПоказателя = "П000020019000" Тогда // Раздел1
					ИмяПоказателя = "СумПДВ1";
				ИначеЕсли ИмяПоказателя = "П000020020000" Тогда // Раздел1
					ИмяПоказателя = "ВПред1";
				ИначеЕсли ИмяПоказателя = "П000020021000" Тогда // Раздел1
					ИмяПоказателя = "СУЛим1";
				ИначеЕсли ИмяПоказателя = "П000030014000" Тогда // Раздел2
					ИмяПоказателя = "СумПлаты1";
				ИначеЕсли ИмяПоказателя = "П000040017000" Тогда // Раздел3
					ИмяПоказателя = "СумПлВсего1";
				ИначеЕсли ИмяПоказателя = "П000040018000" Тогда
					ИмяПоказателя = "СумПДВ1";
				ИначеЕсли ИмяПоказателя = "П000040019000" Тогда
					ИмяПоказателя = "ВПред1";
				ИначеЕсли ИмяПоказателя = "П000040020000" Тогда
					ИмяПоказателя = "СУЛим1";
				ИначеЕсли ИмяПоказателя = "П000020008000" Тогда
					ИмяПоказателя = "О2ПДВ1";
				ИначеЕсли ИмяПоказателя = "П000020009000" Тогда
					ИмяПоказателя = "ВыбросЛимит1";
				ИначеЕсли ИмяПоказателя = "П000020010000" Тогда
					ИмяПоказателя = "СверхЛим1";
				ИначеЕсли ИмяПоказателя = "П000040008000" Тогда
					ИмяПоказателя = "О2ПДВ1";
				ИначеЕсли ИмяПоказателя = "П000040009000" Тогда
					ИмяПоказателя = "ВыбросЛимит1";
				ИначеЕсли ИмяПоказателя = "П000040010000" Тогда
					ИмяПоказателя = "СверхЛим1";
				ИначеЕсли ИмяПоказателя = "П000050020000" Тогда
					ИмяПоказателя = "ВыбросЛим1";
				ИначеЕсли ИмяПоказателя = "П000050021000" Тогда
					ИмяПоказателя = "СУЛ1";
				ИначеЕсли ИмяПоказателя = "П000050023000" Тогда
					ИмяПоказателя = "ЗахороненоВПред1";
				ИначеЕсли ИмяПоказателя = "П000050024000" Тогда
					ИмяПоказателя = "СверхЛимит1";
				КонецЕсли;

				Если ВариантЗаполнения = 4 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту",, ИмяТекущейСтраницыПанели);
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"СнятьЗащиту",, ИмяТекущейСтраницыПанели);
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона, ИмяТекущейСтраницыПанели);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;

			КонецЦикла;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// МногострочностьИВариантыЗаполнения
//
Процедура МногострочностьИВариантыЗаполнения(Знач ПервыйПоказатель, Знач ВариантЗаполнения)

	Перем ЦветФона;

	Ключ = "_" + ВариантЗаполнения;
	мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

	Если ВариантЗаполнения = 4 Тогда
		Действие1 = "УстановитьЗащиту";
		Действие2 = "ПроставитьЦветРаскраски";
	Иначе
		Действие1 = "СнятьЗащиту";
		Действие2 = "ПроставитьЦветРаскраски";
	КонецЕсли;

	РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПервыйПоказатель, Действие1, , "Расчет");
	РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ПервыйПоказатель, Действие2, ЦветФона, "Расчет");

КонецПроцедуры // МногострочностьИВариантыЗаполнения

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	Если мСтруктураПеременных.Свойство(ИмяПоказателя) Тогда
		мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;

		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	мТитульный.Области.ГодОтчета.Значение   = НомерГода;
	мТитульный.Области.НомерКвартала.Значение   = НомерКвартала;

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаПодписиРук     = "";
	ДатаПодписиБух     = "";
	ДатаПодписиИП      = "";

	Если ЗначениеЗаполнено(мТитульный.Области.ОргДиректор.Значение) Тогда
		ДатаПодписиРук = ДатаПодписи;
	КонецЕсли;

	Если ЗначениеЗаполнено(мТитульный.Области.ОргБухгалтер.Значение) Тогда
		ДатаПодписиБух = ДатаПодписи;
	КонецЕсли;

	ЧП = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);

	Для НомЯчейки = 1 По 8 Цикл

		Если НЕ ЧП Тогда
			мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиРук, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
			мТитульный.Области["ДатаПодписиБух" + НомЯчейки].Значение = Сред(Формат(ДатаПодписиБух, "ДФ = 'ддММгггг'"), НомЯчейки, 1);
		Иначе
			мТитульный.Области["ДатаПодписиРук" + НомЯчейки].Значение = "";
			мТитульный.Области["ДатаПодписиБух" + НомЯчейки].Значение = "";
		КонецЕсли;
	КонецЦикла;

	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, Формат(ДатаПодписи, "ДФ = 'ддММгггг'"), "Дата",, "Расчет",, Ложь);
	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, Формат(ДатаПодписи, "ДФ = 'ддММгггг'"), "Дата",, "Раздел1",, Ложь);
	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, Формат(ДатаПодписи, "ДФ = 'ддММгггг'"), "Дата",, "Раздел2",, Ложь);
	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, Формат(ДатаПодписи, "ДФ = 'ддММгггг'"), "Дата",, "Раздел3",, Ложь);
	РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, Формат(ДатаПодписи, "ДФ = 'ддММгггг'"), "Дата",, "Раздел4",, Ложь);

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения = "НаимЮЛПол, ТелОрганизации, ТипНП, ОКАТО, АдрЮР, ";
	КонецЕсли;

	Сведения = Сведения + "ФИОРук, ФИОБух";

	Результат = РегламентированнаяОтчетность.роЗаполнитьСведенияОбОрганизации(ЭтаФорма, Сведения);

	// Отдельно запросим ИНН и КПП организации, чтобы проставить на тит. лист без процедуры роЗаполнитьСведения- оптимизация.

	ИННКПП = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ИННЮЛ, КППЮЛ");
	Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(ИННКПП.ИННЮЛ) Тогда
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННКПП.ИННЮЛ, 12, "0");
	Иначе
		ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННКПП.ИННЮЛ, 12, " ");
	КонецЕсли;

	КППЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННКПП.КППЮЛ, 9, " ");

	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ИНН1_", 12, ИННЮЛ);
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "КПП1_", 9, КППЮЛ);

	// Окончание

	Если (НЕ ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда

		// Код окато заполняем только при открытии декларации, через кнопку Обновить
		// код окато не заполняется, т.к. лист раздела 1 многостраничный.

		Если (НЕ мВПрограммеИзмененаОрганизация) И (НЕ мДокументВосстановлен) Тогда
			мСтруктураПеременных.Вставить("ОКАТОРасчет1", Результат.ОКАТО);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "ОКАТО1_", 11, Результат.ОКАТО);
			КБК = "49811201000010000120";
			мСтруктураПеременных.Вставить("КБКРасчет1", КБК);
			// мСтруктураПеременных.Вставить("КБКРасчет2", КБК);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "КБК1_", 20, КБК);
			// РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "КБК2_", 20, КБК);

		КонецЕсли;

		Если РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(Результат.АдрЮР, ",","")) Тогда
			мТитульный.Области.АдрЮР.Значение = "";
		Иначе
			мТитульный.Области.АдрЮР.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(Результат.АдрЮР);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ЗаполнениеЗначенийВКвадратиках
//
Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт

	Если Найти(ИмяСтраницы, "ПолеТабличногоДокумента") > 0 Тогда
		ИмяСтраницыП = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");
	Иначе
		ИмяСтраницыП = ИмяСтраницы;
	КонецЕсли;

	Если ИмяСтраницыП = "Расчет" Тогда
		// Строка 040
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаБезЛьгот1_", 12, мСтруктураПеременных.СуммаБезЛьготРасчет1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаБезЛьгот2_", 12, мСтруктураПеременных.СуммаБезЛьготРасчет2, Истина);

		// Строка 050
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаЗачет1_", 12, мСтруктураПеременных.СуммаЗачетРасчет1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаЗачет2_", 12, мСтруктураПеременных.СуммаЗачетРасчет2, Истина);

		// Строка 060
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаЛьготОргСоц1_", 12, мСтруктураПеременных.СуммаЛьготОргСоцРасчет1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаЛьготОргСоц2_", 12, мСтруктураПеременных.СуммаЛьготОргСоцРасчет2, Истина);

		// Строка 070
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаЛьготОрг1_", 12, мСтруктураПеременных.СуммаЛьготОргРасчет1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаЛьготОрг2_", 12, мСтруктураПеременных.СуммаЛьготОргРасчет2, Истина);

		// Строка 080
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаПлат1_", 12, мСтруктураПеременных.СуммаПлатРасчет1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаПлат2_", 12, мСтруктураПеременных.СуммаПлатРасчет2, Истина);

	ИначеЕсли ИмяСтраницыП = "Раздел1" Тогда
		СоответствиеДанных = Новый Соответствие;
		СоответствиеДанных.Вставить("СумПлВсего", "СумПлВсегоРаздел1"); // 180
		СоответствиеДанных.Вставить("СумПДВ", "СумПДВРаздел1"); // 190
		СоответствиеДанных.Вставить("ВПред", "ВПредРаздел1"); // 200
		СоответствиеДанных.Вставить("СУЛим", "СУЛимРаздел1"); // 210

		Для каждого Эл Из СоответствиеДанных Цикл
			КлючСтруктуры = Эл.Значение;
			ПервоначальноеЗначение = мСтруктураПеременных[КлючСтруктуры];
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", Эл.Ключ, 10, ПервоначальноеЗначение, Истина);

		КонецЦикла;

	ИначеЕсли ИмяСтраницыП = "Раздел2" Тогда
		СоответствиеДанных = Новый Соответствие;
		СоответствиеДанных.Вставить("СумПлаты", "СумПлатыРаздел2"); // 140

		Для каждого Эл Из СоответствиеДанных Цикл
			КлючСтруктуры = Эл.Значение;
			ПервоначальноеЗначение = мСтруктураПеременных[КлючСтруктуры];
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", Эл.Ключ, 10, ПервоначальноеЗначение, Истина);
		КонецЦикла;

	ИначеЕсли ИмяСтраницыП = "Раздел3" Тогда
		СоответствиеДанных = Новый Соответствие;
		СоответствиеДанных.Вставить("СумПлВсего", "СумПлВсегоРаздел3"); // 170
		СоответствиеДанных.Вставить("СумПДВ", "СумПДВРаздел3"); // 180
		СоответствиеДанных.Вставить("ВПред", "ВПредРаздел3"); // 190
		СоответствиеДанных.Вставить("СУЛим", "СУЛимРаздел3"); // 200

		Для каждого Эл Из СоответствиеДанных Цикл
			КлючСтруктуры = Эл.Значение;
			ПервоначальноеЗначение = мСтруктураПеременных[КлючСтруктуры];
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел3", Эл.Ключ, 10, ПервоначальноеЗначение, Истина);
		КонецЦикла;


	ИначеЕсли ИмяСтраницыП = "Раздел4" Тогда
		СоответствиеДанных = Новый Соответствие;
		СоответствиеДанных.Вставить("СумПлЗаРазмОтх", "СУРОВРаздел4"); // 330
		СоответствиеДанных.Вставить("СумВПредУстЛим", "СППУЛРаздел4"); // 340
		СоответствиеДанных.Вставить("СумЗаСверхЛимРазм", "СЗСЛРРаздел4"); // 350

		Для каждого Эл Из СоответствиеДанных Цикл
			КлючСтруктуры = Эл.Значение;
			ПервоначальноеЗначение = мСтруктураПеременных[КлючСтруктуры];
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел4", Эл.Ключ, 10, ПервоначальноеЗначение, Истина);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ЗаполнениеЗначенийВКвадратиках

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			Иначе
				Если (Найти(КодПоказателяПоСтруктуре, "Сумма") > 0 И Найти(КодПоказателяПоСтруктуре, "Расчет") > 0)
				   Или (ИмяПоляТаблДокумента = "Раздел1") Или (ИмяПоляТаблДокумента = "Раздел2") Или (ИмяПоляТаблДокумента = "Раздел3")
				    Или (ИмяПоляТаблДокумента = "Раздел4") Тогда
					Продолжить;
				Иначе
					// определяем кол-во строк многострочного раздела
					// и применяем процедуру форматирования к данной графе
					// по всем строкам
					ИмяГруппы = Лев(ИмяПоказателя, 11);
					мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

					Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
						ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
						ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
						ФорматируемаяОбласть.Формат = мСтрокаФормата;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ЗаполнениеЗначенийВКвадратиках("Расчет");
	ЗаполнениеЗначенийВКвадратиках("Раздел1");
	ЗаполнениеЗначенийВКвадратиках("Раздел2");
	ЗаполнениеЗначенийВКвадратиках("Раздел3");
	ЗаполнениеЗначенийВКвадратиках("Раздел4");

КонецПроцедуры // УстановитьФорматВывода()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;

	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;
	//ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// УправлениеЛистами
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт

	Если ТипНП = Неопределено Тогда
		ТипНП = 0;

		Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
			Возврат
		КонецЕсли;

		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ТипНП");
		ОргСведения.Свойство("ТипНП", ТипНП);
	КонецЕсли;

	// Управление цветами
	Если ТипНП = 3 Тогда
		УстановитьСвойстваВалидныхЯчеек("Блокировать ячейки ЮЛ", мВпрограммеИзмененаОрганизация);
	ИначеЕсли ТипНП <> 3 Тогда
		УстановитьСвойстваВалидныхЯчеек("Блокировать ячейки ЧП", мВпрограммеИзмененаОрганизация);
	КонецЕсли;

КонецПроцедуры // УправлениеЛистами

// УстановитьСвойстваВалидныхЯчеек
// Блокирует необходимые ячейки, в зависимости от комманды
//
// Параметры:
// КоммандаТекст = может принимать значения "Блокировать ячейки ЮЛ" или "Блокировать ячейки ЧП"
Процедура УстановитьСвойстваВалидныхЯчеек(Знач КоммандаТекст, Знач Очищать)

	// Процедура "заглушка", для совместимости общих механизмов.
	Возврат;

КонецПроцедуры // УстановитьСвойстваВалидныхЯчеек

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// В случае, если в многостраничном блоке находится 1 страница, то не следует ещё раз запускать ПоказатьСтраницуМногостраничногоРаздела
	// т.к. листов в разделе общее ко-во 1.

	Если мСтруктураМногостраничныхРазделов[ИмяСтраницы].Количество() <> 1 Тогда
		// вывод в форму данных исходной (активной) страницы
		ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	КонецЕсли;

КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле) Экспорт

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", ""));

	ИмяСтраницыПанели = СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", "");
	Расчет(ИмяСтраницыПанели);

КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	мРежимПечати = Истина;
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;

	мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;

	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоНастройкиСтраниц();

	КлючУникальности = мСохраненныйДок.Ссылка;

	Модифицированность = Ложь;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ТаблицаМногостраничногоДокумента;
	Перем Автозаполнение;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
		КонецЦикла;

	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			ИмяСтраницыПанели   = СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", "");

			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаМногостраничногоДокумента) Тогда
				// Обрабатываем случай, когда старые данные открываются новой версией, где не предусмотрено
				// хранение данных многостраничных разделов в ПоказателяхОтчета, в этой процедуре ранее
				// данные многостраничных разделов уже были выведены в соответствующие листы
				Продолжить;
			КонецЕсли;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВывода();

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;

	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
// Лист - имя листа, необходимо для интерактивного добавления
// если Лист - неопределно, то текущий берется, равносильно нажатию на кнопку Добавить или Удалить
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Лист = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// ЗаполнитьАвто
//
Процедура ЗаполнитьАвто();
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	Платы = Новый Соответствие;
	Платы.Вставить("Раздел1", "СумПлВсегоРаздел1");
	Платы.Вставить("Раздел2", "СумПлатыРаздел2");
	Платы.Вставить("Раздел3", "СумПлВсегоРаздел3");
	Платы.Вставить("Раздел4", "СУРОВРаздел4");

	СборДанных = Новый ТаблицаЗначений;
	СборДанных.Колонки.Добавить("РегНом");
	СборДанных.Колонки.Добавить("СумПлат");

	Для каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Если Раздел.Ключ = "Расчет" Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Экз Из Раздел.Значение Цикл
			РегНом = Экз.Данные["РегНом" + Раздел.Ключ];
			СумПлат = Экз.Данные[Платы[Раздел.Ключ]];
			Если ПустаяСтрока(РегНом) И СумПлат = 0 Тогда
				Продолжить;
			КонецЕсли;
			НовСтр = СборДанных.Добавить();
			НовСтр.РегНом = РегНом;
			НовСтр.СумПлат = СумПлат;
		КонецЦикла;
	КонецЦикла;

	СборДанных.Свернуть("РегНом", "СумПлат");
	Если СборДанных.Количество() = 0 Тогда
		Сообщить("Для авторасчета необходимо заполнить регистрационные номера объектов негативного воздействия и суммы плат в разделах 1-4.", СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;

	// Удалим страницы в экземпляре Расчет
	ТаблРасчет = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство("Расчет", ТаблРасчет);
	ИндексСтраницы = 0;
	Пока Не (ИндексСтраницы > (ТаблРасчет.Количество()-1)) Цикл
		СтрокаТаблицы = ТаблРасчет[ИндексСтраницы];
		Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
			// удаляем дополнительную страницу
			ТаблРасчет.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		ИндексСтраницы = ИндексСтраницы + 1;
	КонецЦикла;

	// Сохраним код ОКАТО
	ОКАТО = мСтруктураПеременных.ОКАТОРасчет1;
	ОчиститьТабличноеПоле(мРасчет);
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Расчет", Ложь);
	Счетчик = 0;
	КБК = "49811201000010000120";
	Для каждого Зап Из СборДанных Цикл

		Счетчик = Счетчик + 1;
		Если Счетчик = 3 Тогда
			Расчет("Расчет");
			ИзменитьТаблицуПараметровАвтозаполнения(1, "Расчет");
			РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Расчет");
			Счетчик = 1;
		КонецЕсли;

		Если ОбновитьПеременныеМодуля("РегНомРасчет" + Строка(Счетчик), Зап.РегНом) Тогда
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "РегНом" + Строка(Счетчик) + "_", 11, Зап.РегНом);
		КонецЕсли;

		Если СтрДлина(Формат(Зап.СумПлат, мСтрокаФормата + "; ЧГ=0")) > 12 Тогда
			Сообщить("Значение " + Формат(Зап.СумПлат, мСтрокаФормата) + " не может быть выведено в отчет.", СтатусСообщения.Важное);
		Иначе
			Если ОбновитьПеременныеМодуля("СуммаБезЛьготРасчет" + Строка(Счетчик), Зап.СумПлат) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаБезЛьгот" + Строка(Счетчик) + "_", 12, Зап.СумПлат, Истина);
			КонецЕсли;
		КонецЕсли;

		мСтруктураПеременных.Вставить("КБКРасчет" + Строка(Счетчик), КБК);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "КБК" + Строка(Счетчик) + "_", 20, КБК);

		// Простам ОКАТО от организации.
		мСтруктураПеременных.Вставить("ОКАТОРасчет" + Строка(Счетчик), ОКАТО);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "ОКАТО" + Строка(Счетчик) + "_", 11, ОКАТО);

	КонецЦикла;
	Расчет("Расчет");
	Модифицированность = Истина;

КонецПроцедуры //

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Если ФлажокОтклАвтоРасчет Или мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Расчет" Тогда

		мСтруктураПеременных.СуммаПлатРасчет1 = Макс(ОкруглитьЧислоПоФормату(мСтруктураПеременных.СуммаБезЛьготРасчет1)
		                                      - ОкруглитьЧислоПоФормату(мСтруктураПеременных.СуммаЗачетРасчет1)
		                                      - ОкруглитьЧислоПоФормату(мСтруктураПеременных.СуммаЛьготОргСоцРасчет1)
		                                      - ОкруглитьЧислоПоФормату(мСтруктураПеременных.СуммаЛьготОргРасчет1), 0);

		мСтруктураПеременных.СуммаПлатРасчет2 = Макс(ОкруглитьЧислоПоФормату(мСтруктураПеременных.СуммаБезЛьготРасчет2)
		                                     - ОкруглитьЧислоПоФормату(мСтруктураПеременных.СуммаЗачетРасчет2)
		                                     - ОкруглитьЧислоПоФормату(мСтруктураПеременных.СуммаЛьготОргСоцРасчет2)
		                                     - ОкруглитьЧислоПоФормату(мСтруктураПеременных.СуммаЛьготОргРасчет2), 0);

		// Строка 080
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаПлат1_", 12, мСтруктураПеременных.СуммаПлатРасчет1, Истина);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаПлат2_", 12, мСтруктураПеременных.СуммаПлатРасчет2, Истина);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1" Тогда

		// Строка 080 = Мин(С050, С070)
		мСтруктураПеременных.ПДВОРаздел1 = Мин(мСтруктураПеременных.ПДВРаздел1, мСтруктураПеременных.ФактВыбросРаздел1);
		ВывестиЗначениеВКвадратики10("Раздел1", "О2ПДВ", 10, мСтруктураПеременных.ПДВОРаздел1);

		// Строка 090 = Мин(70-80, 060)
		мСтруктураПеременных.ВыбросЛимитРаздел1 = Мин(мСтруктураПеременных.ФактВыбросРаздел1 - мСтруктураПеременных.ПДВОРаздел1, мСтруктураПеременных.ВСВРаздел1);
		ВывестиЗначениеВКвадратики10("Раздел1", "ВыбросЛимит", 10, мСтруктураПеременных.ВыбросЛимитРаздел1);

		// Строка 100 = 070-080-090
		мСтруктураПеременных.СверхЛимРаздел1 = мСтруктураПеременных.ФактВыбросРаздел1
		                                     - мСтруктураПеременных.ПДВОРаздел1
		                                     - мСтруктураПеременных.ВыбросЛимитРаздел1;
		ВывестиЗначениеВКвадратики10("Раздел1", "СверхЛим", 10, мСтруктураПеременных.СверхЛимРаздел1);

		Множ = мСтруктураПеременных.КЭЗРаздел1
		     * ?(ПустаяСтрока(мРаздел1.Области.П000020015000.Значение), 0, мРаздел1.Области.П000020015000.Значение)
		     * ?(мСтруктураПеременных.ДКРаздел1 = 0, 1, мСтруктураПеременных.ДКРаздел1)
		     * мСтруктураПеременных.КУИРаздел1;

		// Строка 190 = 080*110*140*150*160*170
		мСтруктураПеременных.СумПДВРаздел1 = ОкруглитьЧислоПоФормату(мСтруктураПеременных.ПДВОРаздел1
		                                   * мСтруктураПеременных.НормативПлРаздел1
		                                   * Множ);

		// Строка 200 = 90*120*140*150*160*170
		мСтруктураПеременных.ВПредРаздел1 = ОкруглитьЧислоПоФормату(мСтруктураПеременных.ВыбросЛимитРаздел1
		                                  * мСтруктураПеременных.ПулРаздел1
		                                  * Множ);

		// Строка 210 = 100*130*140*150*160*170
		мСтруктураПеременных.СУЛимРаздел1 = ОкруглитьЧислоПоФормату(мСтруктураПеременных.СверхЛимРаздел1
		                                  * мСтруктураПеременных.СверхУстЛимРаздел1
		                                  * Множ);

		// Строка 180
		мСтруктураПеременных.СумПлВсегоРаздел1 = ОкруглитьЧислоПоФормату(мСтруктураПеременных.СумПДВРаздел1
		                                       + мСтруктураПеременных.ВПредРаздел1
		                                       + мСтруктураПеременных.СУЛимРаздел1);

		ЗаполнениеЗначенийВКвадратиках("Раздел1");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		// 140 = 070*090*100*110*120*130
		мСтруктураПеременных.СумПлатыРаздел2 = ОкруглитьЧислоПоФормату(мСтруктураПеременных.ФактКолРаздел2  // 070
		                                     * мСтруктураПеременных.НормативРаздел2 // 090
		                                     * мСтруктураПеременных.КЭЗРаздел2      // 100
		                                     * ?(ПустаяСтрока(мРаздел2.Области.П000030011000.Значение), 0, мРаздел2.Области.П000030011000.Значение)
		                                     * ?(мСтруктураПеременных.ДКРаздел2 = 0, 1, мСтруктураПеременных.ДКРаздел2)       // 120
		                                     * мСтруктураПеременных.КУИРаздел2);     //130;
		ЗаполнениеЗначенийВКвадратиках("Раздел2");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда

		// Строка080 = Мин(050, 070)
		мСтруктураПеременных.ПДВОРаздел3 = Мин(мСтруктураПеременных.ПДВРаздел3, мСтруктураПеременных.ФактВыбросРаздел3);
		ВывестиЗначениеВКвадратики10("Раздел3", "О2ПДВ", 10, мСтруктураПеременных.ПДВОРаздел3);

		// Строка090 = Мин(70-80,060)
		мСтруктураПеременных.ВыбросЛимитРаздел3 = Мин(мСтруктураПеременных.ФактВыбросРаздел3- мСтруктураПеременных.ПДВОРаздел3, мСтруктураПеременных.ВСВРаздел3);
		ВывестиЗначениеВКвадратики10("Раздел3", "ВыбросЛимит", 10, мСтруктураПеременных.ВыбросЛимитРаздел3);

		// Строка 100 = 70-80-90
		мСтруктураПеременных.СверхЛимРаздел3 = мСтруктураПеременных.ФактВыбросРаздел3
		                                     - мСтруктураПеременных.ПДВОРаздел3
		                                     - мСтруктураПеременных.ВыбросЛимитРаздел3;
		ВывестиЗначениеВКвадратики10("Раздел3", "СверхЛим", 10, мСтруктураПеременных.СверхЛимРаздел3);

		// 140*150*160
		Множ = мСтруктураПеременных.КЭЗРаздел3
		     * ?(ПустаяСтрока(мРаздел3.Области.П000040015000.Значение), 0, мРаздел3.Области.П000040015000.Значение)
		     * мСтруктураПеременных.КУИРаздел3;

		// 180 = 080*110*140*150*160
		мСтруктураПеременных.СумПДВРаздел3 = ОкруглитьЧислоПоФормату(мСтруктураПеременных.ПДВОРаздел3
		                                   * мСтруктураПеременных.НормативПлРаздел3 * Множ);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел3", "СумПДВ", 10, мСтруктураПеременных.СумПДВРаздел3, Истина);

		// 190 = 090*120*140*150*160
		мСтруктураПеременных.ВПредРаздел3 = ОкруглитьЧислоПоФормату(мСтруктураПеременных.ВыбросЛимитРаздел3
		                                  * мСтруктураПеременных.ПулРаздел3 * Множ);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел3", "ВПред", 10, мСтруктураПеременных.ВПредРаздел3, Истина);

		// 200 = 100*130*140*150*160
		мСтруктураПеременных.СУЛимРаздел3 = ОкруглитьЧислоПоФормату(мСтруктураПеременных.СверхЛимРаздел3
		                                  * мСтруктураПеременных.СверхУстЛимРаздел3 * Множ);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел3", "СУЛим", 10, мСтруктураПеременных.СУЛимРаздел3, Истина);

		// 170=180+190+200
		мСтруктураПеременных.СумПлВсегоРаздел3 = мСтруктураПеременных.СумПДВРаздел3
		                                       + мСтруктураПеременных.ВПредРаздел3
		                                       + мСтруктураПеременных.СУЛимРаздел3;

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел3", "СумПлВсего", 10, мСтруктураПеременных.СумПлВсегоРаздел3, Истина);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда

		// 140 = 150+160+170+180
		мСтруктураПеременных.ФПДОВОПВРаздел4 = мСтруктураПеременных.ПДИРаздел4
		                                     + мСтруктураПеременных.ПДОРаздел4
		                                     + мСтруктураПеременных.ПДХРаздел4
		                                     + мСтруктураПеременных.ПДЗРаздел4;
		ВывестиЗначениеВКвадратики10("Раздел4", "ПДО", 10, мСтруктураПеременных.ФПДОВОПВРаздел4);

		// Строка 200 = Мин(190, 080)
		мСтруктураПеременных.ВПРЕДУЛИМРаздел4 = Мин(мСтруктураПеременных.ННХВОПВРаздел4, мСтруктураПеременных.ЛимитХРаздел4);
		ВывестиЗначениеВКвадратики10("Раздел4", "ВыбросЛим", 10, мСтруктураПеременных.ВПРЕДУЛИМРаздел4);

		// Строка 210 = 190-200
		мСтруктураПеременных.СверхУЛимРаздел4 = мСтруктураПеременных.ННХВОПВРаздел4 - мСтруктураПеременных.ВПРЕДУЛИМРаздел4;
		ВывестиЗначениеВКвадратики10("Раздел4", "СУЛ", 10, мСтруктураПеременных.СверхУЛимРаздел4);

		// Строка 230 = Мин(220, 070)
		мСтруктураПеременных.ЗахороненоВПУЛРаздел4 = Мин(мСтруктураПеременных.ЗахороненоВсегоРаздел4, мСтруктураПеременных.ЛимитЗРаздел4);
		ВывестиЗначениеВКвадратики10("Раздел4", "ЗахороненоВПред", 10, мСтруктураПеременных.ЗахороненоВПУЛРаздел4);

		// Строка 240 = 220-230
		мСтруктураПеременных.ЗахороненоСУЛРаздел4 = мСтруктураПеременных.ЗахороненоВсегоРаздел4 - мСтруктураПеременных.ЗахороненоВПУЛРаздел4;
		ВывестиЗначениеВКвадратики10("Раздел4", "СверхЛимит", 10, мСтруктураПеременных.ЗахороненоСУЛРаздел4);

		// 340 = (200 + 230) * 270 290 300 310 320
		мСтруктураПеременных.СППУЛРаздел4 = ОкруглитьЧислоПоФормату((мСтруктураПеременных.ВПРЕДУЛИМРаздел4 + мСтруктураПеременных.ЗахороненоВПУЛРаздел4)
		                                  * мСтруктураПеременных.ВПредУстЛимРаздел4
		                                  * мСтруктураПеременных.КЭЗРаздел4
		                                  * ?(ПустаяСтрока(мРаздел4.Области.П000050030000.Значение), 0, мРаздел4.Области.П000050030000.Значение)
		                                  * мСтруктураПеременных.КУИРаздел4
		                                  * мСтруктураПеременных.КМРОРаздел4);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел4", "СумВПредУстЛим", 10, мСтруктураПеременных.СППУЛРаздел4, Истина);

		// 350 = (210+240) * 280 * 290 * 300 * 310 * 320
		мСтруктураПеременных.СЗСЛРРаздел4 = ОкруглитьЧислоПоФормату((мСтруктураПеременных.СверхУЛимРаздел4 + мСтруктураПеременных.ЗахороненоСУЛРаздел4)
		                                  * мСтруктураПеременных.СверхУстЛимРаздел4
		                                  * мСтруктураПеременных.КЭЗРаздел4
		                                  * ?(ПустаяСтрока(мРаздел4.Области.П000050030000.Значение), 0, мРаздел4.Области.П000050030000.Значение)
		                                  * мСтруктураПеременных.КУИРаздел4
		                                  * мСтруктураПеременных.КМРОРаздел4);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел4", "СумЗаСверхЛимРазм", 10, мСтруктураПеременных.СЗСЛРРаздел4, Истина);

		// 330 = 340+350
		мСтруктураПеременных.СУРОВРаздел4 = мСтруктураПеременных.СППУЛРаздел4 + мСтруктураПеременных.СЗСЛРРаздел4;
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел4", "СумПлЗаРазмОтх", 10, мСтруктураПеременных.СУРОВРаздел4, Истина);

		// Расчет("Расчет");
	КонецЕсли;

КонецПроцедуры // Расчет()

// ВвестиКоэффициент
//
Процедура ВвестиКоэффициент(Раздел, ИмяВСтруктуре, СмысловаяЧасть, Размерность, ТаблицаВыбора, ТекстВыбора, ТекстВвода, РазмерностьЦ, РазмерностьД)

	ПервоначальноеЗначение = мСтруктураПеременных[ИмяВСтруктуре];

	ВыборИзСписка = (НЕ мАвтоВыборКодов) И (ТаблицаВыбора <> Неопределено);

	Если ВыборИзСписка Тогда
		ПоисковаяТабл = ТаблицаВыбора;

		РезультирующийПоиск = ПоисковаяТабл.Найти(Формат(ПервоначальноеЗначение), "Код");

		Если РезультирующийПоиск <> Неопределено Тогда
			Результат = ПоисковаяТабл.ВыбратьСтроку(ТекстВыбора, РезультирующийПоиск);
		Иначе
			Результат = ПоисковаяТабл.ВыбратьСтроку(ТекстВыбора);
		КонецЕсли;

		Если ИмяВСтруктуре = "КлассОпасностиРаздел4" И Результат <> Неопределено И (НЕ ФлажокОтклАвтоРасчет) Тогда

			РезСтрока = Результат.Получить(1);
			Если РезСтрока <> "Пустое значение" Тогда
				РезСтрока = СтрЗаменить(РезСтрока, " ", Символы.ПС);
				Зн = СтрПолучитьСтроку(РезСтрока, СтрЧислоСтрок(РезСтрока));
				Зн = СтрЗаменить(Зн, ")", "");
				Если РегламентированнаяОтчетность.роЯвляетсяЧислом(Зн) Тогда
					Зн = Число(Зн);
					мСтруктураПеременных.ВПредУстЛимРаздел4 = Зн;

					ПервоначальноеЗначениеСтр0 = Формат(Зн, "ЧГ=0");
					ПервоначальноеЗначениеСтр0 = РегламентированнаяОтчетность.ДополнитьСтроку(ПервоначальноеЗначениеСтр0, 10, " ");
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел4", "Выброс2ЛимитНормПл", 10, ПервоначальноеЗначениеСтр0);
					Расчет("Раздел4");

				КонецЕсли;
			Иначе
				// Пустое значение
				Зн = 0;
				мСтруктураПеременных.ВПредУстЛимРаздел4 = Зн;
				ПервоначальноеЗначениеСтр0 = Формат(Зн, "ЧГ=0");
				ПервоначальноеЗначениеСтр0 = РегламентированнаяОтчетность.ДополнитьСтроку(ПервоначальноеЗначениеСтр0, 10, " ");
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел4", "Выброс2ЛимитНормПл", 10, ПервоначальноеЗначениеСтр0);
				Расчет("Раздел4");

			КонецЕсли;

		КонецЕсли;

	Иначе

		Если ТипЗнч(ПервоначальноеЗначение) = Тип("Число") Тогда
			Если ВвестиЧисло(ПервоначальноеЗначение, ТекстВвода, РазмерностьЦ, РазмерностьД) Тогда
				Если ОбновитьПеременныеМодуля(ИмяВСтруктуре, ПервоначальноеЗначение) Тогда
					Результат = ПервоначальноеЗначение;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПервоначальноеЗначение) = Тип("Строка") Тогда
			Если ВвестиСтроку(ПервоначальноеЗначение, ТекстВвода, РазмерностьЦ) Тогда
				Если ОбновитьПеременныеМодуля(ИмяВСтруктуре, ПервоначальноеЗначение) Тогда
					Результат = ПервоначальноеЗначение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Результат <> Неопределено Тогда
		ПервоначальноеЗначение = ?(НЕ ВыборИзСписка, ПервоначальноеЗначение, Результат.Получить(0));

		Если ТипЗнч(мСтруктураПеременных[ИмяВСтруктуре]) = Тип("Число") Тогда
			ПервоначальноеЗначение = ?(ПустаяСтрока(ПервоначальноеЗначение), 0, Число(ПервоначальноеЗначение));
			Стр = Формат(ПервоначальноеЗначение, "ЧГ=0");
			Стр = РегламентированнаяОтчетность.ДополнитьСтроку(Стр, Размерность," ");
		ИначеЕсли ТипЗнч(мСтруктураПеременных[ИмяВСтруктуре]) = Тип("Строка") Тогда
			Стр = ПервоначальноеЗначение;
		КонецЕсли;

		Если НЕ ОбновитьПеременныеМодуля(ИмяВСтруктуре, ПервоначальноеЗначение) Тогда
			Возврат;
		КонецЕсли;

		Если ТипЗнч(мСтруктураПеременных[ИмяВСтруктуре]) = Тип("Число") Тогда
			Расчет(Раздел);
		КонецЕсли;

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, Раздел, СмысловаяЧасть, Размерность, Стр);

		Модифицированность = Истина;

	Конецесли;

КонецПроцедуры // ВвестиКоэффициент

// ВвестиНорматив
// Процедура позволяет ввести норматив особым образом
//
Процедура ВвестиНорматив(Раздел, ИмяВСтруктуре, СмысловаяЧасть)

	ПервоначальноеЗначение = мСтруктураПеременных[ИмяВСтруктуре];
	ЦелаяЧасть = 12;
	Дробная = 2;
	Если Раздел = "Раздел2" Тогда
		// Для раздела 2 размерность нормативов устанавливается как 2.1
		ЦелаяЧасть = 2;
		Дробная = 1;
	ИначеЕсли Раздел = "Раздел4" Тогда
		ЦелаяЧасть = 5;
		Дробная = 1;
	КонецЕсли;

	Если ВвестиЧисло(ПервоначальноеЗначение, "Введите норматив", ЦелаяЧасть, Дробная) Тогда
		ПервоначальноеЗначениеСтр = Формат(ПервоначальноеЗначение, "ЧГ=0");
		Если СтрДлина(ПервоначальноеЗначениеСтр) > 10 Тогда
			Сообщить("Введенное значение нельзя отобразить в отчете.", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;

		Если ОбновитьПеременныеМодуля(ИмяВСтруктуре, ПервоначальноеЗначение) Тогда
			ПервоначальноеЗначениеСтр = РегламентированнаяОтчетность.ДополнитьСтроку(ПервоначальноеЗначениеСтр, 10, " ");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, Раздел, СмысловаяЧасть, 10, ПервоначальноеЗначениеСтр);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВввестиНорматив

Процедура ВывестиЗначениеВКвадратики10(Раздел, СмыслЧасть, Размерность, Значение)
	ПервоначальноеЗначениеСтр = Формат(Значение, "ЧГ=0");
	ПервоначальноеЗначениеСтр = РегламентированнаяОтчетность.ДополнитьСтроку(ПервоначальноеЗначениеСтр, Размерность, " ");
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, Раздел, СмыслЧасть, Размерность, ПервоначальноеЗначениеСтр);
КонецПроцедуры

// Инициализация
//
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	// Объявим структуру для хранения представлений.
	мСтруктураПеременных = Новый Структура;

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	
	// ФормируемСтруктуруСтраницОтчета
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	мТитульный      = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРасчет         = ЭлементыФормы.ПолеТабличногоДокументаРасчет;
	мРаздел1        = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	мРаздел2        = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;
	мРаздел3        = ЭлементыФормы.ПолеТабличногоДокументаРаздел3;
	мРаздел4        = ЭлементыФормы.ПолеТабличногоДокументаРаздел4;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	// ФлОтклВыборЗначений
	мАвтоВыборКодов = Ложь;

	Если НЕ БезОткрытияФормы Тогда

		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
		ЗагрузитьПоказателиИзМакета("КодыКБК2005");
		ЗагрузитьПоказателиИзМакета("РасположениеОбъекта");
		ЗагрузитьПоказателиИзМакета("ДополнительныйКоэф12");
		ЗагрузитьПоказателиИзМакета("КЭЗ_Раздел1");
		ЗагрузитьПоказателиИзМакета("КЭЗ_ВодныеОбъекты");
		ЗагрузитьПоказателиИзМакета("КлассыОпасности");
		ЗагрузитьПоказателиИзМакета("ЭкологическийКлассРаздел2");
		ЗагрузитьПоказателиИзМакета("НормативыПлатыРаздел2");
		ЗагрузитьПоказателиИзМакета("ВредныеВеществаРаздел1");
		ЗагрузитьПоказателиИзМакета("ВредныеВеществаРаздел3");
		ЗагрузитьПоказателиИзМакета("ФКТОРаздел4");
		ЗагрузитьПоказателиИзМакета("КоэфИнфляция");
		ЗагрузитьПоказателиИзМакета("КЭЗ_Раздел4");
		ЗагрузитьПоказателиИзМакета("ДопКоэфТЗ");

		мРаздел1.Области.П000020015000.ЭлементУправления.Маска = "9";
		мРаздел2.Области.П000030011000.ЭлементУправления.Маска = "9";
		мРаздел3.Области.П000040015000.ЭлементУправления.Маска = "9";
		мРаздел4.Области.П000050030000.ЭлементУправления.Маска = "9";

		// Установим маски на ввод только чисел.
		РегламентированнаяОтчетность.СтандратныеОперацииПоУстановкамМасок(ЭтаФорма);

	КонецЕсли;

	// Данная операция должна выполняться и при открытии отчета и при печати не открывая,
	// т.к.она инициализирует структуру переменных мСтруктураПеременных.
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления();

	// для обновления листа о ФЛ, если Истина, то обновлять перезаписывать данные на листе
	мВПрограммеИзмененаОрганизация = Ложь;
	мДокументВосстановлен = Ложь;
	мРежимПечати = Ложь;

	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 2;

			мТитульный.Области.ВидДок.Значение = "V";

			// По умолчанию - выбраны все листы
			// при восстановлении - сохраненные ранее
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			УстановитьФорматВывода();
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		УправлениеЛистами();
	КонецЕсли;

	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если НазваниеСтраницы = "Титульный" Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // Инициализация

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// КоманднаяПанельФормыЗаполнить
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	ЗаполнитьАвто();
КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// ПолеТабличногоДокументаРаздел4ПриИзменении
//
Процедура ПолеТабличногоДокументаРаздел4ПриИзменении(Элемент)
	Расчет("Раздел4");
КонецПроцедуры // ПолеТабличногоДокументаРаздел4ПриИзменении

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)
	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);
КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении

// КнопкаПерейтиНаСтраницуРасчетНажатие
//
Процедура КнопкаПерейтиНаСтраницуРасчетНажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма);
КонецПроцедуры // КнопкаПерейтиНаСтраницуРасчетНажатие

// КнопкаУдалитьДопСтраницуРасчетНажатие
//
Процедура КнопкаУдалитьДопСтраницуРасчетНажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Расчет");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Расчет");
КонецПроцедуры // КнопкаУдалитьДопСтраницуРасчетНажатие

// КнопкаДобавитьДопСтраницуРасчетНажатие
//
Процедура КнопкаДобавитьДопСтраницуРасчетНажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Расчет");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Расчет");
КонецПроцедуры // КнопкаДобавитьДопСтраницуРасчетНажатие

// КнопкаСледующаяСтраницаРасчетНажатие
//
Процедура КнопкаСледующаяСтраницаРасчетНажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Расчет");
КонецПроцедуры // КнопкаСледующаяСтраницаРасчетНажатие

// КнопкаПредыдущаяСтраницаРасчетНажатие
//
Процедура КнопкаПредыдущаяСтраницаРасчетНажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Расчет");
КонецПроцедуры // КнопкаПредыдущаяСтраницаРасчетНажатие

// КнопкаПерейтиНаСтраницуРаздел1Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел1Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма);
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел1Нажатие

// КнопкаУдалитьДопСтраницуРаздел1Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел1Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел1");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел1");
КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел1Нажатие

// КнопкаДобавитьДопСтраницуРаздел1Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел1Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел1");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел1");
КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел1Нажатие

// КнопкаСледующаяСтраницаРаздел1Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел1Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел1");
КонецПроцедуры // КнопкаСледующаяСтраницаРаздел1Нажатие

// КнопкаПредыдущаяСтраницаРаздел1Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел1Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел1");
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел1Нажатие

// КнопкаПерейтиНаСтраницуРаздел2Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел2Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма);
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел2Нажатие

// КнопкаУдалитьДопСтраницуРаздел2Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел2Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел2");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2");
КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел2Нажатие

// КнопкаДобавитьДопСтраницуРаздел2Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел2Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2");
КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел2Нажатие

// КнопкаСледующаяСтраницаРаздел2Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел2Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел2");
КонецПроцедуры // КнопкаСледующаяСтраницаРаздел2Нажатие

// КнопкаПредыдущаяСтраницаРаздел2Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел2Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел2");
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел2Нажатие

// КнопкаПерейтиНаСтраницуРаздел3Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел3Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма);
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел3Нажатие

// КнопкаУдалитьДопСтраницуРаздел3Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел3Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел3");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел3");
КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел3Нажатие

// КнопкаДобавитьДопСтраницуРаздел3Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел3Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел3");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел3");
КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел3Нажатие

// КнопкаСледующаяСтраницаРаздел3Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел3Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел3");
КонецПроцедуры // КнопкаСледующаяСтраницаРаздел3Нажатие

// КнопкаПредыдущаяСтраницаРаздел3Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел3Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел3");
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел3Нажатие

// КнопкаПерейтиНаСтраницуРаздел4Нажатие
//
Процедура КнопкаПерейтиНаСтраницуРаздел4Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма);
КонецПроцедуры // КнопкаПерейтиНаСтраницуРаздел4Нажатие

// КнопкаУдалитьДопСтраницуРаздел4Нажатие
//
Процедура КнопкаУдалитьДопСтраницуРаздел4Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел4");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел4");
КонецПроцедуры // КнопкаУдалитьДопСтраницуРаздел4Нажатие

// КнопкаДобавитьДопСтраницуРаздел4Нажатие
//
Процедура КнопкаДобавитьДопСтраницуРаздел4Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел4");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел4");
КонецПроцедуры // КнопкаДобавитьДопСтраницуРаздел4Нажатие

// КнопкаСледующаяСтраницаРаздел4Нажатие
//
Процедура КнопкаСледующаяСтраницаРаздел4Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел4");
КонецПроцедуры // КнопкаСледующаяСтраницаРаздел4Нажатие

// КнопкаПредыдущаяСтраницаРаздел4Нажатие
//
Процедура КнопкаПредыдущаяСтраницаРаздел4Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел4");
КонецПроцедуры // КнопкаПредыдущаяСтраницаРаздел4Нажатие

// ПолеТабличногоДокументаРаздел1ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел1ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел1ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел4ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел4ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел4ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти

// ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаРаздел3ПриАктивизацииОбласти

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

Процедура СохранитьДеревоНастройкиСтраниц()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
Конецпроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

    СохранитьДеревоНастройкиСтраниц();

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)// Не является ошибкой проверки конфигурации

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА И ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ/ПРОЦЕДУРЫ

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	ВыбранКорректирующийВидДок = (ВидДокумента = 1);
	мТитульный.Области.ВидДок.Значение = ?(ВыбранКорректирующийВидДок, "", "V");
	мТитульный.Области.Корректировка.Значение = ?(ВыбранКорректирующийВидДок, "V", "");

	мТитульный.Области.НомКоррект.Значение = НомерКорректировки;

	Если НЕ ВыбранКорректирующийВидДок Тогда
		мТитульный.Области.НомКоррект.Значение = "";
	Иначе
		мТитульный.Области.НомКоррект.Значение = НомерКорректировки;
	КонецЕсли;

	ЭлементыФормы.НомерКорректировки.Доступность = ВыбранКорректирующийВидДок;

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	ВыбранКорректирующийВидДок = (ВидДокумента = 1);
	мТитульный.Области.ВидДок.Значение = ?(ВыбранКорректирующийВидДок, "", "V");
	мТитульный.Области.Корректировка.Значение = ?(ВыбранКорректирующийВидДок, "V", "");

	мТитульный.Области.НомКоррект.Значение = НомерКорректировки;

	Если НЕ ВыбранКорректирующийВидДок Тогда
		мТитульный.Области.НомКоррект.Значение = "";
	Иначе
		мТитульный.Области.НомКоррект.Значение = НомерКорректировки;
	КонецЕсли;

	ЭлементыФормы.НомерКорректировки.Доступность = ВыбранКорректирующийВидДок;

КонецПроцедуры // НомерКорректировкиПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВпрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВпрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();
	Модифицированность = Истина;
	Расчет("");

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// загружает данные стандартные данные из Макет.Списки
//
Процедура ЗагрузитьПоказателиИзМакета (РазделВМакете)
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("Списки2006Кв3");

	Если РазделВМакете = "КоэфИнфляция" Тогда
		ГодОтчета = Год(мДатаКонцаПериодаОтчета);
		Если ГодОтчета >= 2007 Тогда
			// Для 2007 года применяется другие коэффициенты, поэтому другая область в макете.
			РазделВМакете = РазделВМакете + "2007";
		КонецЕсли;
	КонецЕсли;

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда	
	
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе

				Если РазделВМакете = "КодыКБК2005" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2005.Добавить();
				ИначеЕсли РазделВМакете = "РасположениеОбъекта" Тогда
					НовСтрока = мРасположениеОбъекта.Добавить();
				ИначеЕсли РазделВМакете = "ДополнительныйКоэф12" Тогда
					НовСтрока = мДополнительныйКоэф12.Добавить();
				ИначеЕсли РазделВМакете = "КЭЗ_Раздел1" Тогда
					НовСтрока = мКЭЗ_Раздел1.Добавить();
				ИначеЕсли РазделВМакете = "КЭЗ_ВодныеОбъекты" Тогда
					НовСтрока = мКЭЗ_ВодныеОбъекты.Добавить();
				ИначеЕсли РазделВМакете = "КлассыОпасности" Тогда
					НовСтрока = мКлассыОпасности.Добавить();
				ИначеЕсли РазделВМакете = "ЭкологическийКлассРаздел2" Тогда
					НовСтрока = мЭкологическийКлассРаздел2.Добавить();
				ИначеЕсли РазделВМакете = "НормативыПлатыРаздел2" Тогда
					НовСтрока = мНормативыПлатыРаздел2.Добавить();
				ИначеЕсли РазделВМакете = "ВредныеВеществаРаздел1" Тогда
					НовСтрока = мВредныеВеществаРаздел1.Добавить();
					Строка110 = СокрП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
					Строка120 = СокрП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
					НовСтрока.Строка110 = Строка110;
					НовСтрока.Строка120 = Строка120;
				ИначеЕсли РазделВМакете = "ВредныеВеществаРаздел3" Тогда
					НовСтрока = мВредныеВеществаРаздел3.Добавить();
					Строка110 = СокрП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
					Строка120 = СокрП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
					НовСтрока.Строка110 = Строка110;
					НовСтрока.Строка120 = Строка120;
				ИначеЕсли РазделВМакете = "ФКТОРаздел4" Тогда
					НовСтрока = мФКТОРаздел4.Добавить();
				ИначеЕсли (РазделВМакете = "КоэфИнфляция")
				      Или (РазделВМакете = "КоэфИнфляция2007") Тогда
					НовСтрока = мКоэфИнфляция.Добавить();
				ИначеЕсли РазделВМакете = "КЭЗ_Раздел4" Тогда
					НовСтрока = мКЭЗ_Раздел4.Добавить();
				ИначеЕсли РазделВМакете = "ДопКоэфТЗ" Тогда
					НовСтрока = мДопКоэфТЗ.Добавить();
				КонецЕсли;

				НовСтрока.Код= КодПоказателя;
				НовСтрока.Название = Название;

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ЗагрузитьПоказателиИзМакета

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки()

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// Код показателя по структуре определяется по колонке 9 макета
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт

	// Процедура "заглушка". Для функционирования общих механизмов.
	Возврат;

КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// ФормироватьСтруктуруСтраницОтчета
//
Процедура ФормироватьСтруктуруСтраницОтчета()

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Расчет";
	СтрокаУровня1.Представление            = "Расчет платы за негативное воздействие на окружающую среду";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРасчет";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для ПереборныйИнд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[ПереборныйИнд];

		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	ТабличноеПолеИмя = ТабличноеПоле.Имя;
	Если ТабличноеПолеИмя = "ПолеТабличногоДокументаРасчет" Тогда
		Для Каждого Стр Из мСтруктураПеременных Цикл
			Если Найти(Стр.Ключ, "Расчет") > 0 Тогда
				СтруктураДанныхПоля.Вставить(Стр.Ключ, Стр.Значение);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел1" Тогда
		Для Каждого Стр Из мСтруктураПеременных Цикл
			Если Найти(Стр.Ключ, "Раздел1") > 0 Тогда
				СтруктураДанныхПоля.Вставить(Стр.Ключ, Стр.Значение);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел2" Тогда
		Для Каждого Стр Из мСтруктураПеременных Цикл
			Если Найти(Стр.Ключ, "Раздел2") > 0 Тогда
				СтруктураДанныхПоля.Вставить(Стр.Ключ, Стр.Значение);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел3" Тогда
		Для Каждого Стр Из мСтруктураПеременных Цикл
			Если Найти(Стр.Ключ, "Раздел3") > 0 Тогда
				СтруктураДанныхПоля.Вставить(Стр.Ключ, Стр.Значение);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел4" Тогда
		Для Каждого Стр Из мСтруктураПеременных Цикл
			Если Найти(Стр.Ключ, "Раздел4") > 0 Тогда
				СтруктураДанныхПоля.Вставить(Стр.Ключ, Стр.Значение);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)
	Модифицированность = Истина;
КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

// ПолеТабличногоДокументаРасчетВыбор
//
Процедура ПолеТабличногоДокументаРасчетВыбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Ячейка = Элемент.ТекущаяОбласть.Имя;

	Если Найти(Ячейка,"КБК") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		НомерКБК = Сред(Ячейка, 4, 1);
		ПервоначальноеЗначение = мСтруктураПеременных["КБКРасчет" + НомерКБК];

		Если НЕ мАвтоВыборКодов Тогда
			ПоисковаяТабл = мКодыБюджетнойКлассификации2005;

			РезультирующийПоиск = ПоисковаяТабл.Найти(ПервоначальноеЗначение, "Код");

			Если РезультирующийПоиск <> Неопределено Тогда
				Результат = мКодыБюджетнойКлассификации2005.ВыбратьСтроку("Выбор КБК", РезультирующийПоиск);
			Иначе
				Результат = мКодыБюджетнойКлассификации2005.ВыбратьСтроку("Выбор КБК");
			КонецЕсли;

		Иначе

			Если ВвестиСтроку(ПервоначальноеЗначение,"Введите КБК (20 знаков)", 20) Тогда
				Результат = ПервоначальноеЗначение;
			Иначе
				Возврат;
			КонецЕсли;

		КонецЕсли; // НЕ АВТОвыбор

		Если Результат <> Неопределено Тогда
			ВведенныйРезультат = ?(мАвтоВыборКодов, Результат, Результат.Получить(0));
			Если ОбновитьПеременныеМодуля("КБКРасчет" + НомерКБК, ВведенныйРезультат) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "КБК" + НомерКБК + "_", 20, ВведенныйРезультат);
				Модифицированность = Истина;
			КонецЕсли;
		Конецесли;

	ИначеЕсли Найти(Ячейка, "ОКАТО") > 0 Тогда

		СтандартнаяОбработка = Ложь;
		НомерОКАТО = Сред(Ячейка, 6, 1);
		ПервоначальноеЗначение = мСтруктураПеременных["ОКАТОРасчет" + НомерОКАТО];
		Если ВвестиСтроку(ПервоначальноеЗначение, "Введите код ОКАТО", 11) Тогда
			Если (ПервоначальноеЗначение = "") Или (ОбщегоНазначения.ТолькоЦифрыВСтроке(ПервоначальноеЗначение)) И (СтрДлина(ПервоначальноеЗначение) = 11) Тогда

				Если ОбновитьПеременныеМодуля("ОКАТОРасчет" + НомерОКАТО, ПервоначальноеЗначение) Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "ОКАТО" + НомерОКАТО + "_", 11, ПервоначальноеЗначение);
					Модифицированность = Истина;
				КонецЕсли;

			Иначе

				Сообщить("Код ОКАТО должен состоять из 11 цифр.");

			КонецЕсли;

		КонецЕсли;

	ИначеЕсли Найти(Ячейка, "РегНом") > 0 Тогда

		СтандартнаяОбработка = Ложь;
		НомерОКАТО = Сред(Ячейка, 7, 1);
		ПервоначальноеЗначение = мСтруктураПеременных["РегНомРасчет" + НомерОКАТО];
		Если ВвестиСтроку(ПервоначальноеЗначение, "Введите рег. номер", 11) Тогда
			Если ОбновитьПеременныеМодуля("РегНомРасчет" + НомерОКАТО, ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "РегНом" + НомерОКАТО + "_", 11, ПервоначальноеЗначение);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(Ячейка, "СуммаБезЛьгот") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		НомерСтроки = Сред(Ячейка, 14, 1);
		ПервоначальноеЗначение = мСтруктураПеременных["СуммаБезЛьготРасчет" + НомерСтроки];

		Если ВвестиЧисло(ПервоначальноеЗначение, "Сумма платежа, исчисленная без учета льгот и зачетов", 14, 2) Тогда
			ПервоначальноеЗначениеСтр = Формат(ПервоначальноеЗначение, мСтрокаФормата + ";ЧГ=0");
			Если СтрДлина(ПервоначальноеЗначениеСтр) > 12 Тогда
				Сообщить("Введенное значение нельзя отобразить в отчете.", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;

			Если ОбновитьПеременныеМодуля("СуммаБезЛьготРасчет" + НомерСтроки, ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаБезЛьгот" + НомерСтроки + "_", 12, ПервоначальноеЗначение, Истина);
				Модифицированность = Истина;
				Расчет("Расчет");
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(Ячейка, "СуммаЗачет") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		НомерСтроки = Сред(Ячейка, 11, 1);
		ПервоначальноеЗначение = мСтруктураПеременных["СуммаЗачетРасчет" + НомерСтроки];
		Если ВвестиЧисло(ПервоначальноеЗначение, "Сумма средств на выполнение природоохранных мероприятий, принимаемая к зачету в счет платы", 14, 2) Тогда

			ПервоначальноеЗначениеСтр = Формат(ПервоначальноеЗначение, мСтрокаФормата + ";ЧГ=0");
			Если СтрДлина(ПервоначальноеЗначениеСтр) > 12 Тогда
				Сообщить("Введенное значение нельзя отобразить в отчете.", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;

			Если ОбновитьПеременныеМодуля("СуммаЗачетРасчет" + НомерСтроки, ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаЗачет" + НомерСтроки + "_", 12, ПервоначальноеЗначение, Истина);
				Модифицированность = Истина;
				Расчет("Расчет");
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(Ячейка, "СуммаЛьготОргСоц") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		НомерСтроки = Сред(Ячейка, 17, 1);
		ПервоначальноеЗначение = мСтруктураПеременных["СуммаЛьготОргСоцРасчет" + НомерСтроки];
		Если ВвестиЧисло(ПервоначальноеЗначение, "Сумма льгот ... (строка 060)", 14, 2) Тогда

			ПервоначальноеЗначениеСтр = Формат(ПервоначальноеЗначение, мСтрокаФормата + ";ЧГ=0");
			Если СтрДлина(ПервоначальноеЗначениеСтр) > 12 Тогда
				Сообщить("Введенное значение нельзя отобразить в отчете.", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;

			Если ОбновитьПеременныеМодуля("СуммаЛьготОргСоцРасчет" + НомерСтроки, ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаЛьготОргСоц" + НомерСтроки + "_", 12, ПервоначальноеЗначение, Истина);
				Модифицированность = Истина;
				Расчет("Расчет");
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(Ячейка, "СуммаЛьготОрг") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		НомерСтроки = Сред(Ячейка, 14, 1);
		ПервоначальноеЗначение = мСтруктураПеременных["СуммаЛьготОргРасчет" + НомерСтроки];
		Если ВвестиЧисло(ПервоначальноеЗначение, "Сумма льгот ... (строка 070)", 14, 2) Тогда

			ПервоначальноеЗначениеСтр = Формат(ПервоначальноеЗначение, мСтрокаФормата + ";ЧГ=0");
			Если СтрДлина(ПервоначальноеЗначениеСтр) > 12 Тогда
				Сообщить("Введенное значение нельзя отобразить в отчете.", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;

			Если ОбновитьПеременныеМодуля("СуммаЛьготОргРасчет" + НомерСтроки, ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаЛьготОрг" + НомерСтроки + "_", 12, ПервоначальноеЗначение, Истина);
				Модифицированность = Истина;
				Расчет("Расчет");
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (Найти(Ячейка, "СуммаПлат") > 0) И (ФлажокОтклАвтоРасчет) Тогда
		СтандартнаяОбработка = Ложь;
		НомерСтроки = Сред(Ячейка, 10, 1);
		ПервоначальноеЗначение = мСтруктураПеременных["СуммаПлатРасчет" + НомерСтроки];

		Если ВвестиЧисло(ПервоначальноеЗначение, "Сумма платежа ... (строка 080)", 14, 2) Тогда

			ПервоначальноеЗначениеСтр = Формат(ПервоначальноеЗначение, мСтрокаФормата + ";ЧГ=0");
			Если СтрДлина(ПервоначальноеЗначениеСтр) > 12 Тогда
				Сообщить("Введенное значение нельзя отобразить в отчете.", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;

			Если ОбновитьПеременныеМодуля("СуммаПлатРасчет" + НомерСтроки, ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Расчет", "СуммаПлат" + НомерСтроки + "_", 12, ПервоначальноеЗначение, Истина);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (Найти(Ячейка, "СуммаПлат") > 0) И (НЕ ФлажокОтклАвтоРасчет) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРасчетВыбор

// ПолеТабличногоДокументаРаздел1Выбор
//
Процедура ПолеТабличногоДокументаРаздел1Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	СоответствиеДанных = Новый Соответствие;
	СоответствиеДанных.Вставить("ОПДВ", "ПДВРаздел1"); // 050
	СоответствиеДанных.Вставить("ОВСВ", "ВСВРаздел1"); // 060
	СоответствиеДанных.Вставить("ОФактВыброс", "ФактВыбросРаздел1"); // 070
	СоответствиеДанных.Вставить("О2ПДВ", "ПДВОРаздел1"); // 080
	СоответствиеДанных.Вставить("ВыбросЛимит", "ВыбросЛимитРаздел1"); // 090
	СоответствиеДанных.Вставить("СверхЛим", "СверхЛимРаздел1"); // 100
	СоответствиеДанных.Вставить("СумПлВсего", "СумПлВсегоРаздел1"); // 180
	СоответствиеДанных.Вставить("СумПДВ", "СумПДВРаздел1"); // 190
	СоответствиеДанных.Вставить("ВПред", "ВПредРаздел1"); // 200
	СоответствиеДанных.Вставить("СУЛим", "СУЛимРаздел1"); // 210

	ОбластьИмя = Область.Имя;
	Если Найти(ОбластьИмя, "РегНомОбъект") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мСтруктураПеременных.РегНомРаздел1;
		Если ВвестиСтроку(ПервоначальноеЗначение,"Введите рег. номер объекта", 11) Тогда
			Если ОбновитьПеременныеМодуля("РегНомРаздел1", ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "РегНомОбъект", 11, ПервоначальноеЗначение);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(ОбластьИмя, "РазрНаВыбросДата") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мСтруктураПеременных.РазрешениеДатаРаздел1;
		Если ВвестиДату(ПервоначальноеЗначение,"Разрешение на выброс, от", ЧастиДаты.Дата) Тогда
			Если ОбновитьПеременныеМодуля("РазрешениеДатаРаздел1", ПервоначальноеЗначение) Тогда
				стрВыбДата = Формат(ПервоначальноеЗначение, "ДФ=""ддММгггг""");
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "РазрНаВыбросДата", 8, стрВыбДата);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(ОбластьИмя, "СрокДействияДата") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мСтруктураПеременных.СрокДатаРаздел1;
		Если ВвестиДату(ПервоначальноеЗначение,"Введите срок действия", ЧастиДаты.Дата) Тогда
			Если ОбновитьПеременныеМодуля("СрокДатаРаздел1", ПервоначальноеЗначение) Тогда
				стрВыбДата = Формат(ПервоначальноеЗначение, "ДФ=""ддММгггг""");
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "СрокДействияДата", 8, стрВыбДата);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(ОбластьИмя, "НомерВещества") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мСтруктураПеременных.НомерРаздел1;
		Если ВвестиСтроку(ПервоначальноеЗначение,"Введите № вещества", 2) Тогда
			Если ОбновитьПеременныеМодуля("НомерРаздел1", ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "НомерВещества", 2, ПервоначальноеЗначение);
				Модифицированность = Истина;
				Расчет("Раздел1");
			КонецЕсли;
		КонецЕсли;

	// Строка 030
	ИначеЕсли (ОбластьИмя = "П000020004000") И (НЕ мАвтоВыборКодов) Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = Область.Значение;

		ВредныеВеществаРаздел1 = мВредныеВеществаРаздел1.Скопировать();
		ВредныеВеществаРаздел1.Колонки.Удалить("Код");

		РезультирующийПоиск = ВредныеВеществаРаздел1.Найти(ПервоначальноеЗначение, "Название");

		Если РезультирующийПоиск <> Неопределено Тогда
			Результат = ВредныеВеществаРаздел1.ВыбратьСтроку("Выбор загрязняющего вещества", РезультирующийПоиск);
		Иначе
			Результат = ВредныеВеществаРаздел1.ВыбратьСтроку("Выбор загрязняющего вещества");
		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;

		РезультатТекст = Результат.Получить(0); // Название.

		Результат = мВредныеВеществаРаздел1.Найти(РезультатТекст, "Название");

		Строка110 = Результат.Получить(2); // Норматив для 110-й строки.
		Строка120 = Результат.Получить(3); // Норматив для 120-й строки.

		Область.Значение = ?(РезультатТекст = "Пустое значение", "", РезультатТекст);

		// Заполним нормативы: 110 и 120 строка.
		ПервоначальноеЗначениеСтр = Формат(Строка110, "ЧГ=0");
		ПервоначальноеЗначениеСтр = РегламентированнаяОтчетность.ДополнитьСтроку(ПервоначальноеЗначениеСтр, 10, " ");

		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "НормативПл", 10, ПервоначальноеЗначениеСтр);

		ПервоначальноеЗначениеСтр = Формат(Строка120, "ЧГ=0");
		ПервоначальноеЗначениеСтр = РегламентированнаяОтчетность.ДополнитьСтроку(ПервоначальноеЗначениеСтр, 10, " ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", "Пул", 10, ПервоначальноеЗначениеСтр);

		мСтруктураПеременных.НормативПлРаздел1 = ?(ПустаяСтрока(Строка110), 0, Число(Строка110));
		мСтруктураПеременных.ПулРаздел1 = ?(ПустаяСтрока(Строка120), 0, Число(Строка120));

		Модифицированность = Истина;

	// Строка 140
	ИначеЕсли Найти(ОбластьИмя, "КЭЗ") > 0 Тогда
		СтандартнаяОбработка = Ложь;

		ВвестиКоэффициент("Раздел1", "КЭЗРаздел1", "КЭЗ", 4, мКЭЗ_Раздел1
		, "Выбор коэффициента"
		, "Введите коэф. экологической значимости", 3, 1);

	// Строка 150
	ИначеЕсли (ОбластьИмя = "П000020015000") И (НЕ мАвтоВыборКодов) Тогда
		СтандартнаяОбработка = Ложь;

		ПервоначальноеЗначение = Область.Значение;
		ПоисковаяТабл = мДопКоэфТЗ;
		РезультирующийПоиск = ПоисковаяТабл.Найти(Формат(ПервоначальноеЗначение), "Код");

		Если РезультирующийПоиск <> Неопределено Тогда
			Результат = ПоисковаяТабл.ВыбратьСтроку("Выбор коэффициента", РезультирующийПоиск);
		Иначе
			Результат = ПоисковаяТабл.ВыбратьСтроку("Выбор коэффициента");
		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Область.Значение = ?(ПустаяСтрока(Результат.Получить(0)), "", Результат.Получить(0));
		Расчет("Раздел1");

		Модифицированность = Истина;

	// Строка 160
	ИначеЕсли Найти(ОбластьИмя, "ДК") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиКоэффициент("Раздел1", "ДКРаздел1", "ДК", 3, мДополнительныйКоэф12
		, "Выбор коэффициента"
		, "Введите доп. коэффициент", 2, 1);

	ИначеЕсли Найти(ОбластьИмя, "КУИ") = 1 Тогда
		СтандартнаяОбработка = Ложь;

		ВвестиКоэффициент("Раздел1", "КУИРаздел1", "КУИ", 4, мКоэфИнфляция
		, "Выбор коэффициента"
		, "Введите коэффициент, учитывающий инфляцию", 3, 2);

	// Строка 110
	ИначеЕсли Найти(ОбластьИмя, "НормативПл") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиНорматив("Раздел1", "НормативПлРаздел1", "НормативПл");
	// Строка 120
	ИначеЕсли Найти(ОбластьИмя, "Пул") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиНорматив("Раздел1", "ПулРаздел1", "Пул");
	// Строка 130
	ИначеЕсли Найти(ОбластьИмя, "СверхУстЛим") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиНорматив("Раздел1", "СверхУстЛимРаздел1", "СверхУстЛим");
	Иначе

		Для каждого Эл Из СоответствиеДанных Цикл
			Если Найти(ОбластьИмя, Эл.Ключ) > 0 Тогда
				СтандартнаяОбработка = Ложь;
				КлючСтруктуры = Эл.Значение;
				ПервоначальноеЗначение = мСтруктураПеременных[КлючСтруктуры];
				ПоказательСумма = Ложь;
				Если КлючСтруктуры = "СумПлВсегоРаздел1"
				 Или КлючСтруктуры = "СумПДВРаздел1"
				 Или КлючСтруктуры = "ВПредРаздел1"
				 Или КлючСтруктуры = "СУЛимРаздел1" Тогда
					ПоказательСумма = Истина;
				КонецЕсли;

				Если ПоказательСумма Тогда
					ЦелаяЧасть = 9;
					ДробнаяЧасть = 2;
				Иначе
					ЦелаяЧасть = 14;
					ДробнаяЧасть = 4;
				КонецЕсли;

				Если ВвестиЧисло(ПервоначальноеЗначение, "Введите значение", ЦелаяЧасть, ДробнаяЧасть) Тогда

					Если НЕ ПоказательСумма Тогда
						ПервоначальноеЗначениеСтр = Формат(ПервоначальноеЗначение, "ЧГ=0");
						Если СтрДлина(ПервоначальноеЗначениеСтр) > 10 Тогда
							Сообщить("Введенное значение нельзя отобразить в отчете.", СтатусСообщения.Важное);
							Возврат;
						КонецЕсли;
					КонецЕсли;

					Если ОбновитьПеременныеМодуля(КлючСтруктуры, ПервоначальноеЗначение) Тогда

						Если ПоказательСумма Тогда
							РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел1", Эл.Ключ, 10, ПервоначальноеЗначение, Истина);
						Иначе
							ВывестиЗначениеВКвадратики10("Раздел1", Эл.Ключ, 10, ПервоначальноеЗначение);
						КонецЕсли;

						Модифицированность = Истина;
						Прервать; // Цикл
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	Расчет("Раздел1");
КонецПроцедуры // ПолеТабличногоДокументаРаздел1Выбор

// ПолеТабличногоДокументаРаздел4Выбор
//
Процедура ПолеТабличногоДокументаРаздел4Выбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	СоответствиеДанных = Новый Соответствие;
	СоответствиеДанных.Вставить("ОВСВ", "ЛимитЗРаздел4"); // 070
	СоответствиеДанных.Вставить("ОФактВыброс", "ЛимитХРаздел4"); // 080
	СоответствиеДанных.Вставить("ФНач", "ФННХНОПРаздел4"); // 090
	СоответствиеДанных.Вставить("ОбрСоб", "ФОЗОПВСПРаздел4"); // 100
	СоответствиеДанных.Вставить("ПО", "ФПОИДОВОПРаздел4"); // 110
	СоответствиеДанных.Вставить("ИО", "ФИВОПРаздел4"); // 120
	СоответствиеДанных.Вставить("ВЛ", "ФОВОПРаздел4"); // 130
	СоответствиеДанных.Вставить("ПДО", "ФПДОВОПВРаздел4"); // 140
	СоответствиеДанных.Вставить("ВыбросЛимит", "ПДИРаздел4"); // 150
	СоответствиеДанных.Вставить("СверхЛим", "ПДОРаздел4"); // 160
	СоответствиеДанных.Вставить("НормативПл", "ПДХРаздел4"); // 170
	СоответствиеДанных.Вставить("СверхУстЛим", "ПДЗРаздел4"); // 180
	СоответствиеДанных.Вставить("Хр", "ННХВОПВРаздел4"); // 190
	СоответствиеДанных.Вставить("ВыбросЛим", "ВПРЕДУЛИМРаздел4"); // 200
	СоответствиеДанных.Вставить("СУЛ", "СверхУЛимРаздел4"); // 210
	СоответствиеДанных.Вставить("ЗахороненоВОП", "ЗахороненоВсегоРаздел4"); // 220
	СоответствиеДанных.Вставить("ЗахороненоВПред", "ЗахороненоВПУЛРаздел4"); // 230
	СоответствиеДанных.Вставить("СверхЛимит", "ЗахороненоСУЛРаздел4"); // 240
	СоответствиеДанных.Вставить("КолВоОтх", "КОРНВХРаздел4"); // 250
	СоответствиеДанных.Вставить("НаХраненииКОП", "ННХНКОПРаздел4"); // 260

	СоответствиеДанных.Вставить("СумПлЗаРазмОтх", "СУРОВРаздел4"); // 330
	СоответствиеДанных.Вставить("СумВПредУстЛим", "СППУЛРаздел4"); // 340
	СоответствиеДанных.Вставить("СумЗаСверхЛимРазм", "СЗСЛРРаздел4"); // 350

	ОбластьИмя = Область.Имя;
	Если Найти(ОбластьИмя, "РегНомОбъект") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мСтруктураПеременных.РегНомРаздел4;
		Если ВвестиСтроку(ПервоначальноеЗначение,"Введите рег. номер объекта", 11) Тогда
			Если ОбновитьПеременныеМодуля("РегНомРаздел4", ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел4", "РегНомОбъект", 11, ПервоначальноеЗначение);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ОбластьИмя = "МестоОбъект1" Тогда
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "V";
			мРаздел4.Области.МестоОбъект2.Значение = "";
		КонецЕсли;

	ИначеЕсли ОбластьИмя = "МестоОбъект2" Тогда
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "V";
			мРаздел4.Области.МестоОбъект1.Значение = "";
		КонецЕсли;

	ИначеЕсли Найти(ОбластьИмя, "РазрНаВыбросДата") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мСтруктураПеременных.РазрешениеДатаРаздел4;
		Если ВвестиДату(ПервоначальноеЗначение,"Разрешение на выброс, от", ЧастиДаты.Дата) Тогда
			Если ОбновитьПеременныеМодуля("РазрешениеДатаРаздел4", ПервоначальноеЗначение) Тогда
				стрВыбДата = Формат(ПервоначальноеЗначение, "ДФ=""ддММгггг""");
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел4", "РазрНаВыбросДата", 8, стрВыбДата);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(ОбластьИмя, "СрокДействияДата") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мСтруктураПеременных.СрокДатаРаздел4;
		Если ВвестиДату(ПервоначальноеЗначение,"Введите срок действия", ЧастиДаты.Дата) Тогда
			Если ОбновитьПеременныеМодуля("СрокДатаРаздел4", ПервоначальноеЗначение) Тогда
				стрВыбДата = Формат(ПервоначальноеЗначение, "ДФ=""ддММгггг""");
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел4", "СрокДействияДата", 8, стрВыбДата);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	// 030 и 040
	ИначеЕсли (ОбластьИмя = "П000050003000" Или ОбластьИмя = "П000050004000") И (НЕ мАвтоВыборКодов) Тогда
		СтандартнаяОбработка = Ложь;
		ПоисковаяТабл = мФКТОРаздел4;
		ПервоначальноеЗначение = Область.Значение;
		Колонка = ?(ОбластьИмя = "П000050003000", "Название", "Код");
		РезультирующийПоиск = ПоисковаяТабл.Найти(ПервоначальноеЗначение, Колонка);

		Если РезультирующийПоиск <> Неопределено Тогда
			Результат = ПоисковаяТабл.ВыбратьСтроку("Выбор значения", РезультирующийПоиск);
		Иначе
			Результат = ПоисковаяТабл.ВыбратьСтроку("Выбор значения");
		КонецЕсли;

		Если Результат <> Неопределено Тогда
			РезультатКод = Результат.Получить(0);
			РезультатНазв = Результат.Получить(1);
			РезультатНазв = ?(РезультатНазв = "Пустое значение", "", РезультатНазв);
			мРаздел4.Области.П000050003000.Значение = РезультатНазв;
			мРаздел4.Области.П000050004000.Значение = РезультатКод;
		КонецЕсли;

	// 060
	ИначеЕсли Найти(ОбластьИмя, "ОПДВ") > 0 Тогда
		СтандартнаяОбработка = Ложь;

		ВвестиКоэффициент("Раздел4", "КлассОпасностиРаздел4", "ОПДВ", 3, мКлассыОпасности
		, "Выбор класса опасности"
		, "Введите класс опасности", 2, 1);

	// 030
	ИначеЕсли Найти(ОбластьИмя, "НомерВещества") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мСтруктураПеременных.НомерРаздел4;
		Если ВвестиСтроку(ПервоначальноеЗначение,"Введите №", 2) Тогда
			Если ОбновитьПеременныеМодуля("НомерРаздел4", ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел4", "НомерВещества", 2, ПервоначальноеЗначение);
				Модифицированность = Истина;
				Расчет("Раздел4");
			КонецЕсли;
		КонецЕсли;

	// Строка 270
	ИначеЕсли Найти(ОбластьИмя, "Выброс2ЛимитНормПл") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиНорматив("Раздел4", "ВПредУстЛимРаздел4", "Выброс2ЛимитНормПл");
		Расчет("Раздел4");

	// Строка 280
	ИначеЕсли Найти(ОбластьИмя, "СверУстанЛимита") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиНорматив("Раздел4", "СверхУстЛимРаздел4", "СверУстанЛимита");
		Расчет("Раздел4");

	// 290
	ИначеЕсли Найти(ОбластьИмя, "КЭЗ") > 0 Тогда
		СтандартнаяОбработка = Ложь;

		ВвестиКоэффициент("Раздел4", "КЭЗРаздел4", "КЭЗ", 4, мКЭЗ_Раздел4
		, "Выбор коэффициента"
		, "Введите коэф. экологической значимости", 2, 1);

	ИначеЕсли (ОбластьИмя = "П000050030000") И (НЕ мАвтоВыборКодов) Тогда
		СтандартнаяОбработка = Ложь;

		ПервоначальноеЗначение = Область.Значение;
		ПоисковаяТабл = мДопКоэфТЗ;
		РезультирующийПоиск = ПоисковаяТабл.Найти(Формат(ПервоначальноеЗначение), "Код");

		Если РезультирующийПоиск <> Неопределено Тогда
			Результат = ПоисковаяТабл.ВыбратьСтроку("Выбор коэффициента", РезультирующийПоиск);
		Иначе
			Результат = ПоисковаяТабл.ВыбратьСтроку("Выбор коэффициента");
		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Область.Значение = ?(ПустаяСтрока(Результат.Получить(0)), "", Результат.Получить(0));
		Расчет("Раздел4");
		Модифицированность = Истина;

	// 320
	ИначеЕсли Найти(ОбластьИмя, "КМРО") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиКоэффициент("Раздел4", "КМРОРаздел4", "КМРО", 3, мРасположениеОбъекта
		, "Выбор коэффициента"
		, "Введите коэф. места расположения объекта", 2, 1);
	// 310
	ИначеЕсли Найти(ОбластьИмя, "КУИ") = 1 Тогда
		СтандартнаяОбработка = Ложь;

		ВвестиКоэффициент("Раздел4", "КУИРаздел4", "КУИ", 4, мКоэфИнфляция
		, "Выбор коэффициента"
		, "Введите коэффициент, учитывающий инфляцию", 3, 2);

	Иначе

		Для каждого Эл Из СоответствиеДанных Цикл
			Если Найти(ОбластьИмя, Эл.Ключ) = 1 Тогда
				СтандартнаяОбработка = Ложь;
				КлючСтруктуры = Эл.Значение;
				ПервоначальноеЗначение = мСтруктураПеременных[КлючСтруктуры];
				ПоказательСумма = Ложь;
				Если КлючСтруктуры = "СУРОВРаздел4"
				 Или КлючСтруктуры = "СППУЛРаздел4"
				 Или КлючСтруктуры = "СЗСЛРРаздел4" Тогда
					ПоказательСумма = Истина;
				КонецЕсли;

				Если ПоказательСумма Тогда
					ЦелаяЧасть = 9;
					ДробнаяЧасть = 2;
				Иначе
					ЦелаяЧасть = 14;
					ДробнаяЧасть = 4;
				КонецЕсли;
				Если ВвестиЧисло(ПервоначальноеЗначение, "Введите значение", ЦелаяЧасть, ДробнаяЧасть) Тогда

					Если НЕ ПоказательСумма Тогда
						ПервоначальноеЗначениеСтр = Формат(ПервоначальноеЗначение, "ЧГ=0");
						Если СтрДлина(ПервоначальноеЗначениеСтр) > 10 Тогда
							Сообщить("Введенное значение нельзя отобразить в отчете.", СтатусСообщения.Важное);
							Возврат;
						КонецЕсли;
					КонецЕсли;

					Если ОбновитьПеременныеМодуля(КлючСтруктуры, ПервоначальноеЗначение) Тогда
						Если ПоказательСумма Тогда
							РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел4", Эл.Ключ, 10, ПервоначальноеЗначение, Истина);
						Иначе
							ВывестиЗначениеВКвадратики10("Раздел4", Эл.Ключ, 10, ПервоначальноеЗначение);
						КонецЕсли;

						Модифицированность = Истина;
						Расчет("Раздел4");
						Прервать; // Цикл
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел4Выбор

// ПолеТабличногоДокументаРаздел2Выбор
//
Процедура ПолеТабличногоДокументаРаздел2Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	СоответствиеДанных = Новый Соответствие;
	СоответствиеДанных.Вставить("ОФактВыброс", "НормативВРаздел2"); // 060
	СоответствиеДанных.Вставить("ФКИТ", "ФактКолРаздел2"); // 070
	СоответствиеДанных.Вставить("СумПлаты", "СумПлатыРаздел2"); // 140

	ОбластьИмя = Область.Имя;
	Если Найти(ОбластьИмя, "РегНомОбъект") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мСтруктураПеременных.РегНомРаздел2;
		Если ВвестиСтроку(ПервоначальноеЗначение,"Введите рег. номер объекта", 11) Тогда
			Если ОбновитьПеременныеМодуля("РегНомРаздел2", ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "РегНомОбъектПО", 11, ПервоначальноеЗначение);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(ОбластьИмя, "РазрНаВыбросДата") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мСтруктураПеременных.РазрешениеДатаРаздел2;
		Если ВвестиДату(ПервоначальноеЗначение,"Разрешение на выброс, от", ЧастиДаты.Дата) Тогда
			Если ОбновитьПеременныеМодуля("РазрешениеДатаРаздел2", ПервоначальноеЗначение) Тогда
				стрВыбДата = Формат(ПервоначальноеЗначение, "ДФ=""ддММгггг""");
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "РазрНаВыбросДатаПО", 8, стрВыбДата);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(ОбластьИмя, "СрокДействияДата") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мСтруктураПеременных.СрокДатаРаздел2;
		Если ВвестиДату(ПервоначальноеЗначение,"Введите срок действия", ЧастиДаты.Дата) Тогда
			Если ОбновитьПеременныеМодуля("СрокДатаРаздел2", ПервоначальноеЗначение) Тогда
				стрВыбДата = Формат(ПервоначальноеЗначение, "ДФ=""ддММгггг""");
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "СрокДействияДата", 8, стрВыбДата);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ОбластьИмя = "П000030004000" И НЕ мАвтоВыборКодов Тогда
		СтандартнаяОбработка = Ложь;

		ПервоначальноеЗначение = Область.Значение;
		ПоисковаяТабл = мНормативыПлатыРаздел2;
		РезультирующийПоиск = ПоисковаяТабл.Найти(ПервоначальноеЗначение, "Название");

		Если РезультирующийПоиск <> Неопределено Тогда
			Результат = ПоисковаяТабл.ВыбратьСтроку("Вид топлива", РезультирующийПоиск);
		Иначе
			Результат = ПоисковаяТабл.ВыбратьСтроку("Вид топлива");
		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;

		РезультатТекст = Результат.Получить(1);
		РезультатКоэф = Результат.Получить(0);

		РезультатТекст = ?(ПустаяСтрока(РезультатКоэф), "", РезультатТекст);
		РезультатКоэф = ?(ПустаяСтрока(РезультатКоэф), 0, Число(РезультатКоэф));

		Зн = РезультатКоэф;
		мСтруктураПеременных.НормативРаздел2 = Зн;

		ПервоначальноеЗначениеСтр0 = Формат(Зн, "ЧГ=0");
		ПервоначальноеЗначениеСтр0 = РегламентированнаяОтчетность.ДополнитьСтроку(ПервоначальноеЗначениеСтр0, 10, " ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "НормПлаты", 10, ПервоначальноеЗначениеСтр0);

		Область.Значение = РезультатТекст;

		Расчет("Раздел2");

		Если Область.Значение = "Сжатый природный газ" Тогда
			мРаздел2.Области.ЕдИзмРаздел2.Значение = "Тысяча куб. метров";
		ИначеЕсли НЕ ПустаяСтрока(РезультатТекст) Тогда
			мРаздел2.Области.ЕдИзмРаздел2.Значение = "Тонна";
		Иначе
			мРаздел2.Области.ЕдИзмРаздел2.Значение = "";
		КонецЕсли;

		Модифицированность = Истина;

	ИначеЕсли Найти(ОбластьИмя, "ОПДВ") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мСтруктураПеременных.КатегорияРаздел2;
		Если ВвестиСтроку(ПервоначальноеЗначение,"Категория автомобильной техники", 10) Тогда
			Если ОбновитьПеременныеМодуля("КатегорияРаздел2", ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "ОПДВ", 10, ПервоначальноеЗначение);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(ОбластьИмя, "ОВСВ") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиКоэффициент("Раздел2", "ЭкологическийКлассРаздел2", "ОВСВ", 10, мЭкологическийКлассРаздел2, "Экологический класс автомобильной техники", "Выбор класса автомобильной техники", 10, 0);

	ИначеЕсли Найти(ОбластьИмя, "НомерВещества") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мСтруктураПеременных.НомерРаздел2;
		Если ВвестиСтроку(ПервоначальноеЗначение,"Введите №", 2) Тогда
			Если ОбновитьПеременныеМодуля("НомерРаздел2", ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", "НомерВещества", 2, ПервоначальноеЗначение);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	// Строка 100
	ИначеЕсли Найти(ОбластьИмя, "КЭЗ") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиКоэффициент("Раздел2", "КЭЗРаздел2", "КЭЗ", 4, мКЭЗ_Раздел1
		, "Выбор коэффициента"
		, "Введите коэф. экологической значимости", 3, 1);
	ИначеЕсли (ОбластьИмя = "ЕдИзмРаздел2") И (НЕ мАвтоВыборКодов) Тогда
		СтандартнаяОбработка = Ложь;

		Список = Новый СписокЗначений;
		Список.Добавить("Тонна", "Тонна");
		Список.Добавить("Тысяча куб. метров", "Тысяча куб. метров");

		// выдаем стандартный диалог
		СписокЭлемент = ВыбратьИзСписка(Список);

		Если СписокЭлемент <> Неопределено  Тогда

			Если Область.Значение = СписокЭлемент.Значение Тогда
				Область.Значение = "";
			Иначе
				Область.Значение = СписокЭлемент.Значение;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (ОбластьИмя = "П000030011000") И (НЕ мАвтоВыборКодов) Тогда
		СтандартнаяОбработка = Ложь;

		ПервоначальноеЗначение = Область.Значение;
		ПоисковаяТабл = мДопКоэфТЗ;
		РезультирующийПоиск = ПоисковаяТабл.Найти(Формат(ПервоначальноеЗначение), "Код");

		Если РезультирующийПоиск <> Неопределено Тогда
			Результат = ПоисковаяТабл.ВыбратьСтроку("Выбор коэффициента", РезультирующийПоиск);
		Иначе
			Результат = ПоисковаяТабл.ВыбратьСтроку("Выбор коэффициента");
		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Область.Значение = ?(ПустаяСтрока(Результат.Получить(0)), "", Результат.Получить(0));
		Расчет("Раздел2");

		Модифицированность = Истина;

	ИначеЕсли Найти(ОбластьИмя, "ДК") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиКоэффициент("Раздел2", "ДКРаздел2", "ДК", 3, мДополнительныйКоэф12
		, "Выбор коэффициента"
		, "Введите доп. коэффициент", 2, 1);

	ИначеЕсли Найти(ОбластьИмя, "КУИ") = 1 Тогда
		СтандартнаяОбработка = Ложь;

		ВвестиКоэффициент("Раздел2", "КУИРаздел2", "КУИ", 4, мКоэфИнфляция
		, "Выбор коэффициента"
		, "Введите коэффициент, учитывающий инфляцию", 3, 2);

	// Строка 090
	ИначеЕсли Найти(ОбластьИмя, "НормПлаты") = 1 Тогда

		СтандартнаяОбработка = Ложь;
		// Т.к. два одинковых коэф. 2.5, то объединим названия.
		ПоисковаяТабл = мНормативыПлатыРаздел2.Скопировать();
		ПоисковаяТабл[2].Название = ПоисковаяТабл[2].Название + " и керосин";
		ПоисковаяТабл.Удалить(3);
		ВвестиКоэффициент("Раздел2", "НормативРаздел2", "НормПлаты", 10, ПоисковаяТабл, "Введите норматив", "Выбор норматива", 2, 1);
	Иначе

		Для каждого Эл Из СоответствиеДанных Цикл
			Если Найти(ОбластьИмя, Эл.Ключ) > 0 Тогда
				СтандартнаяОбработка = Ложь;
				КлючСтруктуры = Эл.Значение;
				ПервоначальноеЗначение = мСтруктураПеременных[КлючСтруктуры];

				Если КлючСтруктуры = "СумПлаты" Тогда
					ЦелаяЧасть = 9;
					ДробнаяЧасть = 2;
				Иначе
					ЦелаяЧасть = 14;
					ДробнаяЧасть = 4;
				КонецЕсли;

				Если ВвестиЧисло(ПервоначальноеЗначение, "Введите значение", ЦелаяЧасть, ДробнаяЧасть) Тогда

					Если НЕ (КлючСтруктуры = "СумПлаты") Тогда
						ПервоначальноеЗначениеСтр = Формат(ПервоначальноеЗначение, "ЧГ=0");
						Если СтрДлина(ПервоначальноеЗначениеСтр) > 10 Тогда
							Сообщить("Введенное значение нельзя отобразить в отчете.", СтатусСообщения.Важное);
							Возврат;
						КонецЕсли;
					КонецЕсли;

					Если ОбновитьПеременныеМодуля(КлючСтруктуры, ПервоначальноеЗначение) Тогда
						Если КлючСтруктуры = "СумПлаты" Тогда
							РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", Эл.Ключ, 10, ПервоначальноеЗначение, Истина);
						Иначе
							ПервоначальноеЗначениеСтр = Формат(ПервоначальноеЗначение, "ЧГ=0");
							ПервоначальноеЗначениеСтр = РегламентированнаяОтчетность.ДополнитьСтроку(ПервоначальноеЗначениеСтр, 10, " ");
							РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2", Эл.Ключ, 10, ПервоначальноеЗначениеСтр);
						КонецЕсли;
						Модифицированность = Истина;
						Прервать; // Цикл
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	Расчет("Раздел2");

КонецПроцедуры // ПолеТабличногоДокументаРаздел2Выбор

// ПолеТабличногоДокументаТитульныйВыбор
//
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаТитульныйВыбор

// ПолеТабличногоДокументаРаздел3Выбор
//
Процедура ПолеТабличногоДокументаРаздел3Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	СоответствиеДанных = Новый Соответствие;
	СоответствиеДанных.Вставить("ОПДВ", "ПДВРаздел3"); // 050
	СоответствиеДанных.Вставить("ОВСВ", "ВСВРаздел3"); // 060
	СоответствиеДанных.Вставить("ОФактВыброс", "ФактВыбросРаздел3"); // 070
	СоответствиеДанных.Вставить("О2ПДВ", "ПДВОРаздел3"); // 080
	СоответствиеДанных.Вставить("ВыбросЛимит", "ВыбросЛимитРаздел3"); // 090
	СоответствиеДанных.Вставить("СверхЛим", "СверхЛимРаздел3"); // 100
	СоответствиеДанных.Вставить("СумПлВсего", "СумПлВсегоРаздел3"); // 170
	СоответствиеДанных.Вставить("СумПДВ", "СумПДВРаздел3"); // 180
	СоответствиеДанных.Вставить("ВПред", "ВПредРаздел3"); // 190
	СоответствиеДанных.Вставить("СУЛим", "СУЛимРаздел3"); // 200

	ОбластьИмя = Область.Имя;
	Если Найти(ОбластьИмя, "РегНомОбъект") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мСтруктураПеременных.РегНомРаздел3;
		Если ВвестиСтроку(ПервоначальноеЗначение,"Введите рег. номер объекта", 11) Тогда
			Если ОбновитьПеременныеМодуля("РегНомРаздел3", ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел3", "РегНомОбъект", 11, ПервоначальноеЗначение);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(ОбластьИмя, "РазрНаВыбросДата") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мСтруктураПеременных.РазрешениеДатаРаздел3;
		Если ВвестиДату(ПервоначальноеЗначение,"Разрешение на выброс, от", ЧастиДаты.Дата) Тогда
			Если ОбновитьПеременныеМодуля("РазрешениеДатаРаздел3", ПервоначальноеЗначение) Тогда
				стрВыбДата = Формат(ПервоначальноеЗначение, "ДФ=""ддММгггг""");
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел3", "РазрНаВыбросДата", 8, стрВыбДата);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(ОбластьИмя, "СрокДействияДата") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мСтруктураПеременных.СрокДатаРаздел3;
		Если ВвестиДату(ПервоначальноеЗначение,"Введите срок действия", ЧастиДаты.Дата) Тогда
			Если ОбновитьПеременныеМодуля("СрокДатаРаздел3", ПервоначальноеЗначение) Тогда
				стрВыбДата = Формат(ПервоначальноеЗначение, "ДФ=""ддММгггг""");
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел3", "СрокДействияДата", 8, стрВыбДата);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(ОбластьИмя, "НомерВещества") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = мСтруктураПеременных.НомерРаздел3;
		Если ВвестиСтроку(ПервоначальноеЗначение,"Введите № вещества", 2) Тогда
			Если ОбновитьПеременныеМодуля("НомерРаздел3", ПервоначальноеЗначение) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел3", "НомерВещества", 2, ПервоначальноеЗначение);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	// Строка 030

	ИначеЕсли (ОбластьИмя = "П000040004000") И (НЕ мАвтоВыборКодов) Тогда
		СтандартнаяОбработка = Ложь;
		ПервоначальноеЗначение = Область.Значение;

		ВредныеВеществаРаздел3 = мВредныеВеществаРаздел3.Скопировать();
		ВредныеВеществаРаздел3.Колонки.Удалить("Код");
		// ВредныеВеществаРаздел3.Колонки.Удалить("Строка110");
		// ВредныеВеществаРаздел3.Колонки.Удалить("Строка120");

		РезультирующийПоиск = ВредныеВеществаРаздел3.Найти(ПервоначальноеЗначение, "Название");

		Если РезультирующийПоиск <> Неопределено Тогда
			Результат = ВредныеВеществаРаздел3.ВыбратьСтроку("Выбор загрязняющего вещества", РезультирующийПоиск);
		Иначе
			Результат = ВредныеВеществаРаздел3.ВыбратьСтроку("Выбор загрязняющего вещества");
		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;

		РезультатТекст = Результат.Получить(0); // Название.

		Результат = мВредныеВеществаРаздел3.Найти(РезультатТекст, "Название");

		Строка110 = Результат.Получить(2); // Норматив для 110-й строки.
		Строка120 = Результат.Получить(3); // Норматив для 120-й строки.

		Область.Значение = ?(РезультатТекст = "Пустое значение", "", РезультатТекст);

		Если (СтрДлина(Строка110) > 10) Или (СтрДлина(Строка120) > 10) Тогда
			Сообщить("Данный показатель не может быть отражен в отчете. Используйте печатную форму.", СтатусСообщения.Информация);
			Строка110 = "";
			Строка120 = "";
		КонецЕсли;

		// Заполним нормативы: 110 и 120 строка.
		ПервоначальноеЗначениеСтр = Формат(Строка110, "ЧГ=0");
		ПервоначальноеЗначениеСтр = РегламентированнаяОтчетность.ДополнитьСтроку(ПервоначальноеЗначениеСтр, 10, " ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел3", "НормативПл", 10, ПервоначальноеЗначениеСтр);

		ПервоначальноеЗначениеСтр = Формат(Строка120, "ЧГ=0");
		ПервоначальноеЗначениеСтр = РегламентированнаяОтчетность.ДополнитьСтроку(ПервоначальноеЗначениеСтр, 10, " ");
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел3", "Пул", 10, ПервоначальноеЗначениеСтр);

		мСтруктураПеременных.НормативПлРаздел3 = ?(ПустаяСтрока(Строка110), 0, Число(Строка110));
		мСтруктураПеременных.ПулРаздел3 = ?(ПустаяСтрока(Строка120), 0, Число(Строка120));

		Модифицированность = Истина;

	// Строка 140
	ИначеЕсли Найти(ОбластьИмя, "КЭЗ") > 0 Тогда
		СтандартнаяОбработка = Ложь;

		ВвестиКоэффициент("Раздел3", "КЭЗРаздел3", "КЭЗ", 4, мКЭЗ_ВодныеОбъекты
		, "Выбор коэффициента"
		, "Введите коэф. экологической значимости", 3, 2);

	ИначеЕсли (ОбластьИмя = "П000040015000") И (НЕ мАвтоВыборКодов) Тогда
		СтандартнаяОбработка = Ложь;

		ПервоначальноеЗначение = Область.Значение;
		ПоисковаяТабл = мДопКоэфТЗ;
		РезультирующийПоиск = ПоисковаяТабл.Найти(Формат(ПервоначальноеЗначение), "Код");

		Если РезультирующийПоиск <> Неопределено Тогда
			Результат = ПоисковаяТабл.ВыбратьСтроку("Выбор коэффициента", РезультирующийПоиск);
		Иначе
			Результат = ПоисковаяТабл.ВыбратьСтроку("Выбор коэффициента");
		КонецЕсли;

		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Область.Значение = ?(ПустаяСтрока(Результат.Получить(0)), "", Результат.Получить(0));
		Расчет("Раздел3");

		Модифицированность = Истина;

	ИначеЕсли Найти(ОбластьИмя, "КУИ") = 1 Тогда
		СтандартнаяОбработка = Ложь;

		ВвестиКоэффициент("Раздел3", "КУИРаздел3", "КУИ", 4, мКоэфИнфляция
		, "Выбор коэффициента"
		, "Введите коэффициент, учитывающий инфляцию", 3, 2);

	// Строка 110
	ИначеЕсли Найти(ОбластьИмя, "НормативПл") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиНорматив("Раздел3", "НормативПлРаздел3", "НормативПл");

	// Строка 120
	ИначеЕсли Найти(ОбластьИмя, "Пул") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиНорматив("Раздел3", "ПулРаздел3", "Пул");

	// Строка 130
	ИначеЕсли Найти(ОбластьИмя, "СверхУстЛим") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиНорматив("Раздел3", "СверхУстЛимРаздел3", "СверхУстЛим");

	Иначе

		Для каждого Эл Из СоответствиеДанных Цикл
			Если Найти(ОбластьИмя, Эл.Ключ) > 0 Тогда
				СтандартнаяОбработка = Ложь;
				КлючСтруктуры = Эл.Значение;
				ПервоначальноеЗначение = мСтруктураПеременных[КлючСтруктуры];
				ПоказательСумма = Ложь;
				Если КлючСтруктуры = "СумПлВсегоРаздел3" Или КлючСтруктуры = "СумПДВРаздел3"
				 Или КлючСтруктуры = "ВПредРаздел3" Или КлючСтруктуры = "СУЛимРаздел3"  Тогда
					ПоказательСумма = Истина;
				КонецЕсли;

				Если ПоказательСумма Тогда
					ЦелаяЧасть = 9;
					ДробнаяЧасть = 2;
				Иначе
					ЦелаяЧасть = 14;
					ДробнаяЧасть = 4;
				КонецЕсли;

				Если ВвестиЧисло(ПервоначальноеЗначение, "Введите значение", ЦелаяЧасть, ДробнаяЧасть) Тогда

					Если НЕ ПоказательСумма Тогда
						ПервоначальноеЗначениеСтр = Формат(ПервоначальноеЗначение, "ЧГ=0");
						Если СтрДлина(ПервоначальноеЗначениеСтр) > 10 Тогда
							Сообщить("Введенное значение нельзя отобразить в отчете.", СтатусСообщения.Важное);
							Возврат;
						КонецЕсли;
					КонецЕсли;

					Если ОбновитьПеременныеМодуля(КлючСтруктуры, ПервоначальноеЗначение) Тогда
						Если ПоказательСумма Тогда
							РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел3", Эл.Ключ, 10, ПервоначальноеЗначение, Истина);
						Иначе
							ВывестиЗначениеВКвадратики10("Раздел3", Эл.Ключ, 10, ПервоначальноеЗначение);
						КонецЕсли;
						Модифицированность = Истина;
						Прервать; // Цикл
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	Расчет("Раздел3");
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел3Выбор

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСоставПоказателей = "СоставПоказателей2006Кв3";

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

мКодыБюджетнойКлассификации2005 = Новый ТаблицаЗначений;
мКодыБюджетнойКлассификации2005.Колонки.Добавить("Код",,, 18);
мКодыБюджетнойКлассификации2005.Колонки.Добавить("Название",,, 50);

мРасположениеОбъекта = Новый ТаблицаЗначений;
мРасположениеОбъекта.Колонки.Добавить("Код",,, 4);
мРасположениеОбъекта.Колонки.Добавить("Название",,, 90);

мДополнительныйКоэф12 = Новый ТаблицаЗначений;
мДополнительныйКоэф12.Колонки.Добавить("Код",,"Значение", 9);
мДополнительныйКоэф12.Колонки.Добавить("Название",,, 90);

мКЭЗ_Раздел1 = Новый ТаблицаЗначений;
мКЭЗ_Раздел1.Колонки.Добавить("Код", , "Значение", 9);
мКЭЗ_Раздел1.Колонки.Добавить("Название", , "Экономические районы РФ", 90);

мКЭЗ_Раздел4 = Новый ТаблицаЗначений;
мКЭЗ_Раздел4.Колонки.Добавить("Код", , "Значение", 9);
мКЭЗ_Раздел4.Колонки.Добавить("Название", , "Экономические районы РФ", 90);

мДопКоэфТЗ = Новый ТаблицаЗначений;
мДопКоэфТЗ.Колонки.Добавить("Код",, "Значение", 9);
мДопКоэфТЗ.Колонки.Добавить("Название",,, 90);

мКЭЗ_ВодныеОбъекты = Новый ТаблицаЗначений;
мКЭЗ_ВодныеОбъекты.Колонки.Добавить("Код",, "Значение", 9);
мКЭЗ_ВодныеОбъекты.Колонки.Добавить("Название",, "Бассейны морей и рек", 90);

мКлассыОпасности = Новый ТаблицаЗначений;
мКлассыОпасности.Колонки.Добавить("Код",,"Класс", 6);
мКлассыОпасности.Колонки.Добавить("Название",,, 90);

мЭкологическийКлассРаздел2 = Новый ТаблицаЗначений;
мЭкологическийКлассРаздел2.Колонки.Добавить("Код",,"Класс", 6);
мЭкологическийКлассРаздел2.Колонки.Добавить("Название",,, 90);

мНормативыПлатыРаздел2 = Новый ТаблицаЗначений;
мНормативыПлатыРаздел2.Колонки.Добавить("Код",,"Норматив", 9);
мНормативыПлатыРаздел2.Колонки.Добавить("Название",,"Вид топлива", 90);

мВредныеВеществаРаздел1 = Новый ТаблицаЗначений;
мВредныеВеществаРаздел1.Колонки.Добавить("Код");
мВредныеВеществаРаздел1.Колонки.Добавить("Название",,"Наименование загрязняющих веществ", 90);
мВредныеВеществаРаздел1.Колонки.Добавить("Строка110",, "Норматив ПУДНВ", 18);
мВредныеВеществаРаздел1.Колонки.Добавить("Строка120",, "Норматив ПУЛВ", 18);

мВредныеВеществаРаздел3 = Новый ТаблицаЗначений;
мВредныеВеществаРаздел3.Колонки.Добавить("Код");
мВредныеВеществаРаздел3.Колонки.Добавить("Название",,"Наименование загрязняющих веществ", 90);
мВредныеВеществаРаздел3.Колонки.Добавить("Строка110",, "Норматив ПУДНВ", 12);
мВредныеВеществаРаздел3.Колонки.Добавить("Строка120",, "Норматив ПУЛВ", 12);

мФКТОРаздел4 = Новый ТаблицаЗначений;
мФКТОРаздел4.Колонки.Добавить("Код",,, 15);
мФКТОРаздел4.Колонки.Добавить("Название",, "Наименование", 90);

мКоэфИнфляция = Новый ТаблицаЗначений;
мКоэфИнфляция.Колонки.Добавить("Код",,, 9);
мКоэфИнфляция.Колонки.Добавить("Название",, "Наименование", 90);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);


// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы;
//    - таблица значений, содержит данные строк многострочного блока показателей страницы.
//
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповДата      = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);

ОписаниеТиповЧисло5 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5, 0);
ОписаниеТиповЧисло15 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 0);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;

мСтруктураМногострочныхРазделов = Новый Структура;

ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;

ТаблицаСтраницыРасчет = ТаблицаСтраницыРаздела.Скопировать();
ТаблицаСтраницыРаздел1 = ТаблицаСтраницыРаздела.Скопировать();
ТаблицаСтраницыРаздел2 = ТаблицаСтраницыРаздела.Скопировать();
ТаблицаСтраницыРаздел3 = ТаблицаСтраницыРаздела.Скопировать();
ТаблицаСтраницыРаздел4 = ТаблицаСтраницыРаздела.Скопировать();

мСтруктураМногостраничныхРазделов.Вставить("Расчет", ТаблицаСтраницыРасчет);
мСтруктураМногостраничныхРазделов.Вставить("Раздел1", ТаблицаСтраницыРаздел1);
мСтруктураМногостраничныхРазделов.Вставить("Раздел2", ТаблицаСтраницыРаздел2);
мСтруктураМногостраничныхРазделов.Вставить("Раздел3", ТаблицаСтраницыРаздел3);
мСтруктураМногостраничныхРазделов.Вставить("Раздел4", ТаблицаСтраницыРаздел4);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "20/03/2006"; // Первая версия

// Код отчета, равен КНД
мКодОтчета   = 1110012;

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;
