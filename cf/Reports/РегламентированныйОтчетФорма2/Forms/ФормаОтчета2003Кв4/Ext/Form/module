////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
Перем мФормаОтчета;

// переменный для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС;

// хранят имена многострочных разделов
Перем мИдГруппы1;
Перем мИдГруппы2;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

// хранит код отчета по КНД
Перем мКодОтчета;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы Экспорт;

Перем РежимОтладки;
Перем ОбязРазделов;
Перем ТаблицаСообщений Экспорт;
Перем ВариантыФорматовВыгрузки;
Перем КНД;
Перем НаименованиеОтчетаДляВыгрузки;

Перем мПечатныеФормы Экспорт;

Перем СпП Экспорт;

Перем мСохранятьРасшифровку Экспорт;

Перем мВПрограммеИзмененаОрганизация;

Перем мБезКонсолидации Экспорт;

// Переменная ссылка на справочник "Организации" для подставки в процедуре _ДобавитьСтрокуРасшифровки.
// Расшифровка для организации ОргРасшифровка. Через параметр в процедуру _ДобавитьСтрокуРасшифровки. не передается,
// т.к. слишком много уже имеется параметров, тяжело контролировать.
// Может принимать значение Неопределено, в этом случае в механизмах расшифровки будет браться организация из реквизита объекта отчета.
Перем мОргРасшифровка Экспорт;

// Переменная используется для хранения показателей в режиме сбора отчета за несколько организаций.
// Предстовляет собой таблицу значений. Наполнение происходит в процедуре УстановитьЗначениеПоказателя,
// в том случае, если отчет формируется за несколько организаций.
Перем мТаблицаИтоговыхПоказателейПриКонсолидации;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ДО(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // ДО()

Функция КО(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // КО()

// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
// первого параметра функции, с кредита счета, указанного в качестве второго 
// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот в дебет счета;
//  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот с кредита счета.
//
// Возвращаемое значение:
//  Число        - сумма перекрестного оборота.
//
Функция ОБ(СчетД, СчетК)

	Перем Итог;

	Итог = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);

	Возврат Итог;

КонецФункции // ОБ()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция складывает числа по указанной колонке таблицы значений,
// содержащей строки многострочной части, предварительно округляя
// их по формату представления, заданному в форме отчета.
//
// Параметры:
//  СтруктураГруппы - переменная типа ТаблицаЗначений, содержащая
//                    строки какой-либо многострочной части
//  ИмяКолонки      - строка, имя колонки таблицы значений, для
//                    которой необходимо выполнить сложение.
//
// Примечание:
//  Функция использует функцию  ОкруглитьЧислоПоФормату().
//
Функция ИтогПоКолонке(СтруктураГруппы, ИмяКолонки)

	СуммаИтог = 0;

	Для Каждого Стр Из СтруктураГруппы Цикл
		СуммаИтог = СуммаИтог + ОкруглитьЧислоПоФормату(Стр[ИмяКолонки]);
	КонецЦикла;

	Возврат СуммаИтог;

КонецФункции // ИтогПоКолонке()

// Функция собирает значения редактирукемых ячеек +табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураПоказателейВнутрСвязи = Новый Структура;
	//СтруктураПоказателейВнутрСвязи.Вставить("П0000Б0051000");
	//СтруктураПоказателейВнутрСвязи.Вставить("П0000В0026000");

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		//Если ТекущаяОбласть.Защита Тогда
		//	Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	// Период для показа в шапке отчета
	//ПериодОтчета = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'");
	Если НачалоМесяца(мДатаКонцаПериодаОтчета) = мДатаНачалаПериодаОтчета Тогда
		СтрПериод = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	Иначе
		СтрПериод = "Январь - " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	КонецЕсли;  

	ПериодОтчета = " за " + СтрПериод;

	// Период в заголовке отчета
	мФормаОтчета.Области.ПериодОтчета.Значение = ПериодОтчета;

	// Период в списке кодов в форме отчета
	мФормаОтчета.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	мФормаОтчета.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
	мФормаОтчета.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд'");

	// Период в заголовке отчета
	// Для показа периода в заголовке берется текст из заголовка основной формы
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (на " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.)";

КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		//Сведения.Добавить("", "КППЮЛ"); // КПП

		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 

		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКВЭД");
		Сведения.Добавить("", "ОснВидДеят");
		Сведения.Добавить("", "ОКОПФ");
		Сведения.Добавить("", "ОКФС");
		Сведения.Добавить("", "ФормСобств");
		Сведения.Добавить("", "КодОКОНХ");

		Сведения.Добавить("", "ОргПравФорм");

	КонецЕсли;

	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		// Инициализируем переменные	
		ИННЮЛ = ""; // ИНН
		//КППЮЛ = ""; // КПП

		НаимЮЛПол = ""; // Полное наименование 

		ОКПО = "";
		ОКВЭД = "";

		ОснВидДеят = "";

		ФормСобств = "";

		ОКОПФ = "";

		ОКФС = "";

		КодОКОНХ = "";

		ОргПравФорм1 = "";

	КонецЕсли;

	ФИОРук = ""; // ФИО руководителя
	ФИОБух = ""; // ФИО бухгалтера

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		// Получаем данные
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		//ОргСведения.Свойство("КППЮЛ", КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОКПО", ОКПО);
		ОргСведения.Свойство("ОКВЭД", ОКВЭД);
		ОргСведения.Свойство("ОКОПФ", ОКОПФ);
		ОргСведения.Свойство("ОКФС", ОКФС);
		ОргСведения.Свойство("ОснВидДеят", ОснВидДеят);
		ОргСведения.Свойство("ФормСобств", ФормСобств);
		ОргСведения.Свойство("КодОКОНХ", КодОКОНХ);
		ОргСведения.Свойство("ОргПравФорм", ОргПравФорм1);

	КонецЕсли;

	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);

	Если ВПрограммеИзмененаДатаПодписи Тогда

		// Обновим только то, что зависит от даты подписи и выйдем
		мФормаОтчета.Области.ОргДиректор.Значение  = ФИОРук;
		мФормаОтчета.Области.ОргБухгалтер.Значение = ФИОБух;

		Возврат;

	КонецЕсли;

	// Анализируем переменную ИННЮЛ, в которой хранится идентификационный
	// номер налогоплательщика, на предмет пустого значения.

	Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
		ИННЮЛ = "";
	КонецЕсли;

	мИННЮЛ = ИННЮЛ;

	мФормаОтчета.Области.ОргИНН.Значение = мИННЮЛ;

	// Работаем с названием ЮЛ
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргНазв.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		мФормаОтчета.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;

	// Работаем с кодом ОКПО
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргКодОКПО.Значение)) Тогда

		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			мФормаОтчета.Области.ОргКодОКПО.Значение  = "";
		Иначе
			мФормаОтчета.Области.ОргКодОКПО.Значение  = ОКПО;
		КонецЕсли;

	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргКодОКВЭД.Значение)) Тогда
		мФормаОтчета.Области.ОргКодОКВЭД.Значение = ОКВЭД;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргФорма.Значение)) Тогда
		мФормаОтчета.Области.ОргФорма.Значение = ОргПравФорм1;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргОтрасль.Значение)) Тогда
		мФормаОтчета.Области.ОргОтрасль.Значение = ОснВидДеят;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргКодОКОПФ.Значение)) Тогда
		мФормаОтчета.Области.ОргКодОКОПФ.Значение = ОКОПФ;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргКодОКФС.Значение)) Тогда
		мФормаОтчета.Области.ОргКодОКФС.Значение = ОКФС;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргФормаСобств.Значение)) Тогда
		мФормаОтчета.Области.ОргФормаСобств.Значение = ФормСобств;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(мФормаОтчета.Области.ОргДиректор.Значение)) Тогда
		мФормаОтчета.Области.ОргДиректор.Значение  = ФИОРук;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(мФормаОтчета.Области.ОргБухгалтер.Значение)) Тогда
		мФормаОтчета.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить("Форма №2: при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить("Форма №2: при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить("Форма №2: при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";

	КонецЕсли;

	ПоказатьКодЕИ();

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе
				// определяем колво строк многострочного раздела
				// и прменяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ФормаОтчета";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку()
	Перем СтруктураГруппы;

	ТекТабличноеПоле = мФормаОтчета;

	// Выполним проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана добавляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрок;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// Строки многострочного раздела должны входят в именованную секцию
	// для предотвращения вывода на печать пустых строк.
	// Определим именованую секцию, куда входит добавляемая строка.
	ИмяПервойЯчейкиПервойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + 1;
	// область первой ячейки первой строки многострочного раздела
	ОбластьЯчейки               = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПервойСтроки];
	// номер первой строки именованной секции
	НомерВерхЯчейкиСекции       = ОбластьЯчейки.Верх;
	// область именованной секции
	ОбластьИменованСекции       = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиОбласти, );
	ИмяСекции                   = ОбластьИменованСекции.Имя;
	// предварительно очищаем прежнюю секцию, так как она смещается вниз вместе с добавляемой строкой
	ОбластьИменованСекции.Имя   = "";

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрок;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + (КолСтрок + 1);

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			ОбластьЯчейки.Текст = Формат(НовыйПорядковыйНомер, "ЧЦ = 3") + ".";

		КонецЕсли;
	КонецЦикла;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + (КолСтрок + 1);

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// Установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// Добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	Если Лев(ИмяСекции, 1) = "П" Тогда
		// Имеется именованная секция многострочного раздела.
		// Добавляем исходную строку в секцию табличного документа с именем ИмяСекции.
		ОбластьИменованСекции     = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиНовойОбласти, );
		ОбластьИменованСекции.Имя = ИмяСекции;

		// Далее проверим вхождение именованной секции многострочного раздела
		// как составляющая часть в другие секции табличного документа.
		// В случае обнаржения такого вхождения расширяем обнаруженныую секцию
		// до добавленной строки. Данный механизм применяем в силу того, что 
		// при добавлении новой строки вышестоящая секция автоматически не
		// расширяется, и вместо этого получаем пересекающиеся секции.
		Для каждого Секция Из ТекТабличноеПоле.Области Цикл

			Если Секция.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ((Секция.Верх <= НомерВерхЯчейкиСекции) И (Секция.Низ >= НомерНижнЯчейкиОбласти)) Тогда
				Продолжить;
			КонецЕсли;

			Если Секция.Низ < НомерНижнЯчейкиНовойОбласти Тогда
				// Секция, куда входила именованная секция многострочного раздела
				// до добавления строки, подлежит расширению (включению в нее
				// добавленной строки).
				НомерВерхнейСтрокиСекции = Секция.Верх;
				ИмяСекции                = Секция.Имя;

				// удаляем прежнюю секцию, куда входила именованная секция многострочного раздела
				Секция.Имя      = "";
				// создаем новую секцию, охватывающую добавленную строку
				НоваяСекция     = ТекТабличноеПоле.Область(НомерВерхнейСтрокиСекции, , НомерНижнЯчейкиНовойОбласти, );
				НоваяСекция.Имя = ИмяСекции;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли; 

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	ТекТабличноеПоле = мФормаОтчета;


	// Выполним проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1)); 
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомУдаляемойСтроки;

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		// Определим область удаляемой строки
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// непосредственно удаляем область строки табличного документа
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + НСтр;
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + (НСтр - 1);

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если НЕ(ОбластьСдвинутойЯчейки.СодержитЗначение) Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Формат(Макс(СтарыйНомер - 1, 0), "ЧЦ = 3") + ".";
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Формат(ПервыйНомерВГруппе + НомерСтрокиВТаблице, "ЧЦ = 3") + ".";

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + НомТекущейСтроки;

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
	         |Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	Если ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для обоих многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = мФормаОтчета;

		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];

			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки    = Колонка.Имя;
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейки.СодержитЗначение Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = мФормаОтчета;

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным (по шаблону) кол-вом,
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// Строки многострочного раздела должны входят в именованную секцию
			// для предотвращения вывода на печать пустых строк.
			// Определим именованую секцию, куда входит добавляемая строка.
			ИмяПервойЯчейкиПервойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + 1;
			// область первой ячейки первой строки многострочного раздела
			ОбластьЯчейки               = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПервойСтроки];
			// номер первой строки именованной секции
			НомерВерхЯчейкиСекции       = ОбластьЯчейки.Верх;
			// область именованной секции
			ОбластьИменованСекции       = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиОбласти, );
			ИмяСекции                   = ОбластьИменованСекции.Имя;
			// предварительно очищаем прежнюю секцию, так как она смещается вниз вместе с добавляемой строкой
			ОбластьИменованСекции.Имя   = "";

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядековый номер последней строки перед вставкой
					ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Формат(НовыйПорядковыйНомер, "ЧЦ = 3") + ".";
				КонецЕсли;

			КонецЦикла;

			Если Лев(ИмяСекции, 1) = "П" Тогда
				// Имеется именованная секция многострочного раздела.
				// Добавляем исходную строку в секцию табличного документа с именем ИмяСекции.
				ОбластьИменованСекции     = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиНовойОбласти, );
				ОбластьИменованСекции.Имя = ИмяСекции;
				
				// Далее проверим вхождение именованной секции многострочного раздела
				// как составляющая часть в другие секции табличного документа.
				// В случае обнаржения такого вхождения расширяем обнаруженныую секцию
				// до добавленной строки. Данный механизм применяем в силу того, что 
				// при добавлении новой строки вышестоящая секция автоматически не
				// расширяется, и вместо этого получаем пересекающиеся секции.
				Для каждого Секция Из ТекТабличноеПоле.Области Цикл
					
					Если Секция.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
						Продолжить;
					КонецЕсли;
					
					Если НЕ ((Секция.Верх <= НомерВерхЯчейкиСекции) И (Секция.Низ >= НомерНижнЯчейкиОбласти)) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Секция.Низ < НомерНижнЯчейкиНовойОбласти Тогда
						// Секция, куда входила именованная секция многострочного раздела
						// до добавления строки, подлежит расширению (включению в нее
						// добавленной строки).
						НомерВерхнейСтрокиСекции = Секция.Верх;
						ИмяСекции                = Секция.Имя;
						
						// удаляем прежнюю секцию, куда входила именованная секция многострочного раздела
						Секция.Имя      = "";
						// создаем новую секцию, охватывающую добавленную строку
						НоваяСекция     = ТекТабличноеПоле.Область(НомерВерхнейСтрокиСекции, , НомерНижнЯчейкиНовойОбласти, );
						НоваяСекция.Имя = ИмяСекции;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли; 

		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";

	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ФормаОтчета";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//   ЗаписьВОтчет       - Булево, Истина, осуществлять запись показателей в отчет, Ложь - ничего не делать.
//                        Необходимо для режима консолидации отчета.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя, ЗаписьВОтчет = Ложь)

	// В случае, отчет заполняется с использованием режима консолидации, тогда анализируем флаг ЗаписьВОтчет и мБезКонсолидации.
	Если (НЕ ЗаписьВОтчет) И (НЕ мБезКонсолидации) Тогда
		// Добавим показатель в таблицу итогового расчета при заполнении отчета за несколько организаций.
		НовСтр = мТаблицаИтоговыхПоказателейПриКонсолидации.Добавить();
		НовСтр.ИмяПоказателя = ИмяПоказателя;
		НовСтр.Сумма = ЗначениеПоказателя;

		Возврат;

	КонецЕсли;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("ФормаОтчета");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

			// В случае, если предлагаемое значение не числовое и второй тип (с корректировкой)
			// тогда принимаем предложенное значение за 0.
			Если (НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя)) И (ВариантЗаполнения = 2) Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя) Тогда
				НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;
			КонецЕсли;

			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	мФормаОтчета.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)
	// Список ячеек, очищать которые не нужно
	Перем СписокПоказателейНеПодлежащихОчистке;

	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргОтрасль");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКВЭД");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргФорма");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКОПФ");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргФормаСобств");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКФС");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДиректор");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргБухгалтер");

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// УдалитьМногострочнуюЧасть
//
Процедура УдалитьМногострочнуюЧасть()
	Перем ИсходноеКоличествоСтрокГруппы;
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

		ИмяГруппы        = ЭлементСтруктуры.Ключ;
		СтруктураГруппы  = ЭлементСтруктуры.Значение;
		ТекТабличноеПоле = мФормаОтчета;

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = СтруктураГруппы.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.

			НСтр = СтруктураГруппы.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
				
				ИмяПервойКолонки = СтруктураГруппы.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				// Определим область удаляемой строки
				УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// непосредственно удаляем область строки табличного документа
				ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

				// удаляем из структуры многострочного раздела соответствующую строку
				СтруктураГруппы.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

КонецПроцедуры // УдалитьМногострочнуюЧасть

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	ТекТабличноеПоле = мФормаОтчета;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	// Далее выясним, есть ли добавленные в многострочный раздел дополнительные строки.
	// При наличии таких строк удаляем их.
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

		ИмяГруппы        = ЭлементСтруктуры.Ключ;
		СтруктураГруппы  = ЭлементСтруктуры.Значение;
		ТекТабличноеПоле = мФормаОтчета;

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = СтруктураГруппы.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.

			НСтр = СтруктураГруппы.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
				
				ИмяПервойКолонки = СтруктураГруппы.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				// Определим область удаляемой строки
				УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// непосредственно удаляем область строки табличного документа
				ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

				// удаляем из структуры многострочного раздела соответствующую строку
				СтруктураГруппы.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	// Очищаем расшифровку.
	СпП.Очистить();

	// устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // Очистить()

Процедура ОсновнаяПанельПриСменеСтраницы(а, б) Экспорт
КонецПроцедуры

// Процедура выводит на печать заполненные строки секции (именованных строк)
// табличного документа с заданным именем.
//
// Параметры
//  ПечатнаяФорма  – табличный документ – печатная форма;
//  ИмяСекции      – строка – имя выводимой на печать секции;
//  НоваяСтраница  – булево – признак начала новой строки.
//
Процедура ВывестиНепустыеСтроки(ПечатнаяФорма, ИмяСекции, НоваяСтраница = Ложь)

	ОбластьСекции = мФормаОтчета.ПолучитьОбласть(ИмяСекции);

	ВыведенЗаголовокСекции = Ложь;
	Для каждого Строка Из ОбластьСекции.Области Цикл

		Если Строка.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			Продолжить;
		КонецЕсли;

		Если Строка.Имя = ИмяСекции Тогда
			Продолжить;
		КонецЕсли;

		ОбластьСтроки = мФормаОтчета.ПолучитьОбласть(Строка.Имя);

		ЕстьЗаполненныеЯчейки = Ложь;

		Для каждого Ячейка Из ОбластьСтроки.Области Цикл

			Если Ячейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Продолжить;
			КонецЕсли;

			Если Не Ячейка.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;

			ЗначениеЯчейки = Ячейка.Значение;

			Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				ЕстьЗаполненныеЯчейки = Истина;

				Прервать;
			КонецЕсли; 

		КонецЦикла;

		Если ЕстьЗаполненныеЯчейки Тогда
			// Выводим заголовок секции
			Если Не ВыведенЗаголовокСекции Тогда

				// Сначала проверим, передан ли признак начала новой строки
				Если НоваяСтраница Тогда
					ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;

				Если мФормаОтчета.Области.Найти("Заголовок" + ИмяСекции) <> Неопределено Тогда
					ОбластьЗаголовокСекции = мФормаОтчета.ПолучитьОбласть("Заголовок" + ИмяСекции);
					ПечатнаяФорма.Вывести(ОбластьЗаголовокСекции);
				КонецЕсли;

				ВыведенЗаголовокСекции = Истина;
			КонецЕсли;

			ПечатнаяФорма.Вывести(ОбластьСтроки);
		КонецЕсли;

	КонецЦикла;

	// Выводим подвал секции
	Если ВыведенЗаголовокСекции Тогда
		Если мФормаОтчета.Области.Найти("Подвал" + ИмяСекции) <> Неопределено Тогда
			ОбластьЗаголовокСекции = мФормаОтчета.ПолучитьОбласть("Подвал" + ИмяСекции);
			ПечатнаяФорма.Вывести(ОбластьЗаголовокСекции);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВывестиНепустыеСтроки()

Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = "Форма №2";
	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = Истина;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	
	Для Сч = 1 По ПечФорма.ВысотаТаблицы Цикл
		
		Если ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0).КоличествоСтраниц() > 1 Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы Тогда
				НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы = Ложь;
			КонецЕсли;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		НовТаблДок = Новый ТабличныйДокумент();
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		Если НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы Тогда
			НовТаблДок.Область(НовТаблДок.ВысотаТаблицы, 0, НовТаблДок.ВысотаТаблицы, 0).КонецСтраницы = Ложь;
		КонецЕсли;
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ЧтоИскать <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяТабличногоПоля, НаименованиеЛиста, ЧтоИскать", "ПолеТабличногоДокументаФормаОтчета", "Форма №2", ЧтоИскать);
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПоиска);
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();

	ПечатнаяФорма = Новый ТабличныйДокумент();

	ОбластьПечати = мФормаОтчета.ПолучитьОбласть("Шапка");

	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа1");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа2");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа3");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа4");
	ВывестиНепустыеСтроки(ПечатнаяФорма, "Группа5", Истина);

	ОбластьПечати = мФормаОтчета.ПолучитьОбласть("Подвал");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;

	РазбитьПечатнуюФорму(ПечатнаяФорма);

	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);


КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.Комментарий                = КомментарийОбщий;
	Если Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		мСохраненныйДок.КодИМНС = Организация.КодИМНС;
	КонецЕсли;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	//Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

	//	ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
	//	ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

	//	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	//	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	//КонецЦикла;

	//ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаФормаОтчета";
	//ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекТабличноеПоле        = мФормаОтчета;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	СписокСохранения.Вставить("СохранятьРасшифровку", мСохранятьРасшифровку);

	Если мСохранятьРасшифровку = Истина Тогда
		СписокСохранения.Вставить("Расшифровка", СпП);
	КонецЕсли;

	// Сохраним список организаций, по которому необходимо собирать отчет.
	СписокСохранения.Вставить("ГруппаОрганизаций", мГруппаОрганизаций);

	// вствляем флаг, регулирующий порядок формирования показателя выгрузки ВарФОтч
	СписокСохранения.Вставить("флОтключитьАвтоматическоеУправлениеВариантами", мОтключитьАвтоматическоеУправлениеВариантами);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Расшифровка;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	КомментарийОбщий 		 = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		КонецЦикла;
	КонецЦикла;

	СписокСохранения.Свойство("СохранятьРасшифровку", мСохранятьРасшифровку);
	Если мСохранятьРасшифровку = Неопределено Тогда
		мСохранятьРасшифровку = Истина;
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.ПодменюРасшифровка.Кнопки.КнопкаСохранятьРасшифровку.Пометка = мСохранятьРасшифровку;

	СписокСохранения.Свойство("Расшифровка", Расшифровка);
	Если Расшифровка <> Неопределено Тогда
		СпП = Расшифровка;
	КонецЕсли;

	СписокСохранения.Свойство("ГруппаОрганизаций", мГруппаОрганизаций);
	Если мГруппаОрганизаций = Неопределено Тогда
		мГруппаОрганизаций = Новый СписокЗначений;
	КонецЕсли;

	// вствляем флаг, регулирующий порядок формирования показателя выгрузки ВарФОтч
	СписокСохранения.Свойство("флОтключитьАвтоматическоеУправлениеВариантами", мОтключитьАвтоматическоеУправлениеВариантами);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	УстановитьФорматВывода();
	Расчет();

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()
	Перем СтруктураГруппы1;
	Перем СтруктураГруппы2;

	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, СтруктураГруппы2);

	// строка 029 "Валовая прибыль"
	мФормаОтчета.Области.П000010002903.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001003.Значение) + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010002003.Значение);
	мФормаОтчета.Области.П000010002904.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001004.Значение) + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010002004.Значение);

	// строка 050 "Прибыль (убыток) от продаж"
	мФормаОтчета.Области.П000010005003.Значение = мФормаОтчета.Области.П000010002903.Значение + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010003003.Значение) + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010004003.Значение);
	
	мФормаОтчета.Области.П000010005004.Значение = мФормаОтчета.Области.П000010002904.Значение + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010003004.Значение) + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010004004.Значение);

	// строка 140 "Прибыль (убыток) до налогообложения"
	мФормаОтчета.Области.П000010014003.Значение = мФормаОтчета.Области.П000010005003.Значение                          + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010006003.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010007003.Значение) + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010008003.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010009003.Значение) + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010010003.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010012003.Значение) + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010013003.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010013503.Значение) + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010013603.Значение);

	мФормаОтчета.Области.П000010014004.Значение = мФормаОтчета.Области.П000010005004.Значение                          + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010006004.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010007004.Значение) + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010008004.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010009004.Значение) + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010010004.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010012004.Значение) + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010013004.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010013504.Значение) + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010013604.Значение);

	// строка 190 "Чистая прибыль (убыток) отчетного периода"
	мФормаОтчета.Области.П000010019003.Значение = мФормаОтчета.Области.П000010014003.Значение
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010014103.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010014203.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010015003.Значение)
	                                            + ИтогПоКолонке(СтруктураГруппы1, "П000010018003");

	мФормаОтчета.Области.П000010019004.Значение = мФормаОтчета.Области.П000010014004.Значение
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010014104.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010014204.Значение)
	                                            + ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010015004.Значение)
	                                            + ИтогПоКолонке(СтруктураГруппы1, "П000010018004");
	

КонецПроцедуры // Расчет()

// Создает и заполняет дополнительные строки многострочного
// раздела формы. Вызывается при автозаполнении отчета по
// данным учета.
// 
// Параметры
//  ДанныеДопСтрок  – таблица значений – содержит данные 
//                 для заполнения дополнительных строк.
//  ИмяГруппы       - строка - идентификаторы многострочной
//                 группы, дополнительные строки которой создаются
//
Процедура АвтозаполнениеДопСтрок(ДанныеДопСтрок, ИмяГруппы)
	Перем СтруктураГруппы;

	Если ИмяГруппы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	СтруктураГруппы = ДанныеДопСтрок.Скопировать();
	ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

КонецПроцедуры // АвтозаполнениеДопСтрок()

// ОбработчикИзменения
//
Процедура ОбработчикИзменения()

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	Расчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ОбработчикИзменения

Функция ПолучитьНазванияОрганизацийСтрокой()
	Результат = Организация.Наименование;
	Если мБезКонсолидации Тогда
		Возврат Результат;
	Иначе
		Для каждого Зап Из мГруппаОрганизаций Цикл
			Результат = Результат + "; " + Зап.Значение.Наименование;
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
КонецФункции

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто() Экспорт
	Перем СтруктураГруппы1;
	Перем ТаблДанныхДопСтрокОбщ;

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);

	////////
	// *** Здесь необходимо написать алгоритм заполнения отчета.***
	//
	// Для присвоения показателям отчета вычисленного значения  необходимо
	// использовать процедуру
	//
	//     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).
	//
	////////
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 

	УдалитьМногострочнуюЧасть();
	// Очищаем расшифровку.
	СпП.Очистить();
	мТаблицаИтоговыхПоказателейПриКонсолидации.Очистить();

	ПС = ПланыСчетов["Хозрасчетный"];
	Счет09     = ПС.ОтложенныеНалоговыеАктивы;
	Счет19     = ПС.НДСпоПриобретеннымЦенностям;
	Счет68_2   = ПС.НДС;
	Счет68_4   = ПС.НалогНаПрибыль;
	Счет68_4_1 = ПС.РасчетыСБюджетом;
	Счет68_4_2 = ПС.РасчетНалогаНаПрибыль;
	Счет76_Н   = ПС.РасчетыПоНДСотложенномуДляУплатыВБюджет;
	Счет77     = ПС.ОтложенныеНалоговыеОбязательства;
	Счет90_1   = ПС.Выручка;
	Счет90_2   = ПС.СебестоимостьПродаж;
	Счет90_3   = ПС.Продажи_НДС;
	Счет90_4   = ПС.Продажи_Акцизы;
	Счет90_5   = ПС.Продажи_ЭкспортныеПошлины;
	Счет90_7   = ПС.Продажи_РасходыНаПродажу;
	Счет90_8   = ПС.Продажи_УправленческиеРасходы;
	Счет91_1   = ПС.ПрочиеДоходы;
	Счет91_2   = ПС.ПрочиеРасходы;
	Счет99_1   = ПС.ПрибылиИУбыткиБезНалогаНаПрибыль;
	Счет99_2   = ПС.ПрибылиИУбытки_НалогНаПрибыль;
	Счет99_2_3 = ПС.ПостоянноеНалоговоеОбязательство;

	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	ТаблДанныхДопСтрокОбщ = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(СтруктураГруппы1);
	ТаблДанныхДопСтрок = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(СтруктураГруппы1);

	Для каждого Орг Из СписокОрганизаций Цикл

		мОргРасшифровка = Орг.Значение;

		// Бухгалтерский итоги по счетам
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();

		// Бухгалтерские итоги по аналитике
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();

		Итоги = "КонечныйОстатокДт, ОборотДт, ОборотКт, КорОборотДт";

		// Бухгалтерские итоги по счетам, без аналитики
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , , , , , "Организация", мОргРасшифровка);

		// строка 010 - выручка
		П010001003_90_1 = КО(Счет90_1);
		
		П010001003_90_3 = ДО(Счет90_3);
		П010001003_90_4 = ДО(Счет90_4);
		П010001003_90_5 = ДО(Счет90_5);
		
		П010001003 = П010001003_90_1
		           - П010001003_90_3
		           - П010001003_90_4
		           - П010001003_90_5;

		УстановитьЗначениеПоказателя("П000010001003", П010001003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001003", "Строка 010 ""Выручка (нетто) от продажи..."", графа 3 ""За отчетный период""", "+", "!КО", П010001003_90_1, Счет90_1);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001003", "", "-", "!ДО", -П010001003_90_3, Счет90_3);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001003", "", "-", "!ДО", -П010001003_90_4, Счет90_4);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001003", "", "-", "!ДО", -П010001003_90_5, Счет90_5);

		// строка 020 - себестоимость
		П010002003 = ДО(Счет90_2);
		УстановитьЗначениеПоказателя("П000010002003", -П010002003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010002003", "Строка 020 ""Себестоимость проданных товаров, продукции, работ, услуг"", графа 3 ""За отчетный период""", "+", "!ДО", П010002003, Счет90_2);

		// строка 030 - коммерческие расходы
		П010003003 = ДО(Счет90_7);
		УстановитьЗначениеПоказателя("П000010003003", -П010003003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010003003", "Строка 030 ""Коммерческие расходы"", графа 3 ""За отчетный период""", "+", "!ДО", П010003003, Счет90_7);

		// строка 040 - управленческие расходы
		П010004003 = ДО(Счет90_8);
		УстановитьЗначениеПоказателя("П000010004003", -П010004003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010004003", "Строка 040 ""Управленческие расходы"", графа 3 ""За отчетный период""", "+", "!ДО", П010004003, Счет90_8);

		Итоги = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "91.01, 91.02", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, "68.02, 76.Н", , "Организация", мОргРасшифровка);
		РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();

		// Начальное обнуление
		П010006003_ПроцентыКПолучениюУплате = 0;
		П010006003_ПроцентыПоГосударственнымЦеннымБумагам = 0;
		П010006003_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 = 0;
		П010007003_ПроцентыКПолучениюУплате = 0;

		П010007003_ПроцентыНачисленныеПоСт269 = 0;

		П010008003_УчастиеВДругихОрганизациях = 0;
		П010008003_УчастиеВРоссийскихОрганизациях = 0;
		П010008003_УчастиеВИностранныхОрганизациях = 0;

		П010010003_УчастиеВДругихОрганизациях = 0;
		П010010003_УчастиеВРоссийскихОрганизациях = 0;
		П010010003_УчастиеВИностранныхОрганизациях = 0;

		П010009003_РеализацияОсновныхСредств = 0;
		П010010003_РеализацияОсновныхСредств = 0;

		П03_НДС_РеализацияОсновныхСредств = 0;

		П010009003_ЛиквидацияОсновныхСредств = 0;
		П010010003_ЛиквидацияОсновныхСредств = 0;

		П010009003_РеализацияНМА = 0;
		П010010003_РеализацияНМА = 0;

		П03_НДС_РеализацияНМА = 0;

		П010009003_РеализацияПрочегоИмущества = 0;
		П010010003_РеализацияПрочегоИмущества = 0;

		П03_НДС_РеализацияПрочегоИмущества = 0;

		П010009003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;
		П010010003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;

		П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;

		П010009003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;
		П010010003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;

		П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;

		П010009003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;
		П010010003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;

		П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;

		П010009003_РеализацияИмущественныхПравКромеПраваТребования = 0;
		П010010003_РеализацияИмущественныхПравКромеПраваТребования = 0;

		П03_НДС_РеализацияИмущественныхПравКромеПраваТребования = 0;

		П010009003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;
		П010010003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;

		П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;

		П010009003_РеализацияЦенныхБумаг = 0;
		П010010003_РеализацияЦенныхБумаг = 0;

		П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = 0;
		П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = 0;

		П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = 0;
		П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = 0;

		П010009003_СдачаИмуществаВАренду = 0;
		П010010003_СдачаИмуществаВАренду = 0;

		П03_НДС_СдачаИмуществаВАренду = 0;

		П010009003_РазницаСтоимостиЦенныхБумаг = 0;
		П010010003_РазницаСтоимостиЦенныхБумаг = 0;

		П010010003_РасходыНаУслугиБанков = 0;

		П010009003_ПрочиеОперационныеДоходыРасходы = 0;
		П010010003_ПрочиеОперационныеДоходыРасходы = 0;

		П03_НДС_ПрочиеОперационныеДоходыРасходы = 0;

		П010009003_ОтчисленияВОценочныеРезервы = 0;
		П010010003_ОтчисленияВОценочныеРезервы = 0;

		П010012003_ШтрафыПениНеустойкиКПолучениюУплате = 0;
		П010013003_ШтрафыПениНеустойкиКПолучениюУплате = 0;

		П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате = 0;

		П010012003_ПрибыльУбытокПрошлыхЛет = 0;
		П010013003_ПрибыльУбытокПрошлыхЛет = 0;
		
		П03_НДС_ПрибыльУбытокПрошлыхЛет = 0;
		
		П010012003_ВозмещениеУбытковКПолучениюУплате = 0;
		П010013003_ВозмещениеУбытковКПолучениюУплате = 0;

		П010012003_КурсовыеРазницы = 0;
		П010013003_КурсовыеРазницы = 0;
		
		П010012003_КурсовыеРазницыПоРасчетамВУЕ = 0;
		П010013003_КурсовыеРазницыПоРасчетамВУЕ = 0;

		П010013003_НалогиИСборы = 0;

		П010013003_ПремияПокупателю = 0;

		П010012003_СписаниеДебиторскойКредиторскойЗадолженности = 0;
		П010013003_СписаниеДебиторскойКредиторскойЗадолженности = 0;

		П010013003_НДСПоСписаннойКредиторскойЗадолженности = 0;

		П010012003_БезвозмездноеПолучениеИмущества = 0;
		П010013003_БезвозмездноеПолучениеИмущества = 0;

		П010012003_ПрочиеВнереализационныеДоходыРасходы = 0;
		П010013003_ПрочиеВнереализационныеДоходыРасходы = 0;

		П03_НДС_ПрочиеВнереализационныеДоходыРасходы = 0;

		П010013003_РасходыОтСниженияСтоимостиАктивов = 0;

		П010012003_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии = 0;

		ВыборкаПоСубконто = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");

		// Обрабатываем субкотно "Прочие доходы и расходы".
		Пока ВыборкаПоСубконто.Следующий() Цикл

			ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;

			Если ВыбранноеСубконто.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;

			// Сразу получем все необходимые итоги
			Сумма91_1 = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет91_1, ВыбранноеСубконто);
			Сумма91_2 = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет91_2, ВыбранноеСубконто);

			НДС       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет91_2, ВыбранноеСубконто, Счет68_2)
			          + мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет91_2, ВыбранноеСубконто, Счет76_Н);

			Если ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате Тогда

				// Проценты к получению
				П010006003_ПроцентыКПолучениюУплате = П010006003_ПроцентыКПолучениюУплате + Сумма91_1;

				// Проценты к уплате
				П010007003_ПроцентыКПолучениюУплате = П010007003_ПроцентыКПолучениюУплате + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам Тогда

				П010006003_ПроцентыПоГосударственнымЦеннымБумагам = П010006003_ПроцентыПоГосударственнымЦеннымБумагам  + Сумма91_1;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 Тогда

				П010006003_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 = П010006003_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0  + Сумма91_1;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269 Тогда

				П010007003_ПроцентыНачисленныеПоСт269 = П010007003_ПроцентыНачисленныеПоСт269 + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях Тогда

				П010008003_УчастиеВДругихОрганизациях = П010008003_УчастиеВДругихОрганизациях + Сумма91_1;
				П010010003_УчастиеВДругихОрганизациях = П010010003_УчастиеВДругихОрганизациях + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях Тогда

				П010008003_УчастиеВИностранныхОрганизациях = П010008003_УчастиеВИностранныхОрганизациях + Сумма91_1;
				П010010003_УчастиеВИностранныхОрганизациях = П010010003_УчастиеВИностранныхОрганизациях + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях Тогда

				П010008003_УчастиеВРоссийскихОрганизациях = П010008003_УчастиеВРоссийскихОрганизациях + Сумма91_1; 
				П010010003_УчастиеВРоссийскихОрганизациях = П010010003_УчастиеВРоссийскихОрганизациях + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств Тогда

				П010009003_РеализацияОсновныхСредств = П010009003_РеализацияОсновныхСредств + Сумма91_1;
				П010010003_РеализацияОсновныхСредств = П010010003_РеализацияОсновныхСредств + Сумма91_2;

				П03_НДС_РеализацияОсновныхСредств = П03_НДС_РеализацияОсновныхСредств + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств Тогда

				П010009003_ЛиквидацияОсновныхСредств = П010009003_ЛиквидацияОсновныхСредств + Сумма91_1;
				П010010003_ЛиквидацияОсновныхСредств = П010010003_ЛиквидацияОсновныхСредств + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов Тогда

				П010009003_РеализацияНМА = П010009003_РеализацияНМА + Сумма91_1;
				П010010003_РеализацияНМА = П010010003_РеализацияНМА + Сумма91_2;

				П03_НДС_РеализацияНМА = П03_НДС_РеализацияНМА + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества Тогда

				П010009003_РеализацияПрочегоИмущества = П010009003_РеализацияПрочегоИмущества + Сумма91_1;
				П010010003_РеализацияПрочегоИмущества = П010010003_РеализацияПрочегоИмущества + Сумма91_2;

				П03_НДС_РеализацияПрочегоИмущества = П03_НДС_РеализацияПрочегоИмущества + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг Тогда

				П010009003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П010009003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + Сумма91_1;
				П010010003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П010010003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + Сумма91_2;

				П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа Тогда

				П010009003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П010009003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + Сумма91_1;
				П010010003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П010010003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + Сумма91_2;

				П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа Тогда

				П010009003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П010009003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + Сумма91_1;
				П010010003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П010010003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + Сумма91_2;

				П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования Тогда

				П010009003_РеализацияИмущественныхПравКромеПраваТребования = П010009003_РеализацияИмущественныхПравКромеПраваТребования + Сумма91_1;
				П010010003_РеализацияИмущественныхПравКромеПраваТребования = П010010003_РеализацияИмущественныхПравКромеПраваТребования + Сумма91_2;

				П03_НДС_РеализацияИмущественныхПравКромеПраваТребования = П03_НДС_РеализацияИмущественныхПравКромеПраваТребования + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств Тогда

				П010009003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П010009003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + Сумма91_1;
				П010010003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П010010003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + Сумма91_2;

				П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг Тогда

				П010009003_РеализацияЦенныхБумаг = П010009003_РеализацияЦенныхБумаг + Сумма91_1;
				П010010003_РеализацияЦенныхБумаг = П010010003_РеализацияЦенныхБумаг + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок Тогда

				П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок + Сумма91_1;
				П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР Тогда

				П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР + Сумма91_1;
				П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду Тогда

				П010009003_СдачаИмуществаВАренду = П010009003_СдачаИмуществаВАренду + Сумма91_1;
				П010010003_СдачаИмуществаВАренду = П010010003_СдачаИмуществаВАренду + Сумма91_2;

				П03_НДС_СдачаИмуществаВАренду = П03_НДС_СдачаИмуществаВАренду + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам Тогда

				П010009003_РазницаСтоимостиЦенныхБумаг = П010009003_РазницаСтоимостиЦенныхБумаг + Сумма91_1;
				П010010003_РазницаСтоимостиЦенныхБумаг = П010010003_РазницаСтоимостиЦенныхБумаг + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков Тогда

				П010010003_РасходыНаУслугиБанков = П010010003_РасходыНаУслугиБанков + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы Тогда

				П010009003_ПрочиеОперационныеДоходыРасходы = П010009003_ПрочиеОперационныеДоходыРасходы + Сумма91_1;
				П010010003_ПрочиеОперационныеДоходыРасходы = П010010003_ПрочиеОперационныеДоходыРасходы + Сумма91_2;

				П03_НДС_ПрочиеОперационныеДоходыРасходы = П03_НДС_ПрочиеОперационныеДоходыРасходы + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда

				П010012003_ШтрафыПениНеустойкиКПолучениюУплате = П010012003_ШтрафыПениНеустойкиКПолучениюУплате + Сумма91_1;
				П010013003_ШтрафыПениНеустойкиКПолучениюУплате = П010013003_ШтрафыПениНеустойкиКПолучениюУплате + Сумма91_2;

				П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате = П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет Тогда

				П010012003_ПрибыльУбытокПрошлыхЛет = П010012003_ПрибыльУбытокПрошлыхЛет + Сумма91_1;
				П010013003_ПрибыльУбытокПрошлыхЛет = П010013003_ПрибыльУбытокПрошлыхЛет + Сумма91_2;
				
				П03_НДС_ПрибыльУбытокПрошлыхЛет = П03_НДС_ПрибыльУбытокПрошлыхЛет + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате Тогда

				П010012003_ВозмещениеУбытковКПолучениюУплате = П010012003_ВозмещениеУбытковКПолучениюУплате + Сумма91_1;
				П010013003_ВозмещениеУбытковКПолучениюУплате = П010013003_ВозмещениеУбытковКПолучениюУплате + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда

				П010012003_КурсовыеРазницы = П010012003_КурсовыеРазницы + Сумма91_1;
				П010013003_КурсовыеРазницы = П010013003_КурсовыеРазницы + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ Тогда

				П010012003_КурсовыеРазницыПоРасчетамВУЕ = П010012003_КурсовыеРазницыПоРасчетамВУЕ + Сумма91_1;
				П010013003_КурсовыеРазницыПоРасчетамВУЕ = П010013003_КурсовыеРазницыПоРасчетамВУЕ + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы Тогда

				П010013003_НалогиИСборы = П010013003_НалогиИСборы + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы Тогда

				П010009003_ОтчисленияВОценочныеРезервы = П010009003_ОтчисленияВОценочныеРезервы + Сумма91_1;
				П010010003_ОтчисленияВОценочныеРезервы = П010010003_ОтчисленияВОценочныеРезервы + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПремияПокупателю Тогда

				П010013003_ПремияПокупателю = П010013003_ПремияПокупателю  + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности Тогда

				П010012003_СписаниеДебиторскойКредиторскойЗадолженности = П010012003_СписаниеДебиторскойКредиторскойЗадолженности + Сумма91_1;
				П010013003_СписаниеДебиторскойКредиторскойЗадолженности = П010013003_СписаниеДебиторскойКредиторскойЗадолженности + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности Тогда

				П010013003_НДСПоСписаннойКредиторскойЗадолженности = П010013003_НДСПоСписаннойКредиторскойЗадолженности + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества Тогда

				П010012003_БезвозмездноеПолучениеИмущества = П010012003_БезвозмездноеПолучениеИмущества + Сумма91_1;
				П010013003_БезвозмездноеПолучениеИмущества = П010013003_БезвозмездноеПолучениеИмущества + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы Тогда

				П010012003_ПрочиеВнереализационныеДоходыРасходы = П010012003_ПрочиеВнереализационныеДоходыРасходы + Сумма91_1;
				П010013003_ПрочиеВнереализационныеДоходыРасходы = П010013003_ПрочиеВнереализационныеДоходыРасходы + Сумма91_2;

				П03_НДС_ПрочиеВнереализационныеДоходыРасходы = П03_НДС_ПрочиеВнереализационныеДоходыРасходы + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыОтСниженияСтоимостиАктивов Тогда

				П010013003_РасходыОтСниженияСтоимостиАктивов = П010013003_РасходыОтСниженияСтоимостиАктивов + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыСвязанныеСВосстановлениемАмортизационнойПремии Тогда

				П010012003_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии = П010012003_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии + Сумма91_1;

			КонецЕсли;

		КонецЦикла;

		// строка 060 "Проценты к получению"
		П010006003 = П010006003_ПроцентыКПолучениюУплате + П010006003_ПроцентыПоГосударственнымЦеннымБумагам + П010006003_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0;
		УстановитьЗначениеПоказателя("П000010006003", П010006003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010006003", "Строка 060 ""Проценты к получению"", графа 3 ""За отчетный период""", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты к получению (уплате)""/",  П010006003_ПроцентыКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010006003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты по государственным ценным бумагам""/", П010006003_ПроцентыПоГосударственнымЦеннымБумагам);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010006003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты по государственным ценным бумагам по ставке 0%""/", П010006003_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0);

		// строка 070
		П010007003 = П010007003_ПроцентыКПолучениюУплате
		           + П010007003_ПроцентыНачисленныеПоСт269;
		УстановитьЗначениеПоказателя("П000010007003", -П010007003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010007003", "Строка 070 ""Проценты к уплате"", графа 3 ""За отчетный период""", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты к получению (уплате)""/ ", П010007003_ПроцентыКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010007003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты, начисленные в соответствии со статьей 269""/ ", П010007003_ПроцентыНачисленныеПоСт269);
		
		// строка 080
		П010008003 = П010008003_УчастиеВДругихОрганизациях + П010008003_УчастиеВИностранныхОрганизациях + П010008003_УчастиеВРоссийскихОрганизациях;
		
		УстановитьЗначениеПоказателя("П000010008003", П010008003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010008003", "Строка 080 ""Доходы от участия в других организациях"", графа 3 ""За отчетный период""", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с участием в других организациях""/", П010008003_УчастиеВДругихОрганизациях);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010008003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в иностранных организациях""/", П010008003_УчастиеВИностранныхОрганизациях);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010008003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в российских организациях""/", П010008003_УчастиеВРоссийскихОрганизациях);

		// строка 090 "Прочие операционные доходы"
		П010009003 = П010009003_РеализацияОсновныхСредств                                     - П03_НДС_РеализацияОсновныхСредств
		           + П010009003_ЛиквидацияОсновныхСредств
		           + П010009003_РеализацияНМА                                                 - П03_НДС_РеализацияНМА
		           + П010009003_РеализацияПрочегоИмущества                                    - П03_НДС_РеализацияПрочегоИмущества
		           + П010009003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг           - П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг
		           + П010009003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа            - П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа
		           + П010009003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа         - П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа
		           + П010009003_РеализацияИмущественныхПравКромеПраваТребования               - П03_НДС_РеализацияИмущественныхПравКромеПраваТребования
		           + П010009003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств - П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств
		           + П010009003_РеализацияЦенныхБумаг
		           + П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок
		           + П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР
		           + П010009003_СдачаИмуществаВАренду                                         - П03_НДС_СдачаИмуществаВАренду
		           + П010009003_ОтчисленияВОценочныеРезервы
		           + П010009003_РазницаСтоимостиЦенныхБумаг
		           + П010009003_ПрочиеОперационныеДоходыРасходы                               - П03_НДС_ПрочиеОперационныеДоходыРасходы;

		УстановитьЗначениеПоказателя("П000010009003", П010009003);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "Строка 090 ""Прочие операционные доходы"", графа 3 ""За отчетный период""", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией основных средств""/", П010009003_РеализацияОсновныхСредств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией основных средств""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_РеализацияОсновныхСредств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с ликвидацией основных средств""/", П010009003_ЛиквидацияОсновныхСредств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией нематериальных активов""/", П010009003_РеализацияНМА);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией нематериальных активов""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_РеализацияНМА);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией прочего имущества""/", П010009003_РеализацияПрочегоИмущества);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией прочего имущества""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_РеализацияПрочегоИмущества);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования как оказания финансовых услуг""/", П010009003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования как оказания финансовых услуг""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования до наступления срока платежа""/", П010009003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования до наступления срока платежа""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования после наступления срока платежа""/", П010009003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования после наступления срока платежа""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав, кроме права требования""/", П010009003_РеализацияИмущественныхПравКромеПраваТребования);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав, кроме права требования""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_РеализацияИмущественныхПравКромеПраваТребования);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств""/", П010009003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией ценных бумаг""/", П010009003_РеализацияЦенныхБумаг);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы) по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке""/", П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы) по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке""/", П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные со сдачей имущества в аренду (субаренду)""/", П010009003_СдачаИмуществаВАренду);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные со сдачей имущества в аренду (субаренду)""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_СдачаИмуществаВАренду);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Отчисления в оценочные резервы""/", П010009003_ОтчисленияВОценочныеРезервы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам""/", П010009003_РазницаСтоимостиЦенныхБумаг);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/", П010009003_ПрочиеОперационныеДоходыРасходы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_ПрочиеОперационныеДоходыРасходы);

		// строка 100 "Прочие операционные расходы"
		П010010003 = П010010003_УчастиеВДругихОрганизациях
		           + П010010003_УчастиеВРоссийскихОрганизациях
		           + П010010003_УчастиеВИностранныхОрганизациях
		           + П010010003_РеализацияОсновныхСредств                                     - П03_НДС_РеализацияОсновныхСредств
		           + П010010003_ЛиквидацияОсновныхСредств
		           + П010010003_РеализацияНМА                                                 - П03_НДС_РеализацияНМА
		           + П010010003_РеализацияПрочегоИмущества                                    - П03_НДС_РеализацияПрочегоИмущества
		           + П010010003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг           - П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг
		           + П010010003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа            - П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа
		           + П010010003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа         - П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа
		           + П010010003_РеализацияИмущественныхПравКромеПраваТребования               - П03_НДС_РеализацияИмущественныхПравКромеПраваТребования
		           + П010010003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств - П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств
		           + П010010003_РеализацияЦенныхБумаг
		           + П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок
		           + П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР
		           + П010010003_СдачаИмуществаВАренду                                         - П03_НДС_СдачаИмуществаВАренду
		           + П010010003_ОтчисленияВОценочныеРезервы
		           + П010010003_РазницаСтоимостиЦенныхБумаг
		           + П010010003_РасходыНаУслугиБанков
		           + П010010003_ПрочиеОперационныеДоходыРасходы                               - П03_НДС_ПрочиеОперационныеДоходыРасходы;

		УстановитьЗначениеПоказателя("П000010010003", -П010010003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "Строка 100 ""Прочие операционные расходы"", графа 3 ""За отчетный период""", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с участием в других организациях""/", П010010003_УчастиеВДругихОрганизациях);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в российских организациях""/", П010010003_УчастиеВРоссийскихОрганизациях);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в иностранных организациях""/", П010010003_УчастиеВИностранныхОрганизациях);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией основных средств""/", П010010003_РеализацияОсновныхСредств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией основных средств""/ в корреспонденции со счетом 68.02 и 76.Н ", -П03_НДС_РеализацияОсновныхСредств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с ликвидацией основных средств""/", П010010003_ЛиквидацияОсновныхСредств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией нематериальных активов""/", П010010003_РеализацияНМА);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией нематериальных активов""/ в корреспонденции со счетом 68.02 и 76.Н ", -П03_НДС_РеализацияНМА);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией прочего имущества""/", П010010003_РеализацияПрочегоИмущества);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией прочего имущества""/ в корреспонденции со счетом 68.02 и 76.Н ", -П03_НДС_РеализацияПрочегоИмущества);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования как оказания финансовых услуг""/", П010010003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования как оказания финансовых услуг""/ в корреспонденции со счетом 68.02 и 76.Н ", -П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования до наступления срока платежа""/", П010010003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования до наступления срока платежа""/ в корреспонденции со счетом 68.02 и 76.Н ", -П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования после наступления срока платежа""/", П010010003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования после наступления срока платежа""/ в корреспонденции со счетом 68.02 и 76.Н ", -П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав, кроме права требования""/", П010010003_РеализацияИмущественныхПравКромеПраваТребования);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав, кроме права требования""/ в корреспонденции со счетом 68.02 и 76.Н ", -П03_НДС_РеализацияИмущественныхПравКромеПраваТребования);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств""/", П010010003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств""/ в корреспонденции со счетом 68.02 и 76.Н ", -П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией ценных бумаг""/", П010010003_РеализацияЦенныхБумаг);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы) по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке""/", П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы) по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке""/", П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные со сдачей имущества в аренду (субаренду)""/", П010010003_СдачаИмуществаВАренду);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные со сдачей имущества в аренду (субаренду)""/ в корреспонденции со счетом 68.02 и 76.Н ", -П03_НДС_СдачаИмуществаВАренду);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Отчисления в оценочные резервы""/", П010010003_ОтчисленияВОценочныеРезервы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам""/", П010010003_РазницаСтоимостиЦенныхБумаг);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Расходы на услуги банков""/", П010010003_РасходыНаУслугиБанков);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/", П010010003_ПрочиеОперационныеДоходыРасходы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/ в корреспонденции со счетом 68.02 и 76.Н ", -П03_НДС_ПрочиеОперационныеДоходыРасходы);

		// строка 120 "Внереализационные доходы"
		П010012003 = П010012003_ШтрафыПениНеустойкиКПолучениюУплате          - П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате
		           + П010012003_ПрибыльУбытокПрошлыхЛет                      - П03_НДС_ПрибыльУбытокПрошлыхЛет
		           + П010012003_ВозмещениеУбытковКПолучениюУплате
		           + П010012003_КурсовыеРазницы
		           + П010012003_КурсовыеРазницыПоРасчетамВУЕ
		           + П010012003_СписаниеДебиторскойКредиторскойЗадолженности
		           + П010012003_БезвозмездноеПолучениеИмущества
		           + П010012003_ПрочиеВнереализационныеДоходыРасходы         - П03_НДС_ПрочиеВнереализационныеДоходыРасходы
		           + П010012003_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии;

		УстановитьЗначениеПоказателя("П000010012003", П010012003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012003", "Строка 120 ""Внереализационные доходы"", графа 3 ""За отчетный период""", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/", П010012003_ШтрафыПениНеустойкиКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/", П010012003_ПрибыльУбытокПрошлыхЛет);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_ПрибыльУбытокПрошлыхЛет);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Возмещение убытков к получению (уплате)""/", П010012003_ВозмещениеУбытковКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы""/", П010012003_КурсовыеРазницы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы по расчетам в у.е.""/", П010012003_КурсовыеРазницыПоРасчетамВУЕ);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Списание дебиторской (кредиторской) задолженности""/", П010012003_СписаниеДебиторскойКредиторскойЗадолженности);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с безвозмездным получением имущества, работ, услуг или имущественных прав""/", П010012003_БезвозмездноеПолучениеИмущества);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/", П010012003_ПрочиеВнереализационныеДоходыРасходы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_ПрочиеВнереализационныеДоходыРасходы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы, связанные с восстановлением амортизационной премии""/", П010012003_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии);

		// строка 130 "Внереализационные расходы"
		П010013003 = П010013003_ШтрафыПениНеустойкиКПолучениюУплате          - П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате
		           + П010013003_ПрибыльУбытокПрошлыхЛет                      - П03_НДС_ПрибыльУбытокПрошлыхЛет
		           + П010013003_ВозмещениеУбытковКПолучениюУплате
		           + П010013003_КурсовыеРазницы
		           + П010013003_КурсовыеРазницыПоРасчетамВУЕ
		           + П010013003_НалогиИСборы
		           + П010013003_ПремияПокупателю
		           + П010013003_СписаниеДебиторскойКредиторскойЗадолженности
		           + П010013003_НДСПоСписаннойКредиторскойЗадолженности
		           + П010013003_БезвозмездноеПолучениеИмущества
		           + П010013003_ПрочиеВнереализационныеДоходыРасходы         - П03_НДС_ПрочиеВнереализационныеДоходыРасходы
		           + П010013003_РасходыОтСниженияСтоимостиАктивов;

		// "Внереализационные расходы" - вычитаемый показатель
		УстановитьЗначениеПоказателя("П000010013003", - П010013003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "Строка 130 ""Внереализационные расходы"", графа 3 ""За отчетный период""", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/", П010013003_ШтрафыПениНеустойкиКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/", П010013003_ПрибыльУбытокПрошлыхЛет);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_ПрибыльУбытокПрошлыхЛет);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Возмещение убытков к получению (уплате)""/", П010013003_ВозмещениеУбытковКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы""/", П010013003_КурсовыеРазницы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы по расчетам в у.е.""/", П010013003_КурсовыеРазницыПоРасчетамВУЕ);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Налоги и сборы""/", П010013003_НалогиИСборы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Премия, выплаченная покупателю""/", П010013003_ПремияПокупателю);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Списание дебиторской (кредиторской) задолженности""/", П010013003_СписаниеДебиторскойКредиторскойЗадолженности);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""НДС по списанной кредиторской задолженности""/", П010013003_НДСПоСписаннойКредиторскойЗадолженности);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с безвозмездным получением имущества, работ, услуг или имущественных прав""/", П010013003_БезвозмездноеПолучениеИмущества);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/", П010013003_ПрочиеВнереализационныеДоходыРасходы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_ПрочиеВнереализационныеДоходыРасходы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Расходы от снижения стоимости активов""/", П010013003_РасходыОтСниженияСтоимостиАктивов);

		// строка 141 "Отложенные налоговые активы"
		П010014103_09_Д = ДО(Счет09);
		П010014103_09_К = КО(Счет09);

		П010014103 = П010014103_09_Д - П010014103_09_К;
		УстановитьЗначениеПоказателя("П000010014103", П010014103);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014103", "Строка 141 ""Отложенные налоговые активы"", графа 3 ""За отчетный период""", "+", "!ДО", П010014103_09_Д, Счет09);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014103", "", "-", "!КО", -П010014103_09_К, Счет09);
		
		// строка 142 "Отложенные налоговые обязательства" 
		П010014203_77_К = КО(Счет77);
		П010014203_77_Д = ДО(Счет77);

		П010014203 = П010014203_77_К - П010014203_77_Д;
		УстановитьЗначениеПоказателя("П000010014203", -П010014203);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014203", "Строка 142 ""Отложенные налоговые обязательства"", графа 3 ""За отчетный период""", "+", "!КО", П010014203_77_К, Счет77);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014203", "", "-", "!ДО", -П010014203_77_Д, Счет77);

		ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "99", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки, , , "Организация", мОргРасшифровка);
		РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();

		// Строка "Чрезвычайные доходы"
		П010013503_99_1_К = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет99_1, Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);
		
		Если П010013503_99_1_К > 0 Тогда
			мФормаОтчета.Области.П000010013501.Значение = "Чрезвычайные доходы";
			мФормаОтчета.Области.П000010013503.Значение = П010013503_99_1_К;
		КонецЕсли;
		
		// Строка "Чрезвычайные расходы"
		П010013503_99_1_Д = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет99_1, Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);
		
		Если П010013503_99_1_Д > 0 Тогда
			мФормаОтчета.Области.П000010013601.Значение = "Чрезвычайные расходы";
			мФормаОтчета.Области.П000010013603.Значение = -П010013503_99_1_Д;
		КонецЕсли;

		// Если ПБУ 18 не применяется, должна выводится строка "Налог на прибыль 
		// и иные аналогичные обязательные платежи", как в "старой" форме №2

		П010018003_99_1_НалогНаПрибыль   = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет99_1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
		П010018003_99_1_НалоговыеСанкции = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет99_1, Перечисления.ПрибылиИУбытки.НалоговыеСанкции);

		П010018003 = П010018003_99_1_НалогНаПрибыль + П010018003_99_1_НалоговыеСанкции;

		ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "68.04", , , , "Организация", мОргРасшифровка);

		П010015003_68_4_2__68_4_1 = ОБ(Счет68_4_2, Счет68_4_1);
		П010015003_68_4_1__68_4_2 = ОБ(Счет68_4_1, Счет68_4_2);

		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "99", , "68.04.1", , "Организация", мОргРасшифровка);

		П010015003_99_2__68_4_1 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет99_2, Счет68_4_1);
		П010015003_68_4_1__99_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет99_2, Счет68_4_1);

		П010015003 = П010015003_68_4_2__68_4_1 - П010015003_68_4_1__68_4_2 
		           + П010015003_99_2__68_4_1   - П010015003_68_4_1__99_2;

		УстановитьЗначениеПоказателя("П000010015003", -П010015003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010015003", "Строка 150 ""Текущий налог на прибыль"", графа 3 ""За отчетный период""", "+", "!ОБ", П010015003_68_4_2__68_4_1, Счет68_4_2, Счет68_4_1);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010015003", "", "-", "!ОБ", -П010015003_68_4_1__68_4_2, Счет68_4_1, Счет68_4_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010015003", "", "+", "!ОБ",  П010015003_99_2__68_4_1, Счет99_2, Счет68_4_1);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010015003", "", "-", "!ОБ", -П010015003_68_4_1__99_2, Счет68_4_1, Счет99_2);
		
		// строка 200 "постоянные налоговые обязательства (активы)"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "99.02.3", , "68.04", , "Организация", мОргРасшифровка);

		П010020003_99_2_3__68_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет99_2_3, Счет68_4);
		П010020003_68_4__99_2_3 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет99_2_3, Счет68_4);

		П010020003 = П010020003_99_2_3__68_4 - П010020003_68_4__99_2_3;
		УстановитьЗначениеПоказателя("П000010020003", П010020003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010020003", "Строка 200 ""постоянные налоговые обязательства (активы)"", графа 3 ""За отчетный период""", "+", "!ОБ", П010020003_99_2_3__68_4, Счет99_2_3, Счет68_4);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010020003", "", "-", "!ОБ", -П010020003_68_4__99_2_3, Счет68_4, Счет99_2_3);

		// Заполняем графу "За аналогичный период прошлого года"

		// От даты конца периода отнимаем 12 месяцев
		мДатаКонцаПериодаПрошлогоГода = КонецМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));

		мДатаНачалаПериодаПрошлогоГода = НачалоГода(мДатаКонцаПериодаПрошлогоГода);

		Итоги = "КонечныйОстатокДт, ОборотДт, ОборотКт, КорОборотДт";

		// Бухгалтерские итоги по счетам, без аналитики
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , , , , , "Организация", мОргРасшифровка);

		// строка 010 - выручка
		П010001004_90_1 = КО(Счет90_1);
		
		П010001004_90_3 = ДО(Счет90_3);
		П010001004_90_4 = ДО(Счет90_4);
		П010001004_90_5 = ДО(Счет90_5);
		
		П010001004 = П010001004_90_1
		           - П010001004_90_3
		           - П010001004_90_4
		           - П010001004_90_5;

		УстановитьЗначениеПоказателя("П000010001004", П010001004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001004", "Строка 010 ""Выручка (нетто) от продажи..."", графа 4 ""За аналогичный период предыдущего года""", "+", "!КО", П010001004_90_1, Счет90_1, , мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001004", "", "-", "!ДО", -П010001004_90_3, Счет90_3, , мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001004", "", "-", "!ДО", -П010001004_90_4, Счет90_4, , мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001004", "", "-", "!ДО", -П010001004_90_5, Счет90_5, , мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);

		// строка 020 - себестоимость
		П010002004 = ДО(Счет90_2);
		УстановитьЗначениеПоказателя("П000010002004", -П010002004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010002004", "Строка 020 ""Себестоимость проданных товаров, продукции, работ, услуг"", графа 4 ""За аналогичный период предыдущего года""", "+", "!ДО", П010002004, Счет90_2, , мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);

		// строка 030 - коммерческие расходы
		П010003004 = ДО(Счет90_7);
		УстановитьЗначениеПоказателя("П000010003004", -П010003004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010003004", "Строка 030 ""Коммерческие расходы"", графа 4 ""За аналогичный период предыдущего года""", "+", "!ДО", П010003004, Счет90_7, , мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);

		// строка 040 - управленческие расходы
		П010004004 = ДО(Счет90_8);
		УстановитьЗначениеПоказателя("П000010004004", -П010004004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010004004", "Строка 040 ""Управленческие расходы"", графа 4 ""За аналогичный период предыдущего года""", "+", "!ДО", П010004004, Счет90_8, , мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);

		Итоги = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "91.01, 91.02", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, "68.02, 76.Н", , "Организация", мОргРасшифровка);
		РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();

		// Начальное обнуление
		П010006004_ПроцентыКПолучениюУплате = 0;
		П010006004_ПроцентыПоГосударственнымЦеннымБумагам = 0;
		П010006004_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 = 0;
		П010007004_ПроцентыКПолучениюУплате = 0;

		П010007004_ПроцентыНачисленныеПоСт269 = 0;

		П010008004_УчастиеВДругихОрганизациях = 0;
		П010008004_УчастиеВРоссийскихОрганизациях = 0;
		П010008004_УчастиеВИностранныхОрганизациях = 0;

		П010010004_УчастиеВДругихОрганизациях = 0;
		П010010004_УчастиеВРоссийскихОрганизациях = 0;
		П010010004_УчастиеВИностранныхОрганизациях = 0;

		П010009004_РеализацияОсновныхСредств = 0;
		П010010004_РеализацияОсновныхСредств = 0;

		П04_НДС_РеализацияОсновныхСредств = 0;

		П010009004_ЛиквидацияОсновныхСредств = 0;
		П010010004_ЛиквидацияОсновныхСредств = 0;
		
		П010009004_РеализацияНМА = 0;
		П010010004_РеализацияНМА = 0;

		П04_НДС_РеализацияНМА = 0;

		П010009004_РеализацияПрочегоИмущества = 0;
		П010010004_РеализацияПрочегоИмущества = 0;

		П04_НДС_РеализацияПрочегоИмущества = 0;

		П010009004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;
		П010010004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;

		П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;

		П010009004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;
		П010010004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;

		П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;

		П010009004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;
		П010010004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;

		П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;

		П010009004_РеализацияИмущественныхПравКромеПраваТребования = 0;
		П010010004_РеализацияИмущественныхПравКромеПраваТребования = 0;

		П04_НДС_РеализацияИмущественныхПравКромеПраваТребования = 0;

		П010009004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;
		П010010004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;

		П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;

		П010009004_РеализацияЦенныхБумаг = 0;
		П010010004_РеализацияЦенныхБумаг = 0;

		П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = 0;
		П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = 0;

		П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = 0;
		П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = 0;

		П010009004_СдачаИмуществаВАренду = 0;
		П010010004_СдачаИмуществаВАренду = 0;

		П04_НДС_СдачаИмуществаВАренду = 0;

		П010009004_РазницаСтоимостиЦенныхБумаг = 0;
		П010010004_РазницаСтоимостиЦенныхБумаг = 0;

		П010010004_РасходыНаУслугиБанков = 0;

		П010009004_ПрочиеОперационныеДоходыРасходы = 0;
		П010010004_ПрочиеОперационныеДоходыРасходы = 0;

		П04_НДС_ПрочиеОперационныеДоходыРасходы = 0;

		П010009004_ОтчисленияВОценочныеРезервы = 0;
		П010010004_ОтчисленияВОценочныеРезервы = 0;
		
		П010012004_ШтрафыПениНеустойкиКПолучениюУплате = 0;
		П010013004_ШтрафыПениНеустойкиКПолучениюУплате = 0;

		П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате = 0;

		П010012004_ПрибыльУбытокПрошлыхЛет = 0;
		П010013004_ПрибыльУбытокПрошлыхЛет = 0;
		
		П04_НДС_ПрибыльУбытокПрошлыхЛет = 0;
		
		П010012004_ВозмещениеУбытковКПолучениюУплате = 0;
		П010013004_ВозмещениеУбытковКПолучениюУплате = 0;

		П010012004_КурсовыеРазницы = 0;
		П010013004_КурсовыеРазницы = 0;

		П010012004_КурсовыеРазницыПоРасчетамВУЕ = 0;
		П010013004_КурсовыеРазницыПоРасчетамВУЕ = 0;

		П010013004_НалогиИСборы = 0;

		П010013004_ПремияПокупателю = 0;

		П010012004_СписаниеДебиторскойКредиторскойЗадолженности = 0;
		П010013004_СписаниеДебиторскойКредиторскойЗадолженности = 0;

		П010013004_НДСПоСписаннойКредиторскойЗадолженности = 0;

		П010012004_БезвозмездноеПолучениеИмущества = 0;
		П010013004_БезвозмездноеПолучениеИмущества = 0;

		П010012004_ПрочиеВнереализационныеДоходыРасходы = 0;
		П010013004_ПрочиеВнереализационныеДоходыРасходы = 0;

		П04_НДС_ПрочиеВнереализационныеДоходыРасходы = 0;

		П010013004_РасходыОтСниженияСтоимостиАктивов = 0;

		П010012004_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии = 0;

		ВыборкаПоСубконто = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");

		// Обрабатываем субкотно "Прочие доходы и расходы".
		Пока ВыборкаПоСубконто.Следующий() Цикл

			ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;

			Если ВыбранноеСубконто.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;

			// Сразу получем все необходимые итоги
			Сумма91_1 = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет91_1, ВыбранноеСубконто);
			Сумма91_2 = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет91_2, ВыбранноеСубконто);

			НДС       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет91_2, ВыбранноеСубконто, Счет68_2)
			          + мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет91_2, ВыбранноеСубконто, Счет76_Н);

			Если ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате Тогда

				// Проценты к получению
				П010006004_ПроцентыКПолучениюУплате = П010006004_ПроцентыКПолучениюУплате + Сумма91_1;

				// Проценты к уплате
				П010007004_ПроцентыКПолучениюУплате = П010007004_ПроцентыКПолучениюУплате + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам Тогда

				П010006004_ПроцентыПоГосударственнымЦеннымБумагам = П010006004_ПроцентыПоГосударственнымЦеннымБумагам  + Сумма91_1;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 Тогда

				П010006004_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 = П010006004_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0  + Сумма91_1;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269 Тогда

				П010007004_ПроцентыНачисленныеПоСт269 = П010007004_ПроцентыНачисленныеПоСт269 + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях Тогда

				П010008004_УчастиеВДругихОрганизациях = П010008004_УчастиеВДругихОрганизациях + Сумма91_1;
				П010010004_УчастиеВДругихОрганизациях = П010010004_УчастиеВДругихОрганизациях + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях Тогда

				П010008004_УчастиеВИностранныхОрганизациях = П010008004_УчастиеВИностранныхОрганизациях + Сумма91_1;
				П010010004_УчастиеВИностранныхОрганизациях = П010010004_УчастиеВИностранныхОрганизациях + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях Тогда

				П010008004_УчастиеВРоссийскихОрганизациях = П010008004_УчастиеВРоссийскихОрганизациях + Сумма91_1; 
				П010010004_УчастиеВРоссийскихОрганизациях = П010010004_УчастиеВРоссийскихОрганизациях + Сумма91_2; 

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств Тогда

				П010009004_РеализацияОсновныхСредств = П010009004_РеализацияОсновныхСредств + Сумма91_1;
				П010010004_РеализацияОсновныхСредств = П010010004_РеализацияОсновныхСредств + Сумма91_2;

				П04_НДС_РеализацияОсновныхСредств = П04_НДС_РеализацияОсновныхСредств + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств Тогда

				П010009004_ЛиквидацияОсновныхСредств = П010009004_ЛиквидацияОсновныхСредств + Сумма91_1;
				П010010004_ЛиквидацияОсновныхСредств = П010010004_ЛиквидацияОсновныхСредств + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов Тогда

				П010009004_РеализацияНМА = П010009004_РеализацияНМА + Сумма91_1;
				П010010004_РеализацияНМА = П010010004_РеализацияНМА + Сумма91_2;

				П04_НДС_РеализацияНМА = П04_НДС_РеализацияНМА + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества Тогда

				П010009004_РеализацияПрочегоИмущества = П010009004_РеализацияПрочегоИмущества + Сумма91_1;
				П010010004_РеализацияПрочегоИмущества = П010010004_РеализацияПрочегоИмущества + Сумма91_2;

				П04_НДС_РеализацияПрочегоИмущества = П04_НДС_РеализацияПрочегоИмущества + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг Тогда

				П010009004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П010009004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + Сумма91_1;
				П010010004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П010010004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + Сумма91_2;

				П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа Тогда

				П010009004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П010009004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + Сумма91_1;
				П010010004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П010010004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + Сумма91_2;

				П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа Тогда

				П010009004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П010009004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + Сумма91_1;
				П010010004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П010010004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + Сумма91_2;

				П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования Тогда

				П010009004_РеализацияИмущественныхПравКромеПраваТребования = П010009004_РеализацияИмущественныхПравКромеПраваТребования + Сумма91_1;
				П010010004_РеализацияИмущественныхПравКромеПраваТребования = П010010004_РеализацияИмущественныхПравКромеПраваТребования + Сумма91_2;

				П04_НДС_РеализацияИмущественныхПравКромеПраваТребования = П04_НДС_РеализацияИмущественныхПравКромеПраваТребования + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств Тогда

				П010009004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П010009004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + Сумма91_1;
				П010010004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П010010004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + Сумма91_2;

				П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг Тогда

				П010009004_РеализацияЦенныхБумаг = П010009004_РеализацияЦенныхБумаг + Сумма91_1;
				П010010004_РеализацияЦенныхБумаг = П010010004_РеализацияЦенныхБумаг + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок Тогда

				П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок + Сумма91_1;
				П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР Тогда

				П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР + Сумма91_1;
				П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду Тогда

				П010009004_СдачаИмуществаВАренду = П010009004_СдачаИмуществаВАренду + Сумма91_1;
				П010010004_СдачаИмуществаВАренду = П010010004_СдачаИмуществаВАренду + Сумма91_2;

				П04_НДС_СдачаИмуществаВАренду = П04_НДС_СдачаИмуществаВАренду + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам Тогда

				П010009004_РазницаСтоимостиЦенныхБумаг = П010009004_РазницаСтоимостиЦенныхБумаг + Сумма91_1;
				П010010004_РазницаСтоимостиЦенныхБумаг = П010010004_РазницаСтоимостиЦенныхБумаг + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков Тогда

				П010010004_РасходыНаУслугиБанков = П010010004_РасходыНаУслугиБанков + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы Тогда

				П010009004_ПрочиеОперационныеДоходыРасходы = П010009004_ПрочиеОперационныеДоходыРасходы + Сумма91_1;
				П010010004_ПрочиеОперационныеДоходыРасходы = П010010004_ПрочиеОперационныеДоходыРасходы + Сумма91_2;

				П04_НДС_ПрочиеОперационныеДоходыРасходы = П04_НДС_ПрочиеОперационныеДоходыРасходы + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда

				П010012004_ШтрафыПениНеустойкиКПолучениюУплате = П010012004_ШтрафыПениНеустойкиКПолучениюУплате + Сумма91_1;
				П010013004_ШтрафыПениНеустойкиКПолучениюУплате = П010013004_ШтрафыПениНеустойкиКПолучениюУплате + Сумма91_2;

				П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате = П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет Тогда

				П010012004_ПрибыльУбытокПрошлыхЛет = П010012004_ПрибыльУбытокПрошлыхЛет + Сумма91_1;
				П010013004_ПрибыльУбытокПрошлыхЛет = П010013004_ПрибыльУбытокПрошлыхЛет + Сумма91_2;
				
				П04_НДС_ПрибыльУбытокПрошлыхЛет = П04_НДС_ПрибыльУбытокПрошлыхЛет + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате Тогда

				П010012004_ВозмещениеУбытковКПолучениюУплате = П010012004_ВозмещениеУбытковКПолучениюУплате + Сумма91_1;
				П010013004_ВозмещениеУбытковКПолучениюУплате = П010013004_ВозмещениеУбытковКПолучениюУплате + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда

				П010012004_КурсовыеРазницы = П010012004_КурсовыеРазницы + Сумма91_1;
				П010013004_КурсовыеРазницы = П010013004_КурсовыеРазницы + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ Тогда

				П010012004_КурсовыеРазницыПоРасчетамВУЕ = П010012004_КурсовыеРазницыПоРасчетамВУЕ + Сумма91_1;
				П010013004_КурсовыеРазницыПоРасчетамВУЕ = П010013004_КурсовыеРазницыПоРасчетамВУЕ + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы Тогда

				П010013004_НалогиИСборы = П010013004_НалогиИСборы + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы Тогда

				П010009004_ОтчисленияВОценочныеРезервы = П010009004_ОтчисленияВОценочныеРезервы + Сумма91_1;
				П010010004_ОтчисленияВОценочныеРезервы = П010010004_ОтчисленияВОценочныеРезервы + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПремияПокупателю Тогда

				П010013004_ПремияПокупателю = П010013004_ПремияПокупателю  + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности Тогда

				П010012004_СписаниеДебиторскойКредиторскойЗадолженности = П010012004_СписаниеДебиторскойКредиторскойЗадолженности + Сумма91_1;
				П010013004_СписаниеДебиторскойКредиторскойЗадолженности = П010013004_СписаниеДебиторскойКредиторскойЗадолженности + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности Тогда

				П010013004_НДСПоСписаннойКредиторскойЗадолженности = П010013004_НДСПоСписаннойКредиторскойЗадолженности + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества Тогда

				П010012004_БезвозмездноеПолучениеИмущества = П010012004_БезвозмездноеПолучениеИмущества + Сумма91_1;
				П010013004_БезвозмездноеПолучениеИмущества = П010013004_БезвозмездноеПолучениеИмущества + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы Тогда

				П010012004_ПрочиеВнереализационныеДоходыРасходы = П010012004_ПрочиеВнереализационныеДоходыРасходы + Сумма91_1;
				П010013004_ПрочиеВнереализационныеДоходыРасходы = П010013004_ПрочиеВнереализационныеДоходыРасходы + Сумма91_2;

				П04_НДС_ПрочиеВнереализационныеДоходыРасходы = П04_НДС_ПрочиеВнереализационныеДоходыРасходы + НДС;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыОтСниженияСтоимостиАктивов Тогда

				П010013004_РасходыОтСниженияСтоимостиАктивов = П010013004_РасходыОтСниженияСтоимостиАктивов + Сумма91_2;

			ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыСвязанныеСВосстановлениемАмортизационнойПремии Тогда

				П010012004_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии = П010012004_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии + Сумма91_1;

			КонецЕсли;

		КонецЦикла;

		// строка 060 "Проценты к получению"
		П010006004 = П010006004_ПроцентыКПолучениюУплате + П010006004_ПроцентыПоГосударственнымЦеннымБумагам + П010006004_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0;;
		УстановитьЗначениеПоказателя("П000010006004", П010006004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010006004", "Строка 060 ""Проценты к получению"", графа 4 ""За аналогичный период предыдущего года""", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты к получению (уплате)""/",  П010006004_ПроцентыКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010006004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты по государственным ценным бумагам""/", П010006004_ПроцентыПоГосударственнымЦеннымБумагам);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010006004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты по государственным ценным бумагам по ставке 0%""/", П010006004_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0);

		// строка 070
		П010007004 = П010007004_ПроцентыКПолучениюУплате
		           + П010007004_ПроцентыНачисленныеПоСт269;
		УстановитьЗначениеПоказателя("П000010007004", -П010007004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010007004", "Строка 070 ""Проценты к уплате"", графа 4 ""За аналогичный период предыдущего года""", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты к получению (уплате)""/ ", П010007004_ПроцентыКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010007004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты, начисленные в соответствии со статьей 269""/ ", П010007004_ПроцентыНачисленныеПоСт269);
		
		// строка 080
		П010008004 = П010008004_УчастиеВДругихОрганизациях  + П010008004_УчастиеВИностранныхОрганизациях + П010008004_УчастиеВРоссийскихОрганизациях;;
		УстановитьЗначениеПоказателя("П000010008004", П010008004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010008004", "Строка 080 ""Доходы от участия в других организациях"", графа 4 ""За аналогичный период предыдущего года""", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с участием в других организациях""/", П010008004_УчастиеВДругихОрганизациях);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010008004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в иностранных организациях""/", П010008004_УчастиеВИностранныхОрганизациях);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010008004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в российских организациях""/", П010008004_УчастиеВРоссийскихОрганизациях);

		// строка 090 "Прочие операционные доходы"
		П010009004 = П010009004_РеализацияОсновныхСредств                                     - П04_НДС_РеализацияОсновныхСредств
		           + П010009004_ЛиквидацияОсновныхСредств
		           + П010009004_РеализацияНМА                                                 - П04_НДС_РеализацияНМА
		           + П010009004_РеализацияПрочегоИмущества                                    - П04_НДС_РеализацияПрочегоИмущества
		           + П010009004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг           - П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг
		           + П010009004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа            - П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа
		           + П010009004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа         - П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа
		           + П010009004_РеализацияИмущественныхПравКромеПраваТребования               - П04_НДС_РеализацияИмущественныхПравКромеПраваТребования
		           + П010009004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств - П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств
		           + П010009004_РеализацияЦенныхБумаг
		           + П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок
		           + П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР
		           + П010009004_СдачаИмуществаВАренду                                         - П04_НДС_СдачаИмуществаВАренду
		           + П010009004_ОтчисленияВОценочныеРезервы
		           + П010009004_РазницаСтоимостиЦенныхБумаг
		           + П010009004_ПрочиеОперационныеДоходыРасходы                               - П04_НДС_ПрочиеОперационныеДоходыРасходы;

		УстановитьЗначениеПоказателя("П000010009004", П010009004);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "Строка 090 ""Прочие операционные доходы"", графа 4 ""За аналогичный период предыдущего года""", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией основных средств""/", П010009004_РеализацияОсновныхСредств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с ликвидацией основных средств""/", П010009004_ЛиквидацияОсновныхСредств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией основных средств""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_РеализацияОсновныхСредств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией нематериальных активов""/", П010009004_РеализацияНМА);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией нематериальных активов""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_РеализацияНМА);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией прочего имущества""/", П010009004_РеализацияПрочегоИмущества);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией прочего имущества""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_РеализацияПрочегоИмущества);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования как оказания финансовых услуг""/", П010009004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования как оказания финансовых услуг""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования до наступления срока платежа""/", П010009004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования до наступления срока платежа""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования после наступления срока платежа""/", П010009004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования после наступления срока платежа""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав, кроме права требования""/", П010009004_РеализацияИмущественныхПравКромеПраваТребования);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав, кроме права требования""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_РеализацияИмущественныхПравКромеПраваТребования);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств""/", П010009004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией ценных бумаг""/", П010009004_РеализацияЦенныхБумаг);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы) по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке""/", П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы) по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке""/", П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные со сдачей имущества в аренду (субаренду)""/", П010009004_СдачаИмуществаВАренду);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные со сдачей имущества в аренду (субаренду)""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_СдачаИмуществаВАренду);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Отчисления в оценочные резервы""/", П010009004_ОтчисленияВОценочныеРезервы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам""/", П010009004_РазницаСтоимостиЦенныхБумаг);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/", П010009004_ПрочиеОперационныеДоходыРасходы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_ПрочиеОперационныеДоходыРасходы);

		// строка 100 "Прочие операционные расходы"
		П010010004 = П010010004_УчастиеВДругихОрганизациях
		           + П010010004_УчастиеВРоссийскихОрганизациях
		           + П010010004_УчастиеВИностранныхОрганизациях
		           + П010010004_РеализацияОсновныхСредств                                     - П04_НДС_РеализацияОсновныхСредств
		           + П010010004_ЛиквидацияОсновныхСредств
		           + П010010004_РеализацияНМА                                                 - П04_НДС_РеализацияНМА
		           + П010010004_РеализацияПрочегоИмущества                                    - П04_НДС_РеализацияПрочегоИмущества
		           + П010010004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг           - П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг
		           + П010010004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа            - П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа
		           + П010010004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа         - П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа
		           + П010010004_РеализацияИмущественныхПравКромеПраваТребования               - П04_НДС_РеализацияИмущественныхПравКромеПраваТребования
		           + П010010004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств - П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств
		           + П010010004_РеализацияЦенныхБумаг
		           + П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок
		           + П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР
		           + П010010004_СдачаИмуществаВАренду                                         - П04_НДС_СдачаИмуществаВАренду
		           + П010010004_ОтчисленияВОценочныеРезервы
		           + П010010004_РазницаСтоимостиЦенныхБумаг
		           + П010010004_РасходыНаУслугиБанков
		           + П010010004_ПрочиеОперационныеДоходыРасходы                               - П04_НДС_ПрочиеОперационныеДоходыРасходы;

		УстановитьЗначениеПоказателя("П000010010004", -П010010004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "Строка 100 ""Прочие операционные расходы"", графа 4 ""За аналогичный период предыдущего года""", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с участием в других организациях""/", П010010004_УчастиеВДругихОрганизациях);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в российских организациях""/", П010010004_УчастиеВРоссийскихОрганизациях);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в иностранных организациях""/", П010010004_УчастиеВИностранныхОрганизациях);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией основных средств""/", П010010004_РеализацияОсновныхСредств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией основных средств""/ в корреспонденции со счетом 68.02 и 76.Н ", -П04_НДС_РеализацияОсновныхСредств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с ликвидацией основных средств""/", П010010004_ЛиквидацияОсновныхСредств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией нематериальных активов""/", П010010004_РеализацияНМА);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией нематериальных активов""/ в корреспонденции со счетом 68.02 и 76.Н ", -П04_НДС_РеализацияНМА);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией прочего имущества""/", П010010004_РеализацияПрочегоИмущества);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией прочего имущества""/ в корреспонденции со счетом 68.02 и 76.Н ", -П04_НДС_РеализацияПрочегоИмущества);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования как оказания финансовых услуг""/", П010010004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования как оказания финансовых услуг""/ в корреспонденции со счетом 68.02 и 76.Н ", -П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования до наступления срока платежа""/", П010010004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования до наступления срока платежа""/ в корреспонденции со счетом 68.02 и 76.Н ", -П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования после наступления срока платежа""/", П010010004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования после наступления срока платежа""/ в корреспонденции со счетом 68.02 и 76.Н ", -П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав, кроме права требования""/", П010010004_РеализацияИмущественныхПравКромеПраваТребования);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав, кроме права требования""/ в корреспонденции со счетом 68.02 и 76.Н ", -П04_НДС_РеализацияИмущественныхПравКромеПраваТребования);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств""/", П010010004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств""/ в корреспонденции со счетом 68.02 и 76.Н ", -П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией ценных бумаг""/", П010010004_РеализацияЦенныхБумаг);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы) по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке""/", П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы) по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке""/", П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные со сдачей имущества в аренду (субаренду)""/", П010010004_СдачаИмуществаВАренду);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные со сдачей имущества в аренду (субаренду)""/ в корреспонденции со счетом 68.02 и 76.Н ", -П04_НДС_СдачаИмуществаВАренду);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Отчисления в оценочные резервы""/", П010010004_ОтчисленияВОценочныеРезервы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам""/", П010010004_РазницаСтоимостиЦенныхБумаг);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Расходы на услуги банков""/", П010010004_РасходыНаУслугиБанков);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/", П010010004_ПрочиеОперационныеДоходыРасходы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010010004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/ в корреспонденции со счетом 68.02 и 76.Н ", -П04_НДС_ПрочиеОперационныеДоходыРасходы);

		// строка 120 "Внереализационные доходы"
		П010012004 = П010012004_ШтрафыПениНеустойкиКПолучениюУплате          - П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате
		           + П010012004_ПрибыльУбытокПрошлыхЛет                      - П04_НДС_ПрибыльУбытокПрошлыхЛет
		           + П010012004_ВозмещениеУбытковКПолучениюУплате
		           + П010012004_КурсовыеРазницы
		           + П010012004_КурсовыеРазницыПоРасчетамВУЕ
		           + П010012004_СписаниеДебиторскойКредиторскойЗадолженности
		           + П010012004_БезвозмездноеПолучениеИмущества
		           + П010012004_ПрочиеВнереализационныеДоходыРасходы         - П04_НДС_ПрочиеВнереализационныеДоходыРасходы
		           + П010012004_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии;

		УстановитьЗначениеПоказателя("П000010012004", П010012004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012004", "Строка 120 ""Внереализационные доходы"", графа 4 ""За аналогичный период предыдущего года""", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/", П010012004_ШтрафыПениНеустойкиКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/", П010012004_ПрибыльУбытокПрошлыхЛет);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_ПрибыльУбытокПрошлыхЛет);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Возмещение убытков к получению (уплате)""/", П010012004_ВозмещениеУбытковКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы""/", П010012004_КурсовыеРазницы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы по расчетам в у.е.""/", П010012004_КурсовыеРазницыПоРасчетамВУЕ);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Списание дебиторской (кредиторской) задолженности""/", П010012004_СписаниеДебиторскойКредиторскойЗадолженности);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с безвозмездным получением имущества, работ, услуг или имущественных прав""/", П010012004_БезвозмездноеПолучениеИмущества);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/", П010012004_ПрочиеВнереализационныеДоходыРасходы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_ПрочиеВнереализационныеДоходыРасходы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы, связанные с восстановлением амортизационной премии""/", П010012004_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии);

		// строка 130 "Внереализационные расходы"
		П010013004 = П010013004_ШтрафыПениНеустойкиКПолучениюУплате          - П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате
		           + П010013004_ПрибыльУбытокПрошлыхЛет                      - П04_НДС_ПрибыльУбытокПрошлыхЛет
		           + П010013004_ВозмещениеУбытковКПолучениюУплате
		           + П010013004_КурсовыеРазницы
		           + П010013004_КурсовыеРазницыПоРасчетамВУЕ
		           + П010013004_НалогиИСборы
		           + П010013004_ПремияПокупателю
		           + П010013004_СписаниеДебиторскойКредиторскойЗадолженности
		           + П010013004_НДСПоСписаннойКредиторскойЗадолженности
		           + П010013004_БезвозмездноеПолучениеИмущества
		           + П010013004_ПрочиеВнереализационныеДоходыРасходы         - П04_НДС_ПрочиеВнереализационныеДоходыРасходы
		           + П010013004_РасходыОтСниженияСтоимостиАктивов;

		// "Внереализационные расходы" - вычитаемый показатель
		УстановитьЗначениеПоказателя("П000010013004", - П010013004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "Строка 130 ""Внереализационные расходы"", графа 4 ""За аналогичный период предыдущего года""", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/", П010013004_ШтрафыПениНеустойкиКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/", П010013004_ПрибыльУбытокПрошлыхЛет);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_ПрибыльУбытокПрошлыхЛет);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Возмещение убытков к получению (уплате)""/", П010013004_ВозмещениеУбытковКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы""/", П010013004_КурсовыеРазницы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы по расчетам в у.е.""/", П010013004_КурсовыеРазницыПоРасчетамВУЕ);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Налоги и сборы""/", П010013004_НалогиИСборы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Премия, выплаченная покупателю""/", П010013004_ПремияПокупателю);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Списание дебиторской (кредиторской) задолженности""/", П010013004_СписаниеДебиторскойКредиторскойЗадолженности);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""НДС по списанной кредиторской задолженности""/", П010013004_НДСПоСписаннойКредиторскойЗадолженности);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с безвозмездным получением имущества, работ, услуг или имущественных прав""/", П010013004_БезвозмездноеПолучениеИмущества);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/", П010013004_ПрочиеВнереализационныеДоходыРасходы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_ПрочиеВнереализационныеДоходыРасходы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Расходы от снижения стоимости активов""/", П010013004_РасходыОтСниженияСтоимостиАктивов);

		// строка 141 "Отложенные налоговые активы"
		П010014104_09_Д = ДО(Счет09);
		П010014104_09_К = КО(Счет09);

		П010014104 = П010014104_09_Д - П010014104_09_К;
		УстановитьЗначениеПоказателя("П000010014104", П010014104);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014104", "Строка 141 ""Отложенные налоговые активы"", графа 4 ""За аналогичный период предыдущего года""", "+", "!ДО", П010014104_09_Д, Счет09, , мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014104", "", "-", "!КО", -П010014104_09_К, Счет09, , мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);
		
		// строка 142 "Отложенные налоговые обязательства" 
		П010014204_77_К = КО(Счет77);
		П010014204_77_Д = ДО(Счет77);

		П010014204 = П010014204_77_К - П010014204_77_Д;
		УстановитьЗначениеПоказателя("П000010014204", -П010014204);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014204", "Строка 142 ""Отложенные налоговые обязательства"", графа 4 ""За аналогичный период предыдущего года""", "+", "!КО", П010014204_77_К, Счет77, , мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014204", "", "-", "!ДО", -П010014204_77_Д, Счет77, , мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);

		ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "99", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки, , , "Организация", мОргРасшифровка);
		РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();

		// Строка "Чрезвычайные доходы"
		П010013504_99_1_К = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет99_1, Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);
		
		Если П010013504_99_1_К > 0 Тогда
			мФормаОтчета.Области.П000010013501.Значение = "Чрезвычайные доходы";
			мФормаОтчета.Области.П000010013504.Значение = П010013504_99_1_К;
		КонецЕсли;
		
		// Строка "Чрезвычайные расходы"
		П010013504_99_1_Д = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет99_1, Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);
		
		Если П010013504_99_1_Д > 0 Тогда
			мФормаОтчета.Области.П000010013601.Значение = "Чрезвычайные расходы";
			мФормаОтчета.Области.П000010013604.Значение = -П010013504_99_1_Д;
		КонецЕсли;

		// Если ПБУ 18 не применяется, должна выводится строка "Налог на прибыль 
		// и иные аналогичные обязательные платежи", как в "старой" форме №2

		П010018004_99_1_НалогНаПрибыль   = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет99_1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
		П010018004_99_1_НалоговыеСанкции = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет99_1, Перечисления.ПрибылиИУбытки.НалоговыеСанкции);

		П010018004 = П010018004_99_1_НалогНаПрибыль + П010018004_99_1_НалоговыеСанкции;

		Если П010018003 <> 0
		 ИЛИ П010018004 <> 0 Тогда
			НоваяСтрока = СтруктураГруппы1.Получить(0);
			НоваяСтрока.П000010018001 = "Налог на прибыль и иные аналогичные обязательные платежи";
			мФормаОтчета.Области.П000010018001_1.Значение = "Налог на прибыль и иные аналогичные обязательные платежи";
			НовСтр = ТаблДанныхДопСтрок.Добавить();
			НовСтр.П000010018001 = "Налог на прибыль и иные аналогичные обязательные платежи";
			Если П010018003 <> 0 Тогда
				НоваяСтрока.П000010018003 = - П010018003;
				мФормаОтчета.Области.П000010018003_1.Значение = - П010018003;
				НовСтр.П000010018003 =  - П010018003;
			КонецЕсли;
			Если П010018004 <> 0 Тогда
				НоваяСтрока.П000010018004 = - П010018004;
				мФормаОтчета.Области.П000010018004_1.Значение = - П010018004;
				НовСтр.П000010018004 =  - П010018004;
			КонецЕсли;
		КонецЕсли;

		ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "68.04", , , , "Организация", мОргРасшифровка);

		П010015004_68_4_2__68_4_1 = ОБ(Счет68_4_2, Счет68_4_1);
		П010015004_68_4_1__68_4_2 = ОБ(Счет68_4_1, Счет68_4_2);

		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "99", , "68.04.1", , "Организация", мОргРасшифровка);

		П010015004_99_2__68_4_1 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет99_2, Счет68_4_1);
		П010015004_68_4_1__99_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет99_2, Счет68_4_1);

		П010015004 = П010015004_68_4_2__68_4_1 - П010015004_68_4_1__68_4_2 
		           + П010015004_99_2__68_4_1   - П010015004_68_4_1__99_2;

		УстановитьЗначениеПоказателя("П000010015004", -П010015004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010015004", "Строка 150 ""Текущий налог на прибыль"", графа 4 ""За аналогичный период предыдущего года""", "+", "!ОБ", П010015004_68_4_2__68_4_1, Счет68_4_2, Счет68_4_1, мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010015004", "", "-", "!ОБ", -П010015004_68_4_1__68_4_2, Счет68_4_1, Счет68_4_2, мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010015004", "", "+", "!ОБ",  П010015004_99_2__68_4_1, Счет99_2, Счет68_4_1, мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010015004", "", "-", "!ОБ", -П010015004_68_4_1__99_2, Счет68_4_1, Счет99_2, мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);

		// строка 200 "постоянные налоговые обязательства (активы)"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "99.02.3", , "68.04", , "Организация", мОргРасшифровка);

		П010020004_99_2_3__68_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет99_2_3, Счет68_4);
		П010020004_68_4__99_2_3 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет99_2_3, Счет68_4);

		П010020004 = П010020004_99_2_3__68_4 - П010020004_68_4__99_2_3;
		УстановитьЗначениеПоказателя("П000010020004", П010020004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010020004", "Строка 200 ""постоянные налоговые обязательства (активы)"", графа 3 ""За отчетный период""", "+", "!ОБ", П010020004_99_2_3__68_4, Счет99_2_3, Счет68_4, мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010020004", "", "-", "!ОБ", -П010020004_68_4__99_2_3, Счет68_4, Счет99_2_3, мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);

		// строка 210
		П010021003 = П010012003_ШтрафыПениНеустойкиКПолучениюУплате          - П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате;
		УстановитьЗначениеПоказателя("П000010021003", П010021003);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021003", "Строка 210 ""Штрафы, пени, неустойки..."", графа 3", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/", П010012003_ШтрафыПениНеустойкиКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021003", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате);

		П010021004 = П010013003_ШтрафыПениНеустойкиКПолучениюУплате          - П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате;
		УстановитьЗначениеПоказателя("П000010021004", П010021004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021004", "Строка 210 ""Штрафы, пени, неустойки..."", графа 4", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/", П010013003_ШтрафыПениНеустойкиКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/ в корреспонденции со счетом 68.02 и 76.Н", -П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате);

		П010021005 = П010012004_ШтрафыПениНеустойкиКПолучениюУплате          - П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате;
		УстановитьЗначениеПоказателя("П000010021005", П010021005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021005", "Строка 210 ""Штрафы, пени, неустойки..."", графа 5", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/", П010012004_ШтрафыПениНеустойкиКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате);

		П010021006 = П010013004_ШтрафыПениНеустойкиКПолучениюУплате          - П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате;
		УстановитьЗначениеПоказателя("П000010021006", П010021006);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021006", "Строка 210 ""Штрафы, пени, неустойки..."", графа 6", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/", П010013004_ШтрафыПениНеустойкиКПолучениюУплате);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021006", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/ в корреспонденции со счетом 68.02 и 76.Н", -П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате);

		// строка 220
		П010022003 = П010012003_ПрибыльУбытокПрошлыхЛет;
		УстановитьЗначениеПоказателя("П000010022003", П010022003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010022003", "Строка 220 ""Прибыль (убыток) прошлых лет"", графа 3", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/", П010012003_ПрибыльУбытокПрошлыхЛет);
		
		П010022004 = П010013003_ПрибыльУбытокПрошлыхЛет;
		УстановитьЗначениеПоказателя("П000010022004", П010022004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010022004", "Строка 220 ""Прибыль (убыток) прошлых лет"", графа 4", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/", П010013003_ПрибыльУбытокПрошлыхЛет);

		П010022005 = П010012004_ПрибыльУбытокПрошлыхЛет;
		УстановитьЗначениеПоказателя("П000010022005", П010022005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010022005", "Строка 220 ""Прибыль (убыток) прошлых лет"", графа 5", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/", П010012004_ПрибыльУбытокПрошлыхЛет);

		П010022006 = П010013004_ПрибыльУбытокПрошлыхЛет;
		УстановитьЗначениеПоказателя("П000010022006", П010022006);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010022006", "Строка 220 ""Прибыль (убыток) прошлых лет"", графа 6", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/", П010013004_ПрибыльУбытокПрошлыхЛет);

		// строка 230
		П010023003 = П010012003_ВозмещениеУбытковКПолучениюУплате;
		УстановитьЗначениеПоказателя("П000010023003", П010023003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010023003", "Строка 230 ""Возмещение убытков, причиненных неисполнением обязательств"", графа 3", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Возмещение убытков к получению (уплате)""/", П010012003_ВозмещениеУбытковКПолучениюУплате);

		П010023004 = П010013003_ВозмещениеУбытковКПолучениюУплате;
		УстановитьЗначениеПоказателя("П000010023004", П010023004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010023004", "Строка 230 ""Возмещение убытков, причиненных неисполнением обязательств"", графа 4", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Возмещение убытков к получению (уплате)""/", П010013003_ВозмещениеУбытковКПолучениюУплате);

		П010023005 = П010012004_ВозмещениеУбытковКПолучениюУплате;
		УстановитьЗначениеПоказателя("П000010023005", П010023005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010023005", "Строка 230 ""Возмещение убытков, причиненных неисполнением обязательств"", графа 5", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Возмещение убытков к получению (уплате)""/", П010012004_ВозмещениеУбытковКПолучениюУплате);

		П010023006 = П010013004_ВозмещениеУбытковКПолучениюУплате;
		УстановитьЗначениеПоказателя("П000010023006", П010023006);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010023006", "Строка 230 ""Возмещение убытков, причиненных неисполнением обязательств"", графа 6", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Возмещение убытков к получению (уплате)""/", П010013004_ВозмещениеУбытковКПолучениюУплате);

		// строка 240
		П010024005 = П010012004_КурсовыеРазницы + П010012004_КурсовыеРазницыПоРасчетамВУЕ;

		УстановитьЗначениеПоказателя("П000010024005", П010024005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024005", "Строка 240 ""Курсовые разницы по операциям в иностранной валюте"", графа 5", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы""/", П010012004_КурсовыеРазницы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы по расчетам в у.е.""/", П010012004_КурсовыеРазницыПоРасчетамВУЕ);

		П010024006 = П010013004_КурсовыеРазницы + П010013004_КурсовыеРазницыПоРасчетамВУЕ;

		УстановитьЗначениеПоказателя("П000010024006", П010024006);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024006", "Строка 240 ""Курсовые разницы по операциям в иностранной валюте"", графа 6", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы""/", П010013004_КурсовыеРазницы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024006", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы по расчетам в у.е.""/", П010013004_КурсовыеРазницыПоРасчетамВУЕ);

		П010024003 = П010012003_КурсовыеРазницы + П010012003_КурсовыеРазницыПоРасчетамВУЕ;

		УстановитьЗначениеПоказателя("П000010024003", П010024003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "Строка 240 ""Курсовые разницы по операциям в иностранной валюте"", графа 3", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы""/", П010012003_КурсовыеРазницы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024003", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы по расчетам в у.е.""/", П010012003_КурсовыеРазницыПоРасчетамВУЕ);

		П010024004 = П010013003_КурсовыеРазницы + П010013003_КурсовыеРазницыПоРасчетамВУЕ;

		УстановитьЗначениеПоказателя("П000010024004", П010024004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "Строка 240 ""Курсовые разницы по операциям в иностранной валюте"", графа 4", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы""/", П010013003_КурсовыеРазницы);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010024004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы по расчетам в у.е.""/", П010013003_КурсовыеРазницыПоРасчетамВУЕ);

		// строка 250 "Отчисления в оценочные резервы"
		П010025004 = П010010003_ОтчисленияВОценочныеРезервы;
		УстановитьЗначениеПоказателя("П000010025004", П010025004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025004", "Строка 250 ""Отчисления в оценочные резервы"", графа 4", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Отчисления в оценочные резервы""/", П010025004);

		П010025006 = П010010004_ОтчисленияВОценочныеРезервы;
		УстановитьЗначениеПоказателя("П000010025006", П010025006);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025006", "Строка 250 ""Отчисления в оценочные резервы"", графа 6", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Отчисления в оценочные резервы""/", П010025006);

		// строка 260 "Списание дебиторских и кредиторских задолженностей, по которым истек срок исковой давности"
		П010026003 = П010012003_СписаниеДебиторскойКредиторскойЗадолженности;
		УстановитьЗначениеПоказателя("П000010026003", П010026003);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026003", "Строка 260 ""Списание дебиторских и кредиторских задолженнностей"", графа 3", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Списание дебиторской (кредиторской) задолженности""/", П010012003_СписаниеДебиторскойКредиторскойЗадолженности);

		П010026004 = П010013003_СписаниеДебиторскойКредиторскойЗадолженности + П010013003_НДСПоСписаннойКредиторскойЗадолженности;
		УстановитьЗначениеПоказателя("П000010026004", П010026004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026004", "Строка 260 ""Списание дебиторских и кредиторских задолженнностей"", графа 4", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Списание дебиторской (кредиторской) задолженности""/", П010013003_СписаниеДебиторскойКредиторскойЗадолженности);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""НДС по списанной кредиторской задолженности""/", П010013003_НДСПоСписаннойКредиторскойЗадолженности);
		
		П010026005 = П010012004_СписаниеДебиторскойКредиторскойЗадолженности;
		УстановитьЗначениеПоказателя("П000010026005", П010026005);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026005", "Строка 260 ""Списание дебиторских и кредиторских задолженнностей"", графа 5", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Списание дебиторской (кредиторской) задолженности""/", П010012004_СписаниеДебиторскойКредиторскойЗадолженности);

		П010026006 = П010013004_СписаниеДебиторскойКредиторскойЗадолженности + П010013004_НДСПоСписаннойКредиторскойЗадолженности;
		УстановитьЗначениеПоказателя("П000010026006", П010026006);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026006", "Строка 260 ""Списание дебиторских и кредиторских задолженнностей"", графа 6", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Списание дебиторской (кредиторской) задолженности""/", П010013004_СписаниеДебиторскойКредиторскойЗадолженности);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026006", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""НДС по списанной кредиторской задолженности""/", П010013004_НДСПоСписаннойКредиторскойЗадолженности);

		Если ТаблДанныхДопСтрок.Количество() > 0 Тогда
			Если мБезКонсолидации Тогда
				// Создаем и заполняем дополнительные строки.
				АвтозаполнениеДопСтрок(ТаблДанныхДопСтрок, мИдГруппы1);
			Иначе
				// Сохраним в накопительной таблице
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблДанныхДопСтрок, ТаблДанныхДопСтрокОбщ);
				ТаблДанныхДопСтрок.Очистить();
			КонецЕсли;
		КонецЕсли;

		Если НЕ мБезКонсолидации Тогда
			// Если обрабатывается последняя организация из списка, тогда, выводим данные на лист, если таблица общая не пустая.
			Если (СписокОрганизаций.Индекс(Орг) + 1 = СписокОрганизаций.Количество()) И (ТаблДанныхДопСтрокОбщ.Количество() > 0) Тогда
				// Создаем и заполняем дополнительные строки.
				// Сгруппируем данные в таблице.
				ТаблДанныхДопСтрокОбщ.Свернуть("П000010018001", "П000010018003, П000010018004");
				АвтозаполнениеДопСтрок(ТаблДанныхДопСтрокОбщ, мИдГруппы1);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	// В случае, если отчет был консолидирован, то сложим все его показатели в таблице, а затем выведем их на лист.
	Если НЕ мБезКонсолидации Тогда
		мТаблицаИтоговыхПоказателейПриКонсолидации.Свернуть("ИмяПоказателя", "Сумма");
		Для каждого Пок Из мТаблицаИтоговыхПоказателейПриКонсолидации Цикл
			УстановитьЗначениеПоказателя(Пок.ИмяПоказателя, Пок.Сумма, Истина);
		КонецЦикла;
	КонецЕсли;

	Расчет();
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

    ///***
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФормаОтчета";
	СтрокаУровня1.Представление            = "Форма №2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаФормаОтчета";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	ФормироватьСтруктуруСтраницОтчета();

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		РегламентированнаяОтчетность.УдалитьКнопкуЗаполненияПоДаннымИБ(ЭтаФорма);
		РегламентированнаяОтчетность.УдалитьКнопкуРасшифровки(ЭтаФорма, "Расшифровка");
	КонецЕсли;
	
	мВПрограммеИзмененаОрганизация = Ложь;

	мФормаОтчета = ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета;
	ТекТабличноеПоле = мФормаОтчета;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			ТочностьЕдиницыИзмерения = 0;

			мСохранятьРасшифровку = Истина;
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.ПодменюРасшифровка.Кнопки.КнопкаСохранятьРасшифровку.Пометка = Истина;

			УстановитьФорматВывода();
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	мФормаОтчета.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	УстановитьЦветФонаЯчейки(,,"ФормаОтчета");

	ДоступностьКнопокДобавитьУдалить();

	мБезКонсолидации = мГруппаОрганизаций.Количество() = 0;
	НазванияОрганизаций = ПолучитьНазванияОрганизацийСтрокой();
	ЭлементыФормы.Надпись30.Заголовок = НазванияОрганизаций;
	Если НЕ мБезКонсолидации Тогда
		ЭлементыФормы.Надпись30.ГиперСсылка = Истина;
		ЭлементыФормы.Надпись30.Подсказка = "Список организаций, по которым формируется отчет";
		ЭлементыФормы.Надпись.Заголовок = "Организации:";
		Если мСохраненныйДок = Неопределено Тогда
			// При первом открытии отчета, который должен собираться по нескольким организациям
			// в поле Комментарий запишем названия всех организаций.
			КомментарийОбщий = НазванияОрганизаций;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура ПоказатьКодЕИ
// Отображает единицу измерения
//
Процедура ПоказатьКодЕИ()

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мФормаОтчета.Области.КодЕИ.Значение = "383";
		мФормаОтчета.Области.НазвЕИ.Значение = "в рублях";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мФормаОтчета.Области.КодЕИ.Значение = "384";
		мФормаОтчета.Области.НазвЕИ.Значение = "в тыс. рублей";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мФормаОтчета.Области.КодЕИ.Значение = "385";
		мФормаОтчета.Области.НазвЕИ.Значение = "в млн. рублей";
	КонецЕсли;

КонецПроцедуры // ПоказатьКодЕИ

// Процедура управляет доступностью кнопок "Добавить" и "Удалить" формы.
// 
Процедура ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть = Неопределено)

	ИмяТекущейСтраницыПанели = "ФормаОтчета";

	Если Не ТекущаяОбласть = Неопределено Тогда
		КнопкаУдалить  = ЭлементыФормы.Найти("КнопкаУдалитьДопСтроки"  + ИмяТекущейСтраницыПанели);
		КнопкаДобавить = ЭлементыФормы.Найти("КнопкаДобавитьДопСтроки" + ИмяТекущейСтраницыПанели);

		Если (КнопкаДобавить <> Неопределено) И (КнопкаУдалить <> Неопределено) Тогда
			Если РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть ) = Неопределено Тогда
				КнопкаДобавить.Доступность = Ложь;
				КнопкаУдалить.Доступность  = Ложь;
			Иначе
				КнопкаДобавить.Доступность = Истина;
				КнопкаУдалить.Доступность  = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДоступностьКнопокДобавитьУдалить()

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ФормаОтчета";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = "Значение вычисляется автоматически";
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = "Значение вводится вручную";
		КонецЕсли;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Ответ = Вопрос("Внимание! Будут очищены все показатели отчета." + Символы.ПС
		  + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Если Ответ = КодВозвратаДиалога.Нет Тогда

		Возврат;

	Иначе

		Очистить();

	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	мДеревоВыбранныхСтраниц = "";
	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();
	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Ложь;
	ФормаНастройкиОтчета.мПараметры.УправлениеВариантами = Истина;
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	
	Если РезультатВыбора <> Неопределено Тогда
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик нажатия кнопки <Добавить>
//
Процедура КнопкаДобавитьДопСтрокиНажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиНажатие()

// Процедура - обработчик нажатия кнопки <Удалить>
//
Процедура КнопкаУдалитьДопСтрокиНажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	мФормаОтчета.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;

	ЗаполнитьСведенияОбОрганизации(Истина);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленной единицей измерения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленной единицей измерения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаФормаОтчетаПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа.
//   Устанавливает признак модифицированности данных в форме, вызывает пересчет
// вычисляемых показателей  табличных полей и обновляет структуру данных
// многострочного раздела.
//
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзменении(Элемент)

	ОбработчикИзменения();

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа.
//
Процедура ПолеВыбораВариантЗаполненияФормаОтчетаПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораВариантЗаполненияПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиФормаОтчетаПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// "Комментарий" по ячейке, для которой установлен алгоритм автозаполнения 
// [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийФормаОтчетаПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийПриИзменении()

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Процедура добавляет строку в таблицу сообщений, заполняемую по ходу проверки правильности 
// заполнения показателей перед выгрузкой
//
// Параметры:
//	Описание - строка, описание ошибки
//	Раздел - строка, имя раздела, при проверке которого произошла ошибка
//	ИмяЯчейки - строка, имя области табличного документа, соответвующей неверно заполненному показателю
//	ФИО - строка, ФИО физлица. Заполняется для раздела "ФизЛица"
//
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры
	
// Процедура формирует текст выгрузки в части предписанных показателей
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который выгружаются показатели
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	ТекСостРазд = Неопределено;
	
	Если мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 или 
		мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		
		ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧС=3; ЧГ=0";
		
	ИначеЕсли мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		
		ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧС=6; ЧГ=0";
		
	КонецЕсли;
		 
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							//ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							СтрокаПустая = 1;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
								
							КонецЦикла;
							
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла;
								КонецЕсли;
								
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
									
							КонецЦикла;
							
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					
				КонецЦикла;
				
				Текст.ДобавитьСтроку("###");
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						СтрокаПустая = 1;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
							
						КонецЦикла;
						
						Если СтрокаПустая = 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_;
							КонецЕсли;
							
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
								
						КонецЦикла;
						
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						
					КонецЦикла;
					
					Текст.ДобавитьСтроку("###");
					
				КонецЕсли;
				
			Конеццикла;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				
			КонецЦикла;
			
			Текст.ДобавитьСтроку("###");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет раздел на наличие в нем заполненных значимых показателей
// Параметры:
//	Разд - КлючИЗначение, описатель раздела (Ключ - имя, Значение - вид)
//	ПоказателиОтчета - структура, хранящая значения показателей
//
// Возвращаемое значение:
//	Булево - Истина означает, что раздел пуст; Ложь - раздел заполнен
//
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	
	СтраницаПустая = 1;
	
	Если Призн = "#" Тогда //раздел многостранично-многострочный
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		НомСтр = 0;
		
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
			
			НомСтр = НомСтр + 1;
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла;
							КонецЕсли;
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						
					КонецЦикла;
					
				КонецЕсли;//многострочный или обычный подраздел
				
			Конеццикла;//по подразделам

		КонецЦикла;//по страницам
		
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		
		//выгрузка многостраничного раздела
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
			
			НомСтр = НомСтр + 1;
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
				
			КонецЦикла;
			
		КонецЦикла;
		//конец выгрузки многостраничного раздела
		
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
					
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				
				Пока Истина Цикл
					
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						
						Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
							Перейти ~ВыходИзДвойногоЦикла_;
						КонецЕсли;
						
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
							
					КонецЦикла;
					
					ном = ном + 1;
					
				КонецЦикла;
				
				~ВыходИзДвойногоЦикла_:
				
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
											
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
							
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Конеццикла;
		
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);
		
	//Конец проверки на пустые разделы
	
КонецФункции

// Функция проверяет правильность заполнения разделов с предписанными показателями.
// Параметры:
//	БратьИзФормы - булево, признак того, что данные следует брать напрямую из полей табличных документов.
//					Иначе данные берутся из соответствующих переменных модуля
//	ВыводитьСообщения - булево, признак добавления сообщений в таблицу сообщений при обнаружении ошибки заполнения
//	ЧтоПроверять - строка. Если в строке присутствует "1" - проверять значения на заполненность, "2" - на корректность заполнения
//
// Возвращаемое значение:
//	Булево - Истина, если заполнение корректно. Ложь - в противном случае
//
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	
	ИмяРазделаПред = "";
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	Если БратьИзФормы Тогда
		ПоказателиОтчета = Новый Структура();

		Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

		КонецЦикла;
	Иначе
		
		ДанныеОтчета = мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если ДанныеОтчета = Неопределено Тогда
			Сообщить("Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		мСтруктураМногострочныхРазделов = ДанныеОтчета.ДанныеМногострочныхРазделов;

		мСтруктураВариантыЗаполнения = ДанныеОтчета.ДанныеВариантовАвтоЗаполнения;
		
		ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
		
	КонецЕсли;
	
	Показатели = мТаблицаСоставПоказателей.Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//*************************************************************************************************************************	
	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если РазделПуст(Разд, ПоказателиОтчета) Тогда
			Если ОбязРазделов.НайтиПоЗначению(ИмяРаздела) <> Неопределено Тогда
				СообщитьВТС("Обязательный к заполнению раздел пуст!", ИмяРаздела, "");
				СтатусПроверки = 1;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			НомСтр = 0;
			
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦикла__;
								КонецЕсли;
								
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦикла__:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
							
						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
							
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						Пока Истина Цикл
							
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла;
							
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									Перейти ~ВыходИзДвойногоЦиклаВ;
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
								Если Найти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								
							КонецЦикла;
							
							ном = ном + 1;
							
						КонецЦикла;
						
						~ВыходИзДвойногоЦиклаВ:
						
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
													
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
									
							КонецЕсли;
							
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;

						КонецЦикла;
						
					КонецЕсли;//многострочный или обычный подраздел
					
				Конеццикла;//по подразделам
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;

			КонецЦикла;//по страницам
			
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный
			
			//выгрузка многостраничного раздела
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные));
				
				НомСтр = НомСтр + 1;
				
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					
					Если Найти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
					Если Найти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ТекТабличноеПоле        = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					Пока Истина Цикл
						
						//проверка на то, что строка пустая
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						//конец проверки
						
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
								Перейти ~ВыходИзДвойногоЦикла_В;
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
							Если Найти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							
						КонецЦикла;
						
						ном = ном + 1;
						
					КонецЦикла;
					
					~ВыходИзДвойногоЦикла_В:
					
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
												
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
								
						КонецЕсли;
						
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						
						Если Найти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
						Если Найти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				
				Если Найти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
				Если Найти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;//цикл по разделам
	
	Если СтатусПроверки = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	Орг = мСохраненныйДок.Организация;
	ДатаПодписи = мСохраненныйДок.ДатаПодписи;
	ТаблицаСообщений.Очистить();
	РезПроверки1 = ПроверитьШапку(Ложь);
	РезПроверки2 = ПроверитьПредписанныеПоказатели(Ложь);
	Возврат (РезПроверки1 И РезПроверки2);
	
КонецФункции

Процедура Выгрузить() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НЕ НовыйДок.ПолучитьФорму(, ЭтотОбъект).СформироватьИЗаписать(СпДокОсн) Тогда
	Иначе
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьШапку(БратьИзФормы = Истина)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	
	ПредставлениеОтчета = "";//ЭтотОбъект.Метаданные().Представление();
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	
	Орг = мСохраненныйДок.Организация;
	
	ПредставлениеОтчета = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + ". ";
	
	ТекПоказатели = Данные.ПоказателиОтчета.ПолеТабличногоДокументаФормаОтчета;
	
	ОКПО = ТекПоказатели.ОргКодОКПО;
	ОснВидДеят = ТекПоказатели.ОргОтрасль;
	ОКВЭД = ТекПоказатели.ОргКодОКВЭД;
	ОргПравФорм = ТекПоказатели.ОргФорма;
	ОКОПФ = ТекПоказатели.ОргКодОКОПФ;
	ФормСобств = ТекПоказатели.ОргФормаСобств;
	ОКФС = ТекПоказатели.ОргКодОКФС;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОКПО) Тогда
		СообщитьВТС("Не задано значение кода по ОКПО", "ФормаОтчета", "ОргКодОКПО");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОснВидДеят) Тогда
		СообщитьВТС("Не задано наименование основного вида деятельности по ОКВЭД", "ФормаОтчета", "ОргОтрасль");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОКВЭД) Тогда
		СообщитьВТС("Не задан код основного вида деятельности по ОКВЭД", "ФормаОтчета", "ОргКодОКВЭД");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОргПравФорм) Тогда
		СообщитьВТС("Не задано наименование организационно-правовой формы по ОКОПФ", "ФормаОтчета", "ОргФорма");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОКОПФ) Тогда
		СообщитьВТС("Не задан код организационно-правовой формы по ОКОПФ", "ФормаОтчета", "ОргКодОКОПФ");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ФормСобств) Тогда
		СообщитьВТС("Не задано наименование формы собственности по ОКФС", "ФормаОтчета", "ОргФормаСобств");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ОКФС) Тогда
		СообщитьВТС("Не задан код собственности по ОКФС", "ФормаОтчета", "ОргКодОКФС");
		СтатусПроверки = 1;
	КонецЕсли;
	
	Возврат НЕ Булево(СтатусПроверки);
	
КонецФункции

// Процедура обрабатывает результирующий текст выгрузки, 
// полученный после работы универсального процедур и функций
// В процедуре обрабатываются нестандартные ситуации, непредусмотренные универсальным механизмом выгрузки
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст выгрузки
//
Процедура ПроставитьКонцыБлока(Текст)
	
	КонцыБлоков = Новый СписокЗначений;
	КонцыБлоков.Добавить("П000010001004");
	КонцыБлоков.Добавить("П000010001104");
	КонцыБлоков.Добавить("П000010002104");
	КонцыБлоков.Добавить("П000010009004");
	КонцыБлоков.Добавить("П000010009104");
	КонцыБлоков.Добавить("П000010010004");
	КонцыБлоков.Добавить("П000010011004");
	КонцыБлоков.Добавить("П000010012104");
	КонцыБлоков.Добавить("П000010013004");
	КонцыБлоков.Добавить("П000010013104");
	КонцыБлоков.Добавить("П000010017004");
	КонцыБлоков.Добавить("П000010018004");
	КонцыБлоков.Добавить("П000010026006");
	КонцыБлоков.Добавить("П000010027006");
	КонцыБлоков.Добавить("П000010002004");
	КонцыБлоков.Добавить("П000010012004");
	
	ИзменятьЗнакПоказателей = (РабочаяДата >= '20070701000000');
	Если ИзменятьЗнакПоказателей Тогда
		ПоложительныеПоказатели = Новый Соответствие;
		ПоложительныеПоказатели.Вставить("П000010002003", Истина);
		ПоложительныеПоказатели.Вставить("П000010002004", Истина);
		ПоложительныеПоказатели.Вставить("П000010003003", Истина);
		ПоложительныеПоказатели.Вставить("П000010003004", Истина);
		ПоложительныеПоказатели.Вставить("П000010004003", Истина);
		ПоложительныеПоказатели.Вставить("П000010004004", Истина);
		ПоложительныеПоказатели.Вставить("П000010007003", Истина);
		ПоложительныеПоказатели.Вставить("П000010007004", Истина);
		ПоложительныеПоказатели.Вставить("П000010010003", Истина);
		ПоложительныеПоказатели.Вставить("П000010010004", Истина);
		ПоложительныеПоказатели.Вставить("П000010013003", Истина);
		ПоложительныеПоказатели.Вставить("П000010013004", Истина);
		ПоложительныеПоказатели.Вставить("П000010013103", Истина);
		ПоложительныеПоказатели.Вставить("П000010013104", Истина);
		ПоложительныеПоказатели.Вставить("П000010016003", Истина);
		ПоложительныеПоказатели.Вставить("П000010016004", Истина);
		ПоложительныеПоказатели.Вставить("П000010017003", Истина);
		ПоложительныеПоказатели.Вставить("П000010017004", Истина);
		ПоложительныеПоказатели.Вставить("П000010018003", Истина);
		ПоложительныеПоказатели.Вставить("П000010018004", Истина);
	КонецЕсли;
	
	Строки254 = Новый Массив;
	Строки254.Добавить("П000010001101");
	Строки254.Добавить("П000010002101");
	Строки254.Добавить("П000010009101");
	Строки254.Добавить("П000010011001");
	Строки254.Добавить("П000010012101");
	Строки254.Добавить("П000010013101");
	Строки254.Добавить("П000010018001");
	Строки254.Добавить("П000010027001");
	
	КолСтрок = Текст.КоличествоСтрок();
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч + 1;
		ТекСтрока = Текст.ПолучитьСтроку(ТекИнд);
		Тек13Симв = Лев(ТекСтрока, 13);
		Если Строки254.Найти(Тек13Симв) <> Неопределено Тогда
			Текст.ЗаменитьСтроку(ТекИнд, Тек13Симв + ":" + СокрЛП(Сред(ТекСтрока, 15, 254)));
		КонецЕсли;
		Если КонцыБлоков.НайтиПоЗначению(Тек13Симв) <> Неопределено И Лев(Текст.ПолучитьСтроку(ТекИнд + 1), 3) <> "###" Тогда
			ТЕкст.ВставитьСтроку(ТекИнд + 1, "###");
		КонецЕсли;
		Если ИзменятьЗнакПоказателей И ПоложительныеПоказатели.Получить(Тек13Симв) = Истина И Сред(ТекСтрока, 15, 1) = "-" Тогда
			Текст.ЗаменитьСтроку(ТекИнд, Тек13Симв + ":" + Сред(ТекСтрока, 16));
		КонецЕсли;
		Если ТекСтрока = "П000010013101:" И Текст.ПолучитьСтроку(ТекИнд + 1) = "П000010013103:" И Текст.ПолучитьСтроку(ТекИнд + 2) = "П000010013104:" Тогда
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
			Текст.УдалитьСтроку(ТекИнд);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ВыгрузитьШапку(Текст)
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
	ТекПоказатели = Данные.ПоказателиОтчета.ПолеТабличногоДокументаФормаОтчета;
	Данные.Свойство("флОтключитьАвтоматическоеУправлениеВариантами", мОтключитьАвтоматическоеУправлениеВариантами);
	Вид = мСохраненныйДок.Вид;
	
	Дата2Число = ТекПоказатели.ДатаКонцаПериодаОтчетаЧисло;
	Дата2Месяц = ТекПоказатели.ДатаКонцаПериодаОтчетаМесяц;
	Дата2Год   = ТекПоказатели.ДатаКонцаПериодаОтчетаГод;
	Дата2 = Дата(Дата2Год, Дата2Месяц, Дата2Число);
	
	ПризПериодОтч = 2;
	Если КонецДня(Дата2) = КонецГода(Дата2) Тогда
		ПризПериодОтч = 3;
	КонецЕсли;
	
	Если мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		ОКЕИ = 385;
	Иначе
		ОКЕИ = 384;
	КонецЕсли;
	
	Текст.ДобавитьСтроку("ПризФОтч:2");
	Текст.ДобавитьСтроку("КНД:" + КНД);
	Текст.ДобавитьСтроку("НаимФОтч:" + НаименованиеОтчетаДляВыгрузки);
	Текст.ДобавитьСтроку("ВерФОтч:2.01002");
	Текст.ДобавитьСтроку("ПериодВерОтч:16.01.2004,");
	Текст.ДобавитьСтроку("ПризПериодОтч:"	+ ПризПериодОтч);
	Текст.ДобавитьСтроку("НачПериодОтч:"	+ Формат(НачалоГода(Дата2),"ДФ=dd.MM.yyyy; ДП=00.00.0000"));
	Текст.ДобавитьСтроку("КонПериодОтч:"	+ Формат(Дата2,"ДФ=dd.MM.yyyy; ДП=00.00.0000"));
	Текст.ДобавитьСтроку("ОКЕИ:" + ОКЕИ); 
	ВарФОтч = ?(Вид = 999 ИЛИ мОтключитьАвтоматическоеУправлениеВариантами = Истина, 999, Вид + 1);
	Текст.ДобавитьСтроку("ВарФОтч:" + Формат(ВарФОтч, "ЧЦ=3; ЧН=; ЧВН="));//Текст.ДобавитьСтроку("ВарФОтч:999");
	Текст.ДобавитьСтроку("КолПокФОтч:");
	Текст.ДобавитьСтроку("###");

	ОКПО = ТекПоказатели.ОргКодОКПО;
	ОснВидДеят = ТекПоказатели.ОргОтрасль;
	ОКВЭД = ТекПоказатели.ОргКодОКВЭД;
	ОргПравФорм = ТекПоказатели.ОргФорма;
	ОКОПФ = ТекПоказатели.ОргКодОКОПФ;
	ФормСобств = ТекПоказатели.ОргФормаСобств;
	ОКФС = ТекПоказатели.ОргКодОКФС;
	
	Текст.ДобавитьСтроку("ОКПО:" + ВРЕГ(СокрЛП(Лев(ОКПО, 8))));
	Текст.ДобавитьСтроку("ОснВидДеят:" + ВРЕГ(СокрЛП(Лев(ОснВидДеят, 254))));
	Текст.ДобавитьСтроку("ОКВЭД:" + ВРЕГ(СокрЛП(Лев(ОКВЭД, 8))));
	Текст.ДобавитьСтроку("ОргПравФорм:" + ВРЕГ(СокрЛП(Лев(ОргПравФорм, 254))));
	Текст.ДобавитьСтроку("ОКОПФ:" + ВРЕГ(СокрЛП(Лев(ОКОПФ, 2))));
	Текст.ДобавитьСтроку("ФормСобств:" + ВРЕГ(СокрЛП(Лев(ФормСобств, 254))));
	Текст.ДобавитьСтроку("ОКФС:" + ВРЕГ(СокрЛП(Лев(ОКФС, 2))));
	Текст.ДобавитьСтроку("###");
	
КонецПроцедуры

// Функция формирует текст выгрузки. Вызывается из формы ФормаДокумента документа ВыгрузкаРегламентированныхОтчетов
//
// Параметры:
//	Текст - ТекстовыйДокумент, в которой следует добавлять строки. В случае, если параметр не задан - создается 
//			новый объект ТекстовыйДокумент
//
// Возвращаемое значение:
//	Булево - Истина, если текст успешно сформирован; Ложь - в противном случае
//
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПакетнаяВыгрузка = ?(Текст = Неопределено, Ложь, Истина);
	
	Если НЕ ПакетнаяВыгрузка Тогда
		Текст = Новый ТекстовыйДокумент;
	КонецЕсли;
	
	Если Модифицированность и Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПакетнаяВыгрузка Тогда
		ПутьВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки();
		Если ПутьВыгрузки = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		Сохранить();
	КонецЕсли;
	
	Данные = мСохраненныйДок.ДанныеОтчета.Получить();
		
	ВыгрузитьШапку(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, НЕ ПакетнаяВыгрузка);
	
	ПроставитьКонцыБлока(Текст);
	
	Если НЕ ПакетнаяВыгрузка Тогда
		Текст.ДобавитьСтроку("@@@");
		Текст.ДобавитьСтроку("===" + Символы.ПС);
	КонецЕсли;
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:"+РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;

	Если НЕ ПакетнаяВыгрузка Тогда
		ИмяФайлаВыгрузки = "отладка.txt";
							
		Текст.Записать(ПутьВыгрузки + ИмяФайлаВыгрузки, КодировкаТекста.OEM);
		
		сообщить("Выгрузка завершена!");
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура заполняет переменную модуля мТаблицаСоставПоказателей из соответствующего макета отчета
// 
// Параметры:
//	Нет.
//
Процедура ИнициализацияСоставаПоказателей() Экспорт

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	// Таблица значений хранит состав показателей отчета.
	// В колонках таблицы хранятся следующие данные:
	//    - имя поля табличного документа;
	//    - код показатели по составу показателей;
	//    - код показателя по форме (имя области табличного документа);
	//    - признак многострочности;
	//    - тип данных показателя.
	//
	мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
	мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
	мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",		      ОписаниеТиповСтрока15);
	мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",    	  ОписаниеТиповСтрока15);

	МакетСоставаПоказателей = ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// доп. описание показателя
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			// признак обязательности заполнения показателя
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасшифровка(Кнопка)
	Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
	Обраб.Форма = ЭтаФорма;
	Обраб.ИмяЯчейки = ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть.Имя;
	Обраб.ПолучитьФорму(, ЭтаФорма).Показать();
	//РегламентированнаяОтчетность.роПолучитьОбщуюФорму("РасшифровкаЗначенияПоказателя").Показать(ЭтаФорма, ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть.Имя);
КонецПроцедуры

Процедура КоманднаяПанельФормыСохранять(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	мСохранятьРасшифровку = Кнопка.Пометка;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")
	 Или (Найти(ОбластьИмя, "П00001001800") > 0)
	 Или (Найти(ОбластьИмя, "П00001002700") > 0)) Тогда
		ОбработчикИзменения();
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

// Надпись30Нажатие
//
Процедура Надпись30Нажатие(Элемент)
	// Вставить содержимое обработчика.
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	СписокОрганизаций.ВыбратьЭлемент("Список организаций, по которым формируется отчет");
КонецПроцедуры // Надпись30Нажатие

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияФормаОтчета.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияФормаОтчета.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияФормаОтчета.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1 = "П0000100180";
мИдГруппы2 = "П0000100270";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 1;
КолИсхСтрокИдГруппы2 = 1;

// Структура строк многострочного раздела
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000010018001", ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("П000010018003", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000010018004", ОписаниеТиповЧисло);

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000010027001", ОписаниеТиповСтрока);
СтруктураГруппы2.Колонки.Добавить("П000010027003", ОписаниеТиповЧисло);
СтруктураГруппы2.Колонки.Добавить("П000010027004", ОписаниеТиповЧисло);
СтруктураГруппы2.Колонки.Добавить("П000010027005", ОписаниеТиповЧисло);
СтруктураГруппы2.Колонки.Добавить("П000010027006", ОписаниеТиповЧисло);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "30/09/2003";
// Код отчета, равен коду по ОКУД
мКодОтчета   = "0710002";

//универсальная выгрузка и попутные
РежимОтладки = Ложь;

ОбязРазделов = Новый СписокЗначений;
//ОбязРазделов.Добавить("Баланс");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить("СоставПоказателей", "Формат 2.01002", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

НаименованиеОтчетаДляВыгрузки = "ОТЧЕТ О ПРИБЫЛЯХ И УБЫТКАХ";
КНД = "0710002";

мПечатныеФормы = Новый СписокЗначений;

СпП = Новый ТаблицаЗначений;
СпП.Колонки.Добавить("НомСтроки");
СпП.Колонки.Добавить("ИмяЯчейки");
СпП.Колонки.Добавить("ИмяПоказателя");
СпП.Колонки.Добавить("ЗнакОперации");
СпП.Колонки.Добавить("ИмяСлагаемого");
СпП.Колонки.Добавить("Сумма");
СпП.Колонки.Добавить("КодСчета");
СпП.Колонки.Добавить("КодКорСчета");
СпП.Колонки.Добавить("ДатаНачала");
СпП.Колонки.Добавить("ДатаКонца");
СпП.Колонки.Добавить("Сдвиг");
СпП.Колонки.Добавить("Раздел");
СпП.Колонки.Добавить("Страница");
СпП.Колонки.Добавить("МнЧ");
СпП.Колонки.Добавить("СтрокаПП");
СпП.Колонки.Добавить("Субконто1");
СпП.Колонки.Добавить("Субконто2");
СпП.Колонки.Добавить("Субконто3");
СпП.Колонки.Добавить("Организация"); // Ссылка на организацию.

// Объявим таблицу значений мТаблицаИтоговыхПоказателейПриКонсолидации.
// Используется при заполнении отчета за несколько организаций. Хранит данные по показателям
// которые записываются через процедуру УстановитьЗначениеПоказателя.

мТаблицаИтоговыхПоказателейПриКонсолидации = Новый ТаблицаЗначений;
мТаблицаИтоговыхПоказателейПриКонсолидации.Колонки.Добавить("ИмяПоказателя");
мТаблицаИтоговыхПоказателейПриКонсолидации.Колонки.Добавить("Сумма");
