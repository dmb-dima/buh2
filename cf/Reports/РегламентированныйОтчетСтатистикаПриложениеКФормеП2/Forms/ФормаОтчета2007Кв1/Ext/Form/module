////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
Перем мФормаОтчета;

// хранит код отчета по КНД
Перем мКодОтчета;

// хранит версию формы отчета
Перем мВерсияФормы Экспорт;

Перем мПечатныеФормы Экспорт;

Перем мВПрограммеИзмененаОрганизация;

Перем мАдресвФорматеДляВыгрузки;

// Настройка св-в листов
Перем мСвойстваРазделовДекларации Экспорт;

Перем мОписаниеТиповБулево;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Блок обязательных процедур
// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  мОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ФормаОтчета";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	мФормаОтчета.Области.П010000201.Значение = мФормаОтчета.Области.П010000202.Значение + мФормаОтчета.Области.П010000203.Значение + мФормаОтчета.Области.П010000204.Значение;
	мФормаОтчета.Области.П010000301.Значение = мФормаОтчета.Области.П010000302.Значение + мФормаОтчета.Области.П010000303.Значение;
	мФормаОтчета.Области.П010000401.Значение = мФормаОтчета.Области.П010000402.Значение + мФормаОтчета.Области.П010000403.Значение + мФормаОтчета.Области.П010000404.Значение;
	мФормаОтчета.Области.П010000501.Значение = мФормаОтчета.Области.П010000502.Значение + мФормаОтчета.Области.П010000503.Значение;
	мФормаОтчета.Области.П010000701.Значение = мФормаОтчета.Области.П010000702.Значение + мФормаОтчета.Области.П010000703.Значение + мФормаОтчета.Области.П010000704.Значение;
	мФормаОтчета.Области.П010000801.Значение = мФормаОтчета.Области.П010000802.Значение + мФормаОтчета.Области.П010000803.Значение + мФормаОтчета.Области.П010000804.Значение;
	мФормаОтчета.Области.П010000901.Значение = мФормаОтчета.Области.П010000902.Значение + мФормаОтчета.Области.П010000903.Значение;
	мФормаОтчета.Области.П010001001.Значение = мФормаОтчета.Области.П010001002.Значение + мФормаОтчета.Области.П010001003.Значение + мФормаОтчета.Области.П010001004.Значение;
	мФормаОтчета.Области.П010001101.Значение = мФормаОтчета.Области.П010001102.Значение + мФормаОтчета.Области.П010001103.Значение + мФормаОтчета.Области.П010001104.Значение;
	мФормаОтчета.Области.П010001201.Значение = мФормаОтчета.Области.П010001202.Значение + мФормаОтчета.Области.П010001203.Значение + мФормаОтчета.Области.П010001204.Значение;

	мФормаОтчета.Области.П010000101.Значение = мФормаОтчета.Области.П010000201.Значение + мФормаОтчета.Области.П010000401.Значение + мФормаОтчета.Области.П010000701.Значение + мФормаОтчета.Области.П010001001.Значение + мФормаОтчета.Области.П010001201.Значение;
	мФормаОтчета.Области.П010000102.Значение = мФормаОтчета.Области.П010000202.Значение + мФормаОтчета.Области.П010000402.Значение + мФормаОтчета.Области.П010000702.Значение + мФормаОтчета.Области.П010001002.Значение + мФормаОтчета.Области.П010001202.Значение;
	мФормаОтчета.Области.П010000103.Значение = мФормаОтчета.Области.П010000203.Значение + мФормаОтчета.Области.П010000403.Значение + мФормаОтчета.Области.П010000703.Значение + мФормаОтчета.Области.П010001003.Значение + мФормаОтчета.Области.П010001203.Значение;
	мФормаОтчета.Области.П010000104.Значение = мФормаОтчета.Области.П010000204.Значение + мФормаОтчета.Области.П010000404.Значение + мФормаОтчета.Области.П010000704.Значение + мФормаОтчета.Области.П010001004.Значение + мФормаОтчета.Области.П010001204.Значение;
	мФормаОтчета.Области.П010000105.Значение = мФормаОтчета.Области.П010000205.Значение + мФормаОтчета.Области.П010000405.Значение + мФормаОтчета.Области.П010000705.Значение + мФормаОтчета.Области.П010001005.Значение + мФормаОтчета.Области.П010001205.Значение;
	мФормаОтчета.Области.П010000106.Значение = мФормаОтчета.Области.П010000406.Значение + мФормаОтчета.Области.П010000706.Значение + мФормаОтчета.Области.П010001006.Значение + мФормаОтчета.Области.П010001206.Значение;
	мФормаОтчета.Области.П010000107.Значение = мФормаОтчета.Области.П010000207.Значение + мФормаОтчета.Области.П010000407.Значение + мФормаОтчета.Области.П010000707.Значение + мФормаОтчета.Области.П010001007.Значение + мФормаОтчета.Области.П010001207.Значение;

	мФормаОтчета.Области.П020002601.Значение = мФормаОтчета.Области.П020002701.Значение
	                                         + мФормаОтчета.Области.П020002801.Значение
	                                         + мФормаОтчета.Области.П020002901.Значение
	                                         + мФормаОтчета.Области.П020003001.Значение
	                                         + мФормаОтчета.Области.П020003101.Значение
	                                         + мФормаОтчета.Области.П020003201.Значение
	                                         + мФормаОтчета.Области.П020003301.Значение;

	мФормаОтчета.Области.П020002602.Значение = мФормаОтчета.Области.П020002702.Значение
	                                         + мФормаОтчета.Области.П020002802.Значение
	                                         + мФормаОтчета.Области.П020002902.Значение
	                                         + мФормаОтчета.Области.П020003002.Значение
	                                         + мФормаОтчета.Области.П020003102.Значение
	                                         + мФормаОтчета.Области.П020003202.Значение
	                                         + мФормаОтчета.Области.П020003302.Значение;

	мФормаОтчета.Области.П020002603.Значение = мФормаОтчета.Области.П020002703.Значение
	                                         + мФормаОтчета.Области.П020002803.Значение
	                                         + мФормаОтчета.Области.П020002903.Значение
	                                         + мФормаОтчета.Области.П020003003.Значение
	                                         + мФормаОтчета.Области.П020003103.Значение
	                                         + мФормаОтчета.Области.П020003203.Значение
	                                         + мФормаОтчета.Области.П020003303.Значение;

	мФормаОтчета.Области.П020002604.Значение = мФормаОтчета.Области.П020002704.Значение
	                                         + мФормаОтчета.Области.П020002804.Значение
	                                         + мФормаОтчета.Области.П020002904.Значение
	                                         + мФормаОтчета.Области.П020003004.Значение
	                                         + мФормаОтчета.Области.П020003104.Значение
	                                         + мФормаОтчета.Области.П020003204.Значение
	                                         + мФормаОтчета.Области.П020003304.Значение;

	мФормаОтчета.Области.П020002605.Значение = мФормаОтчета.Области.П020002705.Значение
	                                         + мФормаОтчета.Области.П020002805.Значение
	                                         + мФормаОтчета.Области.П020002905.Значение
	                                         + мФормаОтчета.Области.П020003005.Значение
	                                         + мФормаОтчета.Области.П020003105.Значение
	                                         + мФормаОтчета.Области.П020003205.Значение
	                                         + мФормаОтчета.Области.П020003305.Значение;

	мФормаОтчета.Области.П020002606.Значение = мФормаОтчета.Области.П020002706.Значение
	                                         + мФормаОтчета.Области.П020002806.Значение
	                                         + мФормаОтчета.Области.П020002906.Значение
	                                         + мФормаОтчета.Области.П020003006.Значение
	                                         + мФормаОтчета.Области.П020003106.Значение
	                                         + мФормаОтчета.Области.П020003206.Значение
	                                         + мФормаОтчета.Области.П020003306.Значение;

	мФормаОтчета.Области.П020002607.Значение = мФормаОтчета.Области.П020002707.Значение
	                                         + мФормаОтчета.Области.П020002807.Значение
	                                         + мФормаОтчета.Области.П020002907.Значение
	                                         + мФормаОтчета.Области.П020003007.Значение
	                                         + мФормаОтчета.Области.П020003107.Значение
	                                         + мФормаОтчета.Области.П020003207.Значение
	                                         + мФормаОтчета.Области.П020003307.Значение;

	мФормаОтчета.Области.П020002608.Значение = мФормаОтчета.Области.П020002708.Значение
	                                         + мФормаОтчета.Области.П020002808.Значение
	                                         + мФормаОтчета.Области.П020002908.Значение
	                                         + мФормаОтчета.Области.П020003008.Значение
	                                         + мФормаОтчета.Области.П020003108.Значение
	                                         + мФормаОтчета.Области.П020003208.Значение
	                                         + мФормаОтчета.Области.П020003308.Значение;

	мФормаОтчета.Области.П020002609.Значение = мФормаОтчета.Области.П020002709.Значение
	                                         + мФормаОтчета.Области.П020002809.Значение
	                                         + мФормаОтчета.Области.П020002909.Значение
	                                         + мФормаОтчета.Области.П020003009.Значение
	                                         + мФормаОтчета.Области.П020003109.Значение
	                                         + мФормаОтчета.Области.П020003209.Значение
	                                         + мФормаОтчета.Области.П020003309.Значение;

	мФормаОтчета.Области.П020002610.Значение = мФормаОтчета.Области.П020002710.Значение
	                                         + мФормаОтчета.Области.П020002810.Значение
	                                         + мФормаОтчета.Области.П020002910.Значение
	                                         + мФормаОтчета.Области.П020003010.Значение
	                                         + мФормаОтчета.Области.П020003110.Значение
	                                         + мФормаОтчета.Области.П020003210.Значение
	                                         + мФормаОтчета.Области.П020003310.Значение;

	мФормаОтчета.Области.П020002611.Значение = мФормаОтчета.Области.П020002711.Значение
	                                         + мФормаОтчета.Области.П020002811.Значение
	                                         + мФормаОтчета.Области.П020002911.Значение
	                                         + мФормаОтчета.Области.П020003011.Значение
	                                         + мФормаОтчета.Области.П020003111.Значение
	                                         + мФормаОтчета.Области.П020003211.Значение
	                                         + мФормаОтчета.Области.П020003311.Значение;

	мФормаОтчета.Области.П020002612.Значение = мФормаОтчета.Области.П020002712.Значение
	                                         + мФормаОтчета.Области.П020002812.Значение
	                                         + мФормаОтчета.Области.П020002912.Значение
	                                         + мФормаОтчета.Области.П020003012.Значение
	                                         + мФормаОтчета.Области.П020003112.Значение
	                                         + мФормаОтчета.Области.П020003212.Значение
	                                         + мФормаОтчета.Области.П020003312.Значение;

	мФормаОтчета.Области.П020002613.Значение = мФормаОтчета.Области.П020002713.Значение
	                                         + мФормаОтчета.Области.П020002813.Значение
	                                         + мФормаОтчета.Области.П020002913.Значение
	                                         + мФормаОтчета.Области.П020003013.Значение
	                                         + мФормаОтчета.Области.П020003113.Значение
	                                         + мФормаОтчета.Области.П020003213.Значение
	                                         + мФормаОтчета.Области.П020003313.Значение;

	мФормаОтчета.Области.П020002614.Значение = мФормаОтчета.Области.П020002714.Значение
	                                         + мФормаОтчета.Области.П020002814.Значение
	                                         + мФормаОтчета.Области.П020002914.Значение
	                                         + мФормаОтчета.Области.П020003014.Значение
	                                         + мФормаОтчета.Области.П020003114.Значение
	                                         + мФормаОтчета.Области.П020003214.Значение
	                                         + мФормаОтчета.Области.П020003314.Значение;

	мФормаОтчета.Области.П020002615.Значение = мФормаОтчета.Области.П020002715.Значение
	                                         + мФормаОтчета.Области.П020002815.Значение
	                                         + мФормаОтчета.Области.П020002915.Значение
	                                         + мФормаОтчета.Области.П020003015.Значение
	                                         + мФормаОтчета.Области.П020003115.Значение
	                                         + мФормаОтчета.Области.П020003215.Значение
	                                         + мФормаОтчета.Области.П020003315.Значение;

	мФормаОтчета.Области.П020002616.Значение = мФормаОтчета.Области.П020002716.Значение
	                                         + мФормаОтчета.Области.П020002816.Значение
	                                         + мФормаОтчета.Области.П020002916.Значение
	                                         + мФормаОтчета.Области.П020003016.Значение
	                                         + мФормаОтчета.Области.П020003116.Значение
	                                         + мФормаОтчета.Области.П020003216.Значение
	                                         + мФормаОтчета.Области.П020003316.Значение;

КонецПроцедуры // Расчет()

// Функция собирает значения редактирукемых ячеек +табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	СтруктураДанныхПоля.Вставить("ОргАдрес", мАдресвФорматеДляВыгрузки);

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	СтрПериод = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'") + " г.";

	ПериодОтчета = " " + СтрПериод;

	// Период в заголовке отчета
	мФормаОтчета.Области.ПериодОтчета.Значение = ПериодОтчета;

	// Период в заголовке отчета
	// Для показа периода в заголовке берется текст из заголовка основной формы
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'")+ " г.)";

КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "КППЮЛ"); // КПП
		Сведения.Добавить("", "ОКПО");  // ОКПО

		Сведения.Добавить("", "АдрПочт");
		Сведения.Добавить("", "ТелОрганизации");
		Сведения.Добавить("", "НаимЮЛПол");

		Сведения.Добавить("", "ОснВидДеят");
		Сведения.Добавить("", "ОКВЭД");
		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКАТО");
		Сведения.Добавить("", "ОКОПФ");
		Сведения.Добавить("", "ОКФС");
	КонецЕсли;

	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ФИОБух");
	Сведения.Добавить("", "ФИОИсп");
	Сведения.Добавить("", "ДолжнИсп");

	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ИННЮЛ = "";
		КППЮЛ = "";
		ОКПО = "";
		АдрПочт     = "";

		ТелОрганизации   = "";
		НаимЮЛПол = "";
		ОснВидДеят = "";
		ОКВЭД = "";
		ОКПО = "";
		
	КонецЕсли;

	ОргДиректор  = "";
	ОргБухгалтер = "";
	ДолжнИсп = "";
	ФИОИсп = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ОргСведения.Свойство("ИННЮЛ",          ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ",          КППЮЛ);
		ОргСведения.Свойство("ОКПО",           ОКПО);
		ОргСведения.Свойство("АдрПочт",        АдрПочт);
		ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
		ОргСведения.Свойство("НаимЮЛПол",      НаимЮЛПол);
		ОргСведения.Свойство("ОКВЭД",          ОКВЭД);
		ОргСведения.Свойство("ОснВидДеят",     ОснВидДеят);
		ОргСведения.Свойство("ОКПО",           ОКПО);

	КонецЕсли;

	ОргСведения.Свойство("ФИОРук",         ОргДиректор );
	ОргСведения.Свойство("ФИОБух",         ОргБухгалтер);
	ОргСведения.Свойство("ДолжнИсп",         ДолжнИсп);
	ОргСведения.Свойство("ФИОИсп",         ФИОИсп);

	Если ВПрограммеИзмененаДатаПодписи Тогда

		мФормаОтчета.Области.ОргДиректор.Значение  = ОргДиректор;
		мФормаОтчета.Области.ОргИсполнитель.Значение = ФИОИсп;
		мФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;

		Возврат;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргКодОКВЭД.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргКодОКВЭД.Значение = ОКВЭД;
	КонецЕсли;
	
	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргВидДеят.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргВидДеят.Значение = ОснВидДеят;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргКодОКПО.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргКодОКПО.Значение = ОКПО;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргНазв.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргАдрес.Значение)) Тогда

		Если (НЕ РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(АдрПочт, ",", ""))) Тогда
			
			мФормаОтчета.Области.ОргАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(АдрПочт);
			мАдресвФорматеДляВыгрузки = АдрПочт;
		Иначе
			мФормаОтчета.Области.ОргАдрес.Значение = "";
			мАдресвФорматеДляВыгрузки = "";
		КонецЕсли;

	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргДиректор.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргДиректор.Значение = ОргДиректор;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргИсполнитель.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргИсполнитель.Значение = ФИОИсп;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргДолжностьИсп.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргТелефон.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргТелефон.Значение = ТелОрганизации;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле) Экспорт

	Перем СписокПоказателейНеПодлежащихОчистке;
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргВидДеят");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКВЭД");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодЗнач");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДиректор");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДолжностьИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргИсполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргТелефон");

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Расчет();

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ЧтоИскать <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяТабличногоПоля, НаименованиеЛиста, ЧтоИскать", "ПолеТабличногоДокументаФормаОтчета", "Приложение к форме П-2", ЧтоИскать);
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПоиска);
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();
	ОбластиСтроки = Новый Структура;
	Для Каждого Обл Из ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ОбластиСтроки.Вставить(Обл.Имя, ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть(Обл.Имя));
		КонецЕсли;
	КонецЦикла;
	Для Каждого Обл Из ОбластиСтроки Цикл
		ПечатнаяФорма = Новый ТабличныйДокумент();
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
		ПечатнаяФорма.Вывести(Обл.Значение);
		мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма П-2 (краткая)");
	КонецЦикла;

	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = Неопределено;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.Комментарий                = Комментарий;

	// мСохраненныйДок.КодИМНС                    = ПолучитьКодИМНС();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаФормаОтчета";

	ТекТабличноеПоле        = мФормаОтчета;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", Неопределено);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	мАдресвФорматеДляВыгрузки = мФормаОтчета.Области.ОргАдрес.Значение;
	мФормаОтчета.Области.ОргАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузки);

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	Модифицированность = Ложь;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	мВПрограммеИзмененаОрганизация = Ложь;

	мФормаОтчета = ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета;
	ТекТабличноеПоле = мФормаОтчета;

	ФормироватьСтруктуруСвойствСтраниц();

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;
	мАдресвФорматеДляВыгрузки = "";

	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		КонецЕсли;

	Иначе

		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	мФормаОтчета.Области.ДатаСоставленияОтчета.Значение = Формат(ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'""");

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	ТекущийЭлемент = мФормаОтчета;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// ПолеТабличногоДокументаФормаОтчетаВыбор
//
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)

	Если Область.Имя = "ОргАдрес" Тогда

		СтандартнаяОбработка = Ложь;

		ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", мАдресвФорматеДляВыгрузки);

		Если ВводАдреса.ОткрытьМодально() Тогда

			мАдресвФорматеДляВыгрузки = ВводАдреса.НачальноеЗначениеВыбора.Представление;
			Если мАдресвФорматеДляВыгрузки = ",,,,,,,,," Тогда
				мАдресвФорматеДляВыгрузки = "";
			КонецЕсли;

			Область.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузки);

			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаВыбор

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

    Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	мФормаОтчета.Области.ДатаСоставленияОтчета.Значение = Формат(ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'""");
	ЗаполнитьСведенияОбОрганизации(Истина);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Расчет();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти

// ЗаполнитьДатуВЯчейках
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт
	// Процедура "заглушка", для роОчистить.
	Возврат;
КонецПроцедуры // ЗаполнитьДатуВЯчейках

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Версия формы
мВерсияФормы = "01/01/2006"; 

// Код отчета, равен коду по ОКУД
мКодОтчета   = "0617007";

мПечатныеФормы = Новый СписокЗначений;

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);
