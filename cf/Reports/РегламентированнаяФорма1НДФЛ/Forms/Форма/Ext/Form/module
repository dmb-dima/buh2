////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;
Перем мСписокВыбораОКАТОиКПП;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ВидимостьПолейОКАТО()

	ЭтоЮрЛицо = Организация.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо;
	
	ЭлементыФормы.КодПоОКАТО.ТолькоПросмотр = Не ЭтоЮрЛицо;

	Если ЭтоЮрЛицо Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ПустаяОрганизация",Справочники.Организации.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойКодПоОКАТО","");
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Наименование + "": "" + Организации.КодПоОКАТО КАК Представление,
		|	Организации.КодПоОКАТО,
		|	ВЫБОР
		|		КОГДА Организации.ГоловнаяОрганизация = &ПустаяОрганизация
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Организации.ГоловнаяОрганизация = &ПустаяОрганизация
		|				ТОГДА Организации.Ссылка
		|			ИНАЧЕ Организации.ГоловнаяОрганизация
		|		КОНЕЦ = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Владелец.Наименование + "", "" + ПодразделенияОрганизаций.Наименование + "": "" + ПодразделенияОрганизаций.КодПоОКАТО,
		|	ПодразделенияОрганизаций.КодПоОКАТО,
		|	ВЫБОР
		|		КОГДА ПодразделенияОрганизаций.Владелец.ГоловнаяОрганизация = &ПустаяОрганизация
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ПодразделенияОрганизаций.Владелец.ГоловнаяОрганизация = &ПустаяОрганизация
		|				ТОГДА ПодразделенияОрганизаций.Владелец
		|			ИНАЧЕ ПодразделенияОрганизаций.Владелец.ГоловнаяОрганизация
		|		КОНЕЦ = &Организация
		|	И ПодразделенияОрганизаций.КодПоОКАТО <> &ПустойКодПоОКАТО
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";

		НаборыДанных = Запрос.Выполнить().Выгрузить(); 
		
		// Если не нашли данных - ничего не делаем
		Если НаборыДанных.Количество() = 0 Тогда
			мСписокВыбораОКАТОиКПП = Новый СписокЗначений;
		Иначе
			
			МаксимальнаяДлина = 40;
			мСписокВыбораОКАТОиКПП = Новый СписокЗначений;
			Для Каждого СтрокаЗапроса Из НаборыДанных Цикл
				МаксимальнаяДлина = Макс(МаксимальнаяДлина,СтрДлина(СтрокаЗапроса.Представление));
				мСписокВыбораОКАТОиКПП.Добавить(СтрокаЗапроса, СтрокаЗапроса.Представление);
			КонецЦикла;
			
			ЭлементыФормы.КодПоОКАТО.ШиринаСпискаВыбора = МаксимальнаяДлина;
			
		КонецЕсли; 

	Иначе 	
		мСписокВыбораОКАТОиКПП = Новый СписокЗначений;
		КодПоОКАТО = "";
	КонецЕсли;				
	
КонецПроцедуры

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровТайпинга()

	СтруктураПараметров = Новый Структура("ГоловнаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "При открытии" формы отчета.
//
Процедура ПриОткрытии()

	
	// Проверка ведения однофирменности
	Организация = глЗначениеПеременной("ОсновнаяОрганизация");
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ВидимостьПолейОКАТО();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный")
	КонецЕсли;
	РД = ОбщегоНазначения.ПолучитьРабочуюДату();
	Если НЕ ЗначениеЗаполнено(ДатаПодписи) Тогда
		ДатаПодписи = РД;
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(НалоговыйПериод) Тогда
		НалоговыйПериод = Макс(Год(РД), 2003);
	КонецЕсли; 
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "Обработка выбора" формы отчета.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Физлицо = ЗначениеВыбора.Физлицо;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ

// Процедура-обработчик события нажатия кнопки "Сформировать"
Процедура ДействияФормыСформировать(Кнопка)
	СформироватьОтчет(ЭлементыФормы.ДокументРезультат);
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "На принтер"
Процедура ДействияФормыНаПринтер(Кнопка)
	
	ЭлементыФормы.ДокументРезультат.Напечатать();

КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.НовыйОтчет.
//
Процедура ДействияФормыФормыНовыйОтчет(Кнопка)
	
	Если Строка(ЭтотОбъект) = "ВнешняяОбработкаОбъект." + ЭтотОбъект.Метаданные().Имя Тогда
			
		Предупреждение("Данный отчет является внешней обработкой." + Символы.ПС + "Открытие нового отчета возможно только для объектов конфигурации.");
		Возврат;
			
	Иначе
			
		НовыйОтчет = Отчеты[ЭтотОбъект.Метаданные().Имя].Создать();
			
	КонецЕсли;
	
	ФормаНовогоОтчета = НовыйОтчет.ПолучитьФорму();
	ФормаНовогоОтчета.Открыть();

КонецПроцедуры // КоманднаяПанельФормыДействиеНовыйОтчет()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

Процедура ОрганизацияПриИзменении(Элемент)
	ВидимостьПолейОКАТО()
КонецПроцедуры

Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = ПроцедурыУправленияПерсоналом.ПолучитьСписокГоловныхОрганизаций();
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ВидимостьПолейОКАТО()
	КонецЕсли;
КонецПроцедуры

Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), ЭтаФорма, Тип("СправочникСсылка.Организации"), мОбработкаТайпинга, мТекстТайпинга, мПоследнееЗначениеЭлементаТайпинга, Ложь);
	
КонецПроцедуры

Процедура ОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), Тип("СправочникСсылка.Организации"));
	
КонецПроцедуры

Процедура КодПоОКАТОНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлементСписка = ВыбратьИзСписка(мСписокВыбораОКАТОиКПП,Элемент,мСписокВыбораОКАТОиКПП.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение.КодПоОКАТО
	КонецЕсли;
КонецПроцедуры

Процедура ДокументРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Предупреждение(Расшифровка);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	ВидимостьПолейОКАТО();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мОбработкаТайпинга                 = Ложь;
мТекстТайпинга                     = "";
мПоследнееЗначениеЭлементаТайпинга = Неопределено;

мСписокВыбораОКАТОиКПП = Новый СписокЗначений;



