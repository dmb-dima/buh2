////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Переменная для хранения вида сдачи отчетности
// Значения:
//      1 - обычная
//      2 - промежуточная при ликвидации/реорганизации
//      3 - ликвидационная
//      Иные значения должны трактоваться как эквивалентные 1
Перем ВидСдачиОтчетности;

// переменная для хранения соответствия исходной кодировки счетов и объектов плана счетов Хозрасчетный
// тип - соответствие, инициализируется процедурой ЗаполнитьСоответствиеСчетов()
Перем мСчет;

Перем ИДКонфигурации; // идентификатор конфигурации

// переменная для хранения настройки состава дополнительных строк
// тип - структура:
// 		Версия - текст, номер версии состава по умолчанию
//		Модифицирован - булево, признак отличих состава доп.строк от состава по умолчанию
//		ДеревоСостава - структура, с составом допстрок по отчетам
Перем СоставДополнительныхСтрок;

// переменная для хранения информации о том, что организация применяла ЕНВД в отчетный период или в предшествующий год
Перем ПрименениеЕНВД;

// переменная для хранения имени макета с настройками состава доп.строк по умолчанию
Перем ИмяМакетаНастроекСоставаДопСтрок;

// переменные для хранения ссылок на поле табличного документа с макетом отчета
Перем мБаланс; 			// Бухгалтерский баланс
Перем мФормаОтчета; 	// Отчет о прибылях и убытках

// переменные для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС;

// переменные для хранения имен многострочных разделов
Перем мИдБаланс11199, мИдБаланс11299, мИдБаланс11399, мИдБаланс11499, мИдБаланс11599, мИдБаланс11699, мИдБаланс11799;
Перем мИдБаланс12199, мИдБаланс12299, мИдБаланс12399, мИдБаланс12499, мИдБаланс12599, мИдБаланс12699;
Перем мИдБаланс13199, мИдБаланс13299, мИдБаланс13499, мИдБаланс13599, мИдБаланс13699, мИдБаланс13799;
Перем мИдБаланс14199, мИдБаланс14299, мИдБаланс14599;
Перем мИдБаланс15199, мИдБаланс15299, мИдБаланс15399, мИдБаланс15599;

Перем мИдФормаОтчета02100, мИдФормаОтчета02110, мИдФормаОтчета02120, мИдФормаОтчета02200, мИдФормаОтчета02210, мИдФормаОтчета02220;
Перем мИдФормаОтчета02300;
Перем мИдФормаОтчета02340, мИдФормаОтчета02350, мИдФормаОтчета02421, мИдФормаОтчета02430, мИдФормаОтчета02450, мИдФормаОтчета02460;
Перем мИдФормаОтчета21001, мИдФормаОтчета21002, мИдФормаОтчета21101, мИдФормаОтчета21102, мИдФормаОтчета21201, мИдФормаОтчета21202;
Перем мИдФормаОтчета22001, мИдФормаОтчета22002, мИдФормаОтчета22101, мИдФормаОтчета22102, мИдФормаОтчета22201, мИдФормаОтчета22202;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

Перем мПечатаемыеРазделы Экспорт;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

Перем мСвойстваРазделовДекларации Экспорт;

// хранит версию формы отчета
Перем мВерсияФормы Экспорт;

Перем ТаблицаСообщений Экспорт;

Перем мПечатныеФормы Экспорт;

Перем СпП Экспорт;

Перем мСохранятьРасшифровку Экспорт;
Перем мПроверятьСоотношенияПриПечатиИВыгрузки Экспорт;

Перем мВПрограммеИзмененаОрганизация;

Перем мБезКонсолидации Экспорт;

// Переменная ссылка на справочник "Организации" для подставки в процедуре _ДобавитьСтрокуРасшифровки.
// Расшифровка для организации ОргРасшифровка. Через параметр в процедуру _ДобавитьСтрокуРасшифровки. не передается,
// т.к. слишком много уже имеется параметров, тяжело контролировать.
// Может принимать значение Неопределено, в этом случае в механизмах расшифровки будет браться организация из реквизита объекта отчета.
Перем мОргРасшифровка Экспорт;

// Переменная используется для хранения показателей в режиме сбора отчета за несколько организаций.
// Предстовляет собой таблицу значений. Наполнение происходит в процедуре УстановитьЗначениеПоказателя,
// в том случае, если отчет формируется за несколько организаций.
Перем мТаблицаИтоговыхПоказателейПриКонсолидации;

// Хранит тип выбранного адреса при перевыборе адреса на форме отчета. По умолчанию, при открытии всегда равняется "ПолныйАдрПочт"
Перем мТипАдреса;

// Хранит адрес в формате "9запятых".
Перем мАдресДляВыгрузки;

Перем ИмяМакетаССоставомПоказателей;

Перем мБезОткрытияФормы Экспорт;
Перем мРежимПечати Экспорт;

// глобальные данные используемые для выгрузки отчетности
Перем мДанныеОтчета Экспорт;
Перем ИменаПоказателейСоЗнакомПлюс;

// заголовок колонки с данными на конец отчетного периода - для использования в расшифровке
Перем ЗаголовокДатаОтчетная;

// заголовок колонки с данными на конец прошлого года - для использования в расшифровке
Перем ЗаголовокДатаКонцаПрошлогоГода;

// заголовок колонки с данными на конец года, предшествующего прошлому, - для использования в расшифровке
Перем ЗаголовокДатаКонцаПозапрошлогоГода;

Перем ЗаголовокДатаОтчетногоПериода;
Перем ЗаголовокДатаОтчетногоПериодаПрошлогоГода;

// хранят период и год загруженных из 1.6. данных
Перем ПериодЗагрузкиДанных;
Перем ОтчетныйГодЗагрузкиДанных;
Перем ЗаполнятьГодПредыдущий;
Перем ЗаполнятьГодПредшествующийПредыдущему;

Перем ЭтоБалансДляАУ;

// Для явной установки типа значения 17, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура предназначена для заполнения значения показателя суммой показателей по списку или шаблону в заданном поле табличного документа
// и внесения полученной суммы в указанный показатель.
// При использовании шаблона, из суммируемых показателей исключается показатель, в который будет заноситься полученная сумма.
//
// Параметры
//  ПолеТабличногоДокумента  - Элемент формы типа ПолеТабличногоДокумента
//		Указатель на элемент формы в котором размещены именованные области
//  Показатель - Строка
//		Имя области в которую будет помещена полученная сумма
//  СуммируемыеПоказатели  - Строка
//		Список имен областей, разделенных запятой, подлежащих суммированию
// 		имя области может быть задано в виде шаблона вида <начальные символы имени>+<*>
// 		Если перед именем области указать знак "-", тогда значение этой области будет вычтено из суммы
//
Процедура УстановитьСуммуПоказателей(ПолеТабличногоДокумента, Показатель, Знач СуммируемыеПоказатели, Округлять = Истина)

	МассивИменОбластей = Новый Массив;
	
	Пока Истина Цикл
		ПозицияРазделителя = Найти(СуммируемыеПоказатели, ",");
		Если ПозицияРазделителя = 0 Тогда
			ИмяОбласти = СокрЛП(СуммируемыеПоказатели);
			СуммируемыеПоказатели = "";
		Иначе 
			ИмяОбласти = СокрЛП(Лев(СуммируемыеПоказатели, ПозицияРазделителя - 1));
			СуммируемыеПоказатели = Сред(СуммируемыеПоказатели, ПозицияРазделителя + 1)
		КонецЕсли;
		
		
		Если Найти(ИмяОбласти, "*") > 0 Тогда
			// обрабатываем шаблон имен показателей
			ПозицияРазделителя = Найти(ИмяОбласти, "*");
			СтрокаШаблона = Лев(ИмяОбласти, ПозицияРазделителя - 1);
			Если Лев(ИмяОбласти, 1) = "-" Тогда
				МодификаторЗначения = "-";
				СтрокаШаблона = Сред(СтрокаШаблона, 2);
			Иначе
				МодификаторЗначения = "";
			КонецЕсли;
			
			Для Каждого Область Из ПолеТабличногоДокумента.Области Цикл
				Если Найти(Область.Имя, СтрокаШаблона) = 1 И Область.Имя <> Показатель Тогда
					МассивИменОбластей.Добавить(МодификаторЗначения + Область.Имя);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			МассивИменОбластей.Добавить(ИмяОбласти);
			
		КонецЕсли;
	
		Если ПустаяСтрока(СуммируемыеПоказатели) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаПоказателей = 0;
	Для Каждого ИмяОбласти из МассивИменОбластей Цикл
		
		Если Лев(ИмяОбласти, 1) = "-" Тогда
			ИмяПоказателя = СокрЛП(Сред(ИмяОбласти, 2));
			МножительПоказателя = -1;
		Иначе
			ИмяПоказателя = ИмяОбласти;
			МножительПоказателя = 1;
		КонецЕсли;
		
		Если Округлять Тогда
			ЗначениеПоказателя = МножительПоказателя * ОкруглитьЧислоПоФормату(ПолеТабличногоДокумента.Области[ИмяПоказателя].Значение);
		Иначе
			ЗначениеПоказателя = МножительПоказателя * ПолеТабличногоДокумента.Области[ИмяПоказателя].Значение;
		КонецЕсли;
		
		СуммаПоказателей = СуммаПоказателей + ЗначениеПоказателя;
	КонецЦикла;
	
	ПолеТабличногоДокумента.Области[Показатель].Значение = СуммаПоказателей;

КонецПроцедуры // СуммаОкругленныхПоказателей()

Функция ПолучитьСуммуМногострочногоПоказателя(ИдентификаторМногострочногоРаздела, ИмяПоказателяМногострочногоРаздела)

	ПолеТабличногоДокументаОтчета = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдентификаторМногострочногоРаздела);
	ТаблицаМногострочногоРаздела = мСтруктураМногострочныхРазделов[ИдентификаторМногострочногоРаздела];
	
	СуммаПоказателей = 0;
	
	Для Инд = 1 По ТаблицаМногострочногоРаздела.Количество() Цикл
		СуммаПоказателей = СуммаПоказателей + ПолеТабличногоДокументаОтчета.Области[ИмяПоказателяМногострочногоРаздела + "_" + Инд].Значение;
	КонецЦикла;

	Возврат СуммаПоказателей;
	
КонецФункции // ПолучитьСуммуМногострочногоПоказателя()

// Функция вычисляет конечный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - конечный остаток по дебету счета, указанного в параметре.
//
Функция СКД(Знач Счет)

	Перем Итог;

	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		Если мСчет[Счет] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + Счет + " в соответствии счетов");
		КонецЕсли;
		Счет = мСчет[Счет];
	КонецЕсли;
	
	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКД()

// Функция вычисляет конечный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка по кредиту указаного счета.
//
Функция СКК(Знач Счет)
	
	Перем Итог;

	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		Если мСчет[Счет] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + Счет + " в соответствии счетов");
		КонецЕсли;
		Счет = мСчет[Счет];
	КонецЕсли;
	
	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКК()

// Функция вычисляет конечный остаток счета, указанного в качестве параметра 
// функции, развернутый по дебету субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СКДР(Счет)

	Перем Итог;

	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		Если мСчет[Счет] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + Счет + " в соответствии счетов");
		КонецЕсли;
		Счет = мСчет[Счет];
	КонецЕсли;
	
	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКДР()

// Функция вычисляет конечный остаток счета, указанного в качестве параметра 
// функции, развернутый по кредиту субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СККР(Счет)

	Перем Итог;

	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		Если мСчет[Счет] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + Счет + " в соответствии счетов");
		КонецЕсли;
		Счет = мСчет[Счет];
	КонецЕсли;
	
	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКДР()

Функция ДО(Счет, БухИтоги = Неопределено)

	Перем Итог;

	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		Если мСчет[Счет] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + Счет + " в соответствии счетов");
		КонецЕсли;
		Счет = мСчет[Счет];
	КонецЕсли;
	
	Если БухИтоги = Неопределено Тогда
		Итог = мБухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счет);
	Иначе
		Итог = БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счет);
	КонецЕсли;

	Возврат Итог;

КонецФункции // ДО()

Функция КО(Счет, БухИтоги = Неопределено)

	Перем Итог;

	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		Если мСчет[Счет] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + Счет + " в соответствии счетов");
		КонецЕсли;
		Счет = мСчет[Счет];
	КонецЕсли;
	
	Если БухИтоги = Неопределено Тогда
		Итог = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);
	Иначе
		Итог = БухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);
	КонецЕсли;

	Возврат Итог;

КонецФункции // КО()

// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
// первого параметра функции, с кредита счета, указанного в качестве второго 
// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот в дебет счета;
//  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот с кредита счета.
//
// Возвращаемое значение:
//  Число        - сумма перекрестного оборота.
//
Функция ОБ(СчетД, СчетК, БухИтоги = Неопределено)

	Перем Итог;

	Если ТипЗнч(СчетД) = Тип("Строка") Тогда
		Если мСчет[СчетД] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + СчетД + " в соответствии счетов");
		КонецЕсли;
		СчетД = мСчет[СчетД];
	КонецЕсли;
	
	Если ТипЗнч(СчетК) = Тип("Строка") Тогда
		Если мСчет[СчетК] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + СчетК + " в соответствии счетов");
		КонецЕсли;
		СчетК = мСчет[СчетК];
	КонецЕсли;
	
	Если БухИтоги = Неопределено Тогда
		Итог = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);
	Иначе
		Итог = БухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);
	КонецЕсли;

	Возврат Итог;

КонецФункции // ОБ()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы)Экспорт
	Перем ТекТабличноеПоле;

	Если ИдГруппы = мИдБаланс11199 ИЛИ ИдГруппы = мИдБаланс11299 ИЛИ ИдГруппы = мИдБаланс11399 ИЛИ ИдГруппы = мИдБаланс11499 ИЛИ ИдГруппы = мИдБаланс11599 ИЛИ ИдГруппы = мИдБаланс11699 ИЛИ ИдГруппы = мИдБаланс11799 
	 ИЛИ ИдГруппы = мИдБаланс12199 ИЛИ ИдГруппы = мИдБаланс12299 ИЛИ ИдГруппы = мИдБаланс12399 ИЛИ ИдГруппы = мИдБаланс12499 ИЛИ ИдГруппы = мИдБаланс12599 ИЛИ ИдГруппы = мИдБаланс12699 
	 ИЛИ ИдГруппы = мИдБаланс13199 ИЛИ ИдГруппы = мИдБаланс13299 ИЛИ ИдГруппы = мИдБаланс13499 ИЛИ ИдГруппы = мИдБаланс13599 ИЛИ ИдГруппы = мИдБаланс13699 ИЛИ ИдГруппы = мИдБаланс13799 
	 ИЛИ ИдГруппы = мИдБаланс14199 ИЛИ ИдГруппы = мИдБаланс14299 ИЛИ ИдГруппы = мИдБаланс14599 
	 ИЛИ ИдГруппы = мИдБаланс15199 ИЛИ ИдГруппы = мИдБаланс15299 ИЛИ ИдГруппы = мИдБаланс15399 ИЛИ ИдГруппы = мИдБаланс15599 Тогда
		  
		ТекТабличноеПоле = ЭлементыФормы.ПолеТабличногоДокументаБаланс;
		
	ИначеЕсли ПрименениеЕНВД 
			И (ИдГруппы = мИдФормаОтчета02340 ИЛИ ИдГруппы = мИдФормаОтчета02350 ИЛИ ИдГруппы = мИдФормаОтчета02421 ИЛИ ИдГруппы = мИдФормаОтчета02430 ИЛИ ИдГруппы = мИдФормаОтчета02450 ИЛИ ИдГруппы = мИдФормаОтчета02460
		  ИЛИ ИдГруппы = мИдФормаОтчета21001 ИЛИ ИдГруппы = мИдФормаОтчета21002 ИЛИ ИдГруппы = мИдФормаОтчета21101 ИЛИ ИдГруппы = мИдФормаОтчета21102 ИЛИ ИдГруппы = мИдФормаОтчета21201 ИЛИ ИдГруппы = мИдФормаОтчета21202
		  ИЛИ ИдГруппы = мИдФормаОтчета22001 ИЛИ ИдГруппы = мИдФормаОтчета22002 ИЛИ ИдГруппы = мИдФормаОтчета22101 ИЛИ ИдГруппы = мИдФормаОтчета22102 ИЛИ ИдГруппы = мИдФормаОтчета22201 ИЛИ ИдГруппы = мИдФормаОтчета22202) Тогда
		
		ТекТабличноеПоле = ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета;
		
	ИначеЕсли НЕ ПрименениеЕНВД 
			И (ИдГруппы = мИдФормаОтчета02100 ИЛИ ИдГруппы = мИдФормаОтчета02110 ИЛИ ИдГруппы = мИдФормаОтчета02120 ИЛИ ИдГруппы = мИдФормаОтчета02200 ИЛИ ИдГруппы = мИдФормаОтчета02210 ИЛИ ИдГруппы = мИдФормаОтчета02220
		  ИЛИ ИдГруппы = мИдФормаОтчета02300 ИЛИ ИдГруппы = мИдФормаОтчета02340 ИЛИ ИдГруппы = мИдФормаОтчета02350 ИЛИ ИдГруппы = мИдФормаОтчета02421 ИЛИ ИдГруппы = мИдФормаОтчета02430 ИЛИ ИдГруппы = мИдФормаОтчета02450 ИЛИ ИдГруппы = мИдФормаОтчета02460) Тогда
		
		ТекТабличноеПоле = ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета;
		
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку()
	Перем СтруктураГруппы;

	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ТекущаяСтраница];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана добавляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	
	// Первую ячейку последней строки определим не по имени колонки, а по минимальному значению свойства "Лево" всех областей
	СамыйЛевыйСтолбец = Неопределено;
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
		Если СамыйЛевыйСтолбец = Неопределено Тогда
			СамыйЛевыйСтолбец = ТекТабличноеПоле.Области[Колонка.Имя + "_" + КолСтрок].Лево;
			ИмяПервойЯчейкиПоследнейСтроки = Колонка.Имя  + "_" + КолСтрок;
		Иначе
			Если СамыйЛевыйСтолбец > ТекТабличноеПоле.Области[Колонка.Имя+ "_" + КолСтрок].Лево Тогда
				СамыйЛевыйСтолбец = ТекТабличноеПоле.Области[Колонка.Имя+ "_" + КолСтрок].Лево;
				ИмяПервойЯчейкиПоследнейСтроки = Колонка.Имя + "_" + КолСтрок;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// Строки многострочного раздела должны входят в именованную секцию
	// для предотвращения вывода на печать пустых строк.
	// Определим именованую секцию, куда входит добавляемая строка.
	ИмяПервойЯчейкиПервойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + 1;
	// область первой ячейки первой строки многострочного раздела
	ОбластьЯчейки               = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПервойСтроки];
	// номер первой строки именованной секции
	НомерВерхЯчейкиСекции       = ОбластьЯчейки.Верх;
	// область именованной секции
	
	НомерВерхЯчейкиИменованнойСекции = НомерВерхЯчейкиСекции;
	ОбластьИменованСекции       = ТекТабличноеПоле.Область(НомерВерхЯчейкиИменованнойСекции, , НомерНижнЯчейкиОбласти, );
	ИмяСекции                   = ОбластьИменованСекции.Имя;
	
	// Допстрока должна быть включена в именованную область строк
	Пока Лев(ИмяСекции, 1) = "R" И НомерВерхЯчейкиИменованнойСекции > 0 Цикл
		НомерВерхЯчейкиИменованнойСекции = НомерВерхЯчейкиИменованнойСекции - 1;
		ОбластьИменованСекции       = ТекТабличноеПоле.Область(НомерВерхЯчейкиИменованнойСекции, , НомерНижнЯчейкиОбласти, );
		ИмяСекции                   = ОбластьИменованСекции.Имя;
	КонецЦикла;
	
	// предварительно очищаем прежнюю секцию, так как она смещается вниз вместе с добавляемой строкой
	ОбластьИменованСекции.Имя   = "";

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрок;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + (КолСтрок + 1);

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение Тогда
			ОбластьЯчейки.Очистить();
		КонецЕсли;
		
	КонецЦикла;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
		ИмяТекущейОбласти = Колонка.Имя + "_" + (КолСтрок + 1);
		Если ТекТабличноеПоле.Области[ИмяТекущейОбласти].СодержитЗначение Тогда
			ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
			Прервать;
		КонецЕсли;
	КонецЦикла;


	// Установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// Добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	Если Лев(ИмяСекции, 1) = "П" 
	 ИЛИ Найти(ИмяСекции, "ДопСтрока") = 1 Тогда
		// Имеется именованная секция многострочного раздела.
		// Добавляем исходную строку в секцию табличного документа с именем ИмяСекции.
		ОбластьИменованСекции     = ТекТабличноеПоле.Область(НомерВерхЯчейкиИменованнойСекции, , НомерНижнЯчейкиНовойОбласти, );
		ОбластьИменованСекции.Имя = ИмяСекции;

		// Далее проверим вхождение именованной секции многострочного раздела
		// как составляющая часть в другие секции табличного документа.
		// В случае обнаржения такого вхождения расширяем обнаруженныую секцию
		// до добавленной строки. Данный механизм применяем в силу того, что 
		// при добавлении новой строки вышестоящая секция автоматически не
		// расширяется, и вместо этого получаем пересекающиеся секции.
		Для каждого Секция Из ТекТабличноеПоле.Области Цикл

			Если Секция.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ((Секция.Верх <= НомерВерхЯчейкиСекции) И (Секция.Низ >= НомерНижнЯчейкиОбласти)) Тогда
				Продолжить;
			КонецЕсли;

			Если Секция.Низ < НомерНижнЯчейкиНовойОбласти Тогда
				// Секция, куда входила именованная секция многострочного раздела
				// до добавления строки, подлежит расширению (включению в нее
				// добавленной строки).
				НомерВерхнейСтрокиСекции = Секция.Верх;
				ИмяСекции                = Секция.Имя;

				// удаляем прежнюю секцию, куда входила именованная секция многострочного раздела
				Секция.Имя      = "";
				// создаем новую секцию, охватывающую добавленную строку
				НоваяСекция     = ТекТабличноеПоле.Область(НомерВерхнейСтрокиСекции, , НомерНижнЯчейкиНовойОбласти, );
				НоваяСекция.Имя = ИмяСекции;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли; 

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	//ИмяГруппы = мИдГруппы1;
	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ТекущаяСтраница];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	//ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	//ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// предварительно обновим структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1)); 
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		
		// удаляется добавленная строка
		// Первую ячейку удаляемой строки определим не по имени колонки, а по минимальному значению свойства "Лево" всех областей
		СамыйЛевыйСтолбец = Неопределено;
		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			Если СамыйЛевыйСтолбец = Неопределено Тогда
				СамыйЛевыйСтолбец = ТекТабличноеПоле.Области[Колонка.Имя + "_" + НомУдаляемойСтроки].Лево;
				ИмяПервойЯчейкиУдаляемойСтроки = Колонка.Имя  + "_" + НомУдаляемойСтроки;
			Иначе
				Если СамыйЛевыйСтолбец > ТекТабличноеПоле.Области[Колонка.Имя+ "_" + НомУдаляемойСтроки].Лево Тогда
					СамыйЛевыйСтолбец = ТекТабличноеПоле.Области[Колонка.Имя+ "_" + НомУдаляемойСтроки].Лево;
					ИмяПервойЯчейкиУдаляемойСтроки = Колонка.Имя + "_" + НомУдаляемойСтроки;
				КонецЕсли;
			КонецЕсли;
				
		КонецЦикла;

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		// Определим область удаляемой строки
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// непосредственно удаляем область строки табличного документа
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + НСтр;
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + (НСтр - 1);

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

				КонецЦикла;
			КонецЦикла;

		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Формат(ПервыйНомерВГруппе + НомерСтрокиВТаблице, "ЧЦ = 3") + ".";

					//СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + НомТекущейСтроки;

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(ИмяМакетаССоставомПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		
		Если ТекОбласть.Имя = "ФормаОтчетаЕНВД" И ПрименениеЕНВД Тогда
			ИмяСтраницы = "ФормаОтчета";
		ИначеЕсли ТекОбласть.Имя = "ФормаОтчетаЕНВД" И НЕ ПрименениеЕНВД Тогда
			Продолжить;
		ИначеЕсли ТекОбласть.Имя = "ФормаОтчетаНеЕНВД" И НЕ ПрименениеЕНВД Тогда
			ИмяСтраницы = "ФормаОтчета";
		ИначеЕсли ТекОбласть.Имя = "ФормаОтчетаНеЕНВД" И ПрименениеЕНВД Тогда
			Продолжить;
		Иначе
			ИмяСтраницы = ТекОбласть.Имя;
		КонецЕсли;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
        ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 ); 
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			//ПризнакМногострочности = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			//Если КодПоказателя = "/" Тогда  // пропускаем многострочные части
			//	Продолжить;
			//КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
				Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
			Иначе
				Дельта = 0;
			КонецЕсли;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)
	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяЯчейка);
КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий1;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	// Период в заголовке отчета
	Если Месяц(мДатаКонцаПериодаОтчета) = 1 Тогда 
		СтрПериодОтчета = Формат(мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
	Иначе
		СтрПериодОтчета = "Январь - " + Формат(мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
	КонецЕсли;
	
	ЭтаФорма.Заголовок = " Бухгалтерская отчетность (" + СтрПериодОтчета + ")";
	
	//БАЛАНС
	// Период в заголовке баланса
	мБаланс.Области.ДатаБаланса.Значение = "на " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
	
	ДатаКонцаПрошлогоГода 		= Дата(Год(мДатаКонцаПериодаОтчета) - 1, 12, 31);
	ДатаКонцаПозапрошлогоГода 	= Дата(Год(мДатаКонцаПериодаОтчета) - 2, 12, 31);
	
	ЗаголовокДатаОтчетная 				= "На " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
	ЗаголовокДатаКонцаПрошлогоГода 		= "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
	ЗаголовокДатаКонцаПозапрошлогоГода 	= "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
	
	мБаланс.Области.ДатаОтчетная.Значение 				= ЗаголовокДатаОтчетная;
	мБаланс.Области.ДатаОтчетная2.Значение 				= ЗаголовокДатаОтчетная;
	мБаланс.Области.ДатаКонцаПрошлогоГода.Значение 		= ЗаголовокДатаКонцаПрошлогоГода;
	мБаланс.Области.ДатаКонцаПрошлогоГода2.Значение 	= ЗаголовокДатаКонцаПрошлогоГода;
	мБаланс.Области.ДатаКонцаПозапрошлогоГода.Значение 	= ЗаголовокДатаКонцаПозапрошлогоГода;
	мБаланс.Области.ДатаКонцаПозапрошлогоГода2.Значение = ЗаголовокДатаКонцаПозапрошлогоГода;
	
	// Период в списке кодов в форме баланса
	мБаланс.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	мБаланс.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
	мБаланс.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд'");

	//ОТЧЕТ О ПРИБЫЛЯХ И УБЫТКАХ
	ДатаКонцаПериодаОтчета = ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12);
	
	Если НачалоМесяца(мДатаКонцаПериодаОтчета) = мДатаНачалаПериодаОтчета Тогда
		СтрПериод = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
		СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	Иначе
		СтрПериод = "Январь - " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
		СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	КонецЕсли;  

	ПериодОтчета = " за " + СтрПериод;

	// Период в заголовке
	мФормаОтчета.Области.ПериодОтчета.Значение = ПериодОтчета;

	// Период в списке кодов в форме отчета
	мФормаОтчета.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	мФормаОтчета.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
	мФормаОтчета.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд'");

	//Заголовки таблиц
	ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
	ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
	
	мФормаОтчета.Области.ДатаОтчетногоПериода.Значение = ЗаголовокДатаОтчетногоПериода;
	мФормаОтчета.Области.ДатаОтчетногоПериода2.Значение = ЗаголовокДатаОтчетногоПериода;
	
	мФормаОтчета.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	мФормаОтчета.Области.ДатаОтчетногоПериодаПрошлогоГода2.Значение = ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН

		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 

		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКВЭД");
		Сведения.Добавить("", "ОснВидДеят");
		Сведения.Добавить("", "ОКОПФ");
		Сведения.Добавить("", "ОКФС");
		Сведения.Добавить("", "ФормСобств");
		Сведения.Добавить("", "КодОКОНХ");

		Сведения.Добавить("", "ОргПравФорм");
		Сведения.Добавить("", мТипАдреса);
		Сведения.Добавить("", "ПолныйАдрЮР");
	КонецЕсли;

	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя

	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера


	//В поле "Адрес" указывается:
	//- для организации - место ее государственной регистрации (место нахождения);
	//- для обособленного подразделения - место его нахождения;
	//- для физического лица - полный адрес постоянного места жительства физического лица на основании документа, удостоверяющего его личность, либо иного документа, подтверждающего адрес постоянного места жительства.

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		// Инициализируем переменные
		ИННЮЛ = ""; // ИНН

		НаимЮЛПол = ""; // Полное наименование 

		ОКПО = "";
		ОКВЭД = "";

		ПолныйАдрЮР = "";

		ОснВидДеят = "";

		ФормСобств = "";

		ОКОПФ = "";

		ОКФС = "";

		КодОКОНХ = "";

		ОргПравФорм1 = "";

		ПолныйАдрПочт = "";
	КонецЕсли;

	ФИОРук = ""; // ФИО руководителя
	ФИОБух = ""; // ФИО бухгалтера

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		// Получаем данные
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОКПО", ОКПО);
		ОргСведения.Свойство("ОКВЭД", ОКВЭД);
		ОргСведения.Свойство("ОКОПФ", ОКОПФ);
		ОргСведения.Свойство("ОКФС", ОКФС);
		ОргСведения.Свойство("ОснВидДеят", ОснВидДеят);
		ОргСведения.Свойство("ПолныйАдрЮР", ПолныйАдрЮР);
		ОргСведения.Свойство("ФормСобств", ФормСобств);
		ОргСведения.Свойство("КодОКОНХ", КодОКОНХ);
		ОргСведения.Свойство("ОргПравФорм", ОргПравФорм1);
		ОргСведения.Свойство(мТипАдреса, ПолныйАдрПочт);

	КонецЕсли;

	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);

	Если ВПрограммеИзмененаДатаПодписи Тогда

		// Обновим только то, что зависит от даты подписи и выйдем
		мБаланс.Области.ОргДиректор.Значение  = ФИОРук;
		мБаланс.Области.ОргБухгалтер.Значение = ФИОБух;

		мФормаОтчета.Области.ОргДиректор.Значение  = ФИОРук;
		мФормаОтчета.Области.ОргБухгалтер.Значение = ФИОБух;
		
		Возврат;

	КонецЕсли;

	// Анализируем переменную ИННЮЛ, в которой хранится идентификационный
	// номер налогоплательщика, на предмет пустого значения.

	Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
		ИННЮЛ = "";
	КонецЕсли;

	мИННЮЛ = ИННЮЛ;

	мБаланс.Области.ОргИНН.Значение = мИННЮЛ;
	мФормаОтчета.Области.ОргИНН.Значение = мИННЮЛ;

	// Работаем с названием ЮЛ
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргНазв.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		мБаланс.Области.ОргНазв.Значение = НаимЮЛПол;
		мФормаОтчета.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;

	// Работаем с ФИО руководителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргКодОКПО.Значение)) Тогда

		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			мБаланс.Области.ОргКодОКПО.Значение  = "";
			мФормаОтчета.Области.ОргКодОКПО.Значение  = "";
		Иначе
			мБаланс.Области.ОргКодОКПО.Значение  = ОКПО;
			мФормаОтчета.Области.ОргКодОКПО.Значение  = ОКПО;
		КонецЕсли;

	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргКодОКВЭД.Значение)) Тогда
		мБаланс.Области.ОргКодОКВЭД.Значение = ОКВЭД;
		мФормаОтчета.Области.ОргКодОКВЭД.Значение = ОКВЭД;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргФорма.Значение)) Тогда
		мБаланс.Области.ОргФорма.Значение = ОргПравФорм1;
		мФормаОтчета.Области.ОргФорма.Значение = ОргПравФорм1;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргОтрасль.Значение)) Тогда
		мБаланс.Области.ОргОтрасль.Значение = ОснВидДеят;
		мФормаОтчета.Области.ОргОтрасль.Значение = ОснВидДеят;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргКодОКОПФ.Значение)) Тогда
		мБаланс.Области.ОргКодОКОПФ.Значение = ОКОПФ;
		мФормаОтчета.Области.ОргКодОКОПФ.Значение = ОКОПФ;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргКодОКФС.Значение)) Тогда
		мБаланс.Области.ОргКодОКФС.Значение = ОКФС;
		мФормаОтчета.Области.ОргКодОКФС.Значение = ОКФС;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргФормаСобств.Значение)) Тогда
		мБаланс.Области.ОргФормаСобств.Значение = ФормСобств;
		мФормаОтчета.Области.ОргФормаСобств.Значение = ФормСобств;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргПочтАдрес.Значение)) Тогда

		Если НЕ ЗначениеЗаполнено(ПолныйАдрПочт) Тогда
			мБаланс.Области.ОргПочтАдрес.Значение = "";
			ЮридическийАдрес = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ПолныйАдрЮР").ПолныйАдрЮР;
			Если ЗначениеЗаполнено(ЮридическийАдрес) Тогда
				мБаланс.Области.ОргПочтАдрес.Значение = ЮридическийАдрес;
				мТипАдреса = "ПолныйАдрЮР";
				мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "АдрЮР").АдрЮР;
			КонецЕсли;
		Иначе
			мБаланс.Области.ОргПочтАдрес.Значение = ПолныйАдрПочт;
			мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "АдрПочт").АдрПочт;
		КонецЕсли;
		
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(мБаланс.Области.ОргДиректор.Значение)) Тогда
		мБаланс.Области.ОргДиректор.Значение  = ФИОРук;
		мФормаОтчета.Области.ОргДиректор.Значение  = ФИОРук;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(мБаланс.Области.ОргБухгалтер.Значение)) Тогда
		мБаланс.Области.ОргБухгалтер.Значение = ФИОБух;
		мФормаОтчета.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить("Баланс: при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить("Баланс: при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить("Баланс: при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";

	КонецЕсли;

	ПоказатьКодЕИ();

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе
				// определяем колво строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Неопределено;
				Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
					СтруктураГруппы = ЭлементСтруктуры.Значение;
					Если СтруктураГруппы.Колонки.Найти(ИмяПоказателя) <> Неопределено Тогда
						ИмяГруппы = ЭлементСтруктуры.Ключ;
					КонецЕсли;
				КонецЦикла;
				
				Если ИмяГруппы <> Неопределено Тогда
				
					мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

					Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
						ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
						ФорматируемаяОбласть.Формат = мСтрокаФормата;
						ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
					КонецЦикла;
					
				Иначе
					// Многострочный раздел не описан в модуле формы
					// никаких действий предпринимать не надо
					
				КонецЕсли;	
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	//для работы с новым типом многострочных частей вызов процедуры общего модуля
	//заменен на свою процедуру

	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если мБезОткрытияФормы Или мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		ИначеЕсли ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ТаблицаЗначений") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.Найти(ИмяГруппы, "ИдГруппы").НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
					
				КонецЕсли;

				// пропускаем фантомные ячейки несуществующих многострочных частей
				Если ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области.Найти(ИмяПоказателя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				//ЗначениеВКвадратах = роОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				ИначеЕсли ВариантЗаполнения = 5 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
	         |Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	Если ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	//РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	//ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	//Если ИдГруппы <> Неопределено Тогда
	//	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
	//	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	//КонецЕсли;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);
	КонецЕсли;
	
	// Переопределяем название пункта меню "Заполнить отчет <...>"
	КнопкаЗаполнения = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заполнить.Кнопки.ЗаполнитьОтчет;
	Если Элемент.Страницы[ТекущаяСтраница].Имя = "Баланс" Тогда
		КнопкаЗаполнения.Доступность = Истина;
		КнопкаЗаполнения.Текст = "Заполнить бухгалтерский баланс";
	ИначеЕсли Элемент.Страницы[ТекущаяСтраница].Имя = "ФормаОтчета" Тогда
		КнопкаЗаполнения.Доступность = Истина;
		КнопкаЗаполнения.Текст = "Заполнить отчет о прибылях и убытках";
	Иначе
		КнопкаЗаполнения.Доступность = Ложь;
		КнопкаЗаполнения.Текст = "Заполнение отчета не предусмотрено";
	КонецЕсли;
	
	// Переопределяем название пункта меню "Очистить отчет <...>"
	КнопкаЗаполнения = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Очистить.Кнопки.ОчиститьОтчет;
	Если Элемент.Страницы[ТекущаяСтраница].Имя = "Баланс" Тогда
		КнопкаЗаполнения.Текст = "Очистить бухгалтерский баланс";
	ИначеЕсли Элемент.Страницы[ТекущаяСтраница].Имя = "ФормаОтчета" Тогда
		КнопкаЗаполнения.Текст = "Очистить отчет о прибылях и убытках";
	Иначе
		КнопкаЗаполнения.Текст = "Очистка отчета не предусмотрена";
	КонецЕсли;
	
КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным (по шаблону) кол-вом,
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// Строки многострочного раздела должны входят в именованную секцию
			// для предотвращения вывода на печать пустых строк.
			// Определим именованую секцию, куда входит добавляемая строка.
			ИмяПервойЯчейкиПервойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + 1;
			// область первой ячейки первой строки многострочного раздела
			ОбластьЯчейки               = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПервойСтроки];
			// номер первой строки именованной секции
			НомерВерхЯчейкиСекции       = ОбластьЯчейки.Верх;
			// область именованной секции
			ОбластьИменованСекции       = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиОбласти, );
			ИмяСекции                   = ОбластьИменованСекции.Имя;
			
			// Если имя секции начинается на R то это неименованный блок
			// возможно в именованную секцию включена строка-заголовок "в том числе"
			Пока Лев(ИмяСекции, 1) = "R" И НомерВерхЯчейкиСекции > 0 Цикл
				НомерВерхЯчейкиСекции = НомерВерхЯчейкиСекции - 1;
				ОбластьИменованСекции = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиОбласти, );
				ИмяСекции             = ОбластьИменованСекции.Имя;
			КонецЦикла;
			
			// предварительно очищаем прежнюю секцию, так как она смещается вниз вместе с добавляемой строкой
			ОбластьИменованСекции.Имя   = "";

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть, ,ТипСмещенияТабличногоДокумента.ПоВертикали);

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядековый номер последней строки перед вставкой
					ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Формат(НовыйПорядковыйНомер, "ЧЦ = 3") + ".";
				КонецЕсли;

			КонецЦикла;

			Если Лев(ИмяСекции, 1) = "П" ИЛИ Найти(ИмяСекции, "ДопСтрока") = 1 Тогда
				// Имеется именованная секция многострочного раздела.
				// Добавляем исходную строку в секцию табличного документа с именем ИмяСекции.
				ОбластьИменованСекции     = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиНовойОбласти, );
				ОбластьИменованСекции.Имя = ИмяСекции;
				
				// Далее проверим вхождение именованной секции многострочного раздела
				// как составляющая часть в другие секции табличного документа.
				// В случае обнаржения такого вхождения расширяем обнаруженныую секцию
				// до добавленной строки. Данный механизм применяем в силу того, что 
				// при добавлении новой строки вышестоящая секция автоматически не
				// расширяется, и вместо этого получаем пересекающиеся секции.
				Для каждого Секция Из ТекТабличноеПоле.Области Цикл
					
					Если Секция.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
						Продолжить;
					КонецЕсли;
					
					Если НЕ ((Секция.Верх <= НомерВерхЯчейкиСекции) И (Секция.Низ >= НомерНижнЯчейкиОбласти)) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Секция.Низ < НомерНижнЯчейкиНовойОбласти Тогда
						// Секция, куда входила именованная секция многострочного раздела
						// до добавления строки, подлежит расширению (включению в нее
						// добавленной строки).
						НомерВерхнейСтрокиСекции = Секция.Верх;
						ИмяСекции                = Секция.Имя;
						
						// удаляем прежнюю секцию, куда входила именованная секция многострочного раздела
						Секция.Имя      = "";
						// создаем новую секцию, охватывающую добавленную строку
						НоваяСекция     = ТекТабличноеПоле.Область(НомерВерхнейСтрокиСекции, , НомерНижнЯчейкиНовойОбласти, );
						НоваяСекция.Имя = ИмяСекции;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли; 

		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//   ЗаписьВОтчет       - Булево, Истина, осуществлять запись показателей в отчет, Ложь - ничего не делать.
//                        Необходимо для режима консолидации отчета.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя, ЗаписьВОтчет = Ложь)

	// В случае, отчет заполняется с использованием режима консолидации, тогда анализируем флаг ЗаписьВОтчет и мБезКонсолидации.
	Если (НЕ ЗаписьВОтчет) И (НЕ мБезКонсолидации) Тогда
		// Добавим показатель в таблицу итогового расчета при заполнении отчета за несколько организаций.
		НовСтр = мТаблицаИтоговыхПоказателейПриКонсолидации.Добавить();
		НовСтр.ИмяПоказателя = ИмяПоказателя;
		НовСтр.Сумма = ЗначениеПоказателя;

		Возврат;

	КонецЕсли;

	ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяПоказателя);

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели);
	Если Не ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

			// В случае, если предлагаемое значение не числовое и второй тип (с корректировкой)
			// тогда принимаем предложенное значение за 0.
			Если (НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя)) И (ВариантЗаполнения = 2) Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя) Тогда
				НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;
			КонецЕсли;

			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыПанели].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)
	// Список ячеек, очищать которые не нужно
	Перем СписокПоказателейНеПодлежащихОчистке;

	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргОтрасль");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКВЭД");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргФорма");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКОПФ");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргФормаСобств");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКФС");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргПочтАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДиректор");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргБухгалтер");

	// Определяем содержание многострочных блоков и удаляем все строки кроме первой
	Для Каждого МногострочныйРаздел Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = МногострочныйРаздел.Ключ;
		СтруктураГруппы = МногострочныйРаздел.Значение;
		
		ПринадлежностьМногострочногоРаздела = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(МногострочныйРаздел.Ключ);
		
		Если ПринадлежностьМногострочногоРаздела = ВыбТабличноеПоле Тогда
			// Удаляем пользовательские строки многострочного раздела
			Если СтруктураГруппы.Количество() > 1 Тогда
				// определим высоту пользовательской строки и начальную позицию блока строк по первой строке
				ПерваяСтрокаВерх = 0;
				ПерваяСтрокаНиз  = 0;
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ОбластьВерх = ВыбТабличноеПоле.Области[Колонка.Имя + "_1"].Верх;
					ОбластьНиз  = ВыбТабличноеПоле.Области[Колонка.Имя + "_1"].Низ;
					
					ПерваяСтрокаВерх = ?(ПерваяСтрокаВерх = 0, ОбластьВерх, Мин(ПерваяСтрокаВерх, ОбластьВерх));
					ПерваяСтрокаНиз  = ?(ПерваяСтрокаНиз  = 0, ОбластьНиз,  Макс(ПерваяСтрокаНиз, ОбластьНиз));
					
				КонецЦикла;
				
				ВысотаПользовательскойСтроки = ПерваяСтрокаНиз - ПерваяСтрокаВерх + 1;
				КоличествоУдаляемыхСтрок = СтруктураГруппы.Количество() - 1;
				
				УдаляемаяОбласть = ВыбТабличноеПоле.Область(ПерваяСтрокаВерх + ВысотаПользовательскойСтроки, , ПерваяСтрокаНиз + ВысотаПользовательскойСтроки * КоличествоУдаляемыхСтрок);
				ВыбТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
				
			КонецЕсли;
			
			// очищаем структуру группы и воссоздаем строку по умолчанию
			СтруктураГруппы.Очистить();
			СтруктураГруппы.Добавить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		// Ячейки не подлежащие очистке
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
// Параметры:
//  ОчищаемыйОтчет - строка, задает имя отчета для очистки
//					 если значение содержит пустую строку, то очищаются все отчеты
//
Процедура Очистить(ОчищаемыйОтчет = "") Экспорт
	
	// Очищаем содержимое ячеек поля табличного документа
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "Баланс" Тогда
		ОчиститьТабличноеПоле(мБаланс);
	КонецЕсли;
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "ФормаОтчета" Тогда
		ОчиститьТабличноеПоле(мФормаОтчета);
	КонецЕсли;
	
	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	// Очищаем расшифровку.
	Если НЕ ПустаяСтрока(ОчищаемыйОтчет) Тогда
		Для Каждого ОбластьОтчета Из ЭлементыФормы["ПолеТабличногоДокумента" + ОчищаемыйОтчет].Области Цикл
			Если ОбластьОтчета.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			СтрокиРасшифровки = СпП.НайтиСтроки(Новый Структура("ИмяЯчейки", ОбластьОтчета.Имя));
			Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
				СпП.Удалить(СтрокаРасшифровки);
			КонецЦикла;
		КонецЦикла;
	Иначе
		СпП.Очистить();
	КонецЕсли;

	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // Очистить()

Функция ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрок, МногострочнаяЧасть)

	// обработка фиксированных строк
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Ключ;
			Если ВключенВОтчет(ДеревоНастройкиСостава, КодСтроки) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// обработка пользовательских строк
	Возврат ОтображатьМногострочнуюЧасть(МногострочнаяЧасть);
	
КонецФункции // ОтображатьВТомЧисле()

Функция ОтображатьМногострочнуюЧасть(МногострочнаяЧасть)
	
	Если НЕ ПустаяСтрока(МногострочнаяЧасть) Тогда
		ТаблицаМногострочногоРаздела = мСтруктураМногострочныхРазделов[МногострочнаяЧасть];
		
		Если ТаблицаМногострочногоРаздела.Количество() > 1 Тогда
			Возврат Истина;
		КонецЕсли;
		
		ТекущийРаздел = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(МногострочнаяЧасть);
		Для Каждого Колонка Из ТаблицаМногострочногоРаздела.Колонки Цикл
			Если ЗначениеЗаполнено(ТекущийРаздел.Области[Колонка.Имя + "_1"].Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции // ОтображатьМногострочнуюЧасть()

Функция СкрытьОбластиПередПечатьюБаланс()
	
	МассивСкрытыхОбластей = Новый Массив;
	ДеревоНастройкиСостава = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
	
	// Строка 1110
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11101, ДопСтрока11102");
	МногострочнаяЧасть = мИдБаланс11199;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1110"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока11199"]);
	КонецЕсли;
	
	// Строка 1120
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11201, ДопСтрока11202");
	МногострочнаяЧасть = мИдБаланс11299;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1120"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока11299"]);
	КонецЕсли;
	
	// Строка 1130
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11301, ДопСтрока11302, ДопСтрока11303, ДопСтрока11304, ДопСтрока11305, ДопСтрока11306, ДопСтрока11307");
	МногострочнаяЧасть = мИдБаланс11399;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1130"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока11399"]);
	КонецЕсли;
	
	// Строка 1140
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11401, ДопСтрока11402, ДопСтрока11403, ДопСтрока11404");
	МногострочнаяЧасть = мИдБаланс11499;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1140"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока11499"]);
	КонецЕсли;
	
	// Строка 1150
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11501");
	МногострочнаяЧасть = мИдБаланс11599;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1150"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока11599"]);
	КонецЕсли;
	
	// Строка 1160
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = мИдБаланс11699;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1160"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока11699"]);
	КонецЕсли;
	
	// Строка 1170
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11701, ДопСтрока11702");
	МногострочнаяЧасть = мИдБаланс11799;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1170"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока11799"]);
	КонецЕсли;
	
	// Строка 1210
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12101, ДопСтрока12102, ДопСтрока12103, ДопСтрока12104, ДопСтрока12105, 
															 |ДопСтрока12106, ДопСтрока12107, ДопСтрока12108, ДопСтрока12109, ДопСтрока12110, 
															 |ДопСтрока12111");
	МногострочнаяЧасть = мИдБаланс12199;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1210"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока12199"]);
	КонецЕсли;
	
	// Строка 1220
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12201, ДопСтрока12202, ДопСтрока12203, ДопСтрока12204, ДопСтрока12205, 
															 |ДопСтрока12206, ДопСтрока12207");
	МногострочнаяЧасть = мИдБаланс12299;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1220"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока12299"]);
	КонецЕсли;
	
	// Строка 1230
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12301, ДопСтрока12302, ДопСтрока12303, ДопСтрока12304, ДопСтрока12305, 
															 |ДопСтрока12306, ДопСтрока12307, ДопСтрока12308");
	МногострочнаяЧасть = мИдБаланс12399;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1230"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока12399"]);
	КонецЕсли;
	
	// Строка 1240
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12401, ДопСтрока12402, ДопСтрока12403, ДопСтрока12404, ДопСтрока12405, 
															 |ДопСтрока12406, ДопСтрока12407");
	МногострочнаяЧасть = мИдБаланс12499;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1240"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока12499"]);
	КонецЕсли;
	
	// Строка 1250
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12501, ДопСтрока12502, ДопСтрока12503, ДопСтрока12504, ДопСтрока12505, 
															 |ДопСтрока12506, ДопСтрока12507, ДопСтрока12508, ДопСтрока12509, ДопСтрока12510, 
															 |ДопСтрока12511");
	МногострочнаяЧасть = мИдБаланс12599;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1250"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока12599"]);
	КонецЕсли;
	
	// Строка 1260
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12601, ДопСтрока12602, ДопСтрока12603, ДопСтрока12604, ДопСтрока12605, 
															 |ДопСтрока12606, ДопСтрока12607, ДопСтрока12608, ДопСтрока12609, ДопСтрока12610");
	МногострочнаяЧасть = мИдБаланс12699;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1260"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока12699"]);
	КонецЕсли;
	
	// Строка 1310
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = мИдБаланс13199;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1310"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока13199"]);
	КонецЕсли;
	
	// Строка 1320
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = мИдБаланс13299;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1320"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока13299"]);
	КонецЕсли;
	
	// Строка 1340
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока13401, ДопСтрока13402, ДопСтрока13403");
	МногострочнаяЧасть = мИдБаланс13499;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1340"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока13499"]);
	КонецЕсли;
	
	// Строка 1350
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = мИдБаланс13599;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1350"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока13599"]);
	КонецЕсли;
	
	// Строка 1360
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока13601, ДопСтрока13602");
	МногострочнаяЧасть = мИдБаланс13699;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1360"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока13699"]);
	КонецЕсли;
	
	// Строка 1370
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = мИдБаланс13799;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1370"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока13799"]);
	КонецЕсли;
	
	// Строка 1410
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока14101, ДопСтрока14102, ДопСтрока14103, ДопСтрока14104");
	МногострочнаяЧасть = мИдБаланс14199;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1410"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока14199"]);
	КонецЕсли;
	
	// Строка 1420
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = мИдБаланс14299;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1420"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока14299"]);
	КонецЕсли;
	
	// Строка 1450
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = мИдБаланс14599;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1450"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока14599"]);
	КонецЕсли;
	
	// Строка 1510
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15101, ДопСтрока15102, ДопСтрока15103, ДопСтрока15104, ДопСтрока15105, 
															 |ДопСтрока15106, ДопСтрока15107, ДопСтрока15108, ДопСтрока15109, ДопСтрока15110, 
															 |ДопСтрока15111, ДопСтрока15112");
	МногострочнаяЧасть = мИдБаланс15199;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1510"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока15199"]);
	КонецЕсли;
	
	// Строка 1520
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15201, ДопСтрока15202, ДопСтрока15203, ДопСтрока15204, ДопСтрока15205, 
															 |ДопСтрока15206, ДопСтрока15207, ДопСтрока15208");
	МногострочнаяЧасть = мИдБаланс15299;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1520"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока15299"]);
	КонецЕсли;
	
	// Строка 1530
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15301, ДопСтрока15302, ДопСтрока15303, ДопСтрока15304, ДопСтрока15305");
	МногострочнаяЧасть = мИдБаланс15399;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1530"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока15399"]);
	КонецЕсли;
	
	// Строка 1550
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = мИдБаланс15599;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1550"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока15599"]);
	КонецЕсли;
	
	// Скрываем области согласно полученному массиву
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЦикла;
	
	Возврат МассивСкрытыхОбластей;
	
КонецФункции

Функция СкрытьОбластиПередПечатьюФормаОтчета()
	
	МассивСкрытыхОбластей = Новый Массив;
	
	ДеревоНастройкиСостава = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета;

	Если НЕ ПрименениеЕНВД Тогда
		
		// Строка 2100
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = мИдФормаОтчета02100;
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2100"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2100"]);
		КонецЕсли;
	
		// Строка 2200
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = мИдФормаОтчета02200;
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2200"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2200"]);
		КонецЕсли;
	
		// Строка 2300
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = мИдФормаОтчета02300;
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2300"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2300"]);
		КонецЕсли;
	
	КонецЕсли;
	
	// Строка 2310
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23101, ДопСтрока23102, ДопСтрока23103");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2310"]);
	КонецЕсли;
	
	// Строка 2320
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23201, ДопСтрока23202, ДопСтрока23203");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2320"]);
	КонецЕсли;
	
	// Строка 2330
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23301, ДопСтрока23302");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2330"]);
	КонецЕсли;
	
	// Строка 2340
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23401, ДопСтрока23402, ДопСтрока23403, ДопСтрока23404, ДопСтрока23405, 
															 |ДопСтрока23406, ДопСтрока23407, ДопСтрока23408, ДопСтрока23409, ДопСтрока23410, 
															 |ДопСтрока23411, ДопСтрока23412, ДопСтрока23413, ДопСтрока23414, ДопСтрока23415, 
															 |ДопСтрока23416, ДопСтрока23417, ДопСтрока23418, ДопСтрока23419, ДопСтрока23420, 
															 |ДопСтрока23421, ДопСтрока23422, ДопСтрока23423, ДопСтрока23424");
	МногострочнаяЧасть = мИдФормаОтчета02340;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2340"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2340"]);
	КонецЕсли;
	
	// Строка 2350
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23501, ДопСтрока23502, ДопСтрока23503, ДопСтрока23504, ДопСтрока23505, 
															 |ДопСтрока23506, ДопСтрока23507, ДопСтрока23508, ДопСтрока23509, ДопСтрока23510, 
															 |ДопСтрока23511, ДопСтрока23512, ДопСтрока23513, ДопСтрока23514, ДопСтрока23515, 
															 |ДопСтрока23516, ДопСтрока23517, ДопСтрока23518, ДопСтрока23519, ДопСтрока23520, 
															 |ДопСтрока23521, ДопСтрока23522, ДопСтрока23523, ДопСтрока23524, ДопСтрока23525, 
															 |ДопСтрока23526, ДопСтрока23527, ДопСтрока23528, ДопСтрока23529, ДопСтрока23530, 
															 |ДопСтрока23521, ДопСтрока23532");
	МногострочнаяЧасть = мИдФормаОтчета02350;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2350"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2350"]);
	КонецЕсли;
	
	// Строка 2421
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = мИдФормаОтчета02421;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2421"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2421"]);
	КонецЕсли;
	
	// Строка 2430
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = мИдФормаОтчета02430;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2430"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2430"]);
	КонецЕсли;
	
	// Строка 2450
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = мИдФормаОтчета02450;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2450"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2450"]);
	КонецЕсли;
	
	// Строка 2460
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока24601, ДопСтрока24602");
	МногострочнаяЧасть = мИдФормаОтчета02460;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2460"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2460"]);
	КонецЕсли;
	
	// Строка 2510
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока25101, ДопСтрока25102");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2510"]);
	КонецЕсли;
	
	// Скрываем области согласно полученному массиву
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЦикла;
	
	Возврат МассивСкрытыхОбластей;
	
КонецФункции

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      НаименованиеЛиста - Имя выводимого на печать листа;
//      ОриентацияЛиста - ориентация страницы;
//      ИмяТабличногоПоля - имя табличного поля, который выводится на печать;
//      ИмяОбластиТаблПоля - имя области дабличного документа, выводимой на печать;
//      ВидПечати - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//		ЧтоИскать - ???
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	МассивСкрытыхОбластей = Новый Массив;
	
	// Скрываем области макетов отчетов, не предназначенные для вывода
	Если Парам1.ИмяТабличногоПоля = мБаланс.Имя Тогда
		МассивСкрытыхОбластей = СкрытьОбластиПередПечатьюБаланс();
	ИначеЕсли Парам1.ИмяТабличногоПоля = мФормаОтчета.Имя Тогда
		МассивСкрытыхОбластей = СкрытьОбластиПередПечатьюФормаОтчета();
	КонецЕсли;
		
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		Если Парам1.ИмяТабличногоПоля = "ФормаПечати" + мБаланс.Имя Тогда
			ВывестиНаПечатьЛистБаланс(Парам1);
		ИначеЕсли Парам1.ИмяТабличногоПоля = "ФормаПечати" + мФормаОтчета.Имя Тогда
			ВывестиНаПечатьЛистФормаОтчета(Парам1);
		Иначе
			ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
		КонецЕсли;
	КонецЕсли;
	
	// Восстанавливаем скрытые области после формирования листов
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает печатную форму (лист формата A4) листа раздела, не содержащего многострочные части.
// Параметры исходного листа задаются в структуре СтруктураПараметровЛиста.
Процедура ВывестиНаПечатьЛистОбщая(Форма, СтруктураПараметровЛиста)
	
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем ИмяОбластиМногострочнойЧасти;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	СтруктураПараметровЛиста.Вставить("ВидПечати", "Пакетная печать");

	ИмяРаздела = Сред(ИмяТабличногоПоля, 24);
	СтруктураПараметровЛиста.Вставить("ИмяРаздела", ИмяРаздела);	
	
	КартаСтраницРаздела = ПолучитьКартуЛистовРаздела(Форма, ИмяРаздела);
	НомЛиста = 0;
	
	Для Каждого Стр Из КартаСтраницРаздела Цикл
		
		НомЛиста = НомЛиста + 1;
		СтруктураПараметровЛиста.Вставить("Верх", Стр.Верх);
		СтруктураПараметровЛиста.Вставить("Низ", Стр.Низ);
		
		МассивМногострочныхЧастей = Неопределено;
		
		Состояние(Форма.Заголовок + ". Формирование печатной формы " + ИмяЛиста + ". Лист №" + (КоличествоЛистовПоИмениЛиста(Форма.мПечатныеФормы, ИмяЛиста) + 1));
		
		СтруктураПараметровЛиста.Вставить("МногострочнаяЧасть", ПолучитьКартуМногострочныхСекцийЛиста(Форма, ИмяТабличногоПоля, Стр.Верх, Стр.Низ));
			
		ПечатныеЛисты = ВывестиНаПечатьЛистРаздела(Форма, СтруктураПараметровЛиста);
		
		Для Каждого Эл Из ПечатныеЛисты Цикл
			Форма.мПечатныеФормы.Добавить(Эл, ИмяЛиста);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Разбивает табличный документ, соответствующий разделу с именем ИмяРаздела
// на части, ограниченные горизонтальным разделителем страниц, верхней или нижней границами
// табличного документа.
Функция ПолучитьКартуЛистовРаздела(Форма, ИмяРаздела)
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");
	ТаблПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
	КолСтрок = ТаблПоле.ВысотаТаблицы;
	
	НачСтрока = 1;
	Для Сч = 1 По КолСтрок Цикл
		Если ТаблПоле.Область(Сч, , Сч, ).КонецСтраницы Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = НачСтрока;
			НовСтр.Низ = Сч;
			НачСтрока = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если (Карта.Количество() = 0) ИЛИ (Карта.Получить(Карта.Количество() - 1).Низ <> КолСтрок) Тогда
		НовСтр = Карта.Добавить();
		НовСтр.Верх = ?(Карта.Количество() = 1, 1, Карта.Получить(Карта.Количество() - 2).Низ + 1);
		НовСтр.Низ = КолСтрок;
	КонецЕсли;
	
	Возврат Карта;
	
КонецФункции // ПолучитьКартуЛистовРаздела()

// Возвращает список значений, содержащий печатные формы - листы формата A4, готовые к выводу на печать.
// Листы формируются на основании исходного табличного документа, параметры которого и другие настройки
// печати хранятся в структуре СтруктураПараметровЛиста.
// Процедура рассчитана на печать разделов, содержащих одну или несколько многострочных частей.
Функция ВывестиНаПечатьЛистРаздела(Форма, СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем ИмяОбластиМногострочнойЧасти;
	Перем ИмяРаздела;
	Перем МногострочныеЧасти;
	Перем Верх;
	Перем Низ;
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("ИмяРаздела",         ИмяРаздела);
	СтруктураПараметровЛиста.Свойство("МногострочнаяЧасть", ИмяОбластиМногострочнойЧасти);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);
	
	Если ИмяОбластиМногострочнойЧасти = Неопределено Тогда
		СписокПечатныхФорм.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(Форма, СтруктураПараметровЛиста));
		Возврат СписокПечатныхФорм;
	КонецЕсли;
	
	ИмяТабличногоПоля = "ПолеТабличногоДокумента" + ИмяРаздела;
	
	ТабличноеПоле = Форма.ЭлементыФормы[ИмяТабличногоПоля];

    // Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для Каждого Область Из ТабличноеПоле.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(ВРЕГ(Область.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				СписокВыводимыхНаПечатьОбластей.Добавить(ПолучитьНизМногоСтрочнойЧасти(Форма, ИмяРаздела, Область.Имя), Область.Имя);
			Иначе
				СписокВыводимыхНаПечатьОбластей.Добавить(Область.Низ, Область.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочныеЧасти = Новый Структура;
	Если ТипЗнч(ИмяОбластиМногострочнойЧасти) = Тип("Строка") Тогда
		МногострочныеЧасти.Вставить(ИмяОбластиМногострочнойЧасти, ПолучитьОбластиМногоСтрочнойЧасти(Форма, ИмяРаздела, ИмяОбластиМногострочнойЧасти));
	Иначе
		Для Каждого Эл Из ИмяОбластиМногострочнойЧасти Цикл
			МногострочныеЧасти.Вставить(Эл, ПолучитьОбластиМногоСтрочнойЧасти(Форма, ИмяРаздела, Эл));
		КонецЦикла;
	КонецЕсли;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();
	флПрервать = Ложь;
	КоличествоСтрок = 0;
	
	Строки = Новый Массив;
	
	ПустойТабличныйДокумент = Новый ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(ПустойТабличныйДокумент, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	ПустыеСтрокиМногострочныхЧастей = Новый Массив(МногострочныеЧасти.Количество());
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		ПустыеСтрокиМногострочныхЧастей[НомСтр] = ПолучитьПустуюСтрокуМногострочнойЧасти(Эл, 0);
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	//ОчиститьМногострочныеЧастиОтПустыхСтрок(МногострочныеЧасти);
	
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Если Эл.Значение.Количество() = 0 Тогда
			Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	КолВоЛистов = 0;
	Пока МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Цикл
		
		//ПечатнаяФорма.Очистить();
		ПечатнаяФорма = Новый ТабличныйДокумент();
		
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;
		
		ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
		
		НомСтр = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Если Эл.Значение.Количество() = 0 Тогда
				Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 Тогда
				ОбластьОграничители = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;
			Если Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				ОбластьПустаяСтрока = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;                                                                                   
			Если МногострочныеЧасти.Свойство(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление) Тогда
				Продолжить;
			КонецЕсли;
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
		КонецЦикла;
		
		Строки.Очистить();
		Инд = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Попытка
				Строки.Добавить(Эл.Значение.Получить(0).Значение);
			Исключение
				Строки.Добавить(ПустыеСтрокиМногострочныхЧастей[Инд]);
			КонецПопытки;
			Инд = Инд + 1;
		КонецЦикла;
		Строки.Добавить(ОбластьПустаяСтрока);
		Строки.Добавить(ОбластьОграничители);
		
		Ном = 1;
		Пока ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма, Строки, Ложь) Цикл
			Ном = Ном + 1;
			НомерЭлементаТабличнойЧасти = 0;
			Для Каждого Эл Из МногострочныеЧасти Цикл
				Если Эл.Значение.Количество() > 0 Тогда
					ПечатнаяФорма.Вывести(Строки[НомерЭлементаТабличнойЧасти]);				
					НомерЭлементаТабличнойЧасти = НомерЭлементаТабличнойЧасти + 1;
				КонецЕсли;
			КонецЦикла;

			Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) >= Ном Тогда
				НомерМнЧ = 0;
				Для Каждого Эл Из МногострочныеЧасти Цикл
					Попытка
						Строки[НомерМнЧ] = Эл.Значение.Получить(Ном - 1).Значение;
					Исключение
						Строки[НомерМнЧ] = ПустойТабличныйДокумент;//?(Ном = 1, ПустыеСтрокиМногострочныхЧастей[НомерМнЧ], ПустойТабличныйДокумент);
					КонецПопытки;
					НомерМнЧ = НомерМнЧ + 1;
				КонецЦикла;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
				
		КоличествоВыводимыхСтрок = Ном - 1;
		//Защита против частей разделов, которые не помещаются на лист, если даже
		//выводить по одной строке из каждой многострочной части.
		Если КоличествоВыводимыхСтрок = 0 Тогда
			КоличествоВыводимыхСтрок = 1;
		КонецЕсли;
		
		ИтоговыйТаблДок = Новый ТабличныйДокумент;
		ИтоговыйТаблДок.ОтображатьЗаголовки = Ложь;
		ИтоговыйТаблДок.ОтображатьСетку     = Ложь;
		ИтоговыйТаблДок.ЧерноБелыйПросмотр  = Истина;
		ИтоговыйТаблДок.ЧерноБелаяПечать    = Истина;
		ИтоговыйТаблДок.Автомасштаб         = Истина;
		ИтоговыйТаблДок.ОриентацияСтраницы  = Ориентация;
		ЗаполнитьЗначенияСвойств(ИтоговыйТаблДок, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

		КолвоЛистов = КолвоЛистов + 1;
		
		НомерМногострочнойЧасти = -1;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 
				  ИЛИ Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				Продолжить;
			КонецЕсли;
			Рез = ЭтоОднаИзМногострочныхЧастей(СписокВыводимыхНаПечатьОбластей.Получить(Сч), МногострочныеЧасти, ПолучитьШагСтрокиДляТабличногоПоля(ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление)));
			//Если Рез = Ложь И Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
			//	Продолжить
			//КонецЕсли;
			Если Рез <> Ложь ИЛИ Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				НомерМногострочнойЧасти = НомерМногострочнойЧасти + 1;
				ТаблЧастьВыведена = Истина;
				Если Рез = Ложь Тогда
					НомМнЧ = -1;
					Для Каждого ЭлСтр Из МногострочныеЧасти Цикл
						НомМнЧ = НомМнЧ + 1;
						Если НомМнЧ = НомерМногострочнойЧасти Тогда
							ИтоговыйТаблДок.Вывести(ЭлСтр.Значение.Получить(0).Значение);
							ЭлСтр.Значение.Удалить(0);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() >= Инд + 1 Тогда
							ИтоговыйТаблДок.Вывести(Рез.Получить(Инд).Значение);
						КонецЕсли;
					КонецЦикла;
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() > 0 Тогда
							Рез.Удалить(0);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ИтоговыйТаблДок.Вывести(ОбластьВыводимаяНаПечать);				
		КонецЦикла;
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		//ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		
		// Проверяем вывод области "Ограничители".
		флОбластьОграничителиУмещаетсяНаСтраницу = ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ИтоговыйТаблДок, ВыводимыеОбласти, Ложь);
		
		// Поиск "Правого присоединения" - секции с ИНН, КПП, номером страницы, находящейся справа
		ТаблПоле = ТабличноеПоле.ПолучитьОбласть(Верх, , Низ, );
		ПравоеПрисоединение = Неопределено;
		Для НомерПравогоПрисоединения = 0 По 10 Цикл
			ПравоеПрисоединение = ТаблПоле.Области.Найти("ПравоеПрисоединение" + Формат(НомерПравогоПрисоединения, ""));
			Если ПравоеПрисоединение <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если флОбластьОграничителиУмещаетсяНаСтраницу Тогда
			
			ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
			
			Пока флОбластьОграничителиУмещаетсяНаСтраницу Цикл
				
				// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
				флВыводимыеОбластиУмещаютсяНаСтраницу = ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ИтоговыйТаблДок, ВыводимыеОбласти);
				
				Если флВыводимыеОбластиУмещаютсяНаСтраницу Тогда
					ИтоговыйТаблДок.Вывести(ОбластьПустаяСтрока);
				Иначе
					ИтоговыйТаблДок.Вывести(ОбластьОграничители);
					Если ПравоеПрисоединение <> Неопределено Тогда
						ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
						//ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
					КонецЕсли;
					ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
					
					Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Тогда
						ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ИтоговыйТаблДок);
					КонецЕсли;
					Если КолВоЛистов <> 1 Тогда
						ОбнулитьФиксированныеЧастиНаЛистах(ИтоговыйТаблДок);
					КонецЕсли;
					
					Если ВидПечати = "ПоказатьБланк" Тогда
						ИтоговыйТаблДок.Показать(СокрП(Форма.Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
					ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
						ИтоговыйТаблДок.Напечатать();
					Иначе
						СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
					КонецЕсли;
					
					//ИтоговыйТаблДок.Показать(СокрП(Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ИтоговыйТаблДок.Вывести(ОбластьОграничители);
			Если ПравоеПрисоединение <> Неопределено Тогда
				ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
			КонецЕсли;
			ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
			
			Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Тогда
				ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ИтоговыйТаблДок);
			КонецЕсли;

			Если КолВоЛистов <> 1 Тогда
				ОбнулитьФиксированныеЧастиНаЛистах(ИтоговыйТаблДок);
			КонецЕсли;

			Если ВидПечати = "ПоказатьБланк" Тогда
				ИтоговыйТаблДок.Показать(СокрП(Форма.Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
			ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
				ИтоговыйТаблДок.Напечатать();
			Иначе
				СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат СписокПечатныхФорм;
	
КонецФункции // ВывестиНаПечатьЛистРаздела()

// Возвращает количество готовых к выводу на печать листов формата A4 для 
// раздела с именем ИмяЛиста. Сфомированные листы хранятся в списке значений мПечатныеФормы
Функция КоличествоЛистовПоИмениЛиста(мПечатныеФормы, ИмяЛиста)
	КоличествоВхождений = 0;
	Для Каждого ЭлСп Из мПечатныеФормы Цикл
		Если ЭлСп.Представление = ИмяЛиста Тогда
			КоличествоВхождений = КоличествоВхождений + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат КоличествоВхождений;
КонецФункции

// Возвращает массив имен многострочных частей табличного поля с именем ИмяТабличногоПоля.
// Поиск многострочных частей в табличном поле ограничивается верхней и нижней координатами - 
// Верх и Низ соответственно.
Функция	ПолучитьКартуМногострочныхСекцийЛиста(Форма, ИмяТабличногоПоля, Верх, Низ)
	ТаблДок = Форма.ЭлементыФормы[ИмяТабличногоПоля];
	МассивМногострочныхЧастей = Новый Массив;
	Для Каждого Обл Из ТаблДок.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки И Обл.Верх >= Верх И Обл.Низ <= Низ И Найти(ВРЕГ(Обл.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
			МассивМногострочныхЧастей.Добавить(Обл.Имя);
		КонецЕсли;
	КонецЦикла;
	Если МассивМногострочныхЧастей.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивМногострочныхЧастей;
	КонецЕсли;
КонецФункции // ПолучитьКартуМногострочныхСекцийЛиста()

// Возвращает печатную форму (лист формата A4) листа раздела, не содержащего многострочные части.
// Параметры исходного листа задаются в структуре СтруктураПараметровЛиста.
Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(Форма, СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем Верх;
	Перем Низ;

	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);

	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;
	
	ТабличноеПоле = Форма.ЭлементыФормы[ИмяТабличногоПоля];
	
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

	// Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для каждого Область Из ТабличноеПоле.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			// Добавляем в список имя области и ее верхнюю координату.
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			// Пропускаем области, скрытые от пользователя
			Если Область.Видимость <> Неопределено И НЕ Область.Видимость Тогда
				Продолжить;
			КонецЕсли;
			
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		// В том случае, если в имени области не встречается строка "ПустаяСтрока", то
		// выводим область в результирующую таблицу и удаляем из списка.
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), ВРег("ПустаяСтрока")) = 0 Тогда
			
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
			
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		// Создаем массив выводимых областей.
		ВыводимыеОбласти = Новый Массив();
		
		// Добавляем в массив выводимые области таблицы для того, 
		// чтобы проверить: поместятся ли они на текущий лист.
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		// Проверяем вывод области "Ограничители".
		флОбластьОграничителиУмещаетсяНаСтраницу = ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма,ОбластьОграничители, Ложь);
		
		Если флОбластьОграничителиУмещаетсяНаСтраницу Тогда
			Пока флОбластьОграничителиУмещаетсяНаСтраницу Цикл
				
				// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
				флВыводимыеОбластиУмещаютсяНаСтраницу = ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма,ВыводимыеОбласти, Ложь);
				
				Если флВыводимыеОбластиУмещаютсяНаСтраницу Тогда
					ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
				Иначе
					ПечатнаяФорма.Вывести(ОбластьОграничители);
					ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			// выводим область без расширения пустыми строками
			ПечатнаяФорма.Вывести(ОбластьОграничители);
		КонецЕсли;
			
	КонецЦикла;		
	
	Если ВидПечати = "ПоказатьБланк" Тогда
		ПечатнаяФорма.Показать(СокрП(Форма.Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
	ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
		ПечатнаяФорма.Напечатать();
	КонецЕсли;
	
	Возврат ПечатнаяФорма;
	
КонецФункции // ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей()

// Возвращает координату нижней строки области с именем ИмяОбласти раздела с именем Раздел.
// Для областей, ограничивающих многострочные части раздела, возвращается координата
// нижней строки многострочной части.
Функция ПолучитьНизМногострочнойЧасти(Форма, Раздел, ИмяОбласти)
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(Форма, Раздел);
	ТаблПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + Раздел];
	Обл = ТаблПоле.ПолучитьОбласть(ИмяОбласти);
	Низ = ТаблПоле.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(Низ, ГруппыСтрок) Цикл
		Низ = Низ + 1;
	Конеццикла;
	Возврат Низ - 1;
КонецФункции //ПолучитьНизМногострочнойЧасти()

// Возвращает строки многострочной части в виде табличных документов
// Параметры:
// Форма - объект Форма из которого вызвана печать
// Раздел - имя печатаемого раздела
// ИмяОбласти - имя области многострочной части
Функция ПолучитьОбластиМногострочнойЧасти(Форма, Раздел, ИмяОбласти)
	
	ОбластиМногострочнойЧасти = Новый СписокЗначений;
	Если ИмяОбласти = Неопределено Тогда
		Возврат ОбластиМногострочнойЧасти;
	КонецЕсли;
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(Форма, Раздел);
	ТаблПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + Раздел];
	Обл = ТаблПоле.ПолучитьОбласть(ИмяОбласти);
	
	Шаг = ПолучитьШагСтрокиДляТабличногоПоля(Обл);
	
	Для Сч = 1 По Обл.ВысотаТаблицы / Шаг Цикл
		ОблВрем = Обл.ПолучитьОбласть((Сч - 1) * Шаг + 1, 0, Сч * Шаг, 0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, ТаблПоле.Области.Найти(ИмяОбласти).Верх + (Сч - 1) * Шаг);
	КонецЦикла;
	СледСтрока = ТаблПоле.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок) Цикл
		ОблВрем = ТаблПоле.ПолучитьОбласть(СледСтрока,0,СледСтрока + Шаг - 1,0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, СледСтрока);
		СледСтрока = СледСтрока + Шаг;
	Конеццикла;
	Возврат ОбластиМногострочнойЧасти;
	
КонецФункции // ПолучитьОбластиМногострочнойЧасти()

// Для заданной по номеру НомСтр строки многострочной части, описываемой в элементе 
// списка значений МногострочныеЧасти, формирует и возвращает табличный документ,
// в котором очищены ячейки, содержащие значения и не защищенные от изменения пользователем.
Функция ПолучитьПустуюСтрокуМногострочнойЧасти(МногострочныеЧасти, НомСтр)
	ПерваяСтрока = МногострочныеЧасти.Значение.Получить(НомСтр).Значение;
	ИтоговыйТабличныйДокумент = Новый ТабличныйДокумент;
	ИтоговыйТабличныйДокумент.Вывести(ПерваяСтрока);
	Для Каждого Область Из ИтоговыйТабличныйДокумент.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда //И НЕ Область.Защита Тогда
			Область.Значение = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат ИтоговыйТабличныйДокумент;
КонецФункции // ПолучитьПустуюСтрокуМногострочнойЧасти()

// Возвращает максимальное количество строк многострочных частей,
// описываемых в структуре МногострочныеЧасти
Функция МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти)
	Максимум = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Максимум = Макс(Максимум, Эл.Значение.Количество());
	КонецЦикла;
	Возврат Максимум;
КонецФункции // МаксимальноеКоличествоОбластейМногострочнойЧасти()

// Проверяет является ли описываемая в элементе списка значений
// ЭлСпКоорд строка частью одной из многострочных частей, описываемых в 
// структуре МногострочныеЧасти
Функция ЭтоОднаИзМногострочныхЧастей(ЭлСпКоорд, МногострочныеЧасти, ШагСтроки = 1)
	Коорд = ЭлСпКоорд.Значение;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Для Каждого ЭлСп Из Эл.Значение Цикл
			Если Число(ЭлСп.Представление) + ШагСтроки - 1 = Коорд Тогда
				Возврат Эл.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Ложь;
КонецФункции // МаксимальноеКоличествоОбластейМногострочнойЧасти()

// Возвращает количество строк в одной "строке многострочной части" макета.
//
// Параметры:
//	ТабличноеПоле - ТабличныйДокумент или ПолеТабличногоДокумента для которого следует определить высоту
//					"строк многострочной части".
//
Функция ПолучитьШагСтрокиДляТабличногоПоля(ТабличноеПоле)
	
	Для Инд = 0 по 9 Цикл
		ОблОпределениеВысоты = ТабличноеПоле.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти" + Формат(Инд, ""));
		Если ОблОпределениеВысоты <> Неопределено Тогда
			Возврат ТабличноеПоле.ПолучитьОбласть("ОпределениеВысотыСтрокиМногострочнойЧасти" + Формат(Инд, "")).ВысотаТаблицы;
		КонецЕсли;
	КонецЦикла;
	Возврат 1;
	
КонецФункции

Процедура ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ТаблДок)
	
	Для НомерИтоговыхПоказателей = 0 По 10 Цикл
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели" + Формат(НомерИтоговыхПоказателей, ""));
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			Для Стр = ОбластьИтоговыеПоказатели.Верх По ОбластьИтоговыеПоказатели.Низ Цикл
				Для Кол = ОбластьИтоговыеПоказатели.Лево По ОбластьИтоговыеПоказатели.Право Цикл
					ТекОбл = ТаблДок.Область(Стр, Кол, Стр, Кол);
					Если ТекОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекОбл.СодержитЗначение = Истина Тогда
						ТекОбл.Значение = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// ОбнулитьФиксированныеЧастиНаЛистах
//
Процедура ОбнулитьФиксированныеЧастиНаЛистах(ТаблДок)
	
	Для НомерИтоговыхПоказателей = 0 По 10 Цикл
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ФиксируетсяНаПервомЛисте" + Формат(НомерИтоговыхПоказателей, ""));
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			Для Стр = ОбластьИтоговыеПоказатели.Верх По ОбластьИтоговыеПоказатели.Низ Цикл
				Для Кол = ОбластьИтоговыеПоказатели.Лево По ОбластьИтоговыеПоказатели.Право Цикл
					ТекОбл = ТаблДок.Область(Стр, Кол, Стр, Кол);
					Если ТекОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекОбл.СодержитЗначение = Истина Тогда
						ТекОбл.Значение = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбнулитьФиксированныеЧастиНаЛистах

// Для раздела с именем Раздел формирует таблицу значений, в которой перечисляются
// имена и вертикальные координаты областей - групп строк табличного документа, соответствующего
// данному разделу.
Функция ПолучитьКартуИменованныхГруппСтрок(Форма, Раздел)
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");
	ТаблПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + Раздел];
	Для Каждого Обл Из ТаблПоле.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = Обл.Верх;
			НовСтр.Низ = Обл.Низ;
		КонецЕсли;
	КонецЦикла;
	Возврат Карта;
КонецФункции //ПолучитьКартуИменованныхГруппСтрок()

// Проверяет принадлежность строки табличного документа по номеру, указанному
// в параметре СледСтрока, группе строк ГруппаСтрок табличного документа  
Функция ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок)
	Для Каждого ГруппаСтрок Из ГруппыСтрок Цикл
		Если ГруппаСтрок.Верх <= СледСтрока И ГруппаСтрок.Низ >= СледСтрока Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции // ЕстьСоответствующаяОбластьГруппСтрок()

Процедура ВывестиНаПечатьЛистБаланс(СтруктураПараметровЛиста)

	МакетБланкаБаланс = ЭтотОбъект.ПолучитьМакет("Бланк_Баланс_2011Кв3");
	МакетБланковРасшифровки = ЭтотОбъект.ПолучитьМакет("БланкиРасшифровки_2011Кв3");
	
	ЗаполнитьМакетБланкаПечати(СтруктураПараметровЛиста, МакетБланкаБаланс);

	Состояние(Заголовок + ". Формирование печатной формы " + СтруктураПараметровЛиста.НаименованиеЛиста + "...");
	
	ВывестиНаПечатьЛистыРаздела(СтруктураПараметровЛиста, МакетБланкаБаланс);
	
	// Вывод строк расшифровки
	
	ДеревоНастроекСтрокРасшифровки = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
	
	// структура макета бланка для вызова функции печати строк
	СтруктураМакетаБланка = Новый Структура;
	СтруктураМакетаБланка.Вставить("МакетБланковРасшифровки", МакетБланковРасшифровки);
	СтруктураМакетаБланка.Вставить("СекцияШапка", МакетБланковРасшифровки.ПолучитьОбласть("БалансШапка"));
	СтруктураМакетаБланка.Вставить("СекцияСтрокаПоказателя", МакетБланковРасшифровки.ПолучитьОбласть("БалансСтрокаПоказателя"));
	СтруктураМакетаБланка.Вставить("СекцияСтрокаРасшифровки", МакетБланковРасшифровки.ПолучитьОбласть("БалансСтрокаРасшифровки"));
	
	// структура граф отчета описанного макета бланка, где имя ключа соответствует имени параметра, а значение - номеру графы в имени показателя
	// передается в функцию печати строк в составе структуры макета бланка
	СтруктураГрафОтчета = Новый Структура;
	СтруктураГрафОтчета.Вставить("Наименование", "02");
	СтруктураГрафОтчета.Вставить("Код", "03");
	СтруктураГрафОтчета.Вставить("Графа04", "04");
	СтруктураГрафОтчета.Вставить("Графа05", "05");
	СтруктураГрафОтчета.Вставить("Графа06", "06");
	
	СтруктураМакетаБланка.Вставить("СтруктураГрафОтчета", СтруктураГрафОтчета);
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, МакетБланковРасшифровки, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	ПечатнаяФорма.Вывести(СтруктураМакетаБланка.СекцияШапка);
	
	ВРасшифровкиВыведеныДанные = Ложь;
	
	// Расшифровка строки 1110
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Нематериальные активы (стр. 1110), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("11101");
	МассивСтрокРасшифровки.Добавить("11102");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс11199;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1120
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Результаты исследований и разработок (стр. 1120), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("11201");
	МассивСтрокРасшифровки.Добавить("11202");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс11299;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1130
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Основные средства (стр. 1130), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("11301");
	МассивСтрокРасшифровки.Добавить("11302");
	МассивСтрокРасшифровки.Добавить("11303");
	МассивСтрокРасшифровки.Добавить("11304");
	МассивСтрокРасшифровки.Добавить("11305");
	МассивСтрокРасшифровки.Добавить("11306");
	МассивСтрокРасшифровки.Добавить("11307");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс11399;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1140
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Доходные вложения в материальные ценности (стр. 1140), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("11401");
	МассивСтрокРасшифровки.Добавить("11402");
	МассивСтрокРасшифровки.Добавить("11403");
	МассивСтрокРасшифровки.Добавить("11404");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс11499;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1150
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Финансовые вложения (стр. 1150), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("11501");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс11599;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1160
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Отложенные налоговые активы (стр. 1160), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	
	ИдентификаторМногострочногоРаздела = мИдБаланс11699;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1170
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прочие внеоборотные активы (стр. 1170), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("11701");
	МассивСтрокРасшифровки.Добавить("11702");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс11799;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1210
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Запасы (стр. 1210), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("12101");
	МассивСтрокРасшифровки.Добавить("12102");
	МассивСтрокРасшифровки.Добавить("12103");
	МассивСтрокРасшифровки.Добавить("12104");
	МассивСтрокРасшифровки.Добавить("12105");
	МассивСтрокРасшифровки.Добавить("12106");
	МассивСтрокРасшифровки.Добавить("12107");
	МассивСтрокРасшифровки.Добавить("12108");
	МассивСтрокРасшифровки.Добавить("12109");
	МассивСтрокРасшифровки.Добавить("12110");
	МассивСтрокРасшифровки.Добавить("12111");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс12199;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1220
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Налог на добавленную стоимость по приобретенным ценностям (стр. 1220), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("12201");
	МассивСтрокРасшифровки.Добавить("12202");
	МассивСтрокРасшифровки.Добавить("12203");
	МассивСтрокРасшифровки.Добавить("12204");
	МассивСтрокРасшифровки.Добавить("12205");
	МассивСтрокРасшифровки.Добавить("12206");
	МассивСтрокРасшифровки.Добавить("12207");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс12299;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1230
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Дебиторская задолженность (стр. 1230), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("12301");
	МассивСтрокРасшифровки.Добавить("12302");
	МассивСтрокРасшифровки.Добавить("12303");
	МассивСтрокРасшифровки.Добавить("12304");
	МассивСтрокРасшифровки.Добавить("12305");
	МассивСтрокРасшифровки.Добавить("12306");
	МассивСтрокРасшифровки.Добавить("12307");
	МассивСтрокРасшифровки.Добавить("12308");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс12399;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1240
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Финансовые вложения (за исключением денежных эквивалентов) (стр. 1240), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("12401");
	МассивСтрокРасшифровки.Добавить("12402");
	МассивСтрокРасшифровки.Добавить("12403");
	МассивСтрокРасшифровки.Добавить("12404");
	МассивСтрокРасшифровки.Добавить("12405");
	МассивСтрокРасшифровки.Добавить("12406");
	МассивСтрокРасшифровки.Добавить("12407");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс12499;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1250
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Денежные средства и денежные эквиваленты (стр. 1250), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("12501");
	МассивСтрокРасшифровки.Добавить("12502");
	МассивСтрокРасшифровки.Добавить("12503");
	МассивСтрокРасшифровки.Добавить("12504");
	МассивСтрокРасшифровки.Добавить("12505");
	МассивСтрокРасшифровки.Добавить("12506");
	МассивСтрокРасшифровки.Добавить("12507");
	МассивСтрокРасшифровки.Добавить("12508");
	МассивСтрокРасшифровки.Добавить("12509");
	МассивСтрокРасшифровки.Добавить("12510");
	МассивСтрокРасшифровки.Добавить("12511");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс12599;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1260
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прочие оборотные активы (стр. 1260), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("12601");
	МассивСтрокРасшифровки.Добавить("12602");
	МассивСтрокРасшифровки.Добавить("12603");
	МассивСтрокРасшифровки.Добавить("12604");
	МассивСтрокРасшифровки.Добавить("12605");
	МассивСтрокРасшифровки.Добавить("12606");
	МассивСтрокРасшифровки.Добавить("12607");
	МассивСтрокРасшифровки.Добавить("12608");
	МассивСтрокРасшифровки.Добавить("12609");
	МассивСтрокРасшифровки.Добавить("12610");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс12699;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1310
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Уставный капитал (складочный капитал, уставный фонд, вклады товарищей) (стр. 1310), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	
	ИдентификаторМногострочногоРаздела = мИдБаланс13199;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1320
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Собственные акции, выкупленные у акционеров (стр. 1320), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	
	ИдентификаторМногострочногоРаздела = мИдБаланс13299;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1340
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Переоценка внеоборотных активов (стр. 1340), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("13401");
	МассивСтрокРасшифровки.Добавить("13402");
	МассивСтрокРасшифровки.Добавить("13403");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс13499;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1350
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Добавочный капитал (без переоценки) (стр. 1350), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	
	ИдентификаторМногострочногоРаздела = мИдБаланс13599;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1360
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Резервный капитал (стр. 1360), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("13601");
	МассивСтрокРасшифровки.Добавить("13602");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс13699;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1370
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Нераспределенная прибыль (непокрытый убыток) (стр. 1370), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	
	ИдентификаторМногострочногоРаздела = мИдБаланс13799;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1410
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Заемные средства (стр. 1410), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("14101");
	МассивСтрокРасшифровки.Добавить("14102");
	МассивСтрокРасшифровки.Добавить("14103");
	МассивСтрокРасшифровки.Добавить("14104");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс14199;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1420
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Отложенные налоговые обязательства (стр. 1420), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	
	ИдентификаторМногострочногоРаздела = мИдБаланс14299;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1450
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прочие обязательства (стр. 1450), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	
	ИдентификаторМногострочногоРаздела = мИдБаланс14599;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1510
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Заемные средства (стр. 1510), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("15101");
	МассивСтрокРасшифровки.Добавить("15102");
	МассивСтрокРасшифровки.Добавить("15103");
	МассивСтрокРасшифровки.Добавить("15104");
	МассивСтрокРасшифровки.Добавить("15105");
	МассивСтрокРасшифровки.Добавить("15106");
	МассивСтрокРасшифровки.Добавить("15107");
	МассивСтрокРасшифровки.Добавить("15108");
	МассивСтрокРасшифровки.Добавить("15109");
	МассивСтрокРасшифровки.Добавить("15110");
	МассивСтрокРасшифровки.Добавить("15111");
	МассивСтрокРасшифровки.Добавить("15112");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс15199;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1520
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Кредиторская задолженность (стр. 1520), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("15201");
	МассивСтрокРасшифровки.Добавить("15202");
	МассивСтрокРасшифровки.Добавить("15203");
	МассивСтрокРасшифровки.Добавить("15204");
	МассивСтрокРасшифровки.Добавить("15205");
	МассивСтрокРасшифровки.Добавить("15206");
	МассивСтрокРасшифровки.Добавить("15207");
	МассивСтрокРасшифровки.Добавить("15208");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс15299;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1530
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Доходы будущих периодов (стр. 1530), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("15301");
	МассивСтрокРасшифровки.Добавить("15302");
	МассивСтрокРасшифровки.Добавить("15303");
	МассивСтрокРасшифровки.Добавить("15304");
	МассивСтрокРасшифровки.Добавить("15305");
	
	ИдентификаторМногострочногоРаздела = мИдБаланс15399;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1550
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прочие обязательства (стр. 1550), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	
	ИдентификаторМногострочногоРаздела = мИдБаланс15599;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мБаланс, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Выводим последний сформированный лист
	Если ВРасшифровкиВыведеныДанные Тогда
		мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
	КонецЕсли;
	
КонецПроцедуры // ВывестиНаПечатьЛистБаланс()

Процедура ВывестиНаПечатьЛистФормаОтчета(СтруктураПараметровЛиста)

	МакетБланкаОтчета = ЭтотОбъект.ПолучитьМакет("Бланк_ОПУ_2011Кв3");
	МакетБланковРасшифровки = ЭтотОбъект.ПолучитьМакет("БланкиРасшифровки_2011Кв3");
	
	ЗаполнитьМакетБланкаПечати(СтруктураПараметровЛиста, МакетБланкаОтчета);

	Состояние(Заголовок + ". Формирование печатной формы " + СтруктураПараметровЛиста.НаименованиеЛиста + "...");
	
	// Вывод основной формы отчета
	
	ВывестиНаПечатьЛистыРаздела(СтруктураПараметровЛиста, МакетБланкаОтчета);
	
	// Вывод строк расшифровки
	
	ДеревоНастроекСтрокРасшифровки = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета;
	
	// структура макета бланка для вызова функции печати строк
	// остальные элементы структуры будут определяться непосредственно при выводе строк
	СтруктураМакетаБланка = Новый Структура;
	СтруктураМакетаБланка.Вставить("МакетБланковРасшифровки", МакетБланковРасшифровки);
	СтруктураМакетаБланка.Вставить("СекцияШапка", МакетБланковРасшифровки.ПолучитьОбласть("ОПУШапка"));
	СтруктураМакетаБланка.Вставить("СекцияСтрокаПоказателя", МакетБланковРасшифровки.ПолучитьОбласть("ОПУСтрокаПоказателя"));
	СтруктураМакетаБланка.Вставить("СекцияСтрокаРасшифровки", МакетБланковРасшифровки.ПолучитьОбласть("ОПУСтрокаРасшифровки"));
	СтруктураМакетаБланка.Вставить("СекцияСтрокаРасшифровкиЕНВД", МакетБланковРасшифровки.ПолучитьОбласть("ОПУСтрокаРасшифровкиЕНВД"));
		
	
	// структура граф отчета описанного макета бланка, где имя ключа соответствует имени параметра, а значение - номеру графы в имени показателя
	// передается в функцию печати строк в составе структуры макета бланка
	СтруктураГрафОтчета = Новый Структура;
	СтруктураГрафОтчета.Вставить("Наименование", "02");
	СтруктураГрафОтчета.Вставить("Код", "03");
	СтруктураГрафОтчета.Вставить("Графа04", "04");
	СтруктураГрафОтчета.Вставить("Графа05", "05");
	
	СтруктураМакетаБланка.Вставить("СтруктураГрафОтчета", СтруктураГрафОтчета);
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, МакетБланковРасшифровки, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	ПечатнаяФорма.Вывести(СтруктураМакетаБланка.СекцияШапка);
	
	ВРасшифровкиВыведеныДанные = Ложь;
	
	// Расшифровка строки 2110
	// вывод расшифровки зависит от применения ЕНВД
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Выручка (стр. 2110), в том числе:";
	
	Если ПрименениеЕНВД Тогда
		МассивСтрокРасшифровки = Новый Массив;
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "21101", мИдФормаОтчета21101));
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "21102", мИдФормаОтчета21102));
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки2Уровня(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	Иначе
		МассивСтрокРасшифровки = Новый Массив;
		ИдентификаторМногострочногоРаздела = ?(ДеревоНастроекСтрокРасшифровки.Строки.Найти("2110", "Код").ВключатьВОтчет, мИдФормаОтчета02110, "");
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	КонецЕсли;
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2120
	// вывод расшифровки зависит от применения ЕНВД
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Себестоимость продаж (стр. 2120), в том числе:";
	
	Если ПрименениеЕНВД Тогда
		МассивСтрокРасшифровки = Новый Массив;
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "21201", мИдФормаОтчета21201));
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "21202", мИдФормаОтчета21202));
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки2Уровня(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	Иначе
		МассивСтрокРасшифровки = Новый Массив;
		ИдентификаторМногострочногоРаздела = ?(ДеревоНастроекСтрокРасшифровки.Строки.Найти("2120", "Код").ВключатьВОтчет, мИдФормаОтчета02120, "");
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	КонецЕсли;
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2100
	// вывод расшифровки зависит от применения ЕНВД
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Валовая прибыль (убыток) (стр. 2100), в том числе:";
	
	Если ПрименениеЕНВД Тогда
		МассивСтрокРасшифровки = Новый Массив;
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "21001", мИдФормаОтчета21001));
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "21002", мИдФормаОтчета21002));
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки2Уровня(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	Иначе
		МассивСтрокРасшифровки = Новый Массив;
		ИдентификаторМногострочногоРаздела = мИдФормаОтчета02100;
		ИдентификаторМногострочногоРаздела = ?(ДеревоНастроекСтрокРасшифровки.Строки.Найти("2100", "Код").ВключатьВОтчет, мИдФормаОтчета02100, "");
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	КонецЕсли;
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2210
	// вывод расшифровки зависит от применения ЕНВД
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Коммерческие расходы (стр. 2210), в том числе:";
	
	Если ПрименениеЕНВД Тогда
		МассивСтрокРасшифровки = Новый Массив;
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "22101", мИдФормаОтчета22101));
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "22102", мИдФормаОтчета22102));
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки2Уровня(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	Иначе
		МассивСтрокРасшифровки = Новый Массив;
		ИдентификаторМногострочногоРаздела = ?(ДеревоНастроекСтрокРасшифровки.Строки.Найти("2210", "Код").ВключатьВОтчет, мИдФормаОтчета02210, "");
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	КонецЕсли;
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2220
	// вывод расшифровки зависит от применения ЕНВД
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Управленческие расходы (стр. 2220), в том числе:";
	
	Если ПрименениеЕНВД Тогда
		МассивСтрокРасшифровки = Новый Массив;
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "22201", мИдФормаОтчета22201));
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "22202", мИдФормаОтчета22202));
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки2Уровня(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	Иначе
		МассивСтрокРасшифровки = Новый Массив;
		ИдентификаторМногострочногоРаздела = ?(ДеревоНастроекСтрокРасшифровки.Строки.Найти("2220", "Код").ВключатьВОтчет, мИдФормаОтчета02220, "");
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	КонецЕсли;
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2200
	// вывод расшифровки зависит от применения ЕНВД
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прибыль (убыток) от продаж (стр. 2200), в том числе:";
	
	Если ПрименениеЕНВД Тогда
		МассивСтрокРасшифровки = Новый Массив;
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "22001", мИдФормаОтчета22001));
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "22002", мИдФормаОтчета22002));
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки2Уровня(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	Иначе
		МассивСтрокРасшифровки = Новый Массив;
		ИдентификаторМногострочногоРаздела = мИдФормаОтчета02200;
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	КонецЕсли;
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2310
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Доходы от участия в других организациях (стр. 2310), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("23101");
	МассивСтрокРасшифровки.Добавить("23102");
	МассивСтрокРасшифровки.Добавить("23103");
	ИдентификаторМногострочногоРаздела = ""; // пользовательские строки расшифровки не предусмотрены
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2320
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Проценты к получению (стр. 2320), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("23201");
	МассивСтрокРасшифровки.Добавить("23202");
	МассивСтрокРасшифровки.Добавить("23203");
	ИдентификаторМногострочногоРаздела = ""; // пользовательские строки расшифровки не предусмотрены
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2330
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Проценты к уплате (стр. 2330), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("23301");
	МассивСтрокРасшифровки.Добавить("23302");
	ИдентификаторМногострочногоРаздела = ""; // пользовательские строки расшифровки не предусмотрены
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2340
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прочие доходы (стр. 2340), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("23401");
	МассивСтрокРасшифровки.Добавить("23402");
	МассивСтрокРасшифровки.Добавить("23403");
	МассивСтрокРасшифровки.Добавить("23404");
	МассивСтрокРасшифровки.Добавить("23405");
	МассивСтрокРасшифровки.Добавить("23406");
	МассивСтрокРасшифровки.Добавить("23407");
	МассивСтрокРасшифровки.Добавить("23408");
	МассивСтрокРасшифровки.Добавить("23409");
	МассивСтрокРасшифровки.Добавить("23410");
	МассивСтрокРасшифровки.Добавить("23411");
	МассивСтрокРасшифровки.Добавить("23412");
	МассивСтрокРасшифровки.Добавить("23413");
	МассивСтрокРасшифровки.Добавить("23414");
	МассивСтрокРасшифровки.Добавить("23415");
	МассивСтрокРасшифровки.Добавить("23416");
	МассивСтрокРасшифровки.Добавить("23417");
	МассивСтрокРасшифровки.Добавить("23418");
	МассивСтрокРасшифровки.Добавить("23419");
	МассивСтрокРасшифровки.Добавить("23420");
	МассивСтрокРасшифровки.Добавить("23421");
	МассивСтрокРасшифровки.Добавить("23422");
	МассивСтрокРасшифровки.Добавить("23423");
	МассивСтрокРасшифровки.Добавить("23424");
	ИдентификаторМногострочногоРаздела = мИдФормаОтчета02340;
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2350
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прочие расходы (стр. 2350), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("23501");
	МассивСтрокРасшифровки.Добавить("23502");
	МассивСтрокРасшифровки.Добавить("23503");
	МассивСтрокРасшифровки.Добавить("23504");
	МассивСтрокРасшифровки.Добавить("23505");
	МассивСтрокРасшифровки.Добавить("23506");
	МассивСтрокРасшифровки.Добавить("23507");
	МассивСтрокРасшифровки.Добавить("23508");
	МассивСтрокРасшифровки.Добавить("23509");
	МассивСтрокРасшифровки.Добавить("23510");
	МассивСтрокРасшифровки.Добавить("23511");
	МассивСтрокРасшифровки.Добавить("23512");
	МассивСтрокРасшифровки.Добавить("23513");
	МассивСтрокРасшифровки.Добавить("23514");
	МассивСтрокРасшифровки.Добавить("23515");
	МассивСтрокРасшифровки.Добавить("23516");
	МассивСтрокРасшифровки.Добавить("23517");
	МассивСтрокРасшифровки.Добавить("23518");
	МассивСтрокРасшифровки.Добавить("23519");
	МассивСтрокРасшифровки.Добавить("23520");
	МассивСтрокРасшифровки.Добавить("23521");
	МассивСтрокРасшифровки.Добавить("23522");
	МассивСтрокРасшифровки.Добавить("23523");
	МассивСтрокРасшифровки.Добавить("23524");
	МассивСтрокРасшифровки.Добавить("23525");
	МассивСтрокРасшифровки.Добавить("23526");
	МассивСтрокРасшифровки.Добавить("23527");
	МассивСтрокРасшифровки.Добавить("23528");
	МассивСтрокРасшифровки.Добавить("23529");
	МассивСтрокРасшифровки.Добавить("23530");
	МассивСтрокРасшифровки.Добавить("23531");
	МассивСтрокРасшифровки.Добавить("23532");
	ИдентификаторМногострочногоРаздела = мИдФормаОтчета02350;
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2300
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прибыль (убыток) до налогообложения (стр. 2300), в том числе:";
	
	Если ПрименениеЕНВД Тогда
		МассивСтрокРасшифровки = Новый Массив;
		МассивСтрокРасшифровки.Добавить("23001");
		МассивСтрокРасшифровки.Добавить("23002");
		ИдентификаторМногострочногоРаздела = ""; // пользовательские строки расшифровки не предусмотрены
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	Иначе
		МассивСтрокРасшифровки = Новый Массив;
		ИдентификаторМногострочногоРаздела = мИдФормаОтчета02300;
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	КонецЕсли;
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2421
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "В том числе постоянные налоговые обязательства (активы) (стр. 2421), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	ИдентификаторМногострочногоРаздела = мИдФормаОтчета02421;
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2430
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Изменение отложенных налоговых обязательств (стр. 2430), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	ИдентификаторМногострочногоРаздела = мИдФормаОтчета02430;
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2450
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Изменение отложенных налоговых активов (стр. 2450), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	ИдентификаторМногострочногоРаздела = мИдФормаОтчета02450;
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2460
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прочее (стр. 2460), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("24601");
	МассивСтрокРасшифровки.Добавить("24602");
	ИдентификаторМногострочногоРаздела = мИдФормаОтчета02460;
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2510
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Результат от переоценки внеоборотных активов, не включаемый в чистую прибыль (убыток) периода (стр. 2510), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("25101");
	МассивСтрокРасшифровки.Добавить("25102");
	ИдентификаторМногострочногоРаздела = ""; // пользовательские строки расшифровки не предусмотрены
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, мФормаОтчета, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Выводим последний сформированный лист
	Если ВРасшифровкиВыведеныДанные Тогда
		мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
	КонецЕсли;
	
КонецПроцедуры // ВывестиНаПечатьЛистФормаОтчета()

Функция ВывестиВМакетБлокСтрокРасшифровки2Уровня(ПечатнаяФорма, ПолеТабличногоДокумента, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, СтруктураПараметровЛиста, СтруктураМакетаБланка)
	
	МакетБланковРасшифровки = СтруктураМакетаБланка.МакетБланковРасшифровки;
	СекцияШапка = СтруктураМакетаБланка.СекцияШапка;
	СекцияСтрокаПоказателя =  СтруктураМакетаБланка.СекцияСтрокаПоказателя;
	СекцияСтрокаРасшифровки =  СтруктураМакетаБланка.СекцияСтрокаРасшифровки;
	СекцияСтрокаРасшифровкиЕНВД =  СтруктураМакетаБланка.СекцияСтрокаРасшифровкиЕНВД;
	СтруктураГрафОтчета = СтруктураМакетаБланка.СтруктураГрафОтчета;
	
	ВыводилсяЗаголовокСтроки = Ложь;
	ВРасшифровкиВыведеныДанные = Ложь;
	
	Для Каждого СтрокаРасшифровки Из МассивСтрокРасшифровки Цикл
		
		ВыводиласьРасшифровка1Уровня = Ложь;
		
		Для Каждого ГрафаОтчета Из СтруктураГрафОтчета Цикл
			СекцияСтрокаРасшифровки.Параметры[ГрафаОтчета.Ключ]	= ПолеТабличногоДокумента.Области["П00010" + СтрокаРасшифровки.Код + ГрафаОтчета.Значение].Текст;
		КонецЦикла;
		
		// пропускаем строки расшифровки показателя 2 уровня если он не отмечен в дереве настроек строк расшифровки
		НастройкаСтрокиРасшифровки = ДеревоНастроекСтрокРасшифровки.Строки.Найти(СтрокаРасшифровки.Код, "Код");
		Если НастройкаСтрокиРасшифровки <> Неопределено И НастройкаСтрокиРасшифровки.ВключатьВОтчет Тогда
			ТаблицаМногострочногоРаздела = мСтруктураМногострочныхРазделов[СтрокаРасшифровки.ИдентификаторМногострочногоРаздела];
			
			Для НомерСтроки = 1 По ТаблицаМногострочногоРаздела.Количество() Цикл
				// строку расшифровки добавленную пользователем выводим только если в ней есть заполненные значения
				ВыводитьМногострочнуюСтроку = Ложь;
				Для Каждого Колонка Из ТаблицаМногострочногоРаздела.Колонки Цикл
					ВыводитьМногострочнуюСтроку = ВыводитьМногострочнуюСтроку ИЛИ ЗначениеЗаполнено(ПолеТабличногоДокумента.Области[Колонка.Имя + "_" + НомерСтроки].Значение);
				КонецЦикла;
				
				Если ВыводитьМногострочнуюСтроку Тогда
					
					Для Каждого ГрафаОтчета Из СтруктураГрафОтчета Цикл
						СекцияСтрокаРасшифровкиЕНВД.Параметры[ГрафаОтчета.Ключ] = ПолеТабличногоДокумента.Области[СтрокаРасшифровки.ИдентификаторМногострочногоРаздела + ГрафаОтчета.Значение + "_" + НомерСтроки].Текст;
					КонецЦикла;
					
					// массив строк для вывода в табличный документ определяем с учетом 
					МассивЗаголовокПерваяСтрока = Новый Массив;
					Если НЕ ВыводилсяЗаголовокСтроки Тогда
						МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаПоказателя);
					КонецЕсли;
					Если НЕ ВыводиласьРасшифровка1Уровня Тогда
						МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаРасшифровки);
					КонецЕсли;
					МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаРасшифровкиЕНВД);
					
					Если НЕ ПечатнаяФорма.ПроверитьВывод(МассивЗаголовокПерваяСтрока) Тогда
						// начинаем новую страницу
						мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
						ПечатнаяФорма = Новый ТабличныйДокумент;
						ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
						ПечатнаяФорма.ОтображатьСетку     = Ложь;
						ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
						ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
						ПечатнаяФорма.Автомасштаб         = Истина;
						ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
						ЗаполнитьЗначенияСвойств(ПечатнаяФорма, МакетБланковРасшифровки, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
						ПечатнаяФорма.Вывести(СекцияШапка);
					КонецЕсли;
					
					Если НЕ ВыводилсяЗаголовокСтроки Тогда
						ПечатнаяФорма.Вывести(СекцияСтрокаПоказателя);
						ВыводилсяЗаголовокСтроки = Истина;
					КонецЕсли;
					
					Если НЕ ВыводиласьРасшифровка1Уровня Тогда
						// так как есть строки 2 уровня, то к наименованию добавляем подстроку ", в том числе"
						СекцияСтрокаРасшифровки.Параметры.Наименование = СекцияСтрокаРасшифровки.Параметры.Наименование + ", в том числе";
						ПечатнаяФорма.Вывести(СекцияСтрокаРасшифровки);
						ВыводиласьРасшифровка1Уровня = Истина;
					КонецЕсли;
					ПечатнаяФорма.Вывести(СекцияСтрокаРасшифровкиЕНВД);

					ВРасшифровкиВыведеныДанные = Истина;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// показатель первого уровня выводится в любом случае
		Если Не ВыводиласьРасшифровка1Уровня Тогда
			МассивЗаголовокПерваяСтрока = Новый Массив;
			Если НЕ ВыводилсяЗаголовокСтроки Тогда
				МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаПоказателя);
			КонецЕсли;
			МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаРасшифровки);

			Если НЕ ПечатнаяФорма.ПроверитьВывод(МассивЗаголовокПерваяСтрока) Тогда
				// начинаем новую страницу
				мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
				ПечатнаяФорма = Новый ТабличныйДокумент;
				ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
				ПечатнаяФорма.ОтображатьСетку     = Ложь;
				ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
				ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
				ПечатнаяФорма.Автомасштаб         = Истина;
				ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
				ЗаполнитьЗначенияСвойств(ПечатнаяФорма, МакетБланковРасшифровки, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
				ПечатнаяФорма.Вывести(СекцияШапка);
			КонецЕсли;
		
			Если НЕ ВыводилсяЗаголовокСтроки Тогда
				ПечатнаяФорма.Вывести(СекцияСтрокаПоказателя);
				ВыводилсяЗаголовокСтроки = Истина;
			КонецЕсли;
			ПечатнаяФорма.Вывести(СекцияСтрокаРасшифровки);
			
			ВРасшифровкиВыведеныДанные = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВРасшифровкиВыведеныДанные;
	
КонецФункции // ВывестиВМакетБлокСтрокРасшифровки()

Функция ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ПолеТабличногоДокумента, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка)
	
	МакетБланковРасшифровки = СтруктураМакетаБланка.МакетБланковРасшифровки;
	СекцияШапка = СтруктураМакетаБланка.СекцияШапка;
	СекцияСтрокаРасшифровки =  СтруктураМакетаБланка.СекцияСтрокаРасшифровки;
	СекцияСтрокаПоказателя =  СтруктураМакетаБланка.СекцияСтрокаПоказателя;
	СтруктураГрафОтчета = СтруктураМакетаБланка.СтруктураГрафОтчета;
	
	ЭтоПерваяСтрокаРасшифровки = Истина;
	ВРасшифровкиВыведеныДанные = Ложь;
	
	Для Каждого СтрокаРасшифровки Из МассивСтрокРасшифровки Цикл
		
		// определяем, отмечена ли строка для вывода в дереве настроек
		// для поиска используется строка состоящая из "ДопСтрока" объединенного со значением из массива строк расшифровки (коды строк)
		// по этой строке в дереве настроек осуществляется связь области табличного документа и строки показателя отчета
		РезультатыПоиска = ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока" + СтрокаРасшифровки, "ИмяОбластиДопСтроки", Истина);
		Если РезультатыПоиска <> Неопределено И НЕ РезультатыПоиска.ВключатьВОтчет Тогда
			// на печать не выводятся только строки для которых это явно указано
			Продолжить;
		КонецЕсли;
		
		Для Каждого ГрафаОтчета Из СтруктураГрафОтчета Цикл
			СекцияСтрокаРасшифровки.Параметры[ГрафаОтчета.Ключ]	= ПолеТабличногоДокумента.Области["П00010" + СтрокаРасшифровки + ГрафаОтчета.Значение].Текст;
		КонецЦикла;
		
		// заголовок расшифровываемого показателя не должен быть оторван от первой строки своих данных
		Если ЭтоПерваяСтрокаРасшифровки Тогда
			МассивЗаголовокПерваяСтрока = Новый Массив;
			МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаПоказателя);
			МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаРасшифровки);
			Если НЕ ПечатнаяФорма.ПроверитьВывод(МассивЗаголовокПерваяСтрока) Тогда
				// начинаем новую страницу
				мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
				ПечатнаяФорма = Новый ТабличныйДокумент;
				ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
				ПечатнаяФорма.ОтображатьСетку     = Ложь;
				ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
				ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
				ПечатнаяФорма.Автомасштаб         = Истина;
				ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
				ЗаполнитьЗначенияСвойств(ПечатнаяФорма, МакетБланковРасшифровки, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
				ПечатнаяФорма.Вывести(СекцияШапка);
			КонецЕсли;
			ПечатнаяФорма.Вывести(СекцияСтрокаПоказателя);
			ПечатнаяФорма.Вывести(СекцияСтрокаРасшифровки);
			ЭтоПерваяСтрокаРасшифровки = Ложь;
			ВРасшифровкиВыведеныДанные = Истина;
		Иначе
			Если НЕ ПечатнаяФорма.ПроверитьВывод(СекцияСтрокаРасшифровки) Тогда
				// начинаем новую страницу
				мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
				ПечатнаяФорма = Новый ТабличныйДокумент;
				ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
				ПечатнаяФорма.ОтображатьСетку     = Ложь;
				ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
				ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
				ПечатнаяФорма.Автомасштаб         = Истина;
				ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
				ЗаполнитьЗначенияСвойств(ПечатнаяФорма, МакетБланковРасшифровки, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
				ПечатнаяФорма.Вывести(СекцияШапка);
			КонецЕсли;
			ПечатнаяФорма.Вывести(СекцияСтрокаРасшифровки);
			ВРасшифровкиВыведеныДанные = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если НЕ ПустаяСтрока(ИдентификаторМногострочногоРаздела) Тогда
		ТаблицаМногострочногоРаздела = мСтруктураМногострочныхРазделов[ИдентификаторМногострочногоРаздела];
		
		Для НомерСтроки = 1 По ТаблицаМногострочногоРаздела.Количество() Цикл
			
			ВыводитьМногострочнуюСтроку = Ложь;
			Для Каждого Колонка Из ТаблицаМногострочногоРаздела.Колонки Цикл
				ВыводитьМногострочнуюСтроку = ВыводитьМногострочнуюСтроку ИЛИ ЗначениеЗаполнено(ПолеТабличногоДокумента.Области[Колонка.Имя + "_" + НомерСтроки].Значение);
			КонецЦикла;
			
			Если ВыводитьМногострочнуюСтроку Тогда
				
				Для Каждого ГрафаОтчета Из СтруктураГрафОтчета Цикл
					СекцияСтрокаРасшифровки.Параметры[ГрафаОтчета.Ключ]	= ПолеТабличногоДокумента.Области[ИдентификаторМногострочногоРаздела + ГрафаОтчета.Значение + "_" + НомерСтроки].Текст;
				КонецЦикла;
				
				Если ЭтоПерваяСтрокаРасшифровки Тогда
					МассивЗаголовокПерваяСтрока = Новый Массив;
					МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаПоказателя);
					МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаРасшифровки);
					Если НЕ ПечатнаяФорма.ПроверитьВывод(МассивЗаголовокПерваяСтрока) Тогда
						// начинаем новую страницу
						мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
						ПечатнаяФорма = Новый ТабличныйДокумент;
						ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
						ПечатнаяФорма.ОтображатьСетку     = Ложь;
						ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
						ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
						ПечатнаяФорма.Автомасштаб         = Истина;
						ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
						ЗаполнитьЗначенияСвойств(ПечатнаяФорма, МакетБланковРасшифровки, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
						ПечатнаяФорма.Вывести(СекцияШапка);
					КонецЕсли;
					ПечатнаяФорма.Вывести(СекцияСтрокаПоказателя);
					ПечатнаяФорма.Вывести(СекцияСтрокаРасшифровки);
					ЭтоПерваяСтрокаРасшифровки = Ложь;
					ВРасшифровкиВыведеныДанные = Истина;
				Иначе
					Если НЕ ПечатнаяФорма.ПроверитьВывод(СекцияСтрокаРасшифровки) Тогда
						// начинаем новую страницу
						мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
						ПечатнаяФорма = Новый ТабличныйДокумент;
						ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
						ПечатнаяФорма.ОтображатьСетку     = Ложь;
						ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
						ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
						ПечатнаяФорма.Автомасштаб         = Истина;
						ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
						ЗаполнитьЗначенияСвойств(ПечатнаяФорма, МакетБланковРасшифровки, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
						ПечатнаяФорма.Вывести(СекцияШапка);
					КонецЕсли;
					ПечатнаяФорма.Вывести(СекцияСтрокаРасшифровки);
					ВРасшифровкиВыведеныДанные = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВРасшифровкиВыведеныДанные;
	
КонецФункции // ВывестиВМакетБлокСтрокРасшифровки()

Процедура ВывестиНаПечатьЛистыРаздела(СтруктураПараметровЛиста, МакетБланка = Неопределено)
	
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;

	Если МакетБланка = Неопределено Тогда 
		ТаблДок = ЭлементыФормы[СтруктураПараметровЛиста.ИмяТабличногоПоля];
	Иначе
		ТаблДок = МакетБланка;
	КонецЕсли;
	
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений;
	Для каждого Область Из ТаблДок.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТаблДок, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), "ПУСТАЯСТРОКА") = 0 Тогда
			ОбластьВыводимаяНаПечать = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		Пока ПечатнаяФорма.ПроверитьВывод(ВыводимыеОбласти) Цикл
			ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
		мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
		
		// инициализируем печатную форму для следующей страницы
		ПечатнаяФорма = Новый ТабличныйДокумент;
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
		ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТаблДок, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМакетБланкаПечати(Параметры, МакетБланка)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Область");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ЭлементыФормы[Параметры.ИмяТабличногоПоля];
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Область = Область;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетБланка.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска <> Неопределено Тогда
				Если РезультатПоиска.Область.СодержитЗначение Тогда
					Область.Формат = РезультатПоиска.Область.Формат;
					Область.Значение = РезультатПоиска.Область.Значение;
				Иначе
					Область.Текст = РезультатПоиска.Область.Текст;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва раздела Баланс
	СтрокаУровня1.ИмяСтраницы                          = "Баланс";
	СтрокаУровня1.МногострочностьВРазделе              = 28;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	// Добавим св-ва раздела Отчет о прибылях и убытках
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "ФормаОтчета";
	СтрокаУровня1.МногострочностьВРазделе              = ?(ПрименениеЕНВД, 18, 12);
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;
	мРежимПечати = Истина;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	мРежимПечати = Ложь;
	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	КонецЕсли;

КонецПроцедуры // Печать()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = КомментарийОбщий;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	Если Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		мСохраненныйДок.КодИМНС = Организация.КодИМНС;
	КонецЕсли;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	СписокСохранения.Вставить("СохранятьРасшифровку", мСохранятьРасшифровку);

	Если мСохранятьРасшифровку = Истина Тогда
		СписокСохранения.Вставить("Расшифровка", СпП);
	КонецЕсли;

	// Сохраним список организаций, по которому необходимо собирать отчет.
	СписокСохранения.Вставить("ГруппаОрганизаций", мГруппаОрганизаций);

	// Сохраним тип адреса выводимый в отчете.
	СписокСохранения.Вставить("ТипАдреса", мТипАдреса);
	
	СписокСохранения.Вставить("Адрес9Запятых", мАдресДляВыгрузки);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	// флажок проверки соотношения показателей при печати и выгрузке
	СписокСохранения.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	// вставляем признак применения ЕНВД для управления структурой отчета
	СписокСохранения.Вставить("ПрименениеЕНВД", ПрименениеЕНВД);
	
	// вставляем структуру настройки состава дополнительных строк
	СписокСохранения.Вставить("СоставДополнительныхСтрок", СоставДополнительныхСтрок);
	
	// вставляем вид отчетности
	СписокСохранения.Вставить("ВидСдачиОтчетности", ВидСдачиОтчетности);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// сохраняем действующие настройки страниц
	мСохраненныйДок.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
	
	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногострочногоРаздела;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Расшифровка;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	КомментарийОбщий 		 = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаются только те настройки страниц, которые описаны в самом отчете
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	Для Каждого ЭлементДереваНастройкиСтраниц Из ДеревоНастройкиСтраниц.Строки Цикл
		НайденныйЭлементДереваСтраниц = мДеревоСтраницОтчета.Строки.Найти(ЭлементДереваНастройкиСтраниц.ИмяСтраницы, "ИмяСтраницы");
		Если НайденныйЭлементДереваСтраниц <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НайденныйЭлементДереваСтраниц, ЭлементДереваНастройкиСтраниц);
		КонецЕсли;
	КонецЦикла;
	
	// Восстанавливаем сохраненные данные многострочных разделов
	// для совместимости форм с незначительными изменениями 
	// восстанавливаются только те разделы, которые присутствуют в исходной структуре
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		Для Каждого ЭлементСохраненнойСтруктуры Из ДанныеМногострочныхРазделов Цикл
			Если мСтруктураМногострочныхРазделов.Свойство(ЭлементСохраненнойСтруктуры.Ключ, ДанныеМногострочногоРаздела) Тогда
				мСтруктураМногострочныхРазделов[ЭлементСохраненнойСтруктуры.Ключ] = ЭлементСохраненнойСтруктуры.Значение.Скопировать();
			КонецЕсли;
		КонецЦикла;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		// Если страница не определена - пропускаем установку показателей этой страницы
		Если ЭлементыФормы.Найти(ИмяТекТабличноеПоле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;
	КонецЦикла;

	СписокСохранения.Свойство("СохранятьРасшифровку", мСохранятьРасшифровку);
	Если мСохранятьРасшифровку = Неопределено Тогда
		мСохранятьРасшифровку = Истина;
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.ПодменюРасшифровка.Кнопки.КнопкаСохранятьРасшифровку.Пометка = мСохранятьРасшифровку;

	// восстанавливаем вид отчетности
	СписокСохранения.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности);
	УстановитьВидСдачиОтчетности(ВидСдачиОтчетности);
	
	// восстанавливаем флажок проверки соотношения показателей при печати и выгрузке
	СписокСохранения.Свойство("мПроверятьСоотношенияПриПечатиИВыгрузки", мПроверятьСоотношенияПриПечатиИВыгрузки);
	Если мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено Тогда
		мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Расшифровка", Расшифровка);
	Если Расшифровка <> Неопределено Тогда
		СпП = Расшифровка;
	КонецЕсли;

	СписокСохранения.Свойство("ГруппаОрганизаций", мГруппаОрганизаций);
	Если мГруппаОрганизаций = Неопределено Тогда
		мГруппаОрганизаций = Новый СписокЗначений;
	КонецЕсли;

	СписокСохранения.Свойство("ТипАдреса", мТипАдреса);
	Если мТипАдреса = Неопределено Тогда
		мТипАдреса = "ПолныйАдрПочт";
	ИначеЕсли Найти(мТипАдреса, "Полный") = 0 Тогда
		мТипАдреса = "Полный" + мТипАдреса;	
	КонецЕсли;
	
	СписокСохранения.Свойство("Адрес9Запятых", мАдресДляВыгрузки);
	Если мАдресДляВыгрузки = Неопределено Тогда
		Если мТипАдреса = "ПолныйАдрЮР" Тогда
			мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "АдрЮР").АдрЮР;
		Иначе
			мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "АдрПочт").АдрПочт;	
		КонецЕсли;
	КонецЕсли;

	Если Месяц(мДатаКонцаПериодаОтчета) % 3 = 0 Тогда
		Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
			мПечатьБезШтрихкодаРазрешена = Ложь;
		КонецЕсли;
	Иначе
		мПечатьБезШтрихкодаРазрешена = Истина;
	КонецЕсли;
	
	// восстанавливаем сведения о настройке состава дополнительных строк
	СписокСохранения.Свойство("СоставДополнительныхСтрок", СоставДополнительныхСтрок);
	Если СоставДополнительныхСтрок = Неопределено Тогда
		СформироватьНастройкиСоставаДополнительныхСтрок(СоставДополнительныхСтрок);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	УстановитьФорматВывода();
	
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	
	ПоказатьСтраницыОтчета(ЭтаФорма);
	
	Расчет();
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
// Параметры
//  ТабличнаяОбласть - ЭлементыФормы ПолеТабличногоДокумента - позволяет ограничить расчет автовычисляемых показателей
// 					   только одним полем табличного документа.
Процедура Расчет(ПолеТабличногоДокумента = Неопределено)
	
	// БАЛАНС
	Если АвторасчетПоказателей("Баланс") И (ПолеТабличногоДокумента = Неопределено ИЛИ ПолеТабличногоДокумента = мБаланс) Тогда
		
		ОкруглятьЗначенияПоказателей = Ложь;
		// Актив
		
		// строка 1100
		УстановитьСуммуПоказателей(мБаланс, "П000100110004", "П000100111004, П000100112004, П000100113004, П000100114004, П000100115004, П000100116004, П000100117004", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100110005", "П000100111005, П000100112005, П000100113005, П000100114005, П000100115005, П000100116005, П000100117005", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100110006", "П000100111006, П000100112006, П000100113006, П000100114006, П000100115006, П000100116006, П000100117006", ОкруглятьЗначенияПоказателей);
		
		// строка 1200
		УстановитьСуммуПоказателей(мБаланс, "П000100120004", "П000100121004, П000100122004, П000100123004, П000100124004, П000100125004, П000100126004", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100120005", "П000100121005, П000100122005, П000100123005, П000100124005, П000100125005, П000100126005", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100120006", "П000100121006, П000100122006, П000100123006, П000100124006, П000100125006, П000100126006", ОкруглятьЗначенияПоказателей);
		

		// строка 1600
		УстановитьСуммуПоказателей(мБаланс, "П000100160004", "П000100110004, П000100120004", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100160005", "П000100110005, П000100120005", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100160006", "П000100110006, П000100120006", ОкруглятьЗначенияПоказателей);

		// Пассив
		
		// строка 1300
		УстановитьСуммуПоказателей(мБаланс, "П000100130004", "П000100131004, П000100132004, П000100134004, П000100135004, П000100136004, П000100137004", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100130005", "П000100131005, П000100132005, П000100134005, П000100135005, П000100136005, П000100137005", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100130006", "П000100131006, П000100132006, П000100134006, П000100135006, П000100136006, П000100137006", ОкруглятьЗначенияПоказателей);

		// строка 1400
		УстановитьСуммуПоказателей(мБаланс, "П000100140004", "П000100141004, П000100142004, П000100143004, П000100145004", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100140005", "П000100141005, П000100142005, П000100143005, П000100145005", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100140006", "П000100141006, П000100142006, П000100143006, П000100145006", ОкруглятьЗначенияПоказателей);

		// строка 1500
		УстановитьСуммуПоказателей(мБаланс, "П000100150004", "П000100151004, П000100152004, П000100153004, П000100154004, П000100155004", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100150005", "П000100151005, П000100152005, П000100153005, П000100154005, П000100155005", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100150006", "П000100151006, П000100152006, П000100153006, П000100154006, П000100155006", ОкруглятьЗначенияПоказателей);
											   
		// строка 1700
		УстановитьСуммуПоказателей(мБаланс, "П000100170004", "П000100130004, П000100140004, П000100150004", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100170005", "П000100130005, П000100140005, П000100150005", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100170006", "П000100130006, П000100140006, П000100150006", ОкруглятьЗначенияПоказателей);
		
	КонецЕсли;

	// ОТЧЕТ О ПРИБЫЛЯХ И УБЫТКАХ
	Если АвторасчетПоказателей("ФормаОтчета")  И (ПолеТабличногоДокумента = Неопределено ИЛИ ПолеТабличногоДокумента = мФормаОтчета) Тогда
		
		ОкруглятьЗначенияПоказателей = Истина;
		
		//Сбор данных
		П000100211004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100211004.Значение);
		П000100212004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100212004.Значение);
		П000100221004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100221004.Значение);
		П000100222004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100222004.Значение);
		
		П000100211005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100211005.Значение);
		П000100212005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100212005.Значение);
		П000100221005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100221005.Значение);
		П000100222005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100222005.Значение);
		
		П000100231004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100231004.Значение);
		П000100232004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100232004.Значение);
		П000100233004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100233004.Значение);
		П000100234004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100234004.Значение);
		П000100235004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100235004.Значение);
		
		П000100231005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100231005.Значение);
		П000100232005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100232005.Значение);
		П000100233005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100233005.Значение);
		П000100234005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100234005.Значение);
		П000100235005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100235005.Значение);

		П000100241004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100241004.Значение);
		П000100243004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100243004.Значение);
		П000100245004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100245004.Значение);
		П000100246004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100246004.Значение);
		
		П000100241005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100241005.Значение);
		П000100243005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100243005.Значение);
		П000100245005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100245005.Значение);
		П000100246005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100246005.Значение);
		
		П000100240004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100240004.Значение);
		П000100251004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100251004.Значение);
		П000100252004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100252004.Значение);
		
		П000100240005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100240005.Значение);
		П000100251005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100251005.Значение);
		П000100252005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100252005.Значение);
		
		//Расчеты
		П000100210004 = П000100211004 + П000100212004;
		П000100210005 = П000100211005 + П000100212005;
		
		П000100220004 = П000100210004 + П000100221004 + П000100222004;
		П000100220005 = П000100210005 + П000100221005 + П000100222005;
		
		П000100230004 = П000100220004 + П000100231004 + П000100232004 + П000100233004 + П000100234004 + П000100235004;
		П000100230005 = П000100220005 + П000100231005 + П000100232005 + П000100233005 + П000100234005 + П000100235005;
		
		П000100240004 = П000100230004 + П000100241004 + П000100243004 + П000100245004 + П000100246004;
		П000100240005 = П000100230005 + П000100241005 + П000100243005 + П000100245005 + П000100246005;
		
		П000100250004 = П000100240004 + П000100251004 + П000100252004;
		П000100250005 = П000100240005 + П000100251005 + П000100252005;
		
		//Запишем, что посчитали
		мФормаОтчета.Области.П000100210004.Значение = П000100210004;
		мФормаОтчета.Области.П000100210005.Значение = П000100210005;
		
		мФормаОтчета.Области.П000100220004.Значение = П000100220004;
		мФормаОтчета.Области.П000100220005.Значение = П000100220005;
		
		мФормаОтчета.Области.П000100230004.Значение = П000100230004;
		мФормаОтчета.Области.П000100230005.Значение = П000100230005;
		
		мФормаОтчета.Области.П000100240004.Значение = П000100240004;
		мФормаОтчета.Области.П000100240005.Значение = П000100240005;
		
		мФормаОтчета.Области.П000100250004.Значение = П000100250004;
		мФормаОтчета.Области.П000100250005.Значение = П000100250005;
		
		Если ПрименениеЕНВД Тогда
			
			ДеревоНастройкиСостава = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета;
			
			// отключаемые автозаполняемые строки расшифровки
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21101") Тогда
				П000102110104 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102110104.Значение);
				П000102110105 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102110105.Значение);
			Иначе
				П000102110104 = 0;
				П000102110105 = 0;
			КонецЕсли;
			
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21102") Тогда
				П000102110204 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102110204.Значение);
				П000102110205 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102110205.Значение);
			Иначе
				П000102110204 = 0;
				П000102110205 = 0;
			КонецЕсли;
			
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21201") Тогда
				П000102120104 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102120104.Значение);
				П000102120105 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102120105.Значение);
			Иначе
				П000102120104 = 0;
				П000102120105 = 0;
			КонецЕсли;
			
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21202") Тогда
				П000102120204 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102120204.Значение);
				П000102120205 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102120205.Значение);
			Иначе
				П000102120204 = 0;
				П000102120205 = 0;
			КонецЕсли;
			
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22101") Тогда
				П000102210104 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102210104.Значение);
				П000102210105 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102210105.Значение);
			Иначе
				П000102210104 = 0;
				П000102210105 = 0;
			КонецЕсли;
			
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22102") Тогда
				П000102210204 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102210204.Значение);
				П000102210205 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102210205.Значение);
			Иначе
				П000102210204 = 0;
				П000102210205 = 0;
			КонецЕсли;
			
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22201") Тогда
				П000102220104 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102220104.Значение);
				П000102220105 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102220105.Значение);
			Иначе
				П000102220104 = 0;
				П000102220105 = 0;
			КонецЕсли;
			
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22202") Тогда
				П000102220204 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102220204.Значение);
				П000102220205 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102220205.Значение);
			Иначе
				П000102220204 = 0;
				П000102220205 = 0;
			КонецЕсли;
			
			// отключаемые расчитываемые строки расшифровки
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21001") Тогда
				П000102100104 = П000102110104 + П000102120104;
				П000102100105 = П000102110105 + П000102120105;
			Иначе
				П000102100104 = 0;
				П000102100105 = 0;
			КонецЕсли;
			мФормаОтчета.Области.П000102100104.Значение = П000102100104;
			мФормаОтчета.Области.П000102100105.Значение = П000102100105;
			
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21002") Тогда
				П000102100204 = П000102110204 + П000102120204;
				П000102100205 = П000102110205 + П000102120205;
			Иначе
				П000102100204 = 0;
				П000102100205 = 0;
			КонецЕсли;
			мФормаОтчета.Области.П000102100204.Значение = П000102100204;
			мФормаОтчета.Области.П000102100205.Значение = П000102100205;
			
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22001") Тогда
				П000102200104 = П000102100104 + П000102210104 + П000102220104;
				П000102200105 = П000102100105 + П000102210105 + П000102220105;
			Иначе
				П000102200104 = 0;
				П000102200105 = 0;
			КонецЕсли;
			мФормаОтчета.Области.П000102200104.Значение = П000102200104;
			мФормаОтчета.Области.П000102200105.Значение = П000102200105;
			
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22002") Тогда
				П000102200204 = П000102100204 + П000102210204 + П000102220204;
				П000102200205 = П000102100205 + П000102210205 + П000102220205;
			Иначе
				П000102200204 = 0;
				П000102200205 = 0;
			КонецЕсли;
			мФормаОтчета.Области.П000102200204.Значение = П000102200204;
			мФормаОтчета.Области.П000102200205.Значение = П000102200205;
			
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23001") Тогда
				П000102300104 = П000102200104 + П000100231004 + П000100232004 + П000100234004 + П000100233004 + П000100235004;
				П000102300105 = П000102200105 + П000100231005 + П000100232005 + П000100234005 + П000100233005 + П000100235005;
			Иначе
				П000102300104 = 0;
				П000102300105 = 0;
			КонецЕсли;
			мФормаОтчета.Области.П000102300104.Значение = П000102300104;
			мФормаОтчета.Области.П000102300105.Значение = П000102300105;
			
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23002") Тогда
				П000102300204 = П000102200204;
				П000102300205 = П000102200205;
			Иначе
				П000102300204 = 0;
				П000102300205 = 0;
			КонецЕсли;
			мФормаОтчета.Области.П000102300204.Значение = П000102300204;
			мФормаОтчета.Области.П000102300205.Значение = П000102300205;
				
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // Расчет()

// ОбработчикИзменения
//
// Параметры
//	ПолеТабличногоДокумента - Элемент формы ПолеТабличногоДокумента - позволяет ограничить область обработки
// 							  одним полем табличного документа
Процедура ОбработчикИзменения(ПолеТабличногоДокумента = Неопределено)

	Расчет(ПолеТабличногоДокумента);
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ОбработчикИзменения

Функция ПолучитьНазванияОрганизацийСтрокой()
	Результат = Организация.Наименование;
	Если мБезКонсолидации Тогда
		Возврат Результат;
	Иначе
		Для каждого Зап Из мГруппаОрганизаций Цикл
			Результат = Результат + "; " + Зап.Значение.Наименование;
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
КонецФункции

// Процедура выполняет заполнение бухгалтерской отчетности автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто(ЗаполняемыйОтчет = "") Экспорт
	
	Перем ТаблДанныхДопСтрокОбщ;

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Удаляем пользовательские строки и очищаем заполненные показатели
	Очистить(ЗаполняемыйОтчет);
	
	ЗаполнятьГодПредыдущий = Истина;
	ЗаполнятьГодПредшествующийПредыдущему  = Истина;
	
	Если ФлажокВнешДанные Тогда
		
		ПериодЗагрузкиДанных = 0;
		ОтчетныйГодЗагрузкиДанных = 0;

		СтруктураДанныхОтчета = ИмпортироватьДанныеОтчета();
		Если СтруктураДанныхОтчета = Неопределено Тогда
			Сообщить("Не удалось загрузить данные.", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ЗагрузитьДанныеВОтчет(СтруктураДанныхОтчета);
		ОпределитьПериодЗагружаемыхДанных();
		
	КонецЕсли;
	
	//////////
	//// *** Здесь необходимо написать алгоритм заполнения отчета.***
	////
	//// Для присвоения показателям отчета вычисленного значения необходимо
	//// использовать процедуру
	////
	////     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).
	////
	//// Для дополнения справки по забалансовым счетам дополнительными строками
	//// следует предварительно заполнить таблицу значений ТаблДанныхДопСтрок,
	//// далее вызвать процедуру АвтозаполнениеДопСтрок(), передав в качестве
	//// параметра таблицу значений ТаблДанныхДопСтрок.
	////
	//////////
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 

	мТаблицаИтоговыхПоказателейПриКонсолидации.Очистить();

	ТаблДанныхДопСтрок = Новый ТаблицаЗначений();
	ТаблДанныхДопСтрок.Колонки.Добавить("Наименование");
	ТаблДанныхДопСтрок.Колонки.Добавить("НачОстаток");
	ТаблДанныхДопСтрок.Колонки.Добавить("КонОстаток");

	//// Предварительно удаляем дополнительные строки многострочных разделов
	//УдалитьДопСтрокиМногострочныхРазделов();

	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	ТаблДанныхДопСтрокОбщ = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(ТаблДанныхДопСтрок);

	Для каждого Орг Из СписокОрганизаций Цикл

		мОргРасшифровка = Орг.Значение;

		// Бухгалтерский итоги по счетам
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();

		// Бухгалтерские итоги по аналитике
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
	
		////////////////////////////////////////////////////////////////////////////////////////////////////
		// ЗАПОЛНЕНИЕ БАЛАНСА
		Если ПустаяСтрока(ЗаполняемыйОтчет) ИЛИ ЗаполняемыйОтчет = "Баланс" Тогда
			ЗаполнитьАвтоБаланс("04", ЗаголовокДатаОтчетная, мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета);
			
			Если ЗаполнятьГодПредыдущий Тогда
				мДатаНачалаПериодаПрошлогоГода = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12);
				мДатаКонцаПериодаПрошлогоГода = КонецГода(мДатаНачалаПериодаПрошлогоГода);
			
				ЗаполнитьАвтоБаланс("05", ЗаголовокДатаКонцаПрошлогоГода, мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);
			КонецЕсли;
			
			Если ЗаполнятьГодПредшествующийПредыдущему Тогда
				мДатаНачалаПериодаГодаПредшествующегоПрошлому = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -24);
				мДатаКонцаПериодаГодаПредшествующегоПрошлому = КонецГода(мДатаНачалаПериодаГодаПредшествующегоПрошлому);

				ЗаполнитьАвтоБаланс("06", ЗаголовокДатаКонцаПозапрошлогоГода, мДатаНачалаПериодаГодаПредшествующегоПрошлому, мДатаКонцаПериодаГодаПредшествующегоПрошлому);
			КонецЕсли;

			//Если ТаблДанныхДопСтрок.Количество() > 0 Тогда
			//	Если мБезКонсолидации Тогда
			//		// Создаем и заполняем дополнительные строки.
			//		АвтозаполнениеДопСтрок(ТаблДанныхДопСтрок, мИдГруппы1);
			//	Иначе
			//		// Сохраним в накопительной таблице
			//		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблДанныхДопСтрок, ТаблДанныхДопСтрокОбщ);
			//		ТаблДанныхДопСтрок.Очистить();
			//	КонецЕсли;
			//КонецЕсли;
		КонецЕсли;	
		
		////////////////////////////////////////////////////////////////////////////////////////////////////
		// ЗАПОЛНЕНИЕ ОТЧЕТА О ПРИБЫЛЯХ И УБЫТКАХ
		Если ПустаяСтрока(ЗаполняемыйОтчет) ИЛИ ЗаполняемыйОтчет = "ФормаОтчета" Тогда
			ЗаполнитьАвтоФормаОтчета();
		КонецЕсли;
		
		Если НЕ мБезКонсолидации Тогда
			// Если обрабатывается последняя организация из списка, тогда, выводим данные на лист, если таблица общая не пустая.
			Если (СписокОрганизаций.Индекс(Орг) + 1 = СписокОрганизаций.Количество()) И (ТаблДанныхДопСтрокОбщ.Количество() > 0) Тогда
				// Создаем и заполняем дополнительные строки.
				// Сгруппируем данные в таблице.
				ТаблДанныхДопСтрокОбщ.Свернуть("Наименование", "НачОстаток, КонОстаток");
				//АвтозаполнениеДопСтрок(ТаблДанныхДопСтрокОбщ, мИдГруппы1);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; // Для каждого Орг Из СписокОрганизаций Цикл

	// В случае, если отчет был консолидирован, то сложим все его показатели в таблице, а затем выведем их на лист.
	Если НЕ мБезКонсолидации Тогда
		мТаблицаИтоговыхПоказателейПриКонсолидации.Свернуть("ИмяПоказателя", "Сумма");
		Для каждого Пок Из мТаблицаИтоговыхПоказателейПриКонсолидации Цикл
			УстановитьЗначениеПоказателя(Пок.ИмяПоказателя, Пок.Сумма, Истина);
		КонецЦикла;
	КонецЕсли;

	Расчет();
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьАвто()

// Процедура выполняет заполнение отдельной графы бухгалтерского баланса по данным ИБ за заданный период
//		
// 		Для работы процедуры необходимы заполненные переменные модуля:
//			мСчет - соответствие номеров счетов и объектов плана счетов бухгалтерского учета
//			мОргРасшифровка - ссылка на Организацию, по которой строится отчет
// 			мБухИтоги, мБухИтогиРС - объекты вида Обработка.БухгалтерскиеИтоги
//
// Параметры
// 
//  Графа - Строка длиной 2 символа, указывает на графу, по которой заполняется показатель
//
//  ЗаголовокГрафы - Строка, задает наименование заполняемой графы в расшифровке показателя
//
//  НачалоПериодаОтчета - Дата, задает начало периода отчета
//
//  КонецПериодаОтчета - Дата, задает конец периода отчета
//
Процедура ЗаполнитьАвтоБаланс(Графа, ЗаголовокГрафы, НачалоПериодаОтчета, КонецПериодаОтчета)

		ДеревоНастроекСтрокРасшифровки = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
	
		Итоги = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
		        |НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
		        |КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
		        |КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт";

		// Счета учета расчетов, на которых допустим учет авансов, - для расчета развернутого сальдо
		СчетаУчетаРасчетов = Новый Массив;
		СчетаУчетаРасчетов.Добавить(мСчет["60.01"]);
		СчетаУчетаРасчетов.Добавить(мСчет["60.21"]);
		СчетаУчетаРасчетов.Добавить(мСчет["60.31"]);
		СчетаУчетаРасчетов.Добавить(мСчет["62.01"]);
		СчетаУчетаРасчетов.Добавить(мСчет["62.21"]);
		СчетаУчетаРасчетов.Добавить(мСчет["62.31"]);

		// Виды субконто для расчета развернутого сальдо по счетам учета расчетов
		ВидыСубконтоДляРасчета = Новый Массив;
		ВидыСубконтоДляРасчета.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		ВидыСубконтоДляРасчета.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);

		// Бухгалтерские итоги по счетам, без аналитики
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет", НачалоПериодаОтчета, КонецПериодаОтчета, , , , , , "Организация", мОргРасшифровка);

		// Вспомогательные обороты между счетами
		ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", НачалоПериодаОтчета, КонецПериодаОтчета, , мСчет["99.02.4"], , , , "Организация", мОргРасшифровка);
		
		ОБ_99_02_4__77 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["77"]);
		ОБ_77__99_02_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["77"]);
		
		ОБ_99_02_4__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["09"]);
		ОБ_09__99_02_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["09"]);
		
		// строка 1110 "Нематериальные активы"
		СКД_04_01 = СКД("04.01");
		СКК_05    = СКК("05");
		СКД_08_05 = СКД("08.05");

		П000100111004 = СКД_04_01 - СКК_05 + СКД_08_05;
		УстановитьЗначениеПоказателя("П0001001110" + Графа, П000100111004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001110" + Графа, "Строка 1110 ""Нематериальные активы"", графа """ + ЗаголовокГрафы + """","+","!СКД", СКД_04_01, мСчет["04.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001110" + Графа, "", "-", "!СКК", -СКК_05  , мСчет["05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001110" + Графа, "", "+", "!СКД", СКД_08_05, мСчет["08.05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// дополнительные строки к строке 1110
		
		// строка 11101 "Нематериальные активы в организации"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11101", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101110104 = СКД_04_01 - СКК_05;
			УстановитьЗначениеПоказателя("П0001011101" + Графа, П000101110104);
			
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011101" + Графа, "Строка 11101 ""Нематериальные активы в организации"", графа """ + ЗаголовокГрафы + """","+","!СКД", СКД_04_01, мСчет["04.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011101" + Графа, "","-","!СКК", -СКК_05, мСчет["05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
		
		// строка 11102 "Приобретение нематериальных активов"
			Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11102", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101110204 = СКД_08_05;
			УстановитьЗначениеПоказателя("П0001011102" + Графа, П000101110204);
			
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011102" + Графа,"Строка 11102 ""Приобретение нематериальных активов"", графа """ + ЗаголовокГрафы + """","+","!СКД", СКД_08_05, мСчет["08.05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
		
		// строка 1120 "Результаты исследований и разработок"
		П000100112004_04_02 = СКД("04.02");
		П000100112004_08_08 = СКД("08.08");
		
		П000100112004 = П000100112004_04_02 + П000100112004_08_08;
		УстановитьЗначениеПоказателя("П0001001120" + Графа, П000100112004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001120" + Графа, "Строка 1120 ""Результаты исследований и разработок"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100112004_04_02, мСчет["04.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001120" + Графа,"","+","!СКД", П000100112004_08_08, мСчет["08.08"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// дополнительные строки к строке 1120
		
		// строка 11201 "Расходы на научно-исследовательские, опытно-констуркторские и технологические работы"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11201", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101120104 = П000100112004_04_02;
			УстановитьЗначениеПоказателя("П0001011201" + Графа, П000101120104);
			
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011201" + Графа,"Строка 11201 ""Расходы на научно-исследовательские, опытно-констуркторские и технологические работы"", графа """ + ЗаголовокГрафы + """","+","!СКД", П000100112004_04_02, мСчет["04.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
		
		// строка 11202 "Выполнение научно-исследовательских, опытно-конструкторских и технологических работ"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11202", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101120204 = П000100112004_08_08;
			УстановитьЗначениеПоказателя("П0001011202" + Графа, П000101120204);
			
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011202" + Графа,"Строка 11202 ""Выполнение научно-исследовательских, опытно-конструкторских и технологических работ"", графа """ + ЗаголовокГрафы + """","+","!СКД", П000100112004_08_08, мСчет["08.08"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
		
		// строка 1130 "Основные средства"
		П000100113004_01_01 = СКД("01.01");
		П000100113004_01_08 = СКД("01.08");
		П000100113004_02_01 = СКК("02.01");
		П000100113004_02_01__01_01 = 0; // Амортизация ОС, учитываемых на счете 01.01
		П000100113004_02_01__01_08 = 0; // Амортизация ОС, учитываемых на счете 01.08
		П000100113004_07 	= СКД("07");
		П000100113004_08_01 = СКД("08.01");
		П000100113004_08_02 = СКД("08.02");
		П000100113004_08_03 = СКД("08.03");
		П000100113004_08_04 = СКД("08.04");
		Если ЭтоБалансДляАУ Тогда
			П000100113004_01_11 = СКД("01.11");
			П000100113004_08_14 = СКД("08.14");
			П000100113004_02_01__01_11 = 0; // Амортизация ОС, учитываемых на счете 01.11
		КонецЕсли;

		// разделим сальдо по счету 02.01 по основным средствам, учитываемым на счетах 01.01 и 01.08
		СчетаОС = "01.01, 01.08, 02.01";
		Если ЭтоБалансДляАУ Тогда
			СчетаОС = "01.01, 01.08, 01.11, 02.01";
		КонецЕсли;
		ИтогиРС = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
		          |НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
		          |КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
		          |КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , СчетаОС, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства, , , "Организация", мОргРасшифровка);
		ОстаткиИОбороты = мБухИтогиРС.ПолучитьОстаткиИОбороты();
		ВыборкаОС = ОстаткиИОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
		Пока ВыборкаОС.Следующий() Цикл
			// пропускаем группы как элемент иерархии результатов запроса
			Если ВыборкаОС.Субконто1.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			ОС__01_01 = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", мСчет["01.01"], ВыборкаОС.Субконто1);
			ОС__01_08 = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", мСчет["01.08"], ВыборкаОС.Субконто1);
			ОС__02_01 = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", мСчет["02.01"], ВыборкаОС.Субконто1);
			Если ЭтоБалансДляАУ Тогда
				ОС__01_11 = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", мСчет["01.11"], ВыборкаОС.Субконто1);
			КонецЕсли;
			
			Если ОС__01_01 <> 0 Тогда
				П000100113004_02_01__01_01 = П000100113004_02_01__01_01 + ОС__02_01;
			ИначеЕсли ОС__01_08 <> 0 Тогда
				П000100113004_02_01__01_08 = П000100113004_02_01__01_08 + ОС__02_01;
			ИначеЕсли ЭтоБалансДляАУ И ОС__01_11 <> 0 Тогда
				П000100113004_02_01__01_11 = П000100113004_02_01__01_11 + ОС__02_01;
			Иначе
				// подразумевается что все амортизируемые ОС учитываются либо на счете 01.01, либо на счете 01.08
			КонецЕсли;
			
		КонецЦикла;
		
		П000100113004 = П000100113004_01_01 - П000100113004_02_01__01_01 + П000100113004_01_08 - П000100113004_02_01__01_08 + П000100113004_07 + П000100113004_08_01 + П000100113004_08_02 + П000100113004_08_03 + П000100113004_08_04;
		Если ЭтоБалансДляАУ Тогда
			П000100113004 = П000100113004 + П000100113004_01_11 - П000100113004_02_01__01_11 + П000100113004_08_14;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П0001001130" + Графа, П000100113004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "Строка 1130 ""Основные средства"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100113004_01_01, мСчет["01.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.01 в части ОС в организации", -П000100113004_02_01__01_01, мСчет["02.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "+", "!СКД", П000100113004_01_08, мСчет["01.08"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.01 в части объектов недвижимости на которые не зарегистрированы права собственности", -П000100113004_02_01__01_08, мСчет["02.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		Если ЭтоБалансДляАУ Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "+", "!СКД", П000100113004_01_11, мСчет["01.11"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.01 в части ОС, полученных или приобретенных в рамках целевого финансирования", -П000100113004_02_01__01_11, мСчет["02.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "+", "!СКД", П000100113004_07, мСчет["07"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "+", "!СКД", П000100113004_08_01, мСчет["08.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "+", "!СКД", П000100113004_08_02, мСчет["08.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "+", "!СКД", П000100113004_08_03, мСчет["08.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "+", "!СКД", П000100113004_08_04, мСчет["08.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		Если ЭтоБалансДляАУ Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "+", "!СКД", П000100113004_08_14, мСчет["08.14"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// дополнительные строки к строке 1130

		// строка 11301 "Основные средства в организации"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11301", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101130104 = П000100113004_01_01 - П000100113004_02_01__01_01;
			Если ЭтоБалансДляАУ Тогда
				П000101130104 = П000101130104 + П000100113004_01_11 - П000100113004_02_01__01_11;
			КонецЕсли;
			УстановитьЗначениеПоказателя("П0001011301" + Графа, П000101130104);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011301" + Графа, "Строка 11301 ""Основные средства в организации"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100113004_01_01, мСчет["01.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011301" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.01 в части ОС в организации", -П000100113004_02_01__01_01, мСчет["02.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			Если ЭтоБалансДляАУ Тогда
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011301" + Графа, "", "+", "!СКД", П000100113004_01_11, мСчет["01.11"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011301" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.01 в части ОС, полученных или приобретенных в рамках целевого финансирования", -П000100113004_02_01__01_11, мСчет["02.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			КонецЕсли;
		КонецЕсли;

		// строка 11302 "Объекты недвижимости, права собственности на которые не зарегистрированы"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11302", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101130204 = П000100113004_01_08 - П000100113004_02_01__01_08;
			УстановитьЗначениеПоказателя("П0001011302" + Графа, П000101130204);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011302" + Графа, "Строка 11302 ""Объекты недвижимости, права собственности на которые не зарегистрированы"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100113004_01_08, мСчет["01.08"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011302" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.01 в части объектов недвижимости на которые не зарегистрированы права собственности", -П000100113004_02_01__01_08, мСчет["02.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 11303 "Оборудование к установке"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11303", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101130304 = П000100113004_07;
			УстановитьЗначениеПоказателя("П0001011303" + Графа, П000101130304);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011303" + Графа, "Строка 11303 ""Оборудование к установке"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100113004_07, мСчет["07"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
 		КонецЕсли;

		// строка 11304 "Приобретение земельных участков"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11304", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101130404 = П000100113004_08_01;
			УстановитьЗначениеПоказателя("П0001011304" + Графа, П000101130404);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011304" + Графа, "Строка 11304 ""Приобретение земельных участков"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100113004_08_01, мСчет["08.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
 		КонецЕсли;

		// строка 11305 "Приобретение объектов природопользования"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11305", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101130504 = П000100113004_08_02;
			УстановитьЗначениеПоказателя("П0001011305" + Графа, П000101130504);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011305" + Графа, "Строка 11305 ""Приобретение объектов природопользования"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100113004_08_02, мСчет["08.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
  		КонецЕсли;

		// строка 11306 "Строительство объектов основных средств"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11306", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101130604 = П000100113004_08_03;
			УстановитьЗначениеПоказателя("П0001011306" + Графа, П000101130604);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011306" + Графа, "Строка 11306 ""Строительство объектов основных средств"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100113004_08_03, мСчет["08.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
  		КонецЕсли;

		// строка 11307 "Приобретение объектов основных средств"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11307", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101130704 = П000100113004_08_04;
			Если ЭтоБалансДляАУ Тогда
				П000101130704 = П000101130704 + П000100113004_08_14;
			КонецЕсли;
			УстановитьЗначениеПоказателя("П0001011307" + Графа, П000101130704);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011307" + Графа, "Строка 11307 ""Приобретение объектов основных средств"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100113004_08_04, мСчет["08.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			Если ЭтоБалансДляАУ Тогда
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011307" + Графа, "", "+", "!СКД", П000100113004_08_14, мСчет["08.14"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			КонецЕсли;
  		КонецЕсли;

		// строка 1140 "Доходные вложения в материальные ценности"
		П000100114004_02_02 = СКК("02.02");
		П000100114004_02_02__03_01 = 0; // Амортизация ОС, учитываемых на счете 03.01
		П000100114004_02_02__03_02 = 0; // Амортизация ОС, учитываемых на счете 03.02
		П000100114004_02_02__03_03 = 0; // Амортизация ОС, учитываемых на счете 03.03
		П000100114004_02_02__03_04 = 0; // Амортизация ОС, учитываемых на счете 03.04
		П000100114004_03 	= СКД("03");
		П000100114004_03_01 = СКД("03.01");
		П000100114004_03_02 = СКД("03.02");
		П000100114004_03_03 = СКД("03.03");
		П000100114004_03_04 = СКД("03.04");

		// разделим сальдо по счету 02.02 по основным средствам, учитываемым на счетах 03.01, 03.02, 03.03 и 03.04
		ИтогиРС = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
		          |НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
		          |КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
		          |КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт";

		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , "02.02, 03.01, 03.02, 03.03, 03.04", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства, , , "Организация", мОргРасшифровка);
		ОстаткиИОбороты = мБухИтогиРС.ПолучитьОстаткиИОбороты();
		ВыборкаОС = ОстаткиИОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
		Пока ВыборкаОС.Следующий() Цикл
			// пропускаем группы как элемент иерархии результатов запроса
			Если ВыборкаОС.Субконто1.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			ОС__02_02 = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", мСчет["02.02"], ВыборкаОС.Субконто1);
			ОС__03_01 = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", мСчет["03.01"], ВыборкаОС.Субконто1);
			ОС__03_02 = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", мСчет["03.02"], ВыборкаОС.Субконто1);
			ОС__03_03 = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", мСчет["03.03"], ВыборкаОС.Субконто1);
			ОС__03_04 = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", мСчет["03.04"], ВыборкаОС.Субконто1);
			
			Если ОС__03_01 <> 0 Тогда
				П000100114004_02_02__03_01 = П000100114004_02_02__03_01 + ОС__02_02;
			ИначеЕсли ОС__03_02 <> 0 Тогда
				П000100114004_02_02__03_02 = П000100114004_02_02__03_02 + ОС__02_02;
			ИначеЕсли ОС__03_02 <> 0 Тогда
				П000100114004_02_02__03_03 = П000100114004_02_02__03_03 + ОС__02_02;
			ИначеЕсли ОС__03_02 <> 0 Тогда
				П000100114004_02_02__03_04 = П000100114004_02_02__03_04 + ОС__02_02;
			КонецЕсли;
			
		КонецЦикла;
		
		П000100114004 = П000100114004_03 - П000100114004_02_02;
		УстановитьЗначениеПоказателя("П0001001140" + Графа, П000100114004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001140" + Графа, "Строка 1140 ""Доходные вложения в материальные ценности"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100114004_03, мСчет["03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001140" + Графа, "", "-", "!СКК", -П000100114004_02_02, мСчет["02.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// дополнительные строки к строке 1140

		// строка 11401 "Материальные ценности в организации"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11401", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101140104 = П000100114004_03_01 - П000100114004_02_02__03_01;
			УстановитьЗначениеПоказателя("П0001011401" + Графа, П000101140104);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011401" + Графа, "Строка 11401 ""Материальные ценности в организации"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100114004_03_01, мСчет["03.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011401" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.02 в части объектов по счету 03.01", -П000100114004_02_02__03_01, мСчет["02.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 11402 "Материальные ценности предоставленные во временное владение и пользование"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11402", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101140204 = П000100114004_03_02 - П000100114004_02_02__03_02;
			УстановитьЗначениеПоказателя("П0001011402" + Графа, П000101140204);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011402" + Графа, "Строка 11402 ""Материальные ценности предоставленные во временное владение и пользование"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100114004_03_02, мСчет["03.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011402" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.02 в части объектов по счету 03.02", -П000100114004_02_02__03_02, мСчет["02.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 11403 "Материальные ценности предоставленные во временное пользование"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11403", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101140304 = П000100114004_03_03 - П000100114004_02_02__03_03;
			УстановитьЗначениеПоказателя("П0001011403" + Графа, П000101140304);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011403" + Графа, "Строка 11403 ""Материальные ценности предоставленные во временное пользование"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100114004_03_03, мСчет["03.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011403" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.02 в части объектов по счету 03.03", -П000100114004_02_02__03_03, мСчет["02.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
 		КонецЕсли;

		// строка 11404 "Прочие доходные вложения"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11404", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101140404 = П000100114004_03_04 - П000100114004_02_02__03_04;
			УстановитьЗначениеПоказателя("П0001011404" + Графа, П000101140404);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011404" + Графа, "Строка 11404 ""Прочие доходные вложения"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100114004_03_04, мСчет["03.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011404" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.02 в части объектов по счету 03.04", -П000100114004_02_02__03_04, мСчет["02.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
 		КонецЕсли;

		// строка 1150 "Финансовые вложения"
		П000100115004_58_01_1 = СКД("58.01.1");

		П000100115004 = П000100115004_58_01_1;
		УстановитьЗначениеПоказателя("П0001001150" + Графа, П000100115004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001150" + Графа, "Строка 1150 ""Финансовые вложения"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100115004_58_01_1, мСчет["58.01.1"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// дополнительные строки к строке 1150

		// строка 11501 "Паи"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11501", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101150104 = П000100115004_58_01_1;
			УстановитьЗначениеПоказателя("П0001011501" + Графа, П000101150104);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011501" + Графа, "Строка 11501 ""Паи"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100115004_58_01_1, мСчет["58.01.1"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 1160 "Отложенные налоговые активы"
		СКД_09 = СКД("09");

		П000100116004 = СКД_09 - ОБ_09__99_02_4 + ОБ_99_02_4__09;
		УстановитьЗначениеПоказателя("П0001001160" + Графа, П000100116004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001160" + Графа, "Строка 1160 ""Отложенные налоговые активы"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_09, мСчет["09"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001160" + Графа, "", "-", "!ОБ", -ОБ_09__99_02_4, мСчет["09"], мСчет["99.02.4"], НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001160" + Графа, "", "+", "!ОБ",  ОБ_99_02_4__09, мСчет["99.02.4"], мСчет["09"], НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 1170 "Прочие внеоборотные активы"
		П000100117004_08_06 = СКД("08.06");
		П000100117004_08_07 = СКД("08.07");

		П000100117004 = П000100117004_08_06 + П000100117004_08_07;
		УстановитьЗначениеПоказателя("П0001001170" + Графа, П000100117004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001170" + Графа, "Строка 1170 ""Прочие внеоборотные активы"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100117004_08_06, мСчет["08.06"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001170" + Графа, "", "+", "!СКД", П000100117004_08_07, мСчет["08.07"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// дополнительные строки к строке 1170

		// строка 11701 "Перевод молодняка животных в основное стадо"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11701", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101170104 = П000100117004_08_06;
			УстановитьЗначениеПоказателя("П0001011701" + Графа, П000101170104);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011701" + Графа, "Строка 11701 ""Перевод молодняка животных в основное стадо"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100117004_08_06, мСчет["08.06"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 11702 "Приобретение взрослых животных"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11702", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101170204 = П000100117004_08_07;
			УстановитьЗначениеПоказателя("П0001011702" + Графа, П000101170204);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011702" + Графа, "Строка 11702 ""Приобретение взрослых животных"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100117004_08_07, мСчет["08.07"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 1210 "Запасы"
		СКД_10 	  = СКД("10");
		СКД_11 	  = СКД("11");
		СКК_14_01 = СКК("14.01");
		СКК_14_02 = СКК("14.02");
		СКК_14_03 = СКК("14.03");
		СКК_14_04 = СКК("14.04");
		СКД_15_01 = СКД("15.01");
		СКД_15_02 = СКД("15.02");
		СКК_16_01 = СКК("16.01");
		СКД_16_01 = СКД("16.01");
		СКК_16_02 = СКК("16.02");
		СКД_16_02 = СКД("16.02");
		СКД_20 	  = СКД("20");
		СКД_21 	  = СКД("21");
		СКД_23 	  = СКД("23");
		СКД_28 	  = СКД("28");
		СКД_29 	  = СКД("29");
		СКД_41 	  = СКД("41");
		СКК_42 	  = СКК("42");
		СКД_43 	  = СКД("43");
		СКД_44 	  = СКД("44");
		СКД_45 	  = СКД("45");
		СКД_46 	  = СКД("46");

		П000100121004 = СКД_10 - СКК_14_01 + СКД_15_01 + СКД_16_01 - СКК_16_01 + СКД_11 + СКД_20 + СКД_21 + СКД_23 + СКД_29 + СКД_44 + СКД_46 - СКК_14_04 + СКД_43 - СКК_14_03 + СКД_41 - СКК_14_02 + СКД_15_02 + СКД_16_02 - СКК_16_02 - СКК_42 + СКД_45 + СКД_28;
		УстановитьЗначениеПоказателя("П0001001210" + Графа, П000100121004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "Строка 1210 ""Запасы"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_10, мСчет["10"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "-", "!СКК", -СКК_14_01, мСчет["14.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "+", "!СКД", СКД_15_01, мСчет["15.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "+", "!СКД", СКД_16_01, мСчет["16.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "-", "!СКК", -СКК_16_01, мСчет["16.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "+", "!СКД", СКД_11, мСчет["11"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "+", "!СКД", СКД_20, мСчет["20"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "+", "!СКД", СКД_21, мСчет["21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "+", "!СКД", СКД_23, мСчет["23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "+", "!СКД", СКД_29, мСчет["29"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "+", "!СКД", СКД_44, мСчет["44"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "+", "!СКД", СКД_46, мСчет["46"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "-", "!СКК", -СКК_14_04, мСчет["14.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "+", "!СКД", СКД_43, мСчет["43"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "-", "!СКК", -СКК_14_03, мСчет["14.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "+", "!СКД", СКД_41, мСчет["41"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "-", "!СКК", -СКК_14_02, мСчет["14.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "+", "!СКД", СКД_15_02, мСчет["15.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "+", "!СКД", СКД_16_02, мСчет["16.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "-", "!СКК", -СКК_16_02, мСчет["16.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "-", "!СКК", -СКК_42, мСчет["42"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "+", "!СКД", СКД_45, мСчет["45"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001210" + Графа, "", "+", "!СКД", СКД_28, мСчет["28"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// дополнительные строки к строке 1210

		// строка 12101 "Материалы"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12101", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101210104 = СКД_10 - СКК_14_01 + СКД_15_01 + СКД_16_01 - СКК_16_01;
			УстановитьЗначениеПоказателя("П0001012101" + Графа, П000101210104);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012101" + Графа, "Строка 12101 ""Материалы"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_10, мСчет["10"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012101" + Графа, "", "-", "!СКК", -СКК_14_01, мСчет["14.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012101" + Графа, "", "+", "!СКД", СКД_15_01, мСчет["15.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012101" + Графа, "", "+", "!СКД", СКД_16_01, мСчет["16.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012101" + Графа, "", "-", "!СКК", -СКК_16_01, мСчет["16.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12102 "Брак в производстве"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12102", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101210204 = СКД_28;
			УстановитьЗначениеПоказателя("П0001012102" + Графа, П000101210204);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012102" + Графа, "Строка 12102 ""Брак в производстве"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_28, мСчет["28"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12103 "Товары отгруженные"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12103", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101210304 = СКД_45;
			УстановитьЗначениеПоказателя("П0001012103" + Графа, П000101210304);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012103" + Графа, "Строка 12103 ""Товары отгруженные"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_45, мСчет["45"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12104 "Товары"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12104", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101210404 = СКД_41 - СКК_14_02 + СКД_15_02 + СКД_16_02 - СКК_16_02 - СКК_42;
			УстановитьЗначениеПоказателя("П0001012104" + Графа, П000101210404);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012104" + Графа, "Строка 12104 ""Товары"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_41, мСчет["41"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012104" + Графа, "", "-", "!СКК", -СКК_14_02, мСчет["14.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012104" + Графа, "", "+", "!СКД", СКД_15_02, мСчет["15.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012104" + Графа, "", "+", "!СКД", СКД_16_02, мСчет["16.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012104" + Графа, "", "-", "!СКК", -СКК_16_02, мСчет["16.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012104" + Графа, "", "-", "!СКК", -СКК_42, 	мСчет["42"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12105 "Готовая продукция"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12105", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101210504 = СКД_43 - СКК_14_03;
			УстановитьЗначениеПоказателя("П0001012105" + Графа, П000101210504);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012105" + Графа, "Строка 12105 ""Готовая продукция"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_43, мСчет["43"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012105" + Графа, "", "-", "!СКК", -СКК_14_03, мСчет["14.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12106 "Расходы на продажу"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12106", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101210604 = СКД_44;
			УстановитьЗначениеПоказателя("П0001012106" + Графа, П000101210604);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012106" + Графа, "Строка 12106 ""Расходы на продажу"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_44, мСчет["44"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12107 "Выполненные этапы по незавершенным работам"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12107", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101210704 = СКД_46;
			УстановитьЗначениеПоказателя("П0001012107" + Графа, П000101210704);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012107" + Графа, "Строка 12107 ""Выполненные этапы по незавершенным работам"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_46, мСчет["46"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12108 "Основное производство"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12108", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101210804 = СКД_20 - СКК_14_04;
			УстановитьЗначениеПоказателя("П0001012108" + Графа, П000101210804);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012108" + Графа, "Строка 12108 ""Основное производство"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_20, мСчет["20"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012108" + Графа, "", "-", "!СКК", -СКК_14_04, мСчет["14.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12109 "Полуфабрикаты собственного производства"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12109", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101210904 = СКД_21;
			УстановитьЗначениеПоказателя("П0001012109" + Графа, П000101210904);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012109" + Графа, "Строка 12109 ""Полуфабрикаты собственного производства"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_21, мСчет["21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12110 "Вспомогательные производства"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12110", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101211004 = СКД_23;
			УстановитьЗначениеПоказателя("П0001012110" + Графа, П000101211004);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012110" + Графа, "Строка 12110 ""Вспомогательные производства"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_23, мСчет["23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12111 "Обслуживающие производства и хозяйства"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12111", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101211104 = СКД_29;
			УстановитьЗначениеПоказателя("П0001012111" + Графа, П000101211104);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012111" + Графа, "Строка 12111 ""Обслуживающие производства и хозяйства"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_29, мСчет["29"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
			
		// строка 1220 "Налог на добавленную стоимость по приобретенным ценностям"
		СКД_19 = СКД("19");
		СКД_19_01 = СКД("19.01");
		СКД_19_02 = СКД("19.02");
		СКД_19_03 = СКД("19.03");
		СКД_19_04 = СКД("19.04");
		СКД_19_05 = СКД("19.05");
		СКД_19_06 = СКД("19.06");
		СКД_19_07 = СКД("19.07");
		СКД_19_08 = СКД("19.08");

		П000100122004 = СКД_19 - СКД_19_06;
		УстановитьЗначениеПоказателя("П0001001220" + Графа, П000100122004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001220" + Графа, "Строка 1220 ""Налог на добавленную стоимость по приобретенным ценностям"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_19, мСчет["19"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001220" + Графа, "", "-", "!СКД", -СКД_19_06, мСчет["19.06"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// дополнительные строки к строке 1220

		// строка 12201 "НДС по приобретенным ОС"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12201", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101220104 = СКД_19_01;
			УстановитьЗначениеПоказателя("П0001012201" + Графа, П000101220104);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012201" + Графа, "Строка 12201 ""НДС по приобретенным ОС"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_19_01, мСчет["19.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12202 "НДС по приобретенным НМА"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12202", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101220204 = СКД_19_02;
			УстановитьЗначениеПоказателя("П0001012202" + Графа, П000101220204);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012202" + Графа, "Строка 12202 ""НДС по приобретенным НМА"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_19_02, мСчет["19.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12203 "НДС по приобретенным материально-производственным запасам"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12203", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101220304 = СКД_19_03;
			УстановитьЗначениеПоказателя("П0001012203" + Графа, П000101220304);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012203" + Графа, "Строка 12203 ""НДС по приобретенным материально-производственным запасам"", графа """ + ЗаголовокДатаОтчетная + """", "+", "!СКД", СКД_19_03, мСчет["19.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12204 "НДС по приобретенным услугам"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12204", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101220404 = СКД_19_04;
			УстановитьЗначениеПоказателя("П0001012204" + Графа, П000101220404);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012204" + Графа, "Строка 12204 ""НДС по приобретенным услугам"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_19_04, мСчет["19.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12205 "НДС, уплаченный при ввозе товаров на территорию РФ"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12205", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101220504 = СКД_19_05;
			УстановитьЗначениеПоказателя("П0001012205" + Графа, П000101220504);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012205" + Графа, "Строка 12205 ""НДС, уплаченный при ввозе товаров на территорию РФ"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_19_05, мСчет["19.05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12206 "НДС по товарам, реализованным по ставке 0% (экспорт)"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12206", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101220604 = СКД_19_07;
			УстановитьЗначениеПоказателя("П0001012206" + Графа, П000101220604);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012206" + Графа, "Строка 12206 ""НДС по товарам, реализованным по ставке 0% (экспорт)"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_19_07, мСчет["19.07"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12207 "НДС при строительстве ОС"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12207", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101220704 = СКД_19_08;
			УстановитьЗначениеПоказателя("П0001012207" + Графа, П000101220704);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012207" + Графа, "Строка 12207 ""НДС при строительстве ОС"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_19_08, мСчет["19.08"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
		
		// строка 1230 "Дебиторская задолженность"
		
		СКД_60_02 	= СКД("60.02");
		СКД_60_22 	= СКД("60.22");
		СКД_60_32 	= СКД("60.32");
		СКК_63 		= СКК("63");
		СКД_68_01 	= СКД("68.01");
		СКД_68_02 	= СКД("68.02");
		СКД_68_03 	= СКД("68.03");
		СКД_68_04_2 = СКД("68.04.2");
		СКД_68_07 	= СКД("68.07");
		СКД_68_08 	= СКД("68.08");
		СКД_68_09 	= СКД("68.09");
		СКД_68_11 	= СКД("68.11");
		СКД_68_12 	= СКД("68.12");
		СКД_68_22 	= СКД("68.22");
		СКД_68_32 	= СКД("68.32");
		СКДР_69 	= СКДР("69");
		СКД_73 		= СКД("73");
		СКД_75_01 	= СКД("75.01");
		СКД_76_02 	= СКД("76.02");
		СКД_76_03 	= СКД("76.03");
		СКД_76_22 	= СКД("76.22");
		СКД_76_32 	= СКД("76.32");
		СКД_76_41 	= СКД("76.41");
		СКД_79 		= СКД("79");

		ИтогиРС = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
		          |НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
		          |КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
		          |КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт";

		// На активных счетах учета расчетов с покупателями и заказчиками, на которых
		// допускается учет авансов, может возникать ситуация, когда полученный аванс
		// "уводит" остаток в минус, то есть в кредит. В этом случае этот отрицательый
		// остаток надо извлечь и затем прибавить к кредиторской  задолженности, которая
		// образовалась на счетах учета полученных авансов.
		
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, Субконто2", НачалоПериодаОтчета, КонецПериодаОтчета, , СчетаУчетаРасчетов, ВидыСубконтоДляРасчета, , , "Организация", мОргРасшифровка);

		// Положительное сальдо счета 62, учитывается в дебиторской задолженности (1230)
		СКДР_62_01_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["62.01"]);
		СКДР_62_21_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["62.21"]);
		СКДР_62_31_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["62.31"]);

		// Отрицательное сальдо счета 62, учитывается в кредиторской задолженности (1520)
		СККР_62_01_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["62.01"]);
		СККР_62_21_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["62.21"]);
		СККР_62_31_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["62.31"]);

		// На пассивных счетах учета расчетов с поставщиками и подрядчиками, на которых допускается 
		// учет авансов, может возникать ситуация, когда выплаченный аванс "уводит" 
		// остаток в минус, то есть в дебет. В этом случае этот отрицательый кредитовый остаток 
		// надо извлечь и затем прибавить к дебиторской задолженности, которая 
		// образовалась на счетах учета выплаченных авансов.
		
		// Положительное сальдо на счете 60, учитывается в кредиторской задолженности (1520)
		СККР_60_01_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["60.01"]);
		СККР_60_21_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["60.21"]);
		СККР_60_31_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["60.31"]);

		// Отрицательное сальдо счета 60, учитывается в дебиторской задолженности (1230)
		СКДР_60_01_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["60.01"]);
		СКДР_60_21_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["60.21"]);
		СКДР_60_31_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["60.31"]);
		
		Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
			Субконто_РаботникиОрганизаций = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации;
		Иначе
			Субконто_РаботникиОрганизаций = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
		КонецЕсли;
		// Развернем итоги по субсчетам счета 71 по работникам организации
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , Счет("71"), Субконто_РаботникиОрганизаций, , , "Организация", мОргРасшифровка);
		// дебетовое сальдо учтем в дебиторской задолженности (1230)
		СКДР_71_Работники = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["71"]);
		// кредитовое сальдо учтем в кредиторской задолженности (1520)
		СККР_71_Работники = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["71"]);
		
		// Развернем итоги по субсчету 68.04.1 по уровням бюджетов
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , мСчет["68.04.1"], ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов, , , "Организация", мОргРасшифровка);
		// дебетовое сальдо учтем в дебиторской задолженности (1230)
		СКДР_68_04_1_Уровни = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["68.04.1"]);
		// кредитовое сальдо учтем в кредиторской задолженности (1520)
		СККР_68_04_1_Уровни = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["68.04.1"]);

		// Развернем итоги по субсчету 68.10 по уровням бюджетов
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , мСчет["68.10"], ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов, , , "Организация", мОргРасшифровка);
		// дебетовое сальдо учтем в дебиторской задолженности (1230)
		СКДР_68_10_Уровни = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["68.10"]);
		// кредитовое сальдо учтем в кредиторской задолженности (1520)
		СККР_68_10_Уровни = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["68.10"]);

		// Развернем итоги по субсчетам счета 76 по контрагентам
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , мСчет["76"], ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, , , "Организация", мОргРасшифровка);
		//// дебетовое сальдо учтем в дебиторской задолженности (1230)
		СКДР_76_01_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["76.01"]);
		СКДР_76_05_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["76.05"]);
		СКДР_76_06_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["76.06"]);
		СКДР_76_09_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["76.09"]);
		СКДР_76_21_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["76.21"]);
		СКДР_76_25_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["76.25"]);
		СКДР_76_26_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["76.26"]);
		СКДР_76_29_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["76.29"]);
		СКДР_76_35_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["76.35"]);
		СКДР_76_36_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["76.36"]);
		СКДР_76_39_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["76.39"]);
		//// кредитовое сальдо учтем в кредиторской задолженности (1520)
		СККР_76_01_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["76.01"]);
		СККР_76_05_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["76.05"]);
		СККР_76_06_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["76.06"]);
		СККР_76_09_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["76.09"]);
		СККР_76_21_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["76.21"]);
		СККР_76_25_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["76.25"]);
		СККР_76_26_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["76.26"]);
		СККР_76_29_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["76.29"]);
		СККР_76_35_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["76.35"]);
		СККР_76_36_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["76.36"]);
		СККР_76_39_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["76.39"]);
		Если ЭтоБалансДляАУ Тогда
			СКДР_76_51_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["76.51"]);
			СКДР_76_52_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["76.52"]);
			СККР_76_51_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["76.51"]);
			СККР_76_52_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["76.52"]);
		КонецЕсли;
		
		П000100123004 = СКД_60_02 + СКДР_60_01_КонтрагентыДоговоры
					  + СКД_60_22 + СКДР_60_21_КонтрагентыДоговоры
					  + СКД_60_32 + СКДР_60_31_КонтрагентыДоговоры
					  + СКДР_62_01_КонтрагентыДоговоры + СКДР_62_21_КонтрагентыДоговоры + СКДР_62_31_КонтрагентыДоговоры - СКК_63 
					  + СКД_79 
					  + СКД_68_01 + СКД_68_02 + СКД_68_03 + СКДР_68_04_1_Уровни + СКД_68_04_2 + СКД_68_07 + СКД_68_08 + СКД_68_09 + СКДР_68_10_Уровни + СКД_68_11 + СКД_68_12 + СКД_68_22 + СКД_68_32 
					  + СКДР_69
					  + СКДР_71_Работники
					  + СКД_73
					  + СКД_75_01
					  + СКДР_76_01_Контрагенты + СКДР_76_21_Контрагенты + СКД_76_02 + СКД_76_22 + СКД_76_03 + СКД_76_32 + СКДР_76_05_Контрагенты 
					  + СКДР_76_25_Контрагенты + СКДР_76_35_Контрагенты + СКДР_76_09_Контрагенты + СКДР_76_29_Контрагенты + СКДР_76_39_Контрагенты 
					  + СКД_76_41 + СКДР_76_06_Контрагенты + СКДР_76_26_Контрагенты + СКДР_76_36_Контрагенты;
					  
		Если ЭтоБалансДляАУ Тогда
			П000100123004 = П000100123004 + СКДР_76_51_Контрагенты + СКДР_76_52_Контрагенты;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П0001001230" + Графа, П000100123004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "Строка 1230 ""Дебиторская задолженность"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_60_02, мСчет["60.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_60_01_КонтрагентыДоговоры, мСчет["60.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_60_22, мСчет["60.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_60_21_КонтрагентыДоговоры, мСчет["60.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_60_32, мСчет["60.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_60_31_КонтрагентыДоговоры, мСчет["60.31"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_62_01_КонтрагентыДоговоры, мСчет["62.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_62_21_КонтрагентыДоговоры, мСчет["62.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_62_31_КонтрагентыДоговоры, мСчет["62.31"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "-", "!СКК", -СКК_63, мСчет["63"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_79, мСчет["79"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_68_01, мСчет["68.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_68_02, мСчет["68.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_68_03, мСчет["68.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 68.04.1, развернутое по субконто ""Уровни бюджетов""", СКДР_68_04_1_Уровни, мСчет["68.04.1"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_68_04_2, мСчет["68.04.2"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_68_07, мСчет["68.07"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_68_08, мСчет["68.08"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_68_09, мСчет["68.09"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 68.10, развернутое по субконто ""Уровни бюджетов""", СКДР_68_10_Уровни, мСчет["68.10"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_68_11, мСчет["68.11"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_68_12, мСчет["68.12"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_68_22, мСчет["68.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_68_32, мСчет["68.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКДР", СКДР_69, мСчет["69"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 71, развернутое по субконто ""Работники организации""", СКДР_71_Работники, мСчет["71"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_73, мСчет["73"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_75_01, мСчет["75.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.01, развернутое по субконто ""Контрагенты""", СКДР_76_01_Контрагенты, мСчет["76.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.21, развернутое по субконто ""Контрагенты""", СКДР_76_21_Контрагенты, мСчет["76.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_76_02, мСчет["76.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_76_22, мСчет["76.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_76_03, мСчет["76.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_76_32, мСчет["76.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.05, развернутое по субконто ""Контрагенты""", СКДР_76_05_Контрагенты, мСчет["76.05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.25, развернутое по субконто ""Контрагенты""", СКДР_76_25_Контрагенты, мСчет["76.25"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.35, развернутое по субконто ""Контрагенты""", СКДР_76_35_Контрагенты, мСчет["76.35"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.09, развернутое по субконто ""Контрагенты""", СКДР_76_09_Контрагенты, мСчет["76.09"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.29, развернутое по субконто ""Контрагенты""", СКДР_76_29_Контрагенты, мСчет["76.29"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.39, развернутое по субконто ""Контрагенты""", СКДР_76_39_Контрагенты, мСчет["76.39"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "!СКД", СКД_76_41, мСчет["76.41"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.06, развернутое по субконто ""Контрагенты""", СКДР_76_06_Контрагенты, мСчет["76.06"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.26, развернутое по субконто ""Контрагенты""", СКДР_76_26_Контрагенты, мСчет["76.26"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.36, развернутое по субконто ""Контрагенты""", СКДР_76_36_Контрагенты, мСчет["76.36"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		Если ЭтоБалансДляАУ Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.51, развернутое по субконто ""Контрагенты""", СКДР_76_51_Контрагенты, мСчет["76.51"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001230" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.52, развернутое по субконто ""Контрагенты""", СКДР_76_52_Контрагенты, мСчет["76.52"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// дополнительные строки к строке 1230

		// строка 12301 "Расчеты с поставщиками и подрядчиками"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12301", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101230104 = СКД_60_02 + СКДР_60_01_КонтрагентыДоговоры + СКД_60_22 + СКДР_60_21_КонтрагентыДоговоры + СКД_60_32 + СКДР_60_31_КонтрагентыДоговоры;
			УстановитьЗначениеПоказателя("П0001012301" + Графа, П000101230104);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012301" + Графа, "Строка 12301 ""Расчеты с поставщиками и подрядчиками"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_60_02, мСчет["60.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012301" + Графа, "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_60_01_КонтрагентыДоговоры, мСчет["60.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012301" + Графа, "", "+", "!СКД", СКД_60_22, мСчет["60.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012301" + Графа, "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_60_21_КонтрагентыДоговоры, мСчет["60.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012301" + Графа, "", "+", "!СКД", СКД_60_32, мСчет["60.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012301" + Графа, "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_60_31_КонтрагентыДоговоры, мСчет["60.31"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
		
		// строка 12302 "Расчеты с покупателями и заказчиками"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12302", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101230204 = СКДР_62_01_КонтрагентыДоговоры + СКДР_62_21_КонтрагентыДоговоры + СКДР_62_31_КонтрагентыДоговоры - СКК_63;
			УстановитьЗначениеПоказателя("П0001012302" + Графа, П000101230204);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012302" + Графа, "Строка 12302 ""Расчеты с покупателями и заказчиками"", графа """ + ЗаголовокГрафы + """", "+", "Сальдо на конец периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_62_01_КонтрагентыДоговоры, мСчет["62.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012302" + Графа, "", "+", "Сальдо на конец периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_62_21_КонтрагентыДоговоры, мСчет["62.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012302" + Графа, "", "+", "Сальдо на конец периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_62_31_КонтрагентыДоговоры, мСчет["62.31"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012302" + Графа, "", "-", "!СКК", -СКК_63, мСчет["63"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12303 "Расчеты по налогам и сборам"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12303", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101230304 = СКД_68_01 + СКД_68_02 + СКД_68_03 + СКДР_68_04_1_Уровни + СКД_68_04_2 + СКД_68_07 + СКД_68_08 + СКД_68_09 + СКДР_68_10_Уровни + СКД_68_11 + СКД_68_12 + СКД_68_22 + СКД_68_32;
			УстановитьЗначениеПоказателя("П0001012303" + Графа, П000101230304);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012303" + Графа, "Строка 12303 ""Расчеты по налогам и сборам"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_68_01, мСчет["68.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012303" + Графа, "", "+", "!СКД", СКД_68_02, мСчет["68.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012303" + Графа, "", "+", "!СКД", СКД_68_03, мСчет["68.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012303" + Графа, "", "+", "Сальдо на конец периода по дебету счета 68.04.1, развернутое по субконто ""Уровни бюджетов""", СКДР_68_04_1_Уровни, мСчет["68.04.1"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012303" + Графа, "", "+", "!СКД", СКД_68_04_2, мСчет["68.04.2"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012303" + Графа, "", "+", "!СКД", СКД_68_07, мСчет["68.07"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012303" + Графа, "", "+", "!СКД", СКД_68_08, мСчет["68.08"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012303" + Графа, "", "+", "!СКД", СКД_68_09, мСчет["68.09"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012303" + Графа, "", "+", "Сальдо на конец периода по дебету счета 68.10, развернутое по субконто ""Уровни бюджетов""", СКДР_68_10_Уровни, мСчет["68.10"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012303" + Графа, "", "+", "!СКД", СКД_68_11, мСчет["68.11"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012303" + Графа, "", "+", "!СКД", СКД_68_12, мСчет["68.12"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012303" + Графа, "", "+", "!СКД", СКД_68_22, мСчет["68.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012303" + Графа, "", "+", "!СКД", СКД_68_32, мСчет["68.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12304 "Расчеты по социальному страхованию и обеспечению"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12304", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101230404 = СКДР_69;
			УстановитьЗначениеПоказателя("П0001012304" + Графа, П000101230404);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012304" + Графа, "Строка 12304 ""Расчеты по социальному страхованию и обеспечению"", графа """ + ЗаголовокГрафы + """", "+", "!СКДР", СКДР_69, мСчет["69"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12305 "Расчеты с подотчетными лицами"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12305", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101230504 = СКДР_71_Работники;
			УстановитьЗначениеПоказателя("П0001012305" + Графа, П000101230504);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012305" + Графа, "Строка 12305 ""Расчеты с подотчетными лицами"", графа """ + ЗаголовокГрафы + """", "+", "Сальдо на конец периода по дебету счета 71, развернутое по субконто ""Работники организации""", СКДР_71_Работники, мСчет["71"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12306 "Расчеты с персоналом по прочим операциям"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12306", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101230604 = СКД_73;
			УстановитьЗначениеПоказателя("П0001012306" + Графа, П000101230604);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012306" + Графа, "Строка 12306 ""Расчеты с персоналом по прочим операциям"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_73, мСчет["73"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12307 "Расчеты по вкладам в уставный (складочный) капитал"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12307", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101230704 = СКД_75_01;
			УстановитьЗначениеПоказателя("П0001012307" + Графа, П000101230704);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012307" + Графа, "Строка 12307 ""Расчеты по вкладам в уставный (складочный) капитал"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_75_01, мСчет["75.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12308 "Расчеты с разными дебиторами и кредиторами"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12308", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101230804 = СКДР_76_01_Контрагенты + СКДР_76_21_Контрагенты + СКД_76_02 + СКД_76_22 + СКД_76_03 + СКД_76_32 + СКДР_76_05_Контрагенты 
						  + СКДР_76_25_Контрагенты + СКДР_76_35_Контрагенты + СКДР_76_09_Контрагенты + СКДР_76_29_Контрагенты + СКДР_76_39_Контрагенты 
						  + СКД_76_41 + СКДР_76_06_Контрагенты + СКДР_76_26_Контрагенты + СКДР_76_36_Контрагенты;
			Если ЭтоБалансДляАУ Тогда
				П000101230804 = П000101230804 + СКДР_76_51_Контрагенты + СКДР_76_52_Контрагенты;
			КонецЕсли;
			УстановитьЗначениеПоказателя("П0001012308" + Графа, П000101230804);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "Строка 12308 ""Расчеты с разными дебиторами и кредиторами"", графа """ + ЗаголовокГрафы + """", "+", "Сальдо на конец периода по дебету счета 76.01, развернутое по субконто ""Контрагенты""", СКДР_76_01_Контрагенты, мСчет["76.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.21, развернутое по субконто ""Контрагенты""", СКДР_76_21_Контрагенты, мСчет["76.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "!СКД", СКД_76_02, мСчет["76.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "!СКД", СКД_76_22, мСчет["76.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "!СКД", СКД_76_03, мСчет["76.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "!СКД", СКД_76_32, мСчет["76.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.05, развернутое по субконто ""Контрагенты""", СКДР_76_05_Контрагенты, мСчет["76.05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.25, развернутое по субконто ""Контрагенты""", СКДР_76_25_Контрагенты, мСчет["76.25"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.35, развернутое по субконто ""Контрагенты""", СКДР_76_35_Контрагенты, мСчет["76.35"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.09, развернутое по субконто ""Контрагенты""", СКДР_76_09_Контрагенты, мСчет["76.09"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.29, развернутое по субконто ""Контрагенты""", СКДР_76_29_Контрагенты, мСчет["76.29"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.39, развернутое по субконто ""Контрагенты""", СКДР_76_39_Контрагенты, мСчет["76.39"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "!СКД", СКД_76_41, мСчет["76.41"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.06, развернутое по субконто ""Контрагенты""", СКДР_76_06_Контрагенты, мСчет["76.06"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.26, развернутое по субконто ""Контрагенты""", СКДР_76_26_Контрагенты, мСчет["76.26"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.36, развернутое по субконто ""Контрагенты""", СКДР_76_36_Контрагенты, мСчет["76.36"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			Если ЭтоБалансДляАУ Тогда
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.51, развернутое по субконто ""Контрагенты""", СКДР_76_51_Контрагенты, мСчет["76.51"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.52, развернутое по субконто ""Контрагенты""", СКДР_76_52_Контрагенты, мСчет["76.52"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			КонецЕсли;
		КонецЕсли;

		// строка 1240 "Финансовые вложения"
		П000100124004_55_03 	= СКД("55.03");
		П000100124004_55_23 	= СКД("55.23");
		П000100124004_58_01_2 	= СКД("58.01.2");
		П000100124004_58_02 	= СКД("58.02");
		П000100124004_58_03 	= СКД("58.03");
		П000100124004_58_04 	= СКД("58.04");
		П000100124004_58_05 	= СКД("58.05");
		П000100124004_59 		= СКК("59");

		П000100124004 = П000100124004_58_01_2 + П000100124004_58_02 - П000100124004_59 + П000100124004_58_03 + П000100124004_58_04 + П000100124004_58_05 + П000100124004_55_03 + П000100124004_55_23;
		УстановитьЗначениеПоказателя("П0001001240" + Графа, П000100124004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001240" + Графа, "Строка 1240 ""Финансовые вложения"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100124004_58_01_2, мСчет["58.01.2"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001240" + Графа, "", "+", "!СКД", П000100124004_58_02, мСчет["58.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001240" + Графа, "", "-", "!СКК", -П000100124004_59, мСчет["59"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001240" + Графа, "", "+", "!СКД", П000100124004_58_03, мСчет["58.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001240" + Графа, "", "+", "!СКД", П000100124004_58_04, мСчет["58.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001240" + Графа, "", "+", "!СКД", П000100124004_58_05, мСчет["58.05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001240" + Графа, "", "+", "!СКД", П000100124004_55_03, мСчет["55.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001240" + Графа, "", "+", "!СКД", П000100124004_55_23, мСчет["55.23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// дополнительные строки к строке 1240

		// строка 12401 "Акции"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12401", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101240104 = П000100124004_58_01_2;
			УстановитьЗначениеПоказателя("П0001012401" + Графа, П000101240104);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012401" + Графа, "Строка 12401 ""Акции"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100124004_58_01_2, мСчет["58.01.2"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12402 "Долговые ценные бумаги"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12402", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101240204 = П000100124004_58_02 - П000100124004_59;
			УстановитьЗначениеПоказателя("П0001012402" + Графа, П000101240204);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012402" + Графа, "Строка 12402 ""Долговые ценные бумаги"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100124004_58_02, мСчет["58.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012402" + Графа, "", "-", "!СКК", -П000100124004_59, мСчет["59"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12403 "Предоставленные займы"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12403", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101240304 = П000100124004_58_03;
			УстановитьЗначениеПоказателя("П0001012403" + Графа, П000101240304);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012403" + Графа, "Строка 12403 ""Предоставленные займы"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100124004_58_03, мСчет["58.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12404 "Вклады по договору простого товарищества"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12404", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101240404 = П000100124004_58_04;
			УстановитьЗначениеПоказателя("П0001012404" + Графа, П000101240404);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012404" + Графа, "Строка 12404 ""Вклады по договору простого товарищества"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100124004_58_04, мСчет["58.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12405 "Приобретенные права в рамках оказания финансовых услуг"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12405", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101240504 = П000100124004_58_05;
			УстановитьЗначениеПоказателя("П0001012405" + Графа, П000101240504);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012405" + Графа, "Строка 12405 ""Приобретенные права в рамках оказания финансовых услуг"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100124004_58_05, мСчет["58.05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12406 "Депозитные счета"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12406", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101240604 = П000100124004_55_03;
			УстановитьЗначениеПоказателя("П0001012406" + Графа, П000101240604);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012406" + Графа, "Строка 12406 ""Депозитные счета"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100124004_55_03, мСчет["55.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12407 "Депозитные счета (в валюте)"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12407", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101240704 = П000100124004_55_23;
			УстановитьЗначениеПоказателя("П0001012407" + Графа, П000101240704);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012407" + Графа, "Строка 12407 ""Депозитные счета (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100124004_55_23, мСчет["55.23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 1250 "Денежные средства"
		П000100125004_50_01 = СКД("50.01");
		П000100125004_50_02 = СКД("50.02");
		П000100125004_50_21 = СКД("50.21");
		П000100125004_51 	= СКД("51");
		П000100125004_52 	= СКД("52");
		П000100125004_55_01 = СКД("55.01");
		П000100125004_55_02 = СКД("55.02");
		П000100125004_55_04 = СКД("55.04");
		П000100125004_55_21 = СКД("55.21");
		П000100125004_55_24 = СКД("55.24");
		П000100125004_57 	= СКД("57");

		П000100125004 = П000100125004_50_01 + П000100125004_50_02 + П000100125004_50_21 + П000100125004_51 + П000100125004_52 
					  + П000100125004_55_01 + П000100125004_55_02 + П000100125004_55_04 + П000100125004_55_21 + П000100125004_55_24
					  + П000100125004_57;
		УстановитьЗначениеПоказателя("П0001001250" + Графа, П000100125004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "Строка 1250 ""Денежные средства"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_50_01, мСчет["50.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_50_02, мСчет["50.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_50_21, мСчет["50.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_51, мСчет["51"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_52, мСчет["52"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_55_01, мСчет["55.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_55_02, мСчет["55.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_55_04, мСчет["55.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_55_21, мСчет["55.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_55_24, мСчет["55.24"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_57, мСчет["57"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// дополнительные строки к строке 1250

		// строка 12501 "Касса организации"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12501", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101250104 = П000100125004_50_01;
			УстановитьЗначениеПоказателя("П0001012501" + Графа, П000101250104);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012501" + Графа, "Строка 12501 ""Касса организации"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_50_01, мСчет["50.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12502 "Операционная касса"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12502", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101250204 = П000100125004_50_02;
			УстановитьЗначениеПоказателя("П0001012502" + Графа, П000101250204);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012502" + Графа, "Строка 12502 ""Операционная касса"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_50_02, мСчет["50.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12503 "Касса организации (в валюте)"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12503", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101250304 = П000100125004_50_21;
			УстановитьЗначениеПоказателя("П0001012503" + Графа, П000101250304);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012503" + Графа, "Строка 12503 ""Касса организации (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_50_21, мСчет["50.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12504 "Расчетные счета"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12504", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101250404 = П000100125004_51;
			УстановитьЗначениеПоказателя("П0001012504" + Графа, П000101250404);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012504" + Графа, "Строка 12504 ""Расчетные счета"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_51, мСчет["51"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
	
		// строка 12505 "Валютные счета"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12505", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101250504 = П000100125004_52;
			УстановитьЗначениеПоказателя("П0001012505" + Графа, П000101250504);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012505" + Графа, "Строка 12505 ""Валютные счета"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_52, мСчет["52"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12506 "Аккредитивы"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12506", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101250604 = П000100125004_55_01;
			УстановитьЗначениеПоказателя("П0001012506" + Графа, П000101250604);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012506" + Графа, "Строка 12506 ""Аккредитивы"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_55_01, мСчет["55.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12507 "Чековые книжки"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12507", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101250704 = П000100125004_55_02;
			УстановитьЗначениеПоказателя("П0001012507" + Графа, П000101250704);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012507" + Графа, "Строка 12507 ""Чековые книжки"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_55_02, мСчет["55.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12508 "Прочие специальные счета"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12508", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101250804 = П000100125004_55_04;
			УстановитьЗначениеПоказателя("П0001012508" + Графа, П000101250804);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012508" + Графа, "Строка 12508 ""Прочие специальные счета"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_55_04, мСчет["55.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12509 "Аккредитивы (в валюте)"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12509", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101250904 = П000100125004_55_21;
			УстановитьЗначениеПоказателя("П0001012509" + Графа, П000101250904);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012509" + Графа, "Строка 12509 ""Аккредитивы (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_55_21, мСчет["55.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12510 "Прочие специальные счета (в валюте)"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12510", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101251004 = П000100125004_55_24;
			УстановитьЗначениеПоказателя("П0001012510" + Графа, П000101251004);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012510" + Графа, "Строка 12510 ""Прочие специальные счета (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_55_24, мСчет["55.24"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12511 "Переводы в пути"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12511", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101251104 = П000100125004_57;
			УстановитьЗначениеПоказателя("П0001012511" + Графа, П000101251104);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012511" + Графа, "Строка 12511 ""Переводы в пути"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_57, мСчет["57"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 1260 "Прочие оборотные активы"
		П000100126004_19_06 = СКД("19.06");
		П000100126004_50_03 = СКД("50.03");
		П000100126004_50_23 = СКД("50.23");
		П000100126004_68_22 = СКД("68.22");
		П000100126004_76_АВ = СКД("76.АВ");
		П000100126004_76_НА = СКД("76.НА");
		П000100126004_76_ОТ = СКД("76.ОТ");
		П000100126004_97 	= СКД("97");
		П000100126004_94 	= СКД("94");
		П000100126004_96 	= СКД("96");

		П000100126004 = П000100126004_19_06 + П000100126004_50_03 + П000100126004_50_23 + П000100126004_68_22 + П000100126004_76_АВ + П000100126004_76_ОТ + П000100126004_76_НА + П000100126004_94
		              + П000100126004_97 + П000100126004_96;
		УстановитьЗначениеПоказателя("П0001001260" + Графа, П000100126004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001260" + Графа, "Строка 1260 ""Прочие оборотные активы"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_19_06, мСчет["19.06"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001260" + Графа, "", "+", "!СКД", П000100126004_50_03, мСчет["50.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001260" + Графа, "", "+", "!СКД", П000100126004_50_23, мСчет["50.23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001260" + Графа, "", "+", "!СКД", П000100126004_68_22, мСчет["68.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001260" + Графа, "", "+", "!СКД", П000100126004_76_АВ, мСчет["76.АВ"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001260" + Графа, "", "+", "!СКД", П000100126004_76_ОТ, мСчет["76.ОТ"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001260" + Графа, "", "+", "!СКД", П000100126004_76_НА, мСчет["76.НА"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001260" + Графа, "", "+", "!СКД", П000100126004_97, мСчет["97"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001260" + Графа, "", "+", "!СКД", П000100126004_94, мСчет["94"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001260" + Графа, "", "+", "!СКД", П000100126004_96, мСчет["96"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// дополнительные строки к строке 1260

		// строка 12601 "Акцизы по оплаченным материальным ценностям"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12601", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101260104 = П000100126004_19_06;
			УстановитьЗначениеПоказателя("П0001012601" + Графа, П000101260104);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012601" + Графа, "Строка 12601 ""Акцизы по оплаченным материальным ценностям"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_19_06, мСчет["19.06"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12602 "Денежные документы"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12602", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101260204 = П000100126004_50_03;
			УстановитьЗначениеПоказателя("П0001012602" + Графа, П000101260204);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012602" + Графа, "Строка 12602 ""Денежные документы"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_50_03, мСчет["50.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12603 "Денежные документы (в валюте)"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12603", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101260304 = П000100126004_50_23;
			УстановитьЗначениеПоказателя("П0001012603" + Графа, П000101260304);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012603" + Графа, "Строка 12603 ""Денежные документы (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_50_23, мСчет["50.23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12604 "НДС по экспорту к возмещению"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12604", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101260404 = П000100126004_68_22;
			УстановитьЗначениеПоказателя("П0001012604" + Графа, П000101260404);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012604" + Графа, "Строка 12604 ""НДС по экспорту к возмещению"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_68_22, мСчет["68.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12605 "НДС по авансам и предоплатам"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12605", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101260504 = П000100126004_76_АВ;
			УстановитьЗначениеПоказателя("П0001012605" + Графа, П000101260504);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012605" + Графа, "Строка 12605 ""НДС по авансам и предоплатам"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_76_АВ, мСчет["76.АВ"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12606 "НДС, начисленный по отгрузке"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12606", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101260604 = П000100126004_76_ОТ;
			УстановитьЗначениеПоказателя("П0001012606" + Графа, П000101260604);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012606" + Графа, "Строка 12606 ""НДС, начисленный по отгрузке"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_76_ОТ, мСчет["76.ОТ"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12607 "Расчеты по НДС при исполнении обязанностей налогового агента"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12607", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101260704 = П000100126004_76_НА;
			УстановитьЗначениеПоказателя("П0001012607" + Графа, П000101260704);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012607" + Графа, "Строка 12607 ""Расчеты по НДС при исполнении обязанностей налогового агента"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_76_НА, мСчет["76.НА"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12608 "Расходы будущих периодов"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12608", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101260804 = П000100126004_97;
			УстановитьЗначениеПоказателя("П0001012608" + Графа, П000101260804);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012608" + Графа, "Строка 12608 ""Расходы будущих периодов"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_97, мСчет["97"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 12609 "Недостачи и потери от порчи ценностей"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12609", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101260904 = П000100126004_94;
			УстановитьЗначениеПоказателя("П0001012609" + Графа, П000101260904);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012609" + Графа, "Строка 12609 ""Недостачи и потери от порчи ценностей"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_94, мСчет["94"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
		
		// строка 12610 "Оценочные обязательства"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12610", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101261004 = П000100126004_96;
			УстановитьЗначениеПоказателя("П0001012610" + Графа, П000101261004);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012610" + Графа, "Строка 12610 ""Расходы будущих периодов"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_96, мСчет["96"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 1310 "Уставный капитал (складочный капитал, уставный фонд, вклады товарищей)"
		П000100131004_80 = СКК("80");

		П000100131004 = П000100131004_80;
		УстановитьЗначениеПоказателя("П0001001310" + Графа, П000100131004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001310" + Графа, "Строка 1310 ""Уставный капитал (складочный капитал, уставный фонд, вклады товарищей)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100131004_80, мСчет["80"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 1320 "Собственные акции, выкупленные у акционеров"
		П000100132004_81 = СКД("81");

		П000100132004 = -П000100132004_81; // вычитаемый показатель
		УстановитьЗначениеПоказателя("П0001001320" + Графа, П000100132004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001320" + Графа, "Строка 1320 ""Собственные акции, выкупленные у акционеров"", графа """ + ЗаголовокГрафы + """", "-", "!СКД", -П000100132004_81, мСчет["81"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 1340 "Переоценка внеоборотных активов"
		П000100134004_83_01   = СКК("83.01");
		П000100134004_83_01_1 = СКК("83.01.1");
		П000100134004_83_01_2 = СКК("83.01.2");
		П000100134004_83_01_3 = СКК("83.01.3");

		П000100134004 = П000100134004_83_01;
		УстановитьЗначениеПоказателя("П0001001340" + Графа, П000100134004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001340" + Графа, "Строка 1340 ""Переоценка внеоборотных активов"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100134004_83_01, мСчет["83.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// дополнительные строки к строке 1340

		// строка 13401 "Переоценка основных средств"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока13401", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101340104 = П000100134004_83_01_1;
			УстановитьЗначениеПоказателя("П0001013401" + Графа, П000101340104);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001013401" + Графа, "Строка 13401 ""Переоценка основных средств"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100134004_83_01_1, мСчет["83.01.1"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 13402 "Переоценка НМА"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока13402", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101340204 = П000100134004_83_01_2;
			УстановитьЗначениеПоказателя("П0001013402" + Графа, П000101340204);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001013402" + Графа, "Строка 13402 ""Переоценка НМА"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100134004_83_01_2, мСчет["83.01.2"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 13403 "Переоценка прочих внеоборотных активов"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока13403", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101340304 = П000100134004_83_01_3;
			УстановитьЗначениеПоказателя("П0001013403" + Графа, П000101340304);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001013403" + Графа, "Строка 13403 ""Переоценка прочих внеоборотных активов"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100134004_83_01_3, мСчет["83.01.3"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 1350 "Добавочный капитал (без переоценки)"
		П000100135004_83 = СКК("83");
		П000100135004_83_01 = СКК("83.01");

		П000100135004 = П000100135004_83 - П000100135004_83_01;
		УстановитьЗначениеПоказателя("П0001001350" + Графа, П000100135004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001350" + Графа, "Строка 1350 ""Добавочный капитал (без переоценки)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100135004_83, мСчет["83"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001350" + Графа, "", "-", "!СКК", -П000100135004_83_01, мСчет["83.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 1360 "Резервный капитал"
		П000100136004_82 = СКК("82");
		П000100136004_82_01 = СКК("82.01");
		П000100136004_82_02 = СКК("82.02");

		П000100136004 = П000100136004_82;
		УстановитьЗначениеПоказателя("П0001001360" + Графа, П000100136004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001360" + Графа, "Строка 1360 ""Резервный капитал"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100136004_82, мСчет["82"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// дополнительные строки к строке 1360

		// строка 13601 "Резервы, образованные в соответствии с законодательством"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока13601", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101360104 = П000100136004_82_01;
			УстановитьЗначениеПоказателя("П0001013601" + Графа, П000101360104);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001013601" + Графа, "Строка 13601 ""Резервы, образованные в соответствии с законодательством"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100136004_82_01, мСчет["82.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 13602 "Резервы, образованные в соответствии с учредительными документами"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока13602", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101360204 = П000100136004_82_02;
			УстановитьЗначениеПоказателя("П0001013602" + Графа, П000101360204);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001013602" + Графа, "Строка 13602 ""Резервы, образованные в соответствии с учредительными документами"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100136004_82_02, мСчет["82.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 1370 "Нераспределенная прибыль (непокрытый убыток)"
		СКК_84 = СКК("84");
		СКД_84 = СКД("84");
		СКК_99 = СКК("99");
		СКД_99 = СКД("99");

		П000100137004 = СКК_84 - СКД_84 + СКК_99 - СКД_99;
		УстановитьЗначениеПоказателя("П0001001370" + Графа, П000100137004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001370" + Графа, "Строка 1370 ""Нераспределенная прибыль (непокрытый убыток)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_84, мСчет["84"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001370" + Графа, "", "-", "!СКД", -СКД_84, мСчет["84"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001370" + Графа, "", "+", "!СКК",  СКК_99, мСчет["99"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001370" + Графа, "", "-", "!СКД", -СКД_99, мСчет["99"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 1410 "Заемные средства"
		СКК_67_01 = СКК("67.01");
		СКК_67_03 = СКК("67.03");
		СКК_67_21 = СКК("67.21");
		СКК_67_23 = СКК("67.23");

		П000100141004 = СКК_67_01 + СКК_67_21 + СКК_67_03 + СКК_67_23;
		УстановитьЗначениеПоказателя("П0001001410" + Графа, П000100141004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001410" + Графа, "Строка 1410 ""Заемные средства"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_01, мСчет["67.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001410" + Графа, "", "+", "!СКК", СКК_67_21, мСчет["67.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001410" + Графа, "", "+", "!СКК", СКК_67_03, мСчет["67.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001410" + Графа, "", "+", "!СКК", СКК_67_23, мСчет["67.23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// дополнительные строки к строке 1410

		// строка 14101 "Долгосрочные кредиты"
		П000101410104 = СКК_67_01;
		УстановитьЗначениеПоказателя("П0001014101" + Графа, П000101410104);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001014101" + Графа, "Строка 14101 ""Долгосрочные кредиты"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_01, мСчет["67.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 14102 "Долгосрочные займы"
		П000101410204 = СКК_67_03;
		УстановитьЗначениеПоказателя("П0001014102" + Графа, П000101410204);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001014102" + Графа, "Строка 14102 ""Долгосрочные займы"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_03, мСчет["67.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 14103 "Долгосрочные кредиты (в валюте)"
		П000101410304 = СКК_67_21;
		УстановитьЗначениеПоказателя("П0001014103" + Графа, П000101410304);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001014103" + Графа, "Строка 14103 ""Долгосрочные кредиты (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_21, мСчет["67.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 14104 "Долгосрочные займы (в валюте)"
		П000101410404 = СКК_67_23;
		УстановитьЗначениеПоказателя("П0001014104" + Графа, П000101410404);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001014104" + Графа, "Строка 14104 ""Долгосрочные займы (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_23, мСчет["67.23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 1420 "Отложенные налоговые обязательства"
		СКК_77 = СКК("77");
		
		П000100142004 = СКК_77 - ОБ_99_02_4__77 + ОБ_77__99_02_4;
		УстановитьЗначениеПоказателя("П0001001420" + Графа, П000100142004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001420" + Графа, "Строка 1420 ""Отложенные налоговые обязательства"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_77, мСчет["77"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001420" + Графа, "", "-", "!ОБ", -ОБ_99_02_4__77, Счет("99.02.4"), Счет("77"), НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001420" + Графа, "", "+", "!ОБ", ОБ_77__99_02_4, Счет("77"), Счет("99.02.4"), НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 1510 "Заемные средства"
		СКК_66 = СКК("66");
		СКК_66_01 = СКК("66.01");
		СКК_66_02 = СКК("66.02");
		СКК_66_03 = СКК("66.03");
		СКК_66_04 = СКК("66.04");
		СКК_66_21 = СКК("66.21");
		СКК_66_22 = СКК("66.22");
		СКК_66_23 = СКК("66.23");
		СКК_66_24 = СКК("66.24");
		СКК_67_02 = СКК("67.02");
		СКК_67_04 = СКК("67.04");
		СКК_67_22 = СКК("67.22");
		СКК_67_24 = СКК("67.24");

		П000100151004 = СКК_66 + СКК_67_02 + СКК_67_04 + СКК_67_22 + СКК_67_24;
		УстановитьЗначениеПоказателя("П0001001510" + Графа, П000100151004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001510" + Графа, "Строка 1510 ""Заемные средства"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66, мСчет["66"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001510" + Графа, "", "+", "!СКК", СКК_67_02, мСчет["67.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001510" + Графа, "", "+", "!СКК", СКК_67_04, мСчет["67.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001510" + Графа, "", "+", "!СКК", СКК_67_22, мСчет["67.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001510" + Графа, "", "+", "!СКК", СКК_67_24, мСчет["67.24"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// дополнительные строки к строке 1510

		// строка 15101 "Краткосрочные кредиты"
		П000101510104 = СКК_66_01;
		УстановитьЗначениеПоказателя("П0001015101" + Графа, П000101510104);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015101" + Графа, "Строка 15101 ""Краткосрочные кредиты"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66_01, мСчет["66.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 15102 "Краткосрочные займы"
		П000101510204 = СКК_66_03;
		УстановитьЗначениеПоказателя("П0001015102" + Графа, П000101510204);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015102" + Графа, "Строка 15102 ""Краткосрочные займы"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66_03, мСчет["66.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 15103 "Проценты по краткосрочным кредитам"
		П000101510304 = СКК_66_02;
		УстановитьЗначениеПоказателя("П0001015103" + Графа, П000101510304);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015103" + Графа, "Строка 15103 ""Проценты по краткосрочным кредитам"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66_02, мСчет["66.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 15104 "Проценты по долгосрочным кредитам"
		П000101510404 = СКК_67_02;
		УстановитьЗначениеПоказателя("П0001015104" + Графа, П000101510404);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015104" + Графа, "Строка 15104 ""Проценты по долгосрочным кредитам"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_02, мСчет["67.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 15105 "Проценты по краткосрочным займам"
		П000101510504 = СКК_66_04;
		УстановитьЗначениеПоказателя("П0001015105" + Графа, П000101510504);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015105" + Графа, "Строка 15105 ""Проценты по краткосрочным займам"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66_04, мСчет["66.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 15106 "Проценты по долгосрочным займам"
		П000101510604 = СКК_67_04;
		УстановитьЗначениеПоказателя("П0001015106" + Графа, П000101510604);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015106" + Графа, "Строка 15106 ""Проценты по долгосрочным займам"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_04, мСчет["67.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 15107 "Краткосрочные кредиты (в валюте)"
		П000101510704 = СКК_66_21;
		УстановитьЗначениеПоказателя("П0001015107" + Графа, П000101510704);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015107" + Графа, "Строка 15107 ""Краткосрочные кредиты (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66_21, мСчет["66.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 15108 "Краткосрочные займы (в валюте)"
		П000101510804 = СКК_66_23;
		УстановитьЗначениеПоказателя("П0001015108" + Графа, П000101510804);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015108" + Графа, "Строка 15108 ""Краткосрочные займы (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66_23, мСчет["66.23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 15109 "Проценты по краткосрочным кредитам (в валюте)"
		П000101510904 = СКК_66_22;
		УстановитьЗначениеПоказателя("П0001015109" + Графа, П000101510904);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015109" + Графа, "Строка 15109 ""Проценты по краткосрочным кредитам (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66_22, мСчет["66.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 15110 "Проценты по долгосрочным кредитам (в валюте)"
		П000101511004 = СКК_67_22;
		УстановитьЗначениеПоказателя("П0001015110" + Графа, П000101511004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015110" + Графа, "Строка 15110 ""Проценты по долгосрочным кредитам (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_22, мСчет["67.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 15111 "Проценты по краткосрочным займам (в валюте)"
		П000101511104 = СКК_66_24;
		УстановитьЗначениеПоказателя("П0001015111" + Графа, П000101511104);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015111" + Графа, "Строка 15111 ""Проценты по краткосрочным займам (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66_24, мСчет["66.24"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 15112 "Проценты по долгосрочным займам (в валюте)"
		П000101511204 = СКК_67_24;
		УстановитьЗначениеПоказателя("П0001015112" + Графа, П000101511204);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015112" + Графа, "Строка 15112 ""Проценты по долгосрочным займам (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_24, мСчет["67.24"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 1520 "Кредиторская задолженность"
		СКК_60_03 	= СКК("60.03");
		СКК_62_02 	= СКК("62.02");
		СКК_62_22 	= СКК("62.22");
		СКК_62_32 	= СКК("62.32");
		СКК_68_01 	= СКК("68.01");
		СКК_68_02 	= СКК("68.02");
		СКК_68_03 	= СКК("68.03");
		СКК_68_04_2 = СКК("68.04.2");
		СКК_68_07 	= СКК("68.07");
		СКК_68_08 	= СКК("68.08");
		СКК_68_09 	= СКК("68.09");
		СКК_68_11 	= СКК("68.11");
		СКК_68_12 	= СКК("68.12");
		СКК_68_22 	= СКК("68.22");
		СКК_68_32 	= СКК("68.32");
		СККР_69 	= СККР("69");
		СКК_70 		= СКК("70");
		СКК_75_01 	= СКК("75.01");
		СКК_75_02 	= СКК("75.02");
		СКК_76_03 	= СКК("76.03");
		СКК_76_04 	= СКК("76.04");
		СКК_76_41 	= СКК("76.41");
		СКК_76_Н 	= СКК("76.Н");
		СКК_79 		= СКК("79");
		
		П000100152004 = СККР_60_01_КонтрагентыДоговоры + СККР_60_21_КонтрагентыДоговоры + СККР_60_31_КонтрагентыДоговоры + СКК_60_03
					  + СКК_62_02 + СККР_62_01_КонтрагентыДоговоры + СКК_62_22 + СККР_62_21_КонтрагентыДоговоры + СКК_62_32 + СККР_62_31_КонтрагентыДоговоры
					  + СКК_68_01 + СКК_68_02 + СКК_68_03 + СККР_68_04_1_Уровни + СКК_68_04_2 + СКК_68_07 + СКК_68_08 + СКК_68_09 
					  + СККР_68_10_Уровни + СКК_68_11 + СКК_68_12 + СКК_68_22 + СКК_68_22 + СКК_68_32
					  + СККР_69
					  + СКК_70
					  + СККР_71_Работники
					  + СКК_75_02
					  + СКК_79
					  + СККР_76_05_Контрагенты + СККР_76_25_Контрагенты + СККР_76_35_Контрагенты
					  + СККР_76_06_Контрагенты + СККР_76_26_Контрагенты + СККР_76_36_Контрагенты
					  + СККР_76_01_Контрагенты + СККР_76_21_Контрагенты + СКК_76_03 + СКК_76_04
					  + СККР_76_09_Контрагенты + СККР_76_29_Контрагенты + СККР_76_39_Контрагенты
					  + СКК_76_41 + СКК_76_Н;
					  
		Если ЭтоБалансДляАУ Тогда
			П000100152004 = П000100152004 + СККР_76_51_Контрагенты + СККР_76_52_Контрагенты;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П0001001520" + Графа, П000100152004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "Строка 1520 ""Кредиторская задолженность"", графа """ + ЗаголовокГрафы + """", "+", "Сальдо на конец периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_60_01_КонтрагентыДоговоры, мСчет["60.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_60_21_КонтрагентыДоговоры, мСчет["60.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_60_31_КонтрагентыДоговоры, мСчет["60.31"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_60_03, мСчет["60.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_62_02, мСчет["62.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_62_01_КонтрагентыДоговоры, мСчет["62.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_62_22, мСчет["62.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_62_21_КонтрагентыДоговоры, мСчет["62.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_62_32, мСчет["62.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_62_31_КонтрагентыДоговоры, мСчет["62.31"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_68_01, мСчет["68.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_68_02, мСчет["68.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_68_03, мСчет["68.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 68.04.1, развернутое по субконто ""Уровни бюджетов""", СККР_68_04_1_Уровни, мСчет["68.04.1"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_68_04_2, мСчет["68.04.2"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_68_07, мСчет["68.07"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_68_08, мСчет["68.08"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_68_09, мСчет["68.09"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 68.10, развернутое по субконто ""Уровни бюджетов""", СККР_68_10_Уровни, мСчет["68.10"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_68_11, мСчет["68.11"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_68_12, мСчет["68.12"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_68_22, мСчет["68.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_68_32, мСчет["68.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СККР", СККР_69, мСчет["69"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_70, мСчет["70"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 71, развернутое по субконто ""Работники организации""", СККР_71_Работники, мСчет["71"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_75_02, мСчет["75.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_79, мСчет["79"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.05, развернутое по субконто ""Контрагенты""", СККР_76_05_Контрагенты, мСчет["76.05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.25, развернутое по субконто ""Контрагенты""", СККР_76_25_Контрагенты, мСчет["76.25"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.35, развернутое по субконто ""Контрагенты""", СККР_76_35_Контрагенты, мСчет["76.35"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.06, развернутое по субконто ""Контрагенты""", СККР_76_06_Контрагенты, мСчет["76.06"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.26, развернутое по субконто ""Контрагенты""", СККР_76_26_Контрагенты, мСчет["76.26"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.36, развернутое по субконто ""Контрагенты""", СККР_76_36_Контрагенты, мСчет["76.36"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.01, развернутое по субконто ""Контрагенты""", СККР_76_01_Контрагенты, мСчет["76.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.21, развернутое по субконто ""Контрагенты""", СККР_76_21_Контрагенты, мСчет["76.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_76_03, мСчет["76.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_76_04, мСчет["76.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.09, развернутое по субконто ""Контрагенты""", СККР_76_09_Контрагенты, мСчет["76.09"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.29, развернутое по субконто ""Контрагенты""", СККР_76_29_Контрагенты, мСчет["76.29"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.39, развернутое по субконто ""Контрагенты""", СККР_76_39_Контрагенты, мСчет["76.39"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_76_41, мСчет["76.41"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		Если ЭтоБалансДляАУ Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.51, развернутое по субконто ""Контрагенты""", СККР_76_51_Контрагенты, мСчет["76.51"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.52, развернутое по субконто ""Контрагенты""", СККР_76_52_Контрагенты, мСчет["76.52"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001520" + Графа, "", "+", "!СКК", СКК_76_Н, мСчет["76.Н"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// дополнительные строки к строке 1520

		// строка 15201 "Расчеты с поставщиками и подрядчиками"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15201", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101520104 = СККР_60_01_КонтрагентыДоговоры + СККР_60_21_КонтрагентыДоговоры + СККР_60_31_КонтрагентыДоговоры + СКК_60_03;
			УстановитьЗначениеПоказателя("П0001015201" + Графа, П000101520104);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015201" + Графа, "Строка 15201 ""Расчеты с поставщиками и подрядчиками"", графа """ + ЗаголовокГрафы + """", "+", "Сальдо на конец периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_60_01_КонтрагентыДоговоры, мСчет["60.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015201" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_60_21_КонтрагентыДоговоры, мСчет["60.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015201" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_60_31_КонтрагентыДоговоры, мСчет["60.31"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015201" + Графа, "", "+", "!СКК", СКК_60_03, мСчет["60.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 15202 "Расчеты с покупателями и заказчиками"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15202", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101520204 = СКК_62_02 + СККР_62_01_КонтрагентыДоговоры + СКК_62_22 + СККР_62_21_КонтрагентыДоговоры + СКК_62_32 + СККР_62_31_КонтрагентыДоговоры;
			УстановитьЗначениеПоказателя("П0001015202" + Графа, П000101520204);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015202" + Графа, "Строка 15202 ""Расчеты с покупателями и заказчиками"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_62_02, мСчет["62.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015202" + Графа, "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_62_01_КонтрагентыДоговоры, мСчет["62.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015202" + Графа, "", "+", "!СКК", СКК_62_22, мСчет["62.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015202" + Графа, "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_62_21_КонтрагентыДоговоры, мСчет["62.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015202" + Графа, "", "+", "!СКК", СКК_62_32, мСчет["62.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015202" + Графа, "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_62_31_КонтрагентыДоговоры, мСчет["62.31"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 15203 "Расчеты по налогам и сборам"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15203", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101520304 = СКК_68_01 + СКК_68_02 + СКК_68_03 + СККР_68_04_1_Уровни + СКК_68_04_2 + СКК_68_07 + СКК_68_08 + СКК_68_09 
						  + СККР_68_10_Уровни + СКК_68_11 + СКК_68_12 + СКК_68_22 + СКК_68_22 + СКК_68_32;
			УстановитьЗначениеПоказателя("П0001015203" + Графа, П000101520304);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015203" + Графа, "Строка 15203 ""Расчеты по налогам и сборам"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_68_01, мСчет["68.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015203" + Графа, "", "+", "!СКК", СКК_68_02, мСчет["68.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015203" + Графа, "", "+", "!СКК", СКК_68_03, мСчет["68.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015203" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 68.04.1, развернутое по субконто ""Уровни бюджетов""", СККР_68_04_1_Уровни, мСчет["68.04.1"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015203" + Графа, "", "+", "!СКК", СКК_68_04_2, мСчет["68.04.2"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015203" + Графа, "", "+", "!СКК", СКК_68_07, мСчет["68.07"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015203" + Графа, "", "+", "!СКК", СКК_68_08, мСчет["68.08"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015203" + Графа, "", "+", "!СКК", СКК_68_09, мСчет["68.09"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015203" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 68.10, развернутое по субконто ""Уровни бюджетов""", СККР_68_10_Уровни, мСчет["68.10"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015203" + Графа, "", "+", "!СКК", СКК_68_11, мСчет["68.11"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015203" + Графа, "", "+", "!СКК", СКК_68_12, мСчет["68.12"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015203" + Графа, "", "+", "!СКК", СКК_68_22, мСчет["68.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015203" + Графа, "", "+", "!СКК", СКК_68_32, мСчет["68.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 15204 "Расчеты по социальному страхованию и обеспечению"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15204", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101520404 = СККР_69;
			УстановитьЗначениеПоказателя("П0001015204" + Графа, П000101520404);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015204" + Графа, "Строка 15204 ""Расчеты по социальному страхованию и обеспечению"", графа """ + ЗаголовокГрафы + """", "+", "!СККР", СККР_69, мСчет["69"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 15205 "Расчеты с персоналом по оплате труда"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15205", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101520504 = СКК_70;
			УстановитьЗначениеПоказателя("П0001015205" + Графа, П000101520504);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015205" + Графа, "Строка 15205 ""Расчеты с персоналом по оплате труда"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_70, мСчет["70"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 15206 "Расчеты с подотчетными лицами"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15206", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101520604 = СККР_71_Работники;
			УстановитьЗначениеПоказателя("П0001015206" + Графа, П000101520604);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015206" + Графа, "Строка 15206 ""Расчеты с подотчетными лицами"", графа """ + ЗаголовокГрафы + """", "+", "Сальдо на конец периода по кредиту счета 71, развернутое по субконто ""Работники организации""", СККР_71_Работники, мСчет["71"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 15207 "Задолженность участникам (учредителям) по выплате доходов"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15207", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101520704 = СКК_75_02;
			УстановитьЗначениеПоказателя("П0001015207" + Графа, П000101520704);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015207" + Графа, "Строка 15207 ""Задолженность участникам (учредителям) по выплате доходов"", графа """ + ЗаголовокДатаОтчетная + """", "+", "!СКК", СКК_75_02, мСчет["75.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, ,"Баланс");
		КонецЕсли;
		
		// строка 15208 "Расчеты с разными дебиторами и кредиторами"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15208", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101520804 = СККР_76_05_Контрагенты + СККР_76_25_Контрагенты + СККР_76_35_Контрагенты
						  + СККР_76_06_Контрагенты + СККР_76_26_Контрагенты + СККР_76_36_Контрагенты
						  + СККР_76_01_Контрагенты + СККР_76_21_Контрагенты + СКК_76_03 + СКК_76_04
						  + СККР_76_09_Контрагенты + СККР_76_29_Контрагенты + СККР_76_39_Контрагенты
						  + СКК_76_41 + СКК_76_Н;
			Если ЭтоБалансДляАУ Тогда
				П000101520804 = П000101520804 + СККР_76_51_Контрагенты + СККР_76_52_Контрагенты;
			КонецЕсли;
			УстановитьЗначениеПоказателя("П0001015208" + Графа, П000101520804);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "Строка 15208 ""Расчеты с разными дебиторами и кредиторами"", графа """ + ЗаголовокГрафы + """", "+", "Сальдо на конец периода по кредиту счета 76.05, развернутое по субконто ""Контрагенты""", СККР_76_05_Контрагенты, мСчет["76.05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.25, развернутое по субконто ""Контрагенты""", СККР_76_25_Контрагенты, мСчет["76.25"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.35, развернутое по субконто ""Контрагенты""", СККР_76_35_Контрагенты, мСчет["76.35"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.06, развернутое по субконто ""Контрагенты""", СККР_76_06_Контрагенты, мСчет["76.06"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.26, развернутое по субконто ""Контрагенты""", СККР_76_26_Контрагенты, мСчет["76.26"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.36, развернутое по субконто ""Контрагенты""", СККР_76_36_Контрагенты, мСчет["76.36"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.01, развернутое по субконто ""Контрагенты""", СККР_76_01_Контрагенты, мСчет["76.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.21, развернутое по субконто ""Контрагенты""", СККР_76_21_Контрагенты, мСчет["76.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "!СКК", СКК_76_03, мСчет["76.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "!СКК", СКК_76_04, мСчет["76.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.09, развернутое по субконто ""Контрагенты""", СККР_76_09_Контрагенты, мСчет["76.09"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.29, развернутое по субконто ""Контрагенты""", СККР_76_29_Контрагенты, мСчет["76.29"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.39, развернутое по субконто ""Контрагенты""", СККР_76_39_Контрагенты, мСчет["76.39"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "!СКК", СКК_76_41, мСчет["76.41"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			Если ЭтоБалансДляАУ Тогда
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.51, развернутое по субконто ""Контрагенты""", СККР_76_51_Контрагенты, мСчет["76.51"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.52, развернутое по субконто ""Контрагенты""", СККР_76_52_Контрагенты, мСчет["76.52"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			КонецЕсли;
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "!СКК", СКК_76_Н, мСчет["76.Н"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 1530 "Доходы будущих периодов"
		П000100153004_86 = СКК("86");
		П000100153004_98 = СКК("98");
		П000100153004_98_01 = СКК("98.01");
		П000100153004_98_02 = СКК("98.02");
		П000100153004_98_03 = СКК("98.03");
		П000100153004_98_04 = СКК("98.04");

		П000100153004 = П000100153004_86 + П000100153004_98;
		УстановитьЗначениеПоказателя("П0001001530" + Графа, П000100153004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001530" + Графа, "Строка 1530 ""Доходы будущих периодов"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100153004_86, мСчет["86"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001530" + Графа, "", "+", "!СКК", П000100153004_98, мСчет["98"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// дополнительные строки к строке 1530

		// строка 15301 "Целевое финансирование"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15301", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101530104 = П000100153004_86;
			УстановитьЗначениеПоказателя("П0001015301" + Графа, П000101530104);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015301" + Графа, "Строка 15301 ""Целевое финансирование"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100153004_86, мСчет["86"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 15302 "Доходы, полученные в счет будущих периодов"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15302", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101530204 = П000100153004_98_01;
			УстановитьЗначениеПоказателя("П0001015302" + Графа, П000101530204);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015302" + Графа, "Строка 15302 ""Доходы, полученные в счет будущих периодов"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100153004_98_01, мСчет["98.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 15303 "Безвозмездные поступления"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15303", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101530304 = П000100153004_98_02;
			УстановитьЗначениеПоказателя("П0001015303" + Графа, П000101530304);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015303" + Графа, "Строка 15303 ""Безвозмездные поступления"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100153004_98_02, мСчет["98.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 15304 "Предстоящие поступления по недостачам, выявленным за прошлые годы"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15304", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101530404 = П000100153004_98_03;
			УстановитьЗначениеПоказателя("П0001015304" + Графа, П000101530404);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015304" + Графа, "Строка 15304 ""Предстоящие поступления по недостачам, выявленным за прошлые годы"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100153004_98_03, мСчет["98.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 15305 "Разница между суммой, подлежащей взысканию с виновных лиц, и балансовой стоимостью по недостачам ценностей"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15305", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101530504 = П000100153004_98_04;
			УстановитьЗначениеПоказателя("П0001015305" + Графа, П000101530504);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015305" + Графа, "Строка 15305 ""Разница между суммой, подлежащей взысканию с виновных лиц, и балансовой стоимостью по недостачам ценностей"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100153004_98_04, мСчет["98.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;

		// строка 1540 "Резервы предстоящих расходов"
		
		СКК_96	  = СКК("96");

		П000100154004 = СКК_96;
		УстановитьЗначениеПоказателя("П0001001540" + Графа, П000100154004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001540" + Графа, "Строка 1540 ""Резервы предстоящих расходов"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_96, Счет("96"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

		// строка 1550 "Прочие обязательства"
		П000100155004_76_ВА = СКК("76.ВА");
		П000100155004_76_НА = СКК("76.НА");

		П000100155004 = П000100155004_76_ВА + П000100155004_76_НА;
		УстановитьЗначениеПоказателя("П0001001550" + Графа, П000100155004);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001550" + Графа, "Строка 1550 ""Прочие обязательства"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100155004_76_ВА, мСчет["76.ВА"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001550" + Графа, "", "+", "!СКК", П000100155004_76_НА, мСчет["76.НА"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

КонецПроцедуры // ЗаполнитьАвтоБаланс()

// Процедура выполняет заполнение отчета об прибылях и убытках
//		
// 		Для работы процедуры необходимы заполненные переменные модуля:
//			мСчет - соответствие номеров счетов и объектов плана счетов бухгалтерского учета
//			мОргРасшифровка - ссылка на Организацию, по которой строится отчет
// 			мБухИтоги, мБухИтогиРС - объекты вида Обработка.БухгалтерскиеИтоги
//
Процедура ЗаполнитьАвтоФормаОтчета()

	ДеревоНастроекСтрокРасшифровки = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета;
	
	// объект для хранения результатов запроса к бухитогам за предшествующий период
	БухИтогиПред = Обработки.БухгалтерскиеИтоги.Создать();
	
	// вспомогательные даты предыдущих периодов
	ДатаНачалаПериодаОтчета = мДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаОтчета = мДатаКонцаПериодаОтчета;
	ДатаНачалаПериодаПредшествующегоГода = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12);
	ДатаКонцаПериодаПредшествующегоГода = ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12);
	
	// Бухгалтерские итоги по счетам, без аналитики
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт,
			|ОборотДт, ОборотКт,
			|КорОборотДт, КорОборотКт,
			|КонечныйОстатокДт, КонечныйОстатокКт";
	мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, КорСчет",ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , , , , , "Организация", мОргРасшифровка);
	Итоги = "КонечныйОстатокДт, ОборотДт, ОборотКт, КорОборотДт";
	БухИтогиПред.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет", ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, , , , , , "Организация", мОргРасшифровка);

	// Заполнение доп.строк с учетом настройки состава
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);	
	
	// Получаем все необходымые данные для вывода подстрок
	// обороты по счетам по аналитике "Номенклатурная группа"
	СчетаОборотов = Новый Массив;
	СчетаОборотов.Добавить(Счет("90.01")); // Обороты по субсчетам получаются автоматически
	СчетаОборотов.Добавить(Счет("90.03"));
	СчетаОборотов.Добавить(Счет("90.04"));
	СчетаОборотов.Добавить(Счет("90.05"));
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Субконто");
	ТаблицаРезультатов.Колонки.Добавить("ЗначениеПоказателя", ОписаниеТиповЧисло15); // Значение показателя по ЕНВД в основном периоде для определения множества выводимых строк
	ТаблицаРезультатов.Колонки.Добавить("КО_90_01_Отч", 	ОписаниеТиповЧисло15); // величина в отчетном период
	ТаблицаРезультатов.Колонки.Добавить("КО_90_01_Пред", 	ОписаниеТиповЧисло15); // величина в аналогичном периоде предшествующего года
	ТаблицаРезультатов.Колонки.Добавить("КО_90_01_1_Отч", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("КО_90_01_1_Пред", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("КО_90_01_2_Отч", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("КО_90_01_2_Пред", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_03_Отч", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_03_Пред", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_04_Отч", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_04_Пред", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_05_Отч", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_05_Пред", 	ОписаниеТиповЧисло15);
	
	// строки 2110 или строки 21101, 21102
	Если ПрименениеЕНВД Тогда
		КО_90_01_1_Отч = КО("90.01.1");
		ДО_90_03_Отч   = ДО("90.03");
		ДО_90_04_Отч   = ДО("90.04");
		ДО_90_05_Отч   = ДО("90.05");
		
		П000102110104 = КО_90_01_1_Отч - ДО_90_03_Отч - ДО_90_04_Отч - ДО_90_05_Отч;
		УстановитьЗначениеПоказателя("П000102110104", П000102110104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110104", "Выручка по деятельности с основной системой налогообложения, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!КО", КО_90_01_1_Отч, Счет("90.01.1"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110104", "", "-", "!ДО", ДО_90_03_Отч, Счет("90.03"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110104", "", "-", "!ДО", ДО_90_04_Отч, Счет("90.04"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110104", "", "-", "!ДО", ДО_90_05_Отч, Счет("90.05"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		
		КО_90_01_1_Пред = КО("90.01.1", БухИтогиПред);
		ДО_90_03_Пред   = ДО("90.03", БухИтогиПред);
		ДО_90_04_Пред   = ДО("90.04", БухИтогиПред);
		ДО_90_05_Пред   = ДО("90.05", БухИтогиПред);
		
		П000102110105 = КО_90_01_1_Пред - ДО_90_03_Пред - ДО_90_04_Пред - ДО_90_05_Пред;
		УстановитьЗначениеПоказателя("П000102110105", П000102110105);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110105", "Выручка по деятельности с основной системой налогообложения, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!КО", КО_90_01_1_Пред, Счет("90.01.1"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110105", "", "-", "!ДО", ДО_90_03_Пред, Счет("90.03"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110105", "", "-", "!ДО", ДО_90_04_Пред, Счет("90.04"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110105", "", "-", "!ДО", ДО_90_05_Пред, Счет("90.05"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		
		КО_90_01_2_Отч = КО("90.01.2");
		
		П000102110204 = КО_90_01_2_Отч;
		УстановитьЗначениеПоказателя("П000102110204", П000102110204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110204", "Выручка по отдельным видам деятельности (ЕНВД), графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!КО", КО_90_01_2_Отч, Счет("90.01.2"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		
		КО_90_01_2_Пред = КО("90.01.2", БухИтогиПред);
		
		П000102110205 = КО_90_01_2_Пред;
		УстановитьЗначениеПоказателя("П000102110205", П000102110205);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110205", "Выручка по отдельным видам деятельности (ЕНВД), графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!КО", КО_90_01_2_Пред, Счет("90.01.2"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		
		// основной показатель для строки 21101
		ЗначениеОсновногоПоказателяНеЕНВД = П000102110104;
	
		// определяем основной показатель для доп.строк строки 21102
		// если в отчетном периоде не применялся ЕНВД, то возможно он применялся в предшествующем году
		Если НЕ НалоговыйУчет.ПрименениеЕНВД(мОргРасшифровка, ДатаКонцаПериодаОтчета) Тогда
			ЗначениеОсновногоПоказателяЕНВД = П000102110205;
		Иначе
			ЗначениеОсновногоПоказателяЕНВД = П000102110204;
		КонецЕсли;
		
	Иначе
		// показатели строки 2110 будут определены в блоке основного расчета
		П000100211004 = КО("90.01") - ДО("90.03") - ДО("90.04") - ДО("90.05");
		П000100211005 = КО("90.01", БухИтогиПред) - ДО("90.03", БухИтогиПред) - ДО("90.04", БухИтогиПред) - ДО("90.05", БухИтогиПред);
		
		// основной показатель для строки 2110
		ЗначениеОсновногоПоказателяНеЕНВД = П000100211004;
	
	КонецЕсли;
	
	// детальные сведения за период отчета
	ИтогиРС = "ОборотДт, ОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1",ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , СчетаОборотов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы, , , "Организация", мОргРасшифровка);
	ОстаткиИОборотыРС = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	ВыборкаСубконто = ОстаткиИОборотыРС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока ВыборкаСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаСубконто.Субконто1;
		Если ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			НоваяСтрокаРезультата = ТаблицаРезультатов.Добавить();
			НоваяСтрокаРезультата.Субконто = ВыбранноеСубконто;
			НоваяСтрокаРезультата.КО_90_01_Отч 		= мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("90.01"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.КО_90_01_1_Отч 	= мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("90.01.1"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.КО_90_01_2_Отч 	= мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("90.01.2"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.ДО_90_03_Отч 		= мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.03"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.ДО_90_04_Отч 		= мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.04"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.ДО_90_05_Отч 		= мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.05"), ВыбранноеСубконто);
		КонецЕсли;
		
	КонецЦикла;
	
	// детальные сведения за аналогичный период предшествующего года
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, , СчетаОборотов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы, , , "Организация", мОргРасшифровка);
	ОстаткиИОборотыРС = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	ВыборкаСубконто = ОстаткиИОборотыРС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока ВыборкаСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаСубконто.Субконто1;
		Если ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			НоваяСтрокаРезультата = ТаблицаРезультатов.Добавить();
			НоваяСтрокаРезультата.Субконто = ВыбранноеСубконто;
			НоваяСтрокаРезультата.КО_90_01_Пред 	= мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("90.01"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.КО_90_01_1_Пред 	= мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("90.01.1"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.КО_90_01_2_Пред 	= мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("90.01.2"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.ДО_90_03_Пред 	= мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.03"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.ДО_90_04_Пред 	= мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.04"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.ДО_90_05_Пред 	= мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.05"), ВыбранноеСубконто);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРезультатов.Свернуть("Субконто", "ЗначениеПоказателя, 
											|КО_90_01_1_Отч, КО_90_01_1_Пред, 
											|КО_90_01_2_Отч, КО_90_01_2_Пред, 
											|ДО_90_03_Отч, ДО_90_03_Пред, 
											|ДО_90_04_Отч, ДО_90_04_Пред, 
											|ДО_90_05_Отч, ДО_90_05_Пред");
											
	// Заполнение доп.строк состава строки "Выручка по деятельности с основной системой налогообложения"
	// это может быть как строка 2110 так и строка 21101
	Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
		СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.КО_90_01_1_Отч
											- СтрокаРезультата.ДО_90_03_Отч 
											- СтрокаРезультата.ДО_90_04_Отч 
											- СтрокаРезультата.ДО_90_05_Отч;
	КонецЦикла;
	
	Если ТаблицаРезультатов.Количество() > 0 Тогда
		
		// Отбираем строки для вывода в расшифровку по НеЕНВД
		СтрокиКВыводуНеЕНВД = Новый Массив();
		
		// получение ветви дерева настроек для выводимых строк
		Если ПрименениеЕНВД Тогда
			ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("21101", "Код");
		Иначе
			ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("2110", "Код");
		КонецЕсли;
		
		Если ВетвьДереваНастроек.Строки.Количество() = 0 Тогда
			Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				ВыводитьСтроку = (ВетвьДереваНастроек.МаксимальноеКоличество = 0 ИЛИ СтрокиКВыводуНеЕНВД.Количество() < ВетвьДереваНастроек.МаксимальноеКоличество)
							   И СтрокаРезультата.ЗначениеПоказателя <> 0
							   И ЗначениеОсновногоПоказателяНеЕНВД * ВетвьДереваНастроек.Существенность/100 <= СтрокаРезультата.ЗначениеПоказателя
							   И ВетвьДереваНастроек.ВключатьВОтчет;
				Если ВыводитьСтроку Тогда
					СтрокиКВыводуНеЕНВД.Добавить(СтрокаРезультата);
			 	КонецЕсли;
			КонецЦикла;						  
		Иначе
			Для Каждого СтрокаСписка Из ВетвьДереваНастроек.Строки Цикл
				СтрокаРезультата = ТаблицаРезультатов.Найти(СтрокаСписка.ЗначениеЭлемента, "Субконто");
				Если СтрокаРезультата <> Неопределено Тогда
					// строка найдена и будет добавлена
				Иначе
					// создаем строку с заполненной аналитикой и нулевыми значениями
					СтрокаРезультата = ТаблицаРезультатов.Добавить();
					СтрокаРезультата.Субконто = СтрокаСписка.ЗначениеЭлемента;
				КонецЕсли;
				СтрокиКВыводуНеЕНВД.Добавить(СтрокаРезультата);
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокиКВыводуНеЕНВД.Количество() > 0 Тогда
			
			// получаем указатели на места вывода значений
			КоординатаВывода = ?(ПрименениеЕНВД, "П1001021101", "П1001002110");
			НаименованиеСтрокиВывода = ?(ПрименениеЕНВД,
										 "Расшифровка строки 21101 ""Выручка по деятельности с основной системой налогообложения"" по номенклатурной группе",
										 "Расшифровка строки 2110 ""Выручка"" по номенклатурной группе");
			ИдентификаторМногострочногоРаздела = ?(ПрименениеЕНВД, мИдФормаОтчета21101, мИдФормаОтчета02110);
			ТаблицаМногострочногоРаздела = мСтруктураМногострочныхРазделов[ИдентификаторМногострочногоРаздела];
			
			ТаблицаМногострочногоРаздела.Очистить();
			ВыведеноСтрок = 1;
			Для Каждого СтрокаКВыводу Из СтрокиКВыводуНеЕНВД Цикл
				ЗначениеОтч = СтрокаКВыводу.КО_90_01_1_Отч
							- СтрокаКВыводу.ДО_90_03_Отч 
							- СтрокаКВыводу.ДО_90_04_Отч 
							- СтрокаКВыводу.ДО_90_05_Отч;
				ЗначениеПред = СтрокаКВыводу.КО_90_01_1_Пред
							 - СтрокаКВыводу.ДО_90_03_Пред 
							 - СтрокаКВыводу.ДО_90_04_Пред 
							 - СтрокаКВыводу.ДО_90_05_Пред;
				
				НоваяСтрокаМногострочногоРаздела = ТаблицаМногострочногоРаздела.Добавить();
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "02"] = СтрокаКВыводу.Субконто.Наименование;
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "03"] = ?(ПрименениеЕНВД,
																			   "",
																			   Формат(21101 + ВыведеноСтрок - 1, "ЧГ=0"));
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "04"] = ЗначениеОтч;
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "05"] = ЗначениеПред;
				
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!КО", СтрокаКВыводу.КО_90_01_1_Отч, Счет("90.01.1"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, "", "-", "!ДО", СтрокаКВыводу.ДО_90_03_Отч, Счет("90.03"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, "", "-", "!ДО", СтрокаКВыводу.ДО_90_04_Отч, Счет("90.04"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, "", "-", "!ДО", СтрокаКВыводу.ДО_90_05_Отч, Счет("90.05"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
				
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!КО", СтрокаКВыводу.КО_90_01_1_Пред, Счет("90.01.1"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, "", "-", "!ДО", СтрокаКВыводу.ДО_90_03_Пред, Счет("90.03"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, "", "-", "!ДО", СтрокаКВыводу.ДО_90_04_Пред, Счет("90.04"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, "", "-", "!ДО", СтрокаКВыводу.ДО_90_05_Пред, Счет("90.05"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
				
				ВыведеноСтрок = ВыведеноСтрок + 1;
			КонецЦикла;
			
			ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочногоРаздела, ТаблицаМногострочногоРаздела);
			
		КонецЕсли;
		
		// Заполнение расшифровки строки 21102
		Если ПрименениеЕНВД Тогда
			
			Если НалоговыйУчет.ПрименениеЕНВД(мОргРасшифровка, ДатаКонцаПериодаОтчета) Тогда
				// за основу для отбора данных будут использоваться сведения периода отчета
				Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
					СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.КО_90_01_2_Отч;
				КонецЦикла;
			Иначе
				// за основу для отбора данных будут использоваться сведения аналогичного периода предшествующего года
				Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
					СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.КО_90_01_2_Пред;
				КонецЦикла;
			КонецЕсли;
			
			
			// Отбираем строки для вывода в расшифровку по НеЕНВД
			СтрокиКВыводуЕНВД = Новый Массив();
			// получение ветви дерева настроек для выводимых строк
			ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("21202", "Код");
			
			Если ВетвьДереваНастроек.Строки.Количество() = 0 Тогда
				Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
					ВыводитьСтроку = (ВетвьДереваНастроек.МаксимальноеКоличество = 0 ИЛИ СтрокиКВыводуЕНВД.Количество() < ВетвьДереваНастроек.МаксимальноеКоличество)
								   И СтрокаРезультата.ЗначениеПоказателя <> 0
								   И ЗначениеОсновногоПоказателяЕНВД * ВетвьДереваНастроек.Существенность/100 <= СтрокаРезультата.ЗначениеПоказателя
							   	   И ВетвьДереваНастроек.ВключатьВОтчет;
					Если ВыводитьСтроку Тогда
						СтрокиКВыводуЕНВД.Добавить(СтрокаРезультата);
				 	КонецЕсли;
				КонецЦикла;						  
			Иначе
				Для Каждого СтрокаСписка Из ВетвьДереваНастроек.Строки Цикл
					СтрокаРезультата = ТаблицаРезультатов.Найти(СтрокаСписка.ЗначениеЭлемента, "Субконто");
					Если СтрокаРезультата <> Неопределено Тогда
						// строка найдена и будет добавлена
					Иначе
						// создаем строку с заполненной аналитикой и нулевыми значениями
						СтрокаРезультата = ТаблицаРезультатов.Добавить();
						СтрокаРезультата.Субконто = СтрокаСписка.ЗначениеЭлемента;
					КонецЕсли;
					СтрокиКВыводуЕНВД.Добавить(СтрокаРезультата);
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокиКВыводуЕНВД.Количество() > 0 Тогда
				// получаем указатели на места вывода значений
				КоординатаВывода = "П1001021102";
				НаименованиеСтрокиВывода = "Расшифровка строки 21102 ""Выручка по отдельным видам деятельности (ЕНВД)"" по номенклатурной группе";
				ИдентификаторМногострочногоРаздела = мИдФормаОтчета21102;
				ТаблицаМногострочногоРаздела = мСтруктураМногострочныхРазделов[ИдентификаторМногострочногоРаздела];
			
				ТаблицаМногострочногоРаздела.Очистить();
				ВыведеноСтрок = 1;
				
				Для Каждого СтрокаКВыводу Из СтрокиКВыводуЕНВД Цикл
					ЗначениеОтч = СтрокаКВыводу.КО_90_01_2_Отч;
					ЗначениеПред = СтрокаКВыводу.КО_90_01_2_Пред;
					
					НоваяСтрокаМногострочногоРаздела = ТаблицаМногострочногоРаздела.Добавить();
					НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "02"] = СтрокаКВыводу.Субконто.Наименование;
					НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "03"] = "";
					НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "04"] = ЗначениеОтч;
					НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "05"] = ЗначениеПред;
					
					РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!КО", ЗначениеОтч, Счет("90.01.2"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
					РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!КО", ЗначениеПред, Счет("90.01.2"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
					
					ВыведеноСтрок = ВыведеноСтрок + 1;
				КонецЦикла;
				
				ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочногоРаздела, ТаблицаМногострочногоРаздела);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	// Строки расшифровки строки 2120
	
	СчетаОборотов = Новый Массив;
	СчетаОборотов.Добавить(Счет("90.02")); // Обороты по субсчетам расчитываются автоматически
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Субконто");
	ТаблицаРезультатов.Колонки.Добавить("ЗначениеПоказателя", ОписаниеТиповЧисло15); // Значение показателя для отбора строк
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_02_1_Отч", 	ОписаниеТиповЧисло15); // величина в отчетном период
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_02_1_Пред", 	ОписаниеТиповЧисло15); // величина в предшествующем периоде
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_02_2_Отч", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_02_2_Пред", 	ОписаниеТиповЧисло15);
	
	// определение основных показателей
	Если ПрименениеЕНВД Тогда
		П000102120104 = -ДО("90.02.1");
		УстановитьЗначениеПоказателя("П000102120104", П000102120104);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102120104", "Строка 21201 ""Cебестоимость продаж по деятельности с основной системой налогообложения"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -П000102120104, мСчет["90.02.1"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		
		П000102120105 = -ДО("90.02.1", БухИтогиПред);
		УстановитьЗначениеПоказателя("П000102120105", П000102120105);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102120105", "Строка 21201 ""Cебестоимость продаж по деятельности с основной системой налогообложения"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -П000102120105, мСчет["90.02.1"], , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		
		П000102120204 = -ДО("90.02.2");
		УстановитьЗначениеПоказателя("П000102120204", П000102120204);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102120204", "Строка 21202 ""Cебестоимость продаж по отдельным видам деятельности (ЕНВД)"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -П000102120204, мСчет["90.02.2"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		
		П000102120205 = -ДО("90.02.2", БухИтогиПред);
		УстановитьЗначениеПоказателя("П000102120205", П000102120205);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102120205", "Строка 21202 ""Cебестоимость продаж по отдельным видам деятельности (ЕНВД)"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -П000102120205, мСчет["90.02.2"], , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		
		// основной показатель для строки 21201
		ЗначениеОсновногоПоказателяНеЕНВД = -П000102120104;
		
		// определяем основной показатель для доп.строк строки 21202
		// если в отчетном периоде не применялся ЕНВД, то возможно он применялся в предшествующем году
		Если НЕ НалоговыйУчет.ПрименениеЕНВД(мОргРасшифровка, ДатаКонцаПериодаОтчета) Тогда
			ЗначениеОсновногоПоказателяЕНВД = -П000102120205;
		Иначе
			ЗначениеОсновногоПоказателяЕНВД = -П000102120204;
		КонецЕсли;
		
	Иначе
		// показатели строки 2120 будут определены в блоке основного расчета
		П000100212004 = -ДО("90.02");
		П000100212005 = -ДО("90.02", БухИтогиПред);
		
		// основной показатель для строки 2120
		ЗначениеОсновногоПоказателяНеЕНВД = -П000100212004;
		
	КонецЕсли;
	
	// детальные сведения за период отчета
	ИтогиРС = "ОборотДт, ОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1",ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , СчетаОборотов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы, , , "Организация", мОргРасшифровка);
	ОстаткиИОборотыРС = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	ВыборкаСубконто = ОстаткиИОборотыРС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока ВыборкаСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаСубконто.Субконто1;
		Если ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			НоваяСтрокаРезультата = ТаблицаРезультатов.Добавить();
			НоваяСтрокаРезультата.Субконто = ВыбранноеСубконто;
			НоваяСтрокаРезультата.ДО_90_02_1_Отч 	= мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.02.1"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.ДО_90_02_2_Отч 	= мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.02.2"), ВыбранноеСубконто);
		КонецЕсли;
	КонецЦикла;
	
	// детальные сведения за аналогичный период предшествующего года
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, , СчетаОборотов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы, , , "Организация", мОргРасшифровка);
	ОстаткиИОборотыРС = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	ВыборкаСубконто = ОстаткиИОборотыРС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока ВыборкаСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаСубконто.Субконто1;
		Если ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			НоваяСтрокаРезультата = ТаблицаРезультатов.Добавить();
			НоваяСтрокаРезультата.Субконто = ВыбранноеСубконто;
			НоваяСтрокаРезультата.ДО_90_02_1_Пред 	= мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.02.1"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.ДО_90_02_2_Пред 	= мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.02.2"), ВыбранноеСубконто);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаРезультатов.Свернуть("Субконто", "ЗначениеПоказателя, 
											|ДО_90_02_1_Отч, ДО_90_02_1_Пред, 
											|ДО_90_02_2_Отч, ДО_90_02_2_Пред");
											
	// Расчет значений показателей по основной системе налогообложения для отбора
	Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
		СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_02_1_Отч;
	КонецЦикла;
	
	Если ТаблицаРезультатов.Количество() > 0 Тогда
		
		// Отбираем строки для вывода в расшифровку по НеЕНВД
		СтрокиКВыводуНеЕНВД = Новый Массив();
		
		// получение ветви дерева настроек для выводимых строк
		Если ПрименениеЕНВД Тогда
			ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("21201", "Код");
		Иначе
			ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("2120", "Код");
		КонецЕсли;
		
		Если ВетвьДереваНастроек.Строки.Количество() = 0 Тогда
			Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				ВыводитьСтроку = (ВетвьДереваНастроек.МаксимальноеКоличество = 0 ИЛИ СтрокиКВыводуНеЕНВД.Количество() < ВетвьДереваНастроек.МаксимальноеКоличество)
							   И СтрокаРезультата.ЗначениеПоказателя <> 0
							   И ЗначениеОсновногоПоказателяНеЕНВД * ВетвьДереваНастроек.Существенность/100 <= СтрокаРезультата.ЗначениеПоказателя
							   И ВетвьДереваНастроек.ВключатьВОтчет;
				Если ВыводитьСтроку Тогда
					СтрокиКВыводуНеЕНВД.Добавить(СтрокаРезультата);
			 	КонецЕсли;
			КонецЦикла;						  
		Иначе
			Для Каждого СтрокаСписка Из ВетвьДереваНастроек.Строки Цикл
				СтрокаРезультата = ТаблицаРезультатов.Найти(СтрокаСписка.ЗначениеЭлемента, "Субконто");
				Если СтрокаРезультата <> Неопределено Тогда
					// строка найдена и будет добавлена
				Иначе
					// создаем строку с заполненной аналитикой и нулевыми значениями
					СтрокаРезультата = ТаблицаРезультатов.Добавить();
					СтрокаРезультата.Субконто = СтрокаСписка.ЗначениеЭлемента;
				КонецЕсли;
				СтрокиКВыводуНеЕНВД.Добавить(СтрокаРезультата);
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокиКВыводуНеЕНВД.Количество() > 0 Тогда
			
			// получаем указатели на места вывода значений
			КоординатаВывода = ?(ПрименениеЕНВД, "П1001021201", "П1001002120");
			НаименованиеСтрокиВывода = ?(ПрименениеЕНВД,
										 "Расшифровка строки 21201 ""Cебестоимость продаж по деятельности с основной системой налогообложения"" по номенклатурной группе",
										 "Расшифровка строки 2120 ""Cебестоимость продаж"" по номенклатурной группе");
			ИдентификаторМногострочногоРаздела = ?(ПрименениеЕНВД, мИдФормаОтчета21201, мИдФормаОтчета02120);
			ТаблицаМногострочногоРаздела = мСтруктураМногострочныхРазделов[ИдентификаторМногострочногоРаздела];
			
			ТаблицаМногострочногоРаздела.Очистить();
			ВыведеноСтрок = 1;
			Для Каждого СтрокаКВыводу Из СтрокиКВыводуНеЕНВД Цикл
				ЗначениеОтч = -СтрокаКВыводу.ДО_90_02_1_Отч;
				ЗначениеПред = -СтрокаКВыводу.ДО_90_02_1_Пред;
				
				НоваяСтрокаМногострочногоРаздела = ТаблицаМногострочногоРаздела.Добавить();
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "02"] = СтрокаКВыводу.Субконто.Наименование;
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "03"] = ?(ПрименениеЕНВД,
																			   "",
																			   Формат(21201 + ВыведеноСтрок - 1, "ЧГ=0"));
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "04"] = ЗначениеОтч;
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "05"] = ЗначениеПред;
				
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -ЗначениеОтч, Счет("90.02.1"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -ЗначениеПред, Счет("90.02.1"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
				
				ВыведеноСтрок = ВыведеноСтрок + 1;
			КонецЦикла;
			
			ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочногоРаздела, ТаблицаМногострочногоРаздела);
			
		КонецЕсли;
		
		// Заполнение расшифровки строки 22202
		Если ПрименениеЕНВД Тогда
			
			Если НалоговыйУчет.ПрименениеЕНВД(мОргРасшифровка, ДатаКонцаПериодаОтчета) Тогда
				// за основу для отбора данных будут использоваться сведения периода отчета
				Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
					СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_02_2_Отч;
				КонецЦикла;
			Иначе
				// за основу для отбора данных будут использоваться сведения аналогичного периода предшествующего года
				Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
					СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_02_2_Пред;
				КонецЦикла;
			КонецЕсли;
			
			
			// Отбираем строки для вывода в расшифровку по ЕНВД
			СтрокиКВыводуЕНВД = Новый Массив();
			// получение ветви дерева настроек для выводимых строк
			ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("21202", "Код");
			
			Если ВетвьДереваНастроек.Строки.Количество() = 0 Тогда
				Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
					ВыводитьСтроку = (ВетвьДереваНастроек.МаксимальноеКоличество = 0 ИЛИ СтрокиКВыводуЕНВД.Количество() < ВетвьДереваНастроек.МаксимальноеКоличество)
								   И СтрокаРезультата.ЗначениеПоказателя <> 0
								   И ЗначениеОсновногоПоказателяЕНВД * ВетвьДереваНастроек.Существенность/100 <= СтрокаРезультата.ЗначениеПоказателя
								   И ВетвьДереваНастроек.ВключатьВОтчет;
					Если ВыводитьСтроку Тогда
						СтрокиКВыводуЕНВД.Добавить(СтрокаРезультата);
				 	КонецЕсли;
				КонецЦикла;						  
			Иначе
				Для Каждого СтрокаСписка Из ВетвьДереваНастроек.Строки Цикл
					СтрокаРезультата = ТаблицаРезультатов.Найти(СтрокаСписка.ЗначениеЭлемента, "Субконто");
					Если СтрокаРезультата <> Неопределено Тогда
						// строка найдена и будет добавлена
					Иначе
						// создаем строку с заполненной аналитикой и нулевыми значениями
						СтрокаРезультата = ТаблицаРезультатов.Добавить();
						СтрокаРезультата.Субконто = СтрокаСписка.ЗначениеЭлемента;
					КонецЕсли;
					СтрокиКВыводуЕНВД.Добавить(СтрокаРезультата);
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокиКВыводуЕНВД.Количество() > 0 Тогда
				// получаем указатели на места вывода значений
				КоординатаВывода = "П1001021202";
				НаименованиеСтрокиВывода = "Расшифровка строки 21202 ""Cебестоимость продаж по отдельным видам деятельности (ЕНВД)"" по номенклатурной группе";
				ИдентификаторМногострочногоРаздела = мИдФормаОтчета21202;
				ТаблицаМногострочногоРаздела = мСтруктураМногострочныхРазделов[ИдентификаторМногострочногоРаздела];
			
				ТаблицаМногострочногоРаздела.Очистить();
				ВыведеноСтрок = 1;
				
				Для Каждого СтрокаКВыводу Из СтрокиКВыводуЕНВД Цикл
					ЗначениеОтч = -СтрокаКВыводу.ДО_90_02_2_Отч;
					ЗначениеПред = -СтрокаКВыводу.ДО_90_02_2_Пред;
					
					НоваяСтрокаМногострочногоРаздела = ТаблицаМногострочногоРаздела.Добавить();
					НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "02"] = СтрокаКВыводу.Субконто.Наименование;
					НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "03"] = "";
					НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "04"] = ЗначениеОтч;
					НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "05"] = ЗначениеПред;
					
					РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -ЗначениеОтч, Счет("90.02.2"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
					РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -ЗначениеПред, Счет("90.02.2"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
					
					ВыведеноСтрок = ВыведеноСтрок + 1;
				КонецЦикла;
				
				ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочногоРаздела, ТаблицаМногострочногоРаздела);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	// Строки расшифровки строки 2210
	
	СчетаОборотов = Новый Массив;
	СчетаОборотов.Добавить(Счет("90.07"));
	
	СчетаОборотовКор = Новый Массив;
	СчетаОборотовКор.Добавить(Счет("44"));

	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Субконто");
	ТаблицаРезультатов.Колонки.Добавить("ЗначениеПоказателя", ОписаниеТиповЧисло15); // Значение показателя для отбора строк
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_07_1_Отч", 	ОписаниеТиповЧисло15); // величина в отчетном период
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_07_1_Пред", 	ОписаниеТиповЧисло15); // величина в предшествующем периоде
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_07_2_Отч", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_07_2_Пред", 	ОписаниеТиповЧисло15);
	
	// определение основных показателей
	Если ПрименениеЕНВД Тогда
		П000102210104 = -ДО("90.07.1");
		УстановитьЗначениеПоказателя("П000102210104", П000102210104);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102210104", "Строка 22101 ""Коммерческие расходы по деятельности с основной системой налообложения"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -П000102210104, мСчет["90.07.1"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		
		П000102210105 = -ДО("90.07.1", БухИтогиПред);
		УстановитьЗначениеПоказателя("П000102210105", П000102210105);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102120105", "Строка 22101 ""Коммерческие расходы по деятельности с основной системой налообложения"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -П000102210105, мСчет["90.07.1"], , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		
		П000102210204 = -ДО("90.07.2");
		УстановитьЗначениеПоказателя("П000102210204", П000102210204);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102210204", "Строка 22102 ""Коммерческие расходы по отдельным видам деятельности (ЕНВД)"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -П000102210204, мСчет["90.07.2"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		
		П000102210205 = -ДО("90.07.2", БухИтогиПред);
		УстановитьЗначениеПоказателя("П000102210205", П000102210205);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102210205", "Строка 22102 ""Коммерческие расходы по отдельным видам деятельности (ЕНВД)"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -П000102210205, мСчет["90.07.2"], , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		
		// основной показатель для строки 22101
		ЗначениеОсновногоПоказателяНеЕНВД = -П000102210104;
		
		// определяем основной показатель для строк расшифровки строки 22102
		// если в отчетном периоде не применялся ЕНВД, то возможно он применялся в предшествующем году
		Если НЕ НалоговыйУчет.ПрименениеЕНВД(мОргРасшифровка, ДатаКонцаПериодаОтчета) Тогда
			ЗначениеОсновногоПоказателяЕНВД = -П000102210205;
		Иначе
			ЗначениеОсновногоПоказателяЕНВД = -П000102210204;
		КонецЕсли;
		
	Иначе
		// показатели строки 2210 будут определены в блоке основного расчета
		П000100221004 = -ДО("90.07");
		П000100221005 = -ДО("90.07", БухИтогиПред);
		
		// основной показатель для строки 2210
		ЗначениеОсновногоПоказателяНеЕНВД = -П000100221004;
		
	КонецЕсли;

	// детальные сведения за период отчета, для удобства обработки бухитогов основными счетами считаются корреспонидрующие счета
	// кореспонденция со счетом 90.07.1
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , СчетаОборотовКор, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат, СчетаОборотов, , "Организация", мОргРасшифровка);
	ОстаткиИОборотыРС = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	ВыборкаСубконто = ОстаткиИОборотыРС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока ВыборкаСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаСубконто.Субконто1;
		
		Если ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			// пропускаем группы как элемент иерархии результатов запроса
			Если ВыбранноеСубконто.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СчетОборотовКор Из СчетаОборотовКор Цикл
				НоваяСтрокаРезультата = ТаблицаРезультатов.Добавить();
				НоваяСтрокаРезультата.Субконто = ВыбранноеСубконто;
				НоваяСтрокаРезультата.ДО_90_07_1_Отч = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", СчетОборотовКор, ВыбранноеСубконто, Счет("90.07.1"));
				НоваяСтрокаРезультата.ДО_90_07_2_Отч = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", СчетОборотовКор, ВыбранноеСубконто, Счет("90.07.2"));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// детальные сведения за период отчета, для удобства обработки бухитогов основными счетами считаются корреспонидрующие счета
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, , СчетаОборотовКор, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат, СчетаОборотов, , "Организация", мОргРасшифровка);
	ОстаткиИОборотыРС = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	ВыборкаСубконто = ОстаткиИОборотыРС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока ВыборкаСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаСубконто.Субконто1;
		Если ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			// пропускаем группы как элемент иерархии результатов запроса
			Если ВыбранноеСубконто.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СчетОборотовКор Из СчетаОборотовКор Цикл
				НоваяСтрокаРезультата = ТаблицаРезультатов.Добавить();
				НоваяСтрокаРезультата.Субконто = ВыбранноеСубконто;
				НоваяСтрокаРезультата.ДО_90_07_1_Пред = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", СчетОборотовКор, ВыбранноеСубконто, Счет("90.07.1"));
				НоваяСтрокаРезультата.ДО_90_07_2_Пред = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", СчетОборотовКор, ВыбранноеСубконто, Счет("90.07.2"));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	ТаблицаРезультатов.Свернуть("Субконто", "ЗначениеПоказателя, 
											|ДО_90_07_1_Отч, ДО_90_07_1_Пред, 
											|ДО_90_07_2_Отч, ДО_90_07_2_Пред");
											
	// Расчет значений показателей по основной системе налогообложения для отбора
	Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
		СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_07_1_Отч;
	КонецЦикла;
	
	Если ТаблицаРезультатов.Количество() > 0 Тогда
		
		// Отбираем строки для вывода в расшифровку по НеЕНВД
		СтрокиКВыводуНеЕНВД = Новый Массив();
		
		// получение ветви дерева настроек для выводимых строк
		Если ПрименениеЕНВД Тогда
			ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("22101", "Код");
		Иначе
			ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("2210", "Код");
		КонецЕсли;
		
		Если ВетвьДереваНастроек.Строки.Количество() = 0 Тогда
			Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				ВыводитьСтроку = (ВетвьДереваНастроек.МаксимальноеКоличество = 0 ИЛИ СтрокиКВыводуНеЕНВД.Количество() < ВетвьДереваНастроек.МаксимальноеКоличество)
							   И СтрокаРезультата.ЗначениеПоказателя <> 0
							   И ЗначениеОсновногоПоказателяНеЕНВД * ВетвьДереваНастроек.Существенность/100 <= СтрокаРезультата.ЗначениеПоказателя
							   И ВетвьДереваНастроек.ВключатьВОтчет;
				Если ВыводитьСтроку Тогда
					СтрокиКВыводуНеЕНВД.Добавить(СтрокаРезультата);
			 	КонецЕсли;
			КонецЦикла;						  
		Иначе
			Для Каждого СтрокаСписка Из ВетвьДереваНастроек.Строки Цикл
				СтрокаРезультата = ТаблицаРезультатов.Найти(СтрокаСписка.ЗначениеЭлемента, "Субконто");
				Если СтрокаРезультата <> Неопределено Тогда
					// строка найдена и будет добавлена
				Иначе
					// создаем строку с заполненной аналитикой и нулевыми значениями
					СтрокаРезультата = ТаблицаРезультатов.Добавить();
					СтрокаРезультата.Субконто = СтрокаСписка.ЗначениеЭлемента;
				КонецЕсли;
				СтрокиКВыводуНеЕНВД.Добавить(СтрокаРезультата);
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокиКВыводуНеЕНВД.Количество() > 0 Тогда
			
			// получаем указатели на места вывода значений
			КоординатаВывода = ?(ПрименениеЕНВД, "П1001022101", "П1001002210");
			НаименованиеСтрокиВывода = ?(ПрименениеЕНВД,
										 "Расшифровка строки 22101 ""Коммерческие расходы по деятельности с основной системой налообложения"" по статье затрат",
										 "Расшифровка строки 2210 ""Коммерческие расходы"" по статье затрат");
			ИдентификаторМногострочногоРаздела = ?(ПрименениеЕНВД, мИдФормаОтчета22101, мИдФормаОтчета02210);
			ТаблицаМногострочногоРаздела = мСтруктураМногострочныхРазделов[ИдентификаторМногострочногоРаздела];
			
			ТаблицаМногострочногоРаздела.Очистить();
			ВыведеноСтрок = 1;
			Для Каждого СтрокаКВыводу Из СтрокиКВыводуНеЕНВД Цикл
				ЗначениеОтч = -СтрокаКВыводу.ДО_90_07_1_Отч;
				ЗначениеПред = -СтрокаКВыводу.ДО_90_07_1_Пред;
				
				НоваяСтрокаМногострочногоРаздела = ТаблицаМногострочногоРаздела.Добавить();
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "02"] = СтрокаКВыводу.Субконто.Наименование;
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "03"] = ?(ПрименениеЕНВД,
																			   "",
																			   Формат(22101 + ВыведеноСтрок - 1, "ЧГ=0"));
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "04"] = ЗначениеОтч;
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "05"] = ЗначениеПред;
				
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -ЗначениеОтч, Счет("90.07.1"), Счет("44"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -ЗначениеПред, Счет("90.07.1"), Счет("44"), ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
				
				ВыведеноСтрок = ВыведеноСтрок + 1;
			КонецЦикла;
			
			ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочногоРаздела, ТаблицаМногострочногоРаздела);
			
		КонецЕсли;
		
		// Заполнение расшифровки строки 22102
		Если ПрименениеЕНВД Тогда
			
			Если НалоговыйУчет.ПрименениеЕНВД(мОргРасшифровка, ДатаКонцаПериодаОтчета) Тогда
				// за основу для отбора данных будут использоваться сведения периода отчета
				Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
					СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_07_2_Отч;
				КонецЦикла;
			Иначе
				// за основу для отбора данных будут использоваться сведения аналогичного периода предшествующего года
				Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
					СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_07_2_Пред;
				КонецЦикла;
			КонецЕсли;
			
			
			// Отбираем строки для вывода в расшифровку по ЕНВД
			СтрокиКВыводуЕНВД = Новый Массив();
			// получение ветви дерева настроек для выводимых строк
			ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("22102", "Код");
			
			Если ВетвьДереваНастроек.Строки.Количество() = 0 Тогда
				Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
					ВыводитьСтроку = (ВетвьДереваНастроек.МаксимальноеКоличество = 0 ИЛИ СтрокиКВыводуЕНВД.Количество() < ВетвьДереваНастроек.МаксимальноеКоличество)
								   И СтрокаРезультата.ЗначениеПоказателя <> 0
								   И ЗначениеОсновногоПоказателяЕНВД * ВетвьДереваНастроек.Существенность/100 <= СтрокаРезультата.ЗначениеПоказателя
								   И ВетвьДереваНастроек.ВключатьВОтчет;
					Если ВыводитьСтроку Тогда
						СтрокиКВыводуЕНВД.Добавить(СтрокаРезультата);
				 	КонецЕсли;
				КонецЦикла;						  
			Иначе
				Для Каждого СтрокаСписка Из ВетвьДереваНастроек.Строки Цикл
					СтрокаРезультата = ТаблицаРезультатов.Найти(СтрокаСписка.ЗначениеЭлемента, "Субконто");
					Если СтрокаРезультата <> Неопределено Тогда
						// строка найдена и будет добавлена
					Иначе
						// создаем строку с заполненной аналитикой и нулевыми значениями
						СтрокаРезультата = ТаблицаРезультатов.Добавить();
						СтрокаРезультата.Субконто = СтрокаСписка.ЗначениеЭлемента;
					КонецЕсли;
					СтрокиКВыводуЕНВД.Добавить(СтрокаРезультата);
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокиКВыводуЕНВД.Количество() > 0 Тогда
				// получаем указатели на места вывода значений
				КоординатаВывода = "П1001022102";
				НаименованиеСтрокиВывода = "Расшифровка строки 22102 ""Коммерческие расходы по отдельным видам деятельности (ЕНВД)"" по номенклатурной группе";
				ИдентификаторМногострочногоРаздела = мИдФормаОтчета22102;
				ТаблицаМногострочногоРаздела = мСтруктураМногострочныхРазделов[ИдентификаторМногострочногоРаздела];
			
				ТаблицаМногострочногоРаздела.Очистить();
				ВыведеноСтрок = 1;
				
				Для Каждого СтрокаКВыводу Из СтрокиКВыводуЕНВД Цикл
					ЗначениеОтч = -СтрокаКВыводу.ДО_90_07_2_Отч;
					ЗначениеПред = -СтрокаКВыводу.ДО_90_07_2_Пред;
					
					НоваяСтрокаМногострочногоРаздела = ТаблицаМногострочногоРаздела.Добавить();
					НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "02"] = СтрокаКВыводу.Субконто.Наименование;
					НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "03"] = "";
					НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "04"] = ЗначениеОтч;
					НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "05"] = ЗначениеПред;
					
					РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ОБ", -ЗначениеОтч, Счет("90.07.2"), Счет("44"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
					РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ОБ", -ЗначениеПред, Счет("90.07.2"), Счет("44"), ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
					
					ВыведеноСтрок = ВыведеноСтрок + 1;
				КонецЦикла;
				
				ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочногоРаздела, ТаблицаМногострочногоРаздела);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	// Строки расшифровки строки 2220
	
	СчетаОборотов = Новый Массив;
	СчетаОборотов.Добавить(Счет("90.08"));
	
	СчетаОборотовКор = Новый Массив();
	СчетаОборотовКор.Добавить(Счет("20.01"));
	СчетаОборотовКор.Добавить(Счет("23"));
	СчетаОборотовКор.Добавить(Счет("25"));
	СчетаОборотовКор.Добавить(Счет("26"));
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Субконто");
	ТаблицаРезультатов.Колонки.Добавить("ЗначениеПоказателя", ОписаниеТиповЧисло15); // Значение показателя для отбора строк
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_08_1_Отч", 	ОписаниеТиповЧисло15); // величина в отчетном период
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_08_1_Пред", 	ОписаниеТиповЧисло15); // величина в предшествующем периоде
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_08_2_Отч", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_08_2_Пред", 	ОписаниеТиповЧисло15);
	
	// определение основных показателей
	Если ПрименениеЕНВД Тогда
		П000102220104 = -ДО("90.08.1");
		УстановитьЗначениеПоказателя("П000102220104", П000102220104);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102220104", "Строка 22201 ""Управленческие расходы по деятельности с основной системой налообложения"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -П000102220104, мСчет["90.08.1"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		
		П000102220105 = -ДО("90.08.1", БухИтогиПред);
		УстановитьЗначениеПоказателя("П000102220105", П000102220105);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102220105", "Строка 22201 ""Управленческие расходы по деятельности с основной системой налообложения"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -П000102220105, мСчет["90.08.1"], , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		
		П000102220204 = -ДО("90.08.2");
		УстановитьЗначениеПоказателя("П000102220204", П000102220204);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102220204", "Строка 22202 ""Управленческие  расходы по отдельным видам деятельности (ЕНВД)"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -П000102220204, мСчет["90.08.2"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		
		П000102220205 = -ДО("90.08.2", БухИтогиПред);
		УстановитьЗначениеПоказателя("П000102220205", П000102220205);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102220205", "Строка 22202 ""Управленческие  расходы по отдельным видам деятельности (ЕНВД)"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -П000102220205, мСчет["90.08.2"], , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		
		// основной показатель для строки 22101
		ЗначениеОсновногоПоказателяНеЕНВД = -П000102220104;
		
		// определяем основной показатель для строк расшифровки строки 22102
		// если в отчетном периоде не применялся ЕНВД, то возможно он применялся в предшествующем году
		Если НЕ НалоговыйУчет.ПрименениеЕНВД(мОргРасшифровка, ДатаКонцаПериодаОтчета) Тогда
			ЗначениеОсновногоПоказателяЕНВД = -П000102220205;
		Иначе
			ЗначениеОсновногоПоказателяЕНВД = -П000102220204;
		КонецЕсли;
		
	Иначе
		// показатели строки 2220 будут определены в блоке основного расчета
		П000100222004 = -ДО("90.08");
		П000100222005 = -ДО("90.08", БухИтогиПред);
		
		// основной показатель для строки 2220
		ЗначениеОсновногоПоказателяНеЕНВД = -П000100222004;
		
	КонецЕсли;

	// детальные сведения за период отчета, для удобства обработки бухитогов основными счетами считаются корреспондирующие счета
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , СчетаОборотовКор, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат, СчетаОборотов, , "Организация", мОргРасшифровка);
	ОстаткиИОборотыРС = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	ВыборкаСубконто = ОстаткиИОборотыРС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока ВыборкаСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаСубконто.Субконто1;
		
		Если ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			// пропускаем группы как элемент иерархии результатов запроса
			Если ВыбранноеСубконто.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СчетОборотовКор Из СчетаОборотовКор Цикл
				НоваяСтрокаРезультата = ТаблицаРезультатов.Добавить();
				НоваяСтрокаРезультата.Субконто = ВыбранноеСубконто;
				НоваяСтрокаРезультата.ДО_90_08_1_Отч = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", СчетОборотовКор, ВыбранноеСубконто, Счет("90.08.1"));
				НоваяСтрокаРезультата.ДО_90_08_2_Отч = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", СчетОборотовКор, ВыбранноеСубконто, Счет("90.08.2"));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// детальные сведения за период предшествующего года, для удобства обработки бухитогов основными счетами считаются корреспондирующие счета
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, , СчетаОборотовКор, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат, СчетаОборотов, , "Организация", мОргРасшифровка);
	ОстаткиИОборотыРС = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	ВыборкаСубконто = ОстаткиИОборотыРС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока ВыборкаСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаСубконто.Субконто1;
		
		Если ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			// пропускаем группы как элемент иерархии результатов запроса
			Если ВыбранноеСубконто.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СчетОборотовКор Из СчетаОборотовКор Цикл
				НоваяСтрокаРезультата = ТаблицаРезультатов.Добавить();
				НоваяСтрокаРезультата.Субконто = ВыбранноеСубконто;
				НоваяСтрокаРезультата.ДО_90_08_1_Пред = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", СчетОборотовКор, ВыбранноеСубконто, Счет("90.08.1"));
				НоваяСтрокаРезультата.ДО_90_08_2_Пред = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", СчетОборотовКор, ВыбранноеСубконто, Счет("90.08.2"));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаРезультатов.Свернуть("Субконто", "ЗначениеПоказателя, 
											|ДО_90_08_1_Отч, ДО_90_08_1_Пред, 
											|ДО_90_08_2_Отч, ДО_90_08_2_Пред");
											
	// Расчет значений показателей по основной системе налогообложения для отбора
	Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
		СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_08_1_Отч;
	КонецЦикла;
	
	Если ТаблицаРезультатов.Количество() > 0 Тогда
		
		// Отбираем строки для вывода в расшифровку по НеЕНВД
		СтрокиКВыводуНеЕНВД = Новый Массив();
		
		// получение ветви дерева настроек для выводимых строк
		Если ПрименениеЕНВД Тогда
			ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("22201", "Код");
		Иначе
			ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("2220", "Код");
		КонецЕсли;
		
		Если ВетвьДереваНастроек.Строки.Количество() = 0 Тогда
			Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				ВыводитьСтроку = (ВетвьДереваНастроек.МаксимальноеКоличество = 0 ИЛИ СтрокиКВыводуНеЕНВД.Количество() < ВетвьДереваНастроек.МаксимальноеКоличество)
							   И СтрокаРезультата.ЗначениеПоказателя <> 0
							   И ЗначениеОсновногоПоказателяНеЕНВД * ВетвьДереваНастроек.Существенность/100 <= СтрокаРезультата.ЗначениеПоказателя
							   И ВетвьДереваНастроек.ВключатьВОтчет;
				Если ВыводитьСтроку Тогда
					СтрокиКВыводуНеЕНВД.Добавить(СтрокаРезультата);
			 	КонецЕсли;
			КонецЦикла;						  
		Иначе
			Для Каждого СтрокаСписка Из ВетвьДереваНастроек.Строки Цикл
				СтрокаРезультата = ТаблицаРезультатов.Найти(СтрокаСписка.ЗначениеЭлемента, "Субконто");
				Если СтрокаРезультата <> Неопределено Тогда
					// строка найдена и будет добавлена
				Иначе
					// создаем строку с заполненной аналитикой и нулевыми значениями
					СтрокаРезультата = ТаблицаРезультатов.Добавить();
					СтрокаРезультата.Субконто = СтрокаСписка.ЗначениеЭлемента;
				КонецЕсли;
				СтрокиКВыводуНеЕНВД.Добавить(СтрокаРезультата);
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокиКВыводуНеЕНВД.Количество() > 0 Тогда
			
			// получаем указатели на места вывода значений
			КоординатаВывода = ?(ПрименениеЕНВД, "П1001022201", "П1001002220");
			НаименованиеСтрокиВывода = ?(ПрименениеЕНВД,
										 "Расшифровка строки 22201 ""Управленческие расходы по деятельности с основной системой налообложения"" по статье затрат",
										 "Расшифровка строки 2220 ""Управленческие расходы"" по статье затрат");
			ИдентификаторМногострочногоРаздела = ?(ПрименениеЕНВД, мИдФормаОтчета22201, мИдФормаОтчета02220);
			ТаблицаМногострочногоРаздела = мСтруктураМногострочныхРазделов[ИдентификаторМногострочногоРаздела];
			
			ТаблицаМногострочногоРаздела.Очистить();
			ВыведеноСтрок = 1;
			Для Каждого СтрокаКВыводу Из СтрокиКВыводуНеЕНВД Цикл
				ЗначениеОтч = -СтрокаКВыводу.ДО_90_08_1_Отч;
				ЗначениеПред = -СтрокаКВыводу.ДО_90_08_1_Пред;
				
				НоваяСтрокаМногострочногоРаздела = ТаблицаМногострочногоРаздела.Добавить();
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "02"] = СтрокаКВыводу.Субконто.Наименование;
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "03"] = ?(ПрименениеЕНВД,
																			   "",
																			   Формат(22201 + ВыведеноСтрок - 1, "ЧГ=0"));
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "04"] = ЗначениеОтч;
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "05"] = ЗначениеПред;
				
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "Оборот с кредита счетов 20.01, 23, 25, 26 в дебет счета 90.08.1 по статье затрат """ + СтрокаКВыводу.Субконто.Наименование + """", -ЗначениеОтч, Счет("90.08.1"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "Оборот с кредита счетов 20.01, 23, 25, 26 в дебет счета 90.08.1 по статье затрат """ + СтрокаКВыводу.Субконто.Наименование + """", -ЗначениеПред, Счет("90.08.1"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
				
				ВыведеноСтрок = ВыведеноСтрок + 1;
			КонецЦикла;
			
			ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочногоРаздела, ТаблицаМногострочногоРаздела);
			
		КонецЕсли;
		
		// Заполнение расшифровки строки 22202
		Если ПрименениеЕНВД Тогда
			
			Если НалоговыйУчет.ПрименениеЕНВД(мОргРасшифровка, ДатаКонцаПериодаОтчета) Тогда
				// за основу для отбора данных будут использоваться сведения периода отчета
				Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
					СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_08_2_Отч;
				КонецЦикла;
			Иначе
				// за основу для отбора данных будут использоваться сведения аналогичного периода предшествующего года
				Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
					СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_08_2_Пред;
				КонецЦикла;
			КонецЕсли;
			
			
			// Отбираем строки для вывода в расшифровку по ЕНВД
			СтрокиКВыводуЕНВД = Новый Массив();
			// получение ветви дерева настроек для выводимых строк
			ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("22202", "Код");
			
			Если ВетвьДереваНастроек.Строки.Количество() = 0 Тогда
				Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
					ВыводитьСтроку = (ВетвьДереваНастроек.МаксимальноеКоличество = 0 ИЛИ СтрокиКВыводуЕНВД.Количество() < ВетвьДереваНастроек.МаксимальноеКоличество)
								   И СтрокаРезультата.ЗначениеПоказателя <> 0
								   И ЗначениеОсновногоПоказателяЕНВД * ВетвьДереваНастроек.Существенность/100 <= СтрокаРезультата.ЗначениеПоказателя
								   И ВетвьДереваНастроек.ВключатьВОтчет;
					Если ВыводитьСтроку Тогда
						СтрокиКВыводуЕНВД.Добавить(СтрокаРезультата);
				 	КонецЕсли;
				КонецЦикла;						  
			Иначе
				Для Каждого СтрокаСписка Из ВетвьДереваНастроек.Строки Цикл
					СтрокаРезультата = ТаблицаРезультатов.Найти(СтрокаСписка.ЗначениеЭлемента, "Субконто");
					Если СтрокаРезультата <> Неопределено Тогда
						// строка найдена и будет добавлена
					Иначе
						// создаем строку с заполненной аналитикой и нулевыми значениями
						СтрокаРезультата = ТаблицаРезультатов.Добавить();
						СтрокаРезультата.Субконто = СтрокаСписка.ЗначениеЭлемента;
					КонецЕсли;
					СтрокиКВыводуЕНВД.Добавить(СтрокаРезультата);
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокиКВыводуЕНВД.Количество() > 0 Тогда
				// получаем указатели на места вывода значений
				КоординатаВывода = "П1001022202";
				НаименованиеСтрокиВывода = "Расшифровка строки 22202 ""Управленческие расходы по отдельным видам деятельности (ЕНВД)"" по статье затрат";
				ИдентификаторМногострочногоРаздела = мИдФормаОтчета22202;
				ТаблицаМногострочногоРаздела = мСтруктураМногострочныхРазделов[ИдентификаторМногострочногоРаздела];
			
				ТаблицаМногострочногоРаздела.Очистить();
				ВыведеноСтрок = 1;
				
				Для Каждого СтрокаКВыводу Из СтрокиКВыводуЕНВД Цикл
					ЗначениеОтч = -СтрокаКВыводу.ДО_90_08_2_Отч;
					ЗначениеПред = -СтрокаКВыводу.ДО_90_08_2_Пред;
					
					НоваяСтрокаМногострочногоРаздела = ТаблицаМногострочногоРаздела.Добавить();
					НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "02"] = СтрокаКВыводу.Субконто.Наименование;
					НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "03"] = "";
					НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "04"] = ЗначениеОтч;
					НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "05"] = ЗначениеПред;
					
					РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "Оборот с кредита счетов 20.01, 23, 25, 26 в дебет счета 90.08.2 по статье затрат """ + СтрокаКВыводу.Субконто.Наименование + """", -ЗначениеОтч, Счет("90.08.2"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
					РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "Оборот с кредита счетов 20.01, 23, 25, 26 в дебет счета 90.08.2 по статье затрат """ + СтрокаКВыводу.Субконто.Наименование + """", -ЗначениеПред, Счет("90.08.2"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
					
					ВыведеноСтрок = ВыведеноСтрок + 1;
				КонецЦикла;
				
				ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочногоРаздела, ТаблицаМногострочногоРаздела);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	// вызов функции для отчетного периода
	ЗаполнитьАвтоФормаОтчетаОбщие("04", ЗаголовокДатаОтчетногоПериода, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета);
	
	// вызов функции для периода предшествующего года
	Если ЗаполнятьГодПредыдущий Тогда
		// Бухгалтерские итоги по счетам, без аналитики
		Итоги = "НачальныйОстатокДт, НачальныйОстатокКт,
				|ОборотДт, ОборотКт,
				|КорОборотДт, КорОборотКт,
				|КонечныйОстатокДт, КонечныйОстатокКт";
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, , , , , , "Организация", мОргРасшифровка);
		ЗаполнитьАвтоФормаОтчетаОбщие("05", ЗаголовокДатаОтчетногоПериодаПрошлогоГода, ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Расчет основых показателей отчета
	
	// Бухгалтерские итоги по счетам, без аналитики
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт,
			|ОборотДт, ОборотКт,
			|КорОборотДт, КорОборотКт,
			|КонечныйОстатокДт, КонечныйОстатокКт";
	мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , , , , , "Организация", мОргРасшифровка);
	
	// строка 2110 "Выручка"
	П010001003_90_1 = КО("90.01");
	
	П010001003_90_3 = ДО("90.03");
	П010001003_90_4 = ДО("90.04");
	П010001003_90_5 = ДО("90.05");
	
	П010001003 = П010001003_90_1
	           - П010001003_90_3
	           - П010001003_90_4
	           - П010001003_90_5;

	УстановитьЗначениеПоказателя("П000100211004", П010001003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100211004", "Строка 2110 ""Выручка"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!КО", П010001003_90_1, Счет("90.01"), , , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100211004", "", "-", "!ДО", -П010001003_90_3, Счет("90.03"));
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100211004", "", "-", "!ДО", -П010001003_90_4, Счет("90.04"));
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100211004", "", "-", "!ДО", -П010001003_90_5, Счет("90.05"));

	// строка 2120 "Себестоимость продаж"
	П010002003 = ДО("90.02");
	УстановитьЗначениеПоказателя("П000100212004", -П010002003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100212004", "Строка 2120 ""Себестоимость продаж"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", П010002003, Счет("90.02"), , , , "ФормаОтчета");

	// строка 2210 "Коммерческие расходы"
	П010003003 = ДО("90.07");
	УстановитьЗначениеПоказателя("П000100221004", -П010003003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100221004", "Строка 2210 ""Коммерческие расходы"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", П010003003, Счет("90.07"), , , , "ФормаОтчета");

	// строка 2220 "Управленческие расходы"
	П010004003 = ДО("90.08");
	УстановитьЗначениеПоказателя("П000100222004", -П010004003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100222004", "Строка 2220 ""Управленческие расходы"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", П010004003, Счет("90.08"), , , , "ФормаОтчета");

	Итоги = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "91.01, 91.02", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, "68.02, 76.Н", , "Организация", мОргРасшифровка);
	РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();

	// Начальное обнуление
	П010006003_ПроцентыКПолучениюУплате = 0;
	П010006003_ПроцентыПоГосударственнымЦеннымБумагам = 0;
	П010006003_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 = 0;
	П010007003_ПроцентыКПолучениюУплате = 0;

	П010007003_ПроцентыНачисленныеПоСт269 = 0;

	П010008003_УчастиеВДругихОрганизациях = 0;
	П010008003_УчастиеВРоссийскихОрганизациях = 0;
	П010008003_УчастиеВИностранныхОрганизациях = 0;

	П010010003_УчастиеВДругихОрганизациях = 0;
	П010010003_УчастиеВРоссийскихОрганизациях = 0;
	П010010003_УчастиеВИностранныхОрганизациях = 0;

	П010009003_РеализацияОсновныхСредств = 0;
	П010010003_РеализацияОсновныхСредств = 0;

	П03_НДС_РеализацияОсновныхСредств = 0;

	П010009003_ЛиквидацияОсновныхСредств = 0;
	П010010003_ЛиквидацияОсновныхСредств = 0;

	П010009003_РеализацияНМА = 0;
	П010010003_РеализацияНМА = 0;

	П03_НДС_РеализацияНМА = 0;

	П010009003_РеализацияПрочегоИмущества = 0;
	П010010003_РеализацияПрочегоИмущества = 0;

	П03_НДС_РеализацияПрочегоИмущества = 0;

	П010009003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;
	П010010003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;

	П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;

	П010009003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;
	П010010003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;

	П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;

	П010009003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;
	П010010003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;

	П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;

	П010009003_РеализацияИмущественныхПравКромеПраваТребования = 0;
	П010010003_РеализацияИмущественныхПравКромеПраваТребования = 0;

	П03_НДС_РеализацияИмущественныхПравКромеПраваТребования = 0;

	П010009003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;
	П010010003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;

	П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;

	П010009003_РеализацияЦенныхБумаг = 0;
	П010010003_РеализацияЦенныхБумаг = 0;

	П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = 0;
	П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = 0;

	П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = 0;
	П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = 0;

	П010009003_СдачаИмуществаВАренду = 0;
	П010010003_СдачаИмуществаВАренду = 0;

	П03_НДС_СдачаИмуществаВАренду = 0;

	П010009003_РазницаСтоимостиЦенныхБумаг = 0;
	П010010003_РазницаСтоимостиЦенныхБумаг = 0;

	П010010003_РасходыНаУслугиБанков = 0;

	П010009003_ПрочиеОперационныеДоходыРасходы = 0;
	П010010003_ПрочиеОперационныеДоходыРасходы = 0;

	П03_НДС_ПрочиеОперационныеДоходыРасходы = 0;

	П010009003_ОтчисленияВОценочныеРезервы = 0;
	П010010003_ОтчисленияВОценочныеРезервы = 0;

	П010009003_ШтрафыПениНеустойкиКПолучениюУплате = 0;
	П010010003_ШтрафыПениНеустойкиКПолучениюУплате = 0;

	П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате = 0;

	П010009003_ПрибыльУбытокПрошлыхЛет = 0;
	П010010003_ПрибыльУбытокПрошлыхЛет = 0;
	
	П03_НДС_ПрибыльУбытокПрошлыхЛет = 0;
	
	П010009003_ВозмещениеУбытковКПолучениюУплате = 0;
	П010010003_ВозмещениеУбытковКПолучениюУплате = 0;

	П010009003_КурсовыеРазницы = 0;
	П010010003_КурсовыеРазницы = 0;

	П010009003_КурсовыеРазницыПоРасчетамВУЕ = 0;
	П010010003_КурсовыеРазницыПоРасчетамВУЕ = 0;

	П010010003_НалогиИСборы = 0;

	П010010003_ПремияПокупателю = 0;

	П010009003_СписаниеДебиторскойКредиторскойЗадолженности = 0;
	П010010003_СписаниеДебиторскойКредиторскойЗадолженности = 0;

	П010010003_НДСПоСписаннойКредиторскойЗадолженности = 0;

	П010009003_БезвозмездноеПолучениеИмущества = 0;
	П010010003_БезвозмездноеПолучениеИмущества = 0;

	П010010003_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд = 0;

	//П03_НДС_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд = 0;

	П010009003_ПрочиеВнереализационныеДоходыРасходы = 0;
	П010010003_ПрочиеВнереализационныеДоходыРасходы = 0;

	П03_НДС_ПрочиеВнереализационныеДоходыРасходы = 0;

	П010010003_РасходыОтСниженияСтоимостиАктивов = 0;

	П010010003_ПрочиеКосвенныеРасходы = 0;

	П03_НДС_ПрочиеКосвенныеРасходы = 0;
	
	П010009003_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии = 0;

	ВыборкаПоСубконто = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");

	// Обрабатываем субкотно "Прочие доходы и расходы".
	Пока ВыборкаПоСубконто.Следующий() Цикл

		ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;

		Если ВыбранноеСубконто.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;

		// Сразу получем все необходимые итоги
		Сумма91_1 = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("91.01"), ВыбранноеСубконто);
		Сумма91_2 = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("91.02"), ВыбранноеСубконто);

		НДС       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("68.02"));


		Если ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате Тогда

			// Проценты к получению
			П010006003_ПроцентыКПолучениюУплате = П010006003_ПроцентыКПолучениюУплате + Сумма91_1;

			// Проценты к уплате
			П010007003_ПроцентыКПолучениюУплате = П010007003_ПроцентыКПолучениюУплате + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам Тогда

			П010006003_ПроцентыПоГосударственнымЦеннымБумагам = П010006003_ПроцентыПоГосударственнымЦеннымБумагам  + Сумма91_1;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 Тогда

			П010006003_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 = П010006003_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0  + Сумма91_1;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269 Тогда

			П010007003_ПроцентыНачисленныеПоСт269 = П010007003_ПроцентыНачисленныеПоСт269 + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях Тогда

			П010008003_УчастиеВДругихОрганизациях = П010008003_УчастиеВДругихОрганизациях + Сумма91_1;
			П010010003_УчастиеВДругихОрганизациях = П010010003_УчастиеВДругихОрганизациях + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях Тогда

			П010008003_УчастиеВИностранныхОрганизациях = П010008003_УчастиеВИностранныхОрганизациях + Сумма91_1;
			П010010003_УчастиеВИностранныхОрганизациях = П010010003_УчастиеВИностранныхОрганизациях + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях Тогда

			П010008003_УчастиеВРоссийскихОрганизациях = П010008003_УчастиеВРоссийскихОрганизациях + Сумма91_1;
			П010010003_УчастиеВРоссийскихОрганизациях = П010010003_УчастиеВРоссийскихОрганизациях + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств Тогда

			П010009003_РеализацияОсновныхСредств = П010009003_РеализацияОсновныхСредств + Сумма91_1;
			П010010003_РеализацияОсновныхСредств = П010010003_РеализацияОсновныхСредств + Сумма91_2;

			П03_НДС_РеализацияОсновныхСредств = П03_НДС_РеализацияОсновныхСредств + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств Тогда

			П010009003_ЛиквидацияОсновныхСредств = П010009003_ЛиквидацияОсновныхСредств + Сумма91_1;
			П010010003_ЛиквидацияОсновныхСредств = П010010003_ЛиквидацияОсновныхСредств + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов Тогда

			П010009003_РеализацияНМА = П010009003_РеализацияНМА + Сумма91_1;
			П010010003_РеализацияНМА = П010010003_РеализацияНМА + Сумма91_2;

			П03_НДС_РеализацияНМА = П03_НДС_РеализацияНМА + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества Тогда

			П010009003_РеализацияПрочегоИмущества = П010009003_РеализацияПрочегоИмущества + Сумма91_1;
			П010010003_РеализацияПрочегоИмущества = П010010003_РеализацияПрочегоИмущества + Сумма91_2;

			П03_НДС_РеализацияПрочегоИмущества = П03_НДС_РеализацияПрочегоИмущества + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг Тогда

			П010009003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П010009003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + Сумма91_1;
			П010010003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П010010003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + Сумма91_2;

			П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа Тогда

			П010009003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П010009003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + Сумма91_1;
			П010010003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П010010003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + Сумма91_2;

			П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа Тогда

			П010009003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П010009003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + Сумма91_1;
			П010010003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П010010003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + Сумма91_2;

			П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования Тогда

			П010009003_РеализацияИмущественныхПравКромеПраваТребования = П010009003_РеализацияИмущественныхПравКромеПраваТребования + Сумма91_1;
			П010010003_РеализацияИмущественныхПравКромеПраваТребования = П010010003_РеализацияИмущественныхПравКромеПраваТребования + Сумма91_2;

			П03_НДС_РеализацияИмущественныхПравКромеПраваТребования = П03_НДС_РеализацияИмущественныхПравКромеПраваТребования + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств Тогда

			П010009003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П010009003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + Сумма91_1;
			П010010003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П010010003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + Сумма91_2;

			П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг Тогда

			П010009003_РеализацияЦенныхБумаг = П010009003_РеализацияЦенныхБумаг + Сумма91_1;
			П010010003_РеализацияЦенныхБумаг = П010010003_РеализацияЦенныхБумаг + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок Тогда

			П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок + Сумма91_1;
			П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР Тогда

			П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР + Сумма91_1;
			П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду Тогда

			П010009003_СдачаИмуществаВАренду = П010009003_СдачаИмуществаВАренду + Сумма91_1;
			П010010003_СдачаИмуществаВАренду = П010010003_СдачаИмуществаВАренду + Сумма91_2;

			П03_НДС_СдачаИмуществаВАренду = П03_НДС_СдачаИмуществаВАренду + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам Тогда

			П010009003_РазницаСтоимостиЦенныхБумаг = П010009003_РазницаСтоимостиЦенныхБумаг + Сумма91_1;
			П010010003_РазницаСтоимостиЦенныхБумаг = П010010003_РазницаСтоимостиЦенныхБумаг + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков Тогда

			П010010003_РасходыНаУслугиБанков = П010010003_РасходыНаУслугиБанков + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы Тогда

			П010009003_ПрочиеОперационныеДоходыРасходы = П010009003_ПрочиеОперационныеДоходыРасходы + Сумма91_1;
			П010010003_ПрочиеОперационныеДоходыРасходы = П010010003_ПрочиеОперационныеДоходыРасходы + Сумма91_2;

			П03_НДС_ПрочиеОперационныеДоходыРасходы = П03_НДС_ПрочиеОперационныеДоходыРасходы + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда

			П010009003_ШтрафыПениНеустойкиКПолучениюУплате = П010009003_ШтрафыПениНеустойкиКПолучениюУплате + Сумма91_1;
			П010010003_ШтрафыПениНеустойкиКПолучениюУплате = П010010003_ШтрафыПениНеустойкиКПолучениюУплате + Сумма91_2;

			П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате = П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет Тогда

			П010009003_ПрибыльУбытокПрошлыхЛет = П010009003_ПрибыльУбытокПрошлыхЛет + Сумма91_1;
			П010010003_ПрибыльУбытокПрошлыхЛет = П010010003_ПрибыльУбытокПрошлыхЛет + Сумма91_2;
			
			П03_НДС_ПрибыльУбытокПрошлыхЛет = П03_НДС_ПрибыльУбытокПрошлыхЛет + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате Тогда

			П010009003_ВозмещениеУбытковКПолучениюУплате = П010009003_ВозмещениеУбытковКПолучениюУплате + Сумма91_1;
			П010010003_ВозмещениеУбытковКПолучениюУплате = П010010003_ВозмещениеУбытковКПолучениюУплате + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда

			П010009003_КурсовыеРазницы = П010009003_КурсовыеРазницы + Сумма91_1;
			П010010003_КурсовыеРазницы = П010010003_КурсовыеРазницы + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ Тогда

			П010009003_КурсовыеРазницыПоРасчетамВУЕ = П010009003_КурсовыеРазницыПоРасчетамВУЕ + Сумма91_1;
			П010010003_КурсовыеРазницыПоРасчетамВУЕ = П010010003_КурсовыеРазницыПоРасчетамВУЕ + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы Тогда

			П010010003_НалогиИСборы = П010010003_НалогиИСборы  + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы Тогда

			П010009003_ОтчисленияВОценочныеРезервы = П010009003_ОтчисленияВОценочныеРезервы + Сумма91_1;
			П010010003_ОтчисленияВОценочныеРезервы = П010010003_ОтчисленияВОценочныеРезервы + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПремияПокупателю Тогда

			П010010003_ПремияПокупателю = П010010003_ПремияПокупателю  + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности Тогда

			П010009003_СписаниеДебиторскойКредиторскойЗадолженности = П010009003_СписаниеДебиторскойКредиторскойЗадолженности + Сумма91_1;
			П010010003_СписаниеДебиторскойКредиторскойЗадолженности = П010010003_СписаниеДебиторскойКредиторскойЗадолженности + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности Тогда

			П010010003_НДСПоСписаннойКредиторскойЗадолженности = П010010003_НДСПоСписаннойКредиторскойЗадолженности + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества Тогда

			П010009003_БезвозмездноеПолучениеИмущества = П010009003_БезвозмездноеПолучениеИмущества + Сумма91_1;
			П010010003_БезвозмездноеПолучениеИмущества = П010010003_БезвозмездноеПолучениеИмущества + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд Тогда

			П010010003_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд = П010010003_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд + Сумма91_2;

			//П03_НДС_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд = П03_НДС_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы Тогда

			П010009003_ПрочиеВнереализационныеДоходыРасходы = П010009003_ПрочиеВнереализационныеДоходыРасходы + Сумма91_1;
			П010010003_ПрочиеВнереализационныеДоходыРасходы = П010010003_ПрочиеВнереализационныеДоходыРасходы + Сумма91_2;

			П03_НДС_ПрочиеВнереализационныеДоходыРасходы = П03_НДС_ПрочиеВнереализационныеДоходыРасходы + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыОтСниженияСтоимостиАктивов Тогда

			П010010003_РасходыОтСниженияСтоимостиАктивов = П010010003_РасходыОтСниженияСтоимостиАктивов + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы Тогда

			П010010003_ПрочиеКосвенныеРасходы = П010010003_ПрочиеКосвенныеРасходы + Сумма91_2;

			П03_НДС_ПрочиеКосвенныеРасходы = П03_НДС_ПрочиеКосвенныеРасходы + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыСвязанныеСВосстановлениемАмортизационнойПремии Тогда

			П010009003_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии = П010009003_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии + Сумма91_1;

		КонецЕсли;

	КонецЦикла;

	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "99", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки, , , "Организация", мОргРасшифровка);
	РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();

	// Строка "Чрезвычайные доходы"
	П010009003_ЧрезвычайныеДоходыРасходы = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("99.01"), Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);

	// Строка "Чрезвычайные расходы"
	П010010003_ЧрезвычайныеДоходыРасходы = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("99.01"), Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);

	// строка 2310 "Доходы от участия в других организациях"
	П010008003 = П010008003_УчастиеВДругихОрганизациях + П010008003_УчастиеВИностранныхОрганизациях + П010008003_УчастиеВРоссийскихОрганизациях;
	
	УстановитьЗначениеПоказателя("П000100231004", П010008003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100231004", "Строка 2310 ""Доходы от участия в других организациях"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с участием в других организациях""/", П010008003_УчастиеВДругихОрганизациях, , , , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100231004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в иностранных организациях""/", П010008003_УчастиеВИностранныхОрганизациях);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100231004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в российских организациях""/", П010008003_УчастиеВРоссийскихОрганизациях);

	// строка 2320 "Проценты к получению"
	П010006003 = П010006003_ПроцентыКПолучениюУплате + П010006003_ПроцентыПоГосударственнымЦеннымБумагам + П010006003_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0;
	УстановитьЗначениеПоказателя("П000100232004", П010006003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100232004", "Строка 2320 ""Проценты к получению"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты к получению (уплате)""/",  П010006003_ПроцентыКПолучениюУплате, , , , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100232004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты по государственным ценным бумагам""/", П010006003_ПроцентыПоГосударственнымЦеннымБумагам);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100232004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты по государственным ценным бумагам по ставке 0%""/", П010006003_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0);

	// строка 2330 "Проценты к уплате"
	П010007003 = П010007003_ПроцентыКПолучениюУплате
	           + П010007003_ПроцентыНачисленныеПоСт269;
	УстановитьЗначениеПоказателя("П000100233004", -П010007003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100233004", "Строка 2330 ""Проценты к уплате"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты к получению (уплате)""/ ", П010007003_ПроцентыКПолучениюУплате, , , , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100233004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты, начисленные в соответствии со статьей 269""/ ", П010007003_ПроцентыНачисленныеПоСт269);

	// строка 2340 "Прочие доходы"
	
	// Счета для расчета оборотов по видам прочих доходов и расходов
	СчетаОборотов = Новый Массив();
	СчетаОборотов.Добавить(Счет("91.01"));
	СчетаОборотов.Добавить(Счет("91.02"));
	
	СчетаОборотовКор = Новый Массив();
	СчетаОборотовКор.Добавить(Счет("01")); // счета 01, 02, 03, 04, 05 необходимы для расчета доходов и расходов, связанных с переоценкой внеоборотных активов
	СчетаОборотовКор.Добавить(Счет("02"));
	СчетаОборотовКор.Добавить(Счет("03"));
	СчетаОборотовКор.Добавить(Счет("04"));
	СчетаОборотовКор.Добавить(Счет("05"));
	
	// Обороты по видам прочих доходов и расходов за отчетный период
	КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , СчетаОборотов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, СчетаОборотовКор, , "Организация", мОргРасшифровка);
	ОстаткиИОбороты = мБухИтогиРС.ПолучитьОстаткиИОбороты();

	ВыборкаПоСубконто = ОстаткиИОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	
	Пока ВыборкаПоСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;
		Если ЗначениеЗаполнено(ВыбранноеСубконто.ВидПрочихДоходовИРасходов) Тогда
			ИндексВидаПДР = Перечисления.ВидыПрочихДоходовИРасходов.Индекс(ВыбранноеСубконто.ВидПрочихДоходовИРасходов);
			ИмяВидаПДР = Метаданные.Перечисления.ВидыПрочихДоходовИРасходов.ЗначенияПеречисления[ИндексВидаПДР].Имя;
			
			// расчет показателей доходов и расходов, связанных с переоценкой внеоборотных активов
			Если ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов Тогда
				ДО_91_02__01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("01"));
				ДО_91_02__02 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("02"));
				ДО_91_02__03 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("03"));
				ДО_91_02__04 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("04"));
				ДО_91_02__05 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("05"));
				
				КО_91_01__01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("01"));
				КО_91_01__02 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("02"));
				КО_91_01__03 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("03"));
				КО_91_01__04 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("04"));
				КО_91_01__05 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("05"));
				
				КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + КО_91_01__01 + КО_91_01__03 + КО_91_01__04;
				КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов   = КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + КО_91_01__02 + КО_91_01__05;
				ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + ДО_91_02__01 + ДО_91_02__03 + ДО_91_02__04;
				ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов   = ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + ДО_91_02__02 + ДО_91_02__05;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	П010009003 = П010009003_РеализацияОсновныхСредств                                     - П03_НДС_РеализацияОсновныхСредств
	           + П010009003_ЛиквидацияОсновныхСредств
	           + П010009003_РеализацияНМА                                                 - П03_НДС_РеализацияНМА
	           + П010009003_РеализацияПрочегоИмущества                                    - П03_НДС_РеализацияПрочегоИмущества
	           + П010009003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг           - П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг
	           + П010009003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа            - П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа
	           + П010009003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа         - П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа
	           + П010009003_РеализацияИмущественныхПравКромеПраваТребования               - П03_НДС_РеализацияИмущественныхПравКромеПраваТребования
	           + П010009003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств - П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств
	           + П010009003_РеализацияЦенныхБумаг
	           + П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок
	           + П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР
	           + П010009003_СдачаИмуществаВАренду                                         - П03_НДС_СдачаИмуществаВАренду
	           + П010009003_ОтчисленияВОценочныеРезервы
	           + П010009003_РазницаСтоимостиЦенныхБумаг
	           + П010009003_ПрочиеОперационныеДоходыРасходы                               - П03_НДС_ПрочиеОперационныеДоходыРасходы

	// бывшая строка 120 "Внереализационные доходы"
	           + П010009003_ШтрафыПениНеустойкиКПолучениюУплате                           - П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате
	           + П010009003_ПрибыльУбытокПрошлыхЛет                                       - П03_НДС_ПрибыльУбытокПрошлыхЛет
	           + П010009003_ВозмещениеУбытковКПолучениюУплате
	           + П010009003_КурсовыеРазницы
	           + П010009003_КурсовыеРазницыПоРасчетамВУЕ
	           + П010009003_СписаниеДебиторскойКредиторскойЗадолженности
	           + П010009003_БезвозмездноеПолучениеИмущества
	           + П010009003_ПрочиеВнереализационныеДоходыРасходы                          - П03_НДС_ПрочиеВнереализационныеДоходыРасходы
	           + П010009003_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии

	// Чрезвычайные доходы
	           + П010009003_ЧрезвычайныеДоходыРасходы
			   
	// Доходы, связанные с переоценкой внеоборотных активов
			   + КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов 
			   - ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;

	УстановитьЗначениеПоказателя("П000100234004", П010009003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "Строка 2340 ""Прочие доходы"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией основных средств""/", П010009003_РеализацияОсновныхСредств, , , , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией основных средств""/ в корреспонденции со счетом 68.02", -П03_НДС_РеализацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с ликвидацией основных средств""/", П010009003_ЛиквидацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией нематериальных активов""/", П010009003_РеализацияНМА);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией нематериальных активов""/ в корреспонденции со счетом 68.02", -П03_НДС_РеализацияНМА);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией прочего имущества""/", П010009003_РеализацияПрочегоИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией прочего имущества""/ в корреспонденции со счетом 68.02", -П03_НДС_РеализацияПрочегоИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования как оказания финансовых услуг""/", П010009003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования как оказания финансовых услуг""/ в корреспонденции со счетом 68.02", -П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования до наступления срока платежа""/", П010009003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования до наступления срока платежа""/ в корреспонденции со счетом 68.02", -П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования после наступления срока платежа""/", П010009003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования после наступления срока платежа""/ в корреспонденции со счетом 68.02", -П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав, кроме права требования""/", П010009003_РеализацияИмущественныхПравКромеПраваТребования);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав, кроме права требования""/ в корреспонденции со счетом 68.02", -П03_НДС_РеализацияИмущественныхПравКромеПраваТребования);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств""/", П010009003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств""/ в корреспонденции со счетом 68.02", -П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией ценных бумаг""/", П010009003_РеализацияЦенныхБумаг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы) по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке""/", П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы) по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке""/", П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные со сдачей имущества в аренду (субаренду)""/", П010009003_СдачаИмуществаВАренду);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные со сдачей имущества в аренду (субаренду)""/ в корреспонденции со счетом 68.02", -П03_НДС_СдачаИмуществаВАренду);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Отчисления в оценочные резервы""/", П010009003_ОтчисленияВОценочныеРезервы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам""/", П010009003_РазницаСтоимостиЦенныхБумаг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/", П010009003_ПрочиеОперационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/ в корреспонденции со счетом 68.02", -П03_НДС_ПрочиеОперационныеДоходыРасходы);

	// бывшая строка 120 "Внереализационные доходы"
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/", П010009003_ШтрафыПениНеустойкиКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/ в корреспонденции со счетом 68.02", -П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/", П010009003_ПрибыльУбытокПрошлыхЛет);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/ в корреспонденции со счетом 68.02", -П03_НДС_ПрибыльУбытокПрошлыхЛет);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Возмещение убытков к получению (уплате)""/", П010009003_ВозмещениеУбытковКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы""/", П010009003_КурсовыеРазницы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы по расчетам в у.е.""/", П010009003_КурсовыеРазницыПоРасчетамВУЕ);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Списание дебиторской (кредиторской) задолженности""/", П010009003_СписаниеДебиторскойКредиторскойЗадолженности);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с безвозмездным получением имущества, работ, услуг или имущественных прав""/", П010009003_БезвозмездноеПолучениеИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/", П010009003_ПрочиеВнереализационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/ в корреспонденции со счетом 68.02", -П03_НДС_ПрочиеВнереализационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы, связанные с восстановлением амортизационной премии""/", П010009003_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии);

	// Чрезвычайные доходы
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "!КО", П010009003_ЧрезвычайныеДоходыРасходы, Счет("99.01"),,,,,,,, Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);
	
	// Доходы, связанные с переоценкой внеоборотных активов
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 01, 03, 04", КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов,  Счет("91.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 02, 05", -ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.02"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");

	// строка 2350 "Прочие расходы"
	П010010003 = П010010003_УчастиеВДругихОрганизациях
	           + П010010003_УчастиеВРоссийскихОрганизациях
	           + П010010003_УчастиеВИностранныхОрганизациях
	           + П010010003_РеализацияОсновныхСредств                                     - П03_НДС_РеализацияОсновныхСредств
	           + П010010003_ЛиквидацияОсновныхСредств
	           + П010010003_РеализацияНМА                                                 - П03_НДС_РеализацияНМА
	           + П010010003_РеализацияПрочегоИмущества                                    - П03_НДС_РеализацияПрочегоИмущества
	           + П010010003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг           - П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг
	           + П010010003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа            - П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа
	           + П010010003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа         - П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа
	           + П010010003_РеализацияИмущественныхПравКромеПраваТребования               - П03_НДС_РеализацияИмущественныхПравКромеПраваТребования
	           + П010010003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств - П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств
	           + П010010003_РеализацияЦенныхБумаг
	           + П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок
	           + П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР
	           + П010010003_СдачаИмуществаВАренду                                         - П03_НДС_СдачаИмуществаВАренду
	           + П010010003_ОтчисленияВОценочныеРезервы
	           + П010010003_РазницаСтоимостиЦенныхБумаг
	           + П010010003_РасходыНаУслугиБанков
	           + П010010003_ПрочиеОперационныеДоходыРасходы                               - П03_НДС_ПрочиеОперационныеДоходыРасходы

	// бывшая строка 130 "Внереализационные расходы"
	           + П010010003_ШтрафыПениНеустойкиКПолучениюУплате                           - П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате
	           + П010010003_ПрибыльУбытокПрошлыхЛет                                       - П03_НДС_ПрибыльУбытокПрошлыхЛет
	           + П010010003_ВозмещениеУбытковКПолучениюУплате
	           + П010010003_КурсовыеРазницы
	           + П010010003_КурсовыеРазницыПоРасчетамВУЕ
	           + П010010003_НалогиИСборы
	           + П010010003_ПремияПокупателю
	           + П010010003_СписаниеДебиторскойКредиторскойЗадолженности
	           + П010010003_НДСПоСписаннойКредиторскойЗадолженности
	           + П010010003_БезвозмездноеПолучениеИмущества
	           + П010010003_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд
	           + П010010003_ПрочиеВнереализационныеДоходыРасходы                          - П03_НДС_ПрочиеВнереализационныеДоходыРасходы
	           + П010010003_РасходыОтСниженияСтоимостиАктивов
	           + П010010003_ПрочиеКосвенныеРасходы                                        - П03_НДС_ПрочиеКосвенныеРасходы

	// Чрезвычайные расходы 
	           + П010010003_ЧрезвычайныеДоходыРасходы

	// Расходы, связанные с переоценкой внеоборотных активов
			   + ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов 
			   - КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;

	УстановитьЗначениеПоказателя("П000100235004", -П010010003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "Строка 2350 ""Прочие расходы"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с участием в других организациях""/", П010010003_УчастиеВДругихОрганизациях, , , , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в российских организациях""/", П010010003_УчастиеВРоссийскихОрганизациях);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в иностранных организациях""/", П010010003_УчастиеВИностранныхОрганизациях);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией основных средств""/", П010010003_РеализацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией основных средств""/ в корреспонденции со счетом 68.02 ", -П03_НДС_РеализацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с ликвидацией основных средств""/", П010010003_ЛиквидацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией нематериальных активов""/", П010010003_РеализацияНМА);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией нематериальных активов""/ в корреспонденции со счетом 68.02 ", -П03_НДС_РеализацияНМА);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией прочего имущества""/", П010010003_РеализацияПрочегоИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией прочего имущества""/ в корреспонденции со счетом 68.02 ", -П03_НДС_РеализацияПрочегоИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования как оказания финансовых услуг""/", П010010003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования как оказания финансовых услуг""/ в корреспонденции со счетом 68.02 ", -П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования до наступления срока платежа""/", П010010003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования до наступления срока платежа""/ в корреспонденции со счетом 68.02 ", -П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования после наступления срока платежа""/", П010010003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования после наступления срока платежа""/ в корреспонденции со счетом 68.02 ", -П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав, кроме права требования""/", П010010003_РеализацияИмущественныхПравКромеПраваТребования);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав, кроме права требования""/ в корреспонденции со счетом 68.02 ", -П03_НДС_РеализацияИмущественныхПравКромеПраваТребования);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств""/", П010010003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств""/ в корреспонденции со счетом 68.02 ", -П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией ценных бумаг""/", П010010003_РеализацияЦенныхБумаг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы) по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке""/", П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы) по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке""/", П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные со сдачей имущества в аренду (субаренду)""/", П010010003_СдачаИмуществаВАренду);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные со сдачей имущества в аренду (субаренду)""/ в корреспонденции со счетом 68.02 ", -П03_НДС_СдачаИмуществаВАренду);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Отчисления в оценочные резервы""/", П010010003_ОтчисленияВОценочныеРезервы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам""/", П010010003_РазницаСтоимостиЦенныхБумаг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Расходы на услуги банков""/", П010010003_РасходыНаУслугиБанков);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/", П010010003_ПрочиеОперационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/ в корреспонденции со счетом 68.02 ", -П03_НДС_ПрочиеОперационныеДоходыРасходы);

	// бывшая строка 130 "Внереализационные расходы"
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/", П010010003_ШтрафыПениНеустойкиКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/ в корреспонденции со счетом 68.02", -П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/", П010010003_ПрибыльУбытокПрошлыхЛет);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/ в корреспонденции со счетом 68.02", -П03_НДС_ПрибыльУбытокПрошлыхЛет);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Возмещение убытков к получению (уплате)""/", П010010003_ВозмещениеУбытковКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы""/", П010010003_КурсовыеРазницы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы по расчетам в у.е.""/", П010010003_КурсовыеРазницыПоРасчетамВУЕ);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Налоги и сборы""/", П010010003_НалогиИСборы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Премия, выплаченная покупателю""/", П010010003_ПремияПокупателю);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Списание дебиторской (кредиторской) задолженности""/", П010010003_СписаниеДебиторскойКредиторскойЗадолженности);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""НДС по списанной кредиторской задолженности""/", П010010003_НДСПоСписаннойКредиторскойЗадолженности);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с безвозмездным получением имущества, работ, услуг или имущественных прав""/", П010010003_БезвозмездноеПолучениеИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд""/", П010010003_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/", П010010003_ПрочиеВнереализационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/ в корреспонденции со счетом 68.02", -П03_НДС_ПрочиеВнереализационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Расходы от снижения стоимости активов""/", П010010003_РасходыОтСниженияСтоимостиАктивов);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие косвенные расходы""/", П010010003_ПрочиеКосвенныеРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие косвенные расходы""/ в корреспонденции со счетом 68.02", -П03_НДС_ПрочиеКосвенныеРасходы);
	
	// Чрезвычайные расходы
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "!ДО", П010010003_ЧрезвычайныеДоходыРасходы, Счет("99.01"),,,,,,,, Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);

	// Расходы, связанные с переоценкой внеоборотных активов
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 01, 03, 04", ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов,  Счет("91.02"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 02, 05", -КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
	
	// строка 2410 "Текущий налог на прибыль"
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "68.04", , , , "Организация", мОргРасшифровка);

	П010015003_68_4_2__68_4_1 = ОБ("68.04.2", "68.04.1");
	П010015003_68_4_1__68_4_2 = ОБ("68.04.1", "68.04.2");

	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет, КорСубконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "99", , "68.04.1", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "Организация", мОргРасшифровка);

	П010015003_99_1_1__68_4_1 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет, КорСубконто1" , Счет("99.01.1"), Счет("68.04.1"), Перечисления.ВидыПлатежейВГосБюджет.Налог);

	П010015003 = П010015003_68_4_2__68_4_1 - П010015003_68_4_1__68_4_2 
	           + П010015003_99_1_1__68_4_1;

	УстановитьЗначениеПоказателя("П000100241004", -П010015003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100241004", "Строка 2410 ""Текущий налог на прибыль"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ОБ", П010015003_68_4_2__68_4_1, Счет("68.04.2"), Счет("68.04.1"), , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100241004", "", "-", "!ОБ", -П010015003_68_4_1__68_4_2, Счет("68.04.1"), Счет("68.04.2"));
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100241004", "", "+", "Оборот с кредита счета 68.04.1 /субконто ""Налог (взносы): начислено / уплачено""/ в дебет счета 99.01.1",  П010015003_99_1_1__68_4_1, Счет("99.01.1"), Счет("68.04.1"));

	// строка 2421 "в т.ч. постоянные налоговые обязательства (активы)"
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "99.02.3", , "68.04", , "Организация", мОргРасшифровка);

	П010020003_99_2_3__68_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("99.02.3"), Счет("68.04"));
	П010020003_68_4__99_2_3 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("99.02.3"), Счет("68.04"));

	П010020003 = П010020003_99_2_3__68_4 - П010020003_68_4__99_2_3;
	УстановитьЗначениеПоказателя("П000100242104", -П010020003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100242104", "Строка 2421 ""в т. ч. постоянные налоговые обязательства (активы)"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ОБ", П010020003_99_2_3__68_4, Счет("99.02.3"), Счет("68.04"), , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100242104", "", "-", "!ОБ", -П010020003_68_4__99_2_3, Счет("68.04"), Счет("99.02.3"));

	// строка 2430 "Изменение отложенных налоговых обязательств" 
	// В форме №2 необходимо учесть возможную переоценку отложенных налоговых
	// активов и отложенных налоговых обязательств, проведенную в связи с
	// изменением ставки налога на прибыль. Проводки, отражающие результаты
	// переоценки, не должны влиять на финансовые результаты отчетного периода.
	// Для учета результатов переоценки корректируем обороты счета 77 на обороты
	// - в корреспонденции со счетоми 99 (99.02.4) - для учета периодов 2011 г и позже.
	
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "77", , , , "Организация", мОргРасшифровка);

	ОБ_77__99_2_4 = 0;
	ОБ_99_2_4__77 = 0;

	Если ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда

		ОБ_77__99_2_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("77"), Счет("99.02.4"));
		ОБ_99_2_4__77 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("77"), Счет("99.02.4"));

	КонецЕсли;
	
	ОБ77__68_4_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("77"), Счет("68.04.2"));
	ОБ68_4_2__77 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("77"), Счет("68.04.2"));

	П010014203 = ОБ68_4_2__77 - ОБ77__68_4_2 - ОБ_99_2_4__77 + ОБ_77__99_2_4;

	УстановитьЗначениеПоказателя("П000100243004", -П010014203);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243004", "Строка 2430 ""Изменение отложенных налоговых обязательств"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!КО", ОБ68_4_2__77, Счет("77"), Счет("68.04.2"), , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243004", "", "-", "!ДО", -ОБ77__68_4_2, Счет("77"), Счет("68.04.2"));

	Если ((ОБ_77__99_2_4 <> 0) ИЛИ (ОБ_99_2_4__77 <> 0)) Тогда

		// Корректировку оборотов  счета 77 в расшифровку добавляем только тогда, 
		// когда такая корректировка существует
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243004", "", "-", "!ОБ", -ОБ_99_2_4__77, Счет("99.02.4"),     Счет("77"));
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243004", "", "+", "!ОБ",  ОБ_77__99_2_4,     Счет("77"), Счет("99.02.4"));

	КонецЕсли;

	// строка 2450 "Изменение отложенных налоговых активов"
	// В форме №2 необходимо учесть возможную переоценку отложенных налоговых
	// активов и отложенных налоговых обязательств, проведенную в связи с
	// изменением ставки налога на прибыль. Проводки, отражающие результаты
	// переоценки, не должны влиять на финансовые результаты отчетного периода.
	// Для учета результатов переоценки корректируем обороты счета 09 на обороты: 
	// - в корреспонденции со счетоми 99 (99.02.4) - для учета периодов 2011 г и позже.

	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "09", , , , "Организация", мОргРасшифровка);

	ОБ_09__99_2_4 = 0;
	ОБ_99_2_4__09 = 0;

	Если ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда
		ОБ_09__99_2_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("09"), Счет("99.02.4"));
		ОБ_99_2_4__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("09"), Счет("99.02.4"));
	КонецЕсли;

	ОБ09__68_4_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("09"), Счет("68.04.2"));
	ОБ68_4_2__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("09"), Счет("68.04.2"));

	П010014103 = ОБ09__68_4_2 - ОБ68_4_2__09 - ОБ_09__99_2_4 + ОБ_99_2_4__09;

	УстановитьЗначениеПоказателя("П000100245004", П010014103);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245004", "Строка 2450 ""Изменение отложенных налоговых активов"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ОБ", ОБ09__68_4_2, Счет("09"), Счет("68.04.2"), , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245004", "", "-", "!ОБ", -ОБ68_4_2__09, Счет("68.04.2"), Счет("09"), , , "ФормаОтчета");

	Если ((ОБ_09__99_2_4 <> 0) ИЛИ (ОБ_99_2_4__09 <> 0)) Тогда

		// Корректировку оборотов счета 09 в расшифровку добавляем только тогда, 
		// когда такая корректировка существует
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245004", "", "-", "!ОБ", -ОБ_09__99_2_4,     Счет("09"), Счет("99.02.4"));
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245004", "", "+", "!ОБ",  ОБ_99_2_4__09, Счет("99.02.4"),     Счет("09"));

	КонецЕсли;

	// строка 2460 "Прочее"

	// Если ПБУ 18 не применяется, должна выводится строка "Налог на прибыль 
	// и иные аналогичные обязательные платежи", как в "старой" форме №2
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "99", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки, , , "Организация", мОргРасшифровка);

	П010018003_99_1_НалогНаПрибыль   = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("99.01"), Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
	П010018003_99_1_НалоговыеСанкции = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("99.01"), Перечисления.ПрибылиИУбытки.НалоговыеСанкции);

	П010018003_99_2_4_Д = 0;
	П010018003_99_2_4_К = 0;

	Если ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда
		П010018003_99_2_4_Д = ОБ_99_2_4__09;
		П010018003_99_2_4_К = ОБ_77__99_2_4;
	КонецЕсли;

	Если ПрименениеЕНВД Тогда
		ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , Счет("99.01.2"), , , , "Организация", мОргРасшифровка);
		ОБ_99_01_2__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("99.01.2"), Счет("09"));
		ОБ_77__99_01_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("99.01.2"), Счет("77"));
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда
		ОБ_09__99_2_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("09"), Счет("99.02.4"));
		ОБ_99_2_4__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("09"), Счет("99.02.4"));
	КонецЕсли;
		
	П010018003_99_9_Д = 0;
	П010018003_99_9_К = 0;

	Если ЗначениеЗаполнено(мСчет["99.09"]) Тогда
		П010018003_99_9_Д = ДО("99.09");
		П010018003_99_9_К = КО("99.09");
	КонецЕсли;

	П010018003 = П010018003_99_1_НалогНаПрибыль
	           - П010015003_99_1_1__68_4_1 // сумма текущего налога на прибыль из строки 2410
	           + П010018003_99_1_НалоговыеСанкции
	           + П010018003_99_2_4_Д - П010018003_99_2_4_К
	           + П010018003_99_9_Д   - П010018003_99_9_К;

	Если ПрименениеЕНВД Тогда
		П010018003 = П010018003 + ОБ_99_01_2__09 - ОБ_77__99_01_2;
	КонецЕсли;
			   
	УстановитьЗначениеПоказателя("П000100246004", -П010018003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "Строка 2460 ""Прочее"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "Оборот по дебету счета 99.01 /субконто ""Налог на прибыль и аналогичные платежи""/", П010018003_99_1_НалогНаПрибыль, Счет("99.01"), , , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "", "-", "Оборот с кредита счета 68.04.1 /субконто ""Налог (взносы): начислено / уплачено""/ в дебет счета 99.01.1", -П010015003_99_1_1__68_4_1, Счет("99.01.1"), Счет("68.04.1"));
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "", "+", "Оборот по дебету счета 99.01 /субконто ""Причитающиеся налоговые санкции""/", П010018003_99_1_НалоговыеСанкции, Счет("99.01"), , , , "ФормаОтчета");

	Если ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "", "+", "!ДО",  П010018003_99_2_4_Д, Счет("99.02.4"), Счет("09"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "", "-", "!КО", -П010018003_99_2_4_К, Счет("99.02.4"), Счет("77"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	Если ЗначениеЗаполнено(мСчет["99.09"]) Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "", "+", "!ДО",  П010018003_99_9_Д, Счет("99.09"), , , , "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "", "-", "!КО", -П010018003_99_9_К, Счет("99.09"), , , , "ФормаОтчета");
	КонецЕсли;

	Если ПрименениеЕНВД Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "", "+", "!ДО",  ОБ_99_01_2__09, Счет("99.01.2"), Счет("09"), , , "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "", "-", "!КО", -ОБ_77__99_01_2, Счет("99.01.2"), Счет("77"), , , "ФормаОтчета");
	КонецЕсли;
	
	// строка 2510 "Результат от переоценки внеоборотных активов, не включаемый в чистую прибыль убыток) периода"
	// порядок расчета изменен и реализован в поцедуре ЗаполнитьАвтоФормаОтчетаОбщие()
	//П0100251004_83_01     = КО("83.01");
	//П0100251004_01__83_01 = ОБ("01", "83.01");
	//П0100251004_04__83_01 = ОБ("04", "83.01");

	//П0100251004 = П0100251004_83_01 - П0100251004_01__83_01 - П0100251004_04__83_01;

	//УстановитьЗначениеПоказателя("П000100251004", П0100251004);

	//РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100251004", "Строка 2510 ""Результат от переоценки внеоборотных активов, не включаемый в чистую прибыль убыток) периода"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "Оборот по кредиту счета 83.01", П0100251004_83_01, Счет("83.01"), , , , "ФормаОтчета");
	//РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100251004", "", "-", "Оборот с кредита счета 83.01 в дебет счета 01", -П0100251004_01__83_01, Счет("01"), Счет("83.01"));
	//РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100251004", "", "-", "Оборот с кредита счета 83.01 в дебет счета 04", -П0100251004_04__83_01, Счет("04"), Счет("83.01"));
	
	Если ЗаполнятьГодПредыдущий Тогда
	//////////////////////////////////////////////////////
	// Заполняем форму 2 данными на конец предыдущего года
	мДатаНачалаПериодаПрошлогоГода = ДобавитьМесяц( мДатаНачалаПериодаОтчета, -12 );
	мДатаКонцаПериодаПрошлогоГода = ДобавитьМесяц( мДатаКонцаПериодаОтчета, -12 );

	// Бухгалтерские итоги по счетам, без аналитики
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт,
			|ОборотДт, ОборотКт,
			|КорОборотДт, КорОборотКт,
			|КонечныйОстатокДт, КонечныйОстатокКт";
	мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , , , , , "Организация", мОргРасшифровка);

	// строка 2110 "Выручка"
	П010001004_90_1 = КО("90.01");
	
	П010001004_90_3 = ДО("90.03");
	П010001004_90_4 = ДО("90.04");
	П010001004_90_5 = ДО("90.05");
	
	П010001004 = П010001004_90_1
	           - П010001004_90_3
	           - П010001004_90_4
	           - П010001004_90_5;

	УстановитьЗначениеПоказателя("П000100211005", П010001004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100211005", "Строка 2110 ""Выручка"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!КО", П010001004_90_1, Счет("90.01"), , 1, , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100211005", "", "-", "!ДО", -П010001004_90_3, Счет("90.03"));
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100211005", "", "-", "!ДО", -П010001004_90_4, Счет("90.04"));
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100211005", "", "-", "!ДО", -П010001004_90_5, Счет("90.05"));

	// строка 2120 "Себестоимость продаж"
	П010002004 = ДО("90.02");
	УстановитьЗначениеПоказателя("П000100212005", -П010002004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100212005", "Строка 2120 ""Себестоимость продаж"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", П010002004, Счет("90.02"), , 1, , "ФормаОтчета");

	// строка 2210 "Коммерческие расходы"
	П010003004 = ДО("90.07");
	УстановитьЗначениеПоказателя("П000100221005", -П010003004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100221005", "Строка 2210 ""Коммерческие расходы"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", П010003004, Счет("90.07"), , 1, , "ФормаОтчета");

	// строка 2220 "Управленческие расходы"
	П010004004 = ДО("90.08");
	УстановитьЗначениеПоказателя("П000100222005", -П010004004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100222005", "Строка 2220 ""Управленческие расходы"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", П010004004, Счет("90.08"), , 1, , "ФормаОтчета");

	Итоги = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "91.01, 91.02", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, "68.02, 76.Н", , "Организация", мОргРасшифровка);
	РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();

	// Начальное обнуление
	П010006004_ПроцентыКПолучениюУплате = 0;
	П010006004_ПроцентыПоГосударственнымЦеннымБумагам = 0;
	П010006004_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 = 0;
	П010007004_ПроцентыКПолучениюУплате = 0;

	П010007004_ПроцентыНачисленныеПоСт269 = 0;

	П010008004_УчастиеВДругихОрганизациях = 0;
	П010008004_УчастиеВРоссийскихОрганизациях = 0;
	П010008004_УчастиеВИностранныхОрганизациях = 0;

	П010010004_УчастиеВДругихОрганизациях = 0;
	П010010004_УчастиеВРоссийскихОрганизациях = 0;
	П010010004_УчастиеВИностранныхОрганизациях = 0;

	П010009004_РеализацияОсновныхСредств = 0;
	П010010004_РеализацияОсновныхСредств = 0;

	П04_НДС_РеализацияОсновныхСредств = 0;

	П010009004_ЛиквидацияОсновныхСредств = 0;
	П010010004_ЛиквидацияОсновныхСредств = 0;
	
	П010009004_РеализацияНМА = 0;
	П010010004_РеализацияНМА = 0;

	П04_НДС_РеализацияНМА = 0;

	П010009004_РеализацияПрочегоИмущества = 0;
	П010010004_РеализацияПрочегоИмущества = 0;

	П04_НДС_РеализацияПрочегоИмущества = 0;

	П010009004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;
	П010010004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;

	П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;

	П010009004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;
	П010010004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;

	П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;

	П010009004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;
	П010010004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;

	П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;

	П010009004_РеализацияИмущественныхПравКромеПраваТребования = 0;
	П010010004_РеализацияИмущественныхПравКромеПраваТребования = 0;

	П04_НДС_РеализацияИмущественныхПравКромеПраваТребования = 0;

	П010009004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;
	П010010004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;

	П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;

	П010009004_РеализацияЦенныхБумаг = 0;
	П010010004_РеализацияЦенныхБумаг = 0;

	П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = 0;
	П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = 0;

	П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = 0;
	П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = 0;

	П010009004_СдачаИмуществаВАренду = 0;
	П010010004_СдачаИмуществаВАренду = 0;

	П04_НДС_СдачаИмуществаВАренду = 0;

	П010009004_РазницаСтоимостиЦенныхБумаг = 0;
	П010010004_РазницаСтоимостиЦенныхБумаг = 0;

	П010010004_РасходыНаУслугиБанков = 0;

	П010009004_ПрочиеОперационныеДоходыРасходы = 0;
	П010010004_ПрочиеОперационныеДоходыРасходы = 0;

	П04_НДС_ПрочиеОперационныеДоходыРасходы = 0;

	П010009004_ОтчисленияВОценочныеРезервы = 0;
	П010010004_ОтчисленияВОценочныеРезервы = 0;
	
	П010009004_ШтрафыПениНеустойкиКПолучениюУплате = 0;
	П010010004_ШтрафыПениНеустойкиКПолучениюУплате = 0;

	П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате = 0;

	П010009004_ПрибыльУбытокПрошлыхЛет = 0;
	П010010004_ПрибыльУбытокПрошлыхЛет = 0;
	
	П04_НДС_ПрибыльУбытокПрошлыхЛет = 0;
	
	П010009004_ВозмещениеУбытковКПолучениюУплате = 0;
	П010010004_ВозмещениеУбытковКПолучениюУплате = 0;

	П010009004_КурсовыеРазницы = 0;
	П010010004_КурсовыеРазницы = 0;

	П010009004_КурсовыеРазницыПоРасчетамВУЕ = 0;
	П010010004_КурсовыеРазницыПоРасчетамВУЕ = 0;

	П010010004_НалогиИСборы = 0;

	П010010004_ПремияПокупателю = 0;

	П010009004_СписаниеДебиторскойКредиторскойЗадолженности = 0;
	П010010004_СписаниеДебиторскойКредиторскойЗадолженности = 0;

	П010010004_НДСПоСписаннойКредиторскойЗадолженности = 0;

	П010009004_БезвозмездноеПолучениеИмущества = 0;
	П010010004_БезвозмездноеПолучениеИмущества = 0;

	П010010004_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд = 0;

	//П04_НДС_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд = 0;

	П010009004_ПрочиеВнереализационныеДоходыРасходы = 0;
	П010010004_ПрочиеВнереализационныеДоходыРасходы = 0;

	П04_НДС_ПрочиеВнереализационныеДоходыРасходы = 0;

	П010010004_РасходыОтСниженияСтоимостиАктивов = 0;

	П010010004_ПрочиеКосвенныеРасходы = 0;

	П04_НДС_ПрочиеКосвенныеРасходы = 0;

	П010009004_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии = 0;

	ВыборкаПоСубконто = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");

	// Обрабатываем субкотно "Прочие доходы и расходы".
	Пока ВыборкаПоСубконто.Следующий() Цикл

		ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;

		Если ВыбранноеСубконто.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;

		// Сразу получем все необходимые итоги
		Сумма91_1 = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("91.01"), ВыбранноеСубконто);
		Сумма91_2 = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("91.02"), ВыбранноеСубконто);

		НДС       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("68.02"));


		Если ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате Тогда

			// Проценты к получению
			П010006004_ПроцентыКПолучениюУплате = П010006004_ПроцентыКПолучениюУплате + Сумма91_1;

			// Проценты к уплате
			П010007004_ПроцентыКПолучениюУплате = П010007004_ПроцентыКПолучениюУплате + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам Тогда

			П010006004_ПроцентыПоГосударственнымЦеннымБумагам = П010006004_ПроцентыПоГосударственнымЦеннымБумагам  + Сумма91_1;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 Тогда

			П010006004_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 = П010006004_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0  + Сумма91_1;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269 Тогда

			П010007004_ПроцентыНачисленныеПоСт269 = П010007004_ПроцентыНачисленныеПоСт269 + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях Тогда

			П010008004_УчастиеВДругихОрганизациях = П010008004_УчастиеВДругихОрганизациях + Сумма91_1;
			П010010004_УчастиеВДругихОрганизациях = П010010004_УчастиеВДругихОрганизациях + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях Тогда

			П010008004_УчастиеВИностранныхОрганизациях = П010008004_УчастиеВИностранныхОрганизациях + Сумма91_1;
			П010010004_УчастиеВИностранныхОрганизациях = П010010004_УчастиеВИностранныхОрганизациях + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях Тогда

			П010008004_УчастиеВРоссийскихОрганизациях = П010008004_УчастиеВРоссийскихОрганизациях + Сумма91_1; 
			П010010004_УчастиеВРоссийскихОрганизациях = П010010004_УчастиеВРоссийскихОрганизациях + Сумма91_2; 

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств Тогда

			П010009004_РеализацияОсновныхСредств = П010009004_РеализацияОсновныхСредств + Сумма91_1;
			П010010004_РеализацияОсновныхСредств = П010010004_РеализацияОсновныхСредств + Сумма91_2;

			П04_НДС_РеализацияОсновныхСредств = П04_НДС_РеализацияОсновныхСредств + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств Тогда

			П010009004_ЛиквидацияОсновныхСредств = П010009004_ЛиквидацияОсновныхСредств + Сумма91_1;
			П010010004_ЛиквидацияОсновныхСредств = П010010004_ЛиквидацияОсновныхСредств + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов Тогда

			П010009004_РеализацияНМА = П010009004_РеализацияНМА + Сумма91_1;
			П010010004_РеализацияНМА = П010010004_РеализацияНМА + Сумма91_2;

			П04_НДС_РеализацияНМА = П04_НДС_РеализацияНМА + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества Тогда

			П010009004_РеализацияПрочегоИмущества = П010009004_РеализацияПрочегоИмущества + Сумма91_1;
			П010010004_РеализацияПрочегоИмущества = П010010004_РеализацияПрочегоИмущества + Сумма91_2;

			П04_НДС_РеализацияПрочегоИмущества = П04_НДС_РеализацияПрочегоИмущества + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг Тогда

			П010009004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П010009004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + Сумма91_1;
			П010010004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П010010004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + Сумма91_2;

			П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа Тогда

			П010009004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П010009004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + Сумма91_1;
			П010010004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П010010004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + Сумма91_2;

			П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа Тогда

			П010009004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П010009004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + Сумма91_1;
			П010010004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П010010004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + Сумма91_2;

			П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования Тогда

			П010009004_РеализацияИмущественныхПравКромеПраваТребования = П010009004_РеализацияИмущественныхПравКромеПраваТребования + Сумма91_1;
			П010010004_РеализацияИмущественныхПравКромеПраваТребования = П010010004_РеализацияИмущественныхПравКромеПраваТребования + Сумма91_2;

			П04_НДС_РеализацияИмущественныхПравКромеПраваТребования = П04_НДС_РеализацияИмущественныхПравКромеПраваТребования + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств Тогда

			П010009004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П010009004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + Сумма91_1;
			П010010004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П010010004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + Сумма91_2;

			П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг Тогда

			П010009004_РеализацияЦенныхБумаг = П010009004_РеализацияЦенныхБумаг + Сумма91_1;
			П010010004_РеализацияЦенныхБумаг = П010010004_РеализацияЦенныхБумаг + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок Тогда

			П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок + Сумма91_1;
			П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР Тогда

			П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР + Сумма91_1;
			П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду Тогда

			П010009004_СдачаИмуществаВАренду = П010009004_СдачаИмуществаВАренду + Сумма91_1;
			П010010004_СдачаИмуществаВАренду = П010010004_СдачаИмуществаВАренду + Сумма91_2;

			П04_НДС_СдачаИмуществаВАренду = П04_НДС_СдачаИмуществаВАренду + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам Тогда

			П010009004_РазницаСтоимостиЦенныхБумаг = П010009004_РазницаСтоимостиЦенныхБумаг + Сумма91_1;
			П010010004_РазницаСтоимостиЦенныхБумаг = П010010004_РазницаСтоимостиЦенныхБумаг + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков Тогда

			П010010004_РасходыНаУслугиБанков = П010010004_РасходыНаУслугиБанков + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы Тогда

			П010009004_ПрочиеОперационныеДоходыРасходы = П010009004_ПрочиеОперационныеДоходыРасходы + Сумма91_1;
			П010010004_ПрочиеОперационныеДоходыРасходы = П010010004_ПрочиеОперационныеДоходыРасходы + Сумма91_2;

			П04_НДС_ПрочиеОперационныеДоходыРасходы = П04_НДС_ПрочиеОперационныеДоходыРасходы + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда

			П010009004_ШтрафыПениНеустойкиКПолучениюУплате = П010009004_ШтрафыПениНеустойкиКПолучениюУплате + Сумма91_1;
			П010010004_ШтрафыПениНеустойкиКПолучениюУплате = П010010004_ШтрафыПениНеустойкиКПолучениюУплате + Сумма91_2;

			П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате = П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет Тогда

			П010009004_ПрибыльУбытокПрошлыхЛет = П010009004_ПрибыльУбытокПрошлыхЛет + Сумма91_1;
			П010010004_ПрибыльУбытокПрошлыхЛет = П010010004_ПрибыльУбытокПрошлыхЛет + Сумма91_2;
			
			П04_НДС_ПрибыльУбытокПрошлыхЛет = П04_НДС_ПрибыльУбытокПрошлыхЛет + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате Тогда

			П010009004_ВозмещениеУбытковКПолучениюУплате = П010009004_ВозмещениеУбытковКПолучениюУплате + Сумма91_1;
			П010010004_ВозмещениеУбытковКПолучениюУплате = П010010004_ВозмещениеУбытковКПолучениюУплате + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда

			П010009004_КурсовыеРазницы = П010009004_КурсовыеРазницы + Сумма91_1;
			П010010004_КурсовыеРазницы = П010010004_КурсовыеРазницы + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ Тогда

			П010009004_КурсовыеРазницыПоРасчетамВУЕ = П010009004_КурсовыеРазницыПоРасчетамВУЕ + Сумма91_1;
			П010010004_КурсовыеРазницыПоРасчетамВУЕ = П010010004_КурсовыеРазницыПоРасчетамВУЕ + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы Тогда

			П010010004_НалогиИСборы = П010010004_НалогиИСборы  + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы Тогда

			П010009004_ОтчисленияВОценочныеРезервы = П010009004_ОтчисленияВОценочныеРезервы + Сумма91_1;
			П010010004_ОтчисленияВОценочныеРезервы = П010010004_ОтчисленияВОценочныеРезервы + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПремияПокупателю Тогда

			П010010004_ПремияПокупателю = П010010004_ПремияПокупателю  + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности Тогда

			П010009004_СписаниеДебиторскойКредиторскойЗадолженности = П010009004_СписаниеДебиторскойКредиторскойЗадолженности + Сумма91_1;
			П010010004_СписаниеДебиторскойКредиторскойЗадолженности = П010010004_СписаниеДебиторскойКредиторскойЗадолженности + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности Тогда

			П010010004_НДСПоСписаннойКредиторскойЗадолженности = П010010004_НДСПоСписаннойКредиторскойЗадолженности + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества Тогда

			П010009004_БезвозмездноеПолучениеИмущества = П010009004_БезвозмездноеПолучениеИмущества + Сумма91_1;
			П010010004_БезвозмездноеПолучениеИмущества = П010010004_БезвозмездноеПолучениеИмущества + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд Тогда

			П010010004_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд = П010010004_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд + Сумма91_2;

			//П04_НДС_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд = П04_НДС_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы Тогда

			П010009004_ПрочиеВнереализационныеДоходыРасходы = П010009004_ПрочиеВнереализационныеДоходыРасходы + Сумма91_1;
			П010010004_ПрочиеВнереализационныеДоходыРасходы = П010010004_ПрочиеВнереализационныеДоходыРасходы + Сумма91_2;

			П04_НДС_ПрочиеВнереализационныеДоходыРасходы = П04_НДС_ПрочиеВнереализационныеДоходыРасходы + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыОтСниженияСтоимостиАктивов Тогда

			П010010004_РасходыОтСниженияСтоимостиАктивов = П010010004_РасходыОтСниженияСтоимостиАктивов + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы Тогда

			П010010004_ПрочиеКосвенныеРасходы = П010010004_ПрочиеКосвенныеРасходы + Сумма91_2;

			П04_НДС_ПрочиеКосвенныеРасходы = П04_НДС_ПрочиеКосвенныеРасходы + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыСвязанныеСВосстановлениемАмортизационнойПремии Тогда

			П010009004_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии = П010009004_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии + Сумма91_1;

		КонецЕсли;

	КонецЦикла;

	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "99", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки, , , "Организация", мОргРасшифровка);
	РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();

	// Строка "Чрезвычайные доходы"
	П010009004_ЧрезвычайныеДоходыРасходы = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("99.01"), Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);

	// Строка "Чрезвычайные расходы"
	П010010004_ЧрезвычайныеДоходыРасходы = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("99.01"), Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);

	// строка 2310 "Доходы от участия в других организациях"
	П010008004 = П010008004_УчастиеВДругихОрганизациях + П010008004_УчастиеВИностранныхОрганизациях + П010008004_УчастиеВРоссийскихОрганизациях;
	
	УстановитьЗначениеПоказателя("П000100231005", П010008004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100231005", "Строка 2310 ""Доходы от участия в других организациях"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с участием в других организациях""/", П010008004_УчастиеВДругихОрганизациях, , , 1, , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100231005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в иностранных организациях""/", П010008004_УчастиеВИностранныхОрганизациях);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100231005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в российских организациях""/", П010008004_УчастиеВРоссийскихОрганизациях);

	// строка 2320 "Проценты к получению"
	П010006004 = П010006004_ПроцентыКПолучениюУплате + П010006004_ПроцентыПоГосударственнымЦеннымБумагам + П010006004_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0;
	УстановитьЗначениеПоказателя("П000100232005", П010006004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100232005", "Строка 2320 ""Проценты к получению"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты к получению (уплате)""/",  П010006004_ПроцентыКПолучениюУплате, , , 1, , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100232005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты по государственным ценным бумагам""/", П010006004_ПроцентыПоГосударственнымЦеннымБумагам);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100232005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты по государственным ценным бумагам по ставке 0%""/", П010006004_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0);

	// строка 2330 "Проценты к уплате"
	П010007004 = П010007004_ПроцентыКПолучениюУплате
	           + П010007004_ПроцентыНачисленныеПоСт269;
	УстановитьЗначениеПоказателя("П000100233005", -П010007004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100233005", "Строка 2330 ""Проценты к уплате"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты к получению (уплате)""/ ", П010007004_ПроцентыКПолучениюУплате, , , 1, , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100233005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты, начисленные в соответствии со статьей 269""/ ", П010007004_ПроцентыНачисленныеПоСт269);

	// строка 2340 "Прочие доходы"
	// Обороты по видам прочих доходов и расходов за период предшествующего года
	КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, , СчетаОборотов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, СчетаОборотовКор, , "Организация", мОргРасшифровка);
	ОстаткиИОбороты = мБухИтогиРС.ПолучитьОстаткиИОбороты();

	ВыборкаПоСубконто = ОстаткиИОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	
	Пока ВыборкаПоСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;
		Если ЗначениеЗаполнено(ВыбранноеСубконто.ВидПрочихДоходовИРасходов) Тогда
			ИндексВидаПДР = Перечисления.ВидыПрочихДоходовИРасходов.Индекс(ВыбранноеСубконто.ВидПрочихДоходовИРасходов);
			ИмяВидаПДР = Метаданные.Перечисления.ВидыПрочихДоходовИРасходов.ЗначенияПеречисления[ИндексВидаПДР].Имя;
			
			// расчет показателей доходов и расходов, связанных с переоценкой внеоборотных активов
			Если ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов Тогда
				ДО_91_02__01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("01"));
				ДО_91_02__02 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("02"));
				ДО_91_02__03 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("03"));
				ДО_91_02__04 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("04"));
				ДО_91_02__05 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("05"));
				
				КО_91_01__01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("01"));
				КО_91_01__02 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("02"));
				КО_91_01__03 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("03"));
				КО_91_01__04 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("04"));
				КО_91_01__05 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("05"));
				
				КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + КО_91_01__01 + КО_91_01__03 + КО_91_01__04;
				КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов   = КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + КО_91_01__02 + КО_91_01__05;
				ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + ДО_91_02__01 + ДО_91_02__03 + ДО_91_02__04;
				ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов   = ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + ДО_91_02__02 + ДО_91_02__05;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	П010009004 = П010009004_РеализацияОсновныхСредств                                     - П04_НДС_РеализацияОсновныхСредств
	           + П010009004_ЛиквидацияОсновныхСредств
	           + П010009004_РеализацияНМА                                                 - П04_НДС_РеализацияНМА
	           + П010009004_РеализацияПрочегоИмущества                                    - П04_НДС_РеализацияПрочегоИмущества
	           + П010009004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг           - П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг
	           + П010009004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа            - П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа
	           + П010009004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа         - П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа
	           + П010009004_РеализацияИмущественныхПравКромеПраваТребования               - П04_НДС_РеализацияИмущественныхПравКромеПраваТребования
	           + П010009004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств - П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств
	           + П010009004_РеализацияЦенныхБумаг
	           + П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок
	           + П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР
	           + П010009004_СдачаИмуществаВАренду                                         - П04_НДС_СдачаИмуществаВАренду
	           + П010009004_ОтчисленияВОценочныеРезервы
	           + П010009004_РазницаСтоимостиЦенныхБумаг
	           + П010009004_ПрочиеОперационныеДоходыРасходы                               - П04_НДС_ПрочиеОперационныеДоходыРасходы

	// бывшая строка 120 "Внереализационные доходы"
	           + П010009004_ШтрафыПениНеустойкиКПолучениюУплате                           - П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате
	           + П010009004_ПрибыльУбытокПрошлыхЛет                                       - П04_НДС_ПрибыльУбытокПрошлыхЛет
	           + П010009004_ВозмещениеУбытковКПолучениюУплате
	           + П010009004_КурсовыеРазницы
	           + П010009004_КурсовыеРазницыПоРасчетамВУЕ
	           + П010009004_СписаниеДебиторскойКредиторскойЗадолженности
	           + П010009004_БезвозмездноеПолучениеИмущества
	           + П010009004_ПрочиеВнереализационныеДоходыРасходы                          - П04_НДС_ПрочиеВнереализационныеДоходыРасходы
	           + П010009004_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии

	// Чрезвычайные доходы
	           + П010009004_ЧрезвычайныеДоходыРасходы

	// Доходы, связанные с переоценкой внеоборотных активов
			   + КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов 
			   - ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;

	УстановитьЗначениеПоказателя("П000100234005", П010009004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "Строка 2340 ""Прочие доходы"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией основных средств""/", П010009004_РеализацияОсновныхСредств, , , 1, , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией основных средств""/ в корреспонденции со счетом 68.02", -П04_НДС_РеализацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с ликвидацией основных средств""/", П010009004_ЛиквидацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией нематериальных активов""/", П010009004_РеализацияНМА);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией нематериальных активов""/ в корреспонденции со счетом 68.02", -П04_НДС_РеализацияНМА);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией прочего имущества""/", П010009004_РеализацияПрочегоИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией прочего имущества""/ в корреспонденции со счетом 68.02", -П04_НДС_РеализацияПрочегоИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования как оказания финансовых услуг""/", П010009004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования как оказания финансовых услуг""/ в корреспонденции со счетом 68.02", -П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования до наступления срока платежа""/", П010009004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования до наступления срока платежа""/ в корреспонденции со счетом 68.02", -П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования после наступления срока платежа""/", П010009004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования после наступления срока платежа""/ в корреспонденции со счетом 68.02", -П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав, кроме права требования""/", П010009004_РеализацияИмущественныхПравКромеПраваТребования);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав, кроме права требования""/ в корреспонденции со счетом 68.02", -П04_НДС_РеализацияИмущественныхПравКромеПраваТребования);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств""/", П010009004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств""/ в корреспонденции со счетом 68.02", -П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией ценных бумаг""/", П010009004_РеализацияЦенныхБумаг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы) по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке""/", П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы) по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке""/", П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные со сдачей имущества в аренду (субаренду)""/", П010009004_СдачаИмуществаВАренду);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные со сдачей имущества в аренду (субаренду)""/ в корреспонденции со счетом 68.02", -П04_НДС_СдачаИмуществаВАренду);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Отчисления в оценочные резервы""/", П010009004_ОтчисленияВОценочныеРезервы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам""/", П010009004_РазницаСтоимостиЦенныхБумаг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/", П010009004_ПрочиеОперационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/ в корреспонденции со счетом 68.02", -П04_НДС_ПрочиеОперационныеДоходыРасходы);

	// бывшая строка 120 "Внереализационные доходы"
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/", П010009004_ШтрафыПениНеустойкиКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/ в корреспонденции со счетом 68.02", -П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/", П010009004_ПрибыльУбытокПрошлыхЛет);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/ в корреспонденции со счетом 68.02", -П04_НДС_ПрибыльУбытокПрошлыхЛет);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Возмещение убытков к получению (уплате)""/", П010009004_ВозмещениеУбытковКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы""/", П010009004_КурсовыеРазницы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы по расчетам в у.е.""/", П010009004_КурсовыеРазницыПоРасчетамВУЕ);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Списание дебиторской (кредиторской) задолженности""/", П010009004_СписаниеДебиторскойКредиторскойЗадолженности);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с безвозмездным получением имущества, работ, услуг или имущественных прав""/", П010009004_БезвозмездноеПолучениеИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/", П010009004_ПрочиеВнереализационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/ в корреспонденции со счетом 68.02", -П04_НДС_ПрочиеВнереализационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы, связанные с восстановлением амортизационной премии""/", П010009004_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии);

	// Чрезвычайные доходы
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "!КО", П010009003_ЧрезвычайныеДоходыРасходы, Счет("99.01"),,,,,,,, Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);

	// Доходы, связанные с переоценкой внеоборотных активов
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 01, 03, 04", КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов,  Счет("91.01"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 02, 05", -ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.02"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
	
	// строка 2350 "Прочие расходы"
	П010010004 = П010010004_УчастиеВДругихОрганизациях
	           + П010010004_УчастиеВРоссийскихОрганизациях
	           + П010010004_УчастиеВИностранныхОрганизациях
	           + П010010004_РеализацияОсновныхСредств                                     - П04_НДС_РеализацияОсновныхСредств
	           + П010010004_ЛиквидацияОсновныхСредств
	           + П010010004_РеализацияНМА                                                 - П04_НДС_РеализацияНМА
	           + П010010004_РеализацияПрочегоИмущества                                    - П04_НДС_РеализацияПрочегоИмущества
	           + П010010004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг           - П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг
	           + П010010004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа            - П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа
	           + П010010004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа         - П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа
	           + П010010004_РеализацияИмущественныхПравКромеПраваТребования               - П04_НДС_РеализацияИмущественныхПравКромеПраваТребования
	           + П010010004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств - П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств
	           + П010010004_РеализацияЦенныхБумаг
	           + П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок
	           + П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР
	           + П010010004_СдачаИмуществаВАренду                                         - П04_НДС_СдачаИмуществаВАренду
	           + П010010004_ОтчисленияВОценочныеРезервы
	           + П010010004_РазницаСтоимостиЦенныхБумаг
	           + П010010004_РасходыНаУслугиБанков
	           + П010010004_ПрочиеОперационныеДоходыРасходы                               - П04_НДС_ПрочиеОперационныеДоходыРасходы

	// бывшая строка 130 "Внереализационные расходы"
	           + П010010004_ШтрафыПениНеустойкиКПолучениюУплате                           - П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате
	           + П010010004_ПрибыльУбытокПрошлыхЛет                                       - П04_НДС_ПрибыльУбытокПрошлыхЛет
	           + П010010004_ВозмещениеУбытковКПолучениюУплате
	           + П010010004_КурсовыеРазницы
	           + П010010004_КурсовыеРазницыПоРасчетамВУЕ
	           + П010010004_НалогиИСборы
	           + П010010004_ПремияПокупателю
	           + П010010004_СписаниеДебиторскойКредиторскойЗадолженности
	           + П010010004_НДСПоСписаннойКредиторскойЗадолженности
	           + П010010004_БезвозмездноеПолучениеИмущества
	           + П010010004_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд
	           + П010010004_ПрочиеВнереализационныеДоходыРасходы                          - П04_НДС_ПрочиеВнереализационныеДоходыРасходы
	           + П010010004_РасходыОтСниженияСтоимостиАктивов
	           + П010010004_ПрочиеКосвенныеРасходы                                        - П04_НДС_ПрочиеКосвенныеРасходы

	// Чрезвычайные расходы 
	           + П010010004_ЧрезвычайныеДоходыРасходы

	// Расходы, связанные с переоценкой внеоборотных активов
			   + ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов 
			   - КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;

	УстановитьЗначениеПоказателя("П000100235005", -П010010004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "Строка 2350 ""Прочие расходы"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с участием в других организациях""/", П010010004_УчастиеВДругихОрганизациях, , , 1, , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в российских организациях""/", П010010004_УчастиеВРоссийскихОрганизациях);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в иностранных организациях""/", П010010004_УчастиеВИностранныхОрганизациях);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией основных средств""/", П010010004_РеализацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией основных средств""/ в корреспонденции со счетом 68.02 ", -П04_НДС_РеализацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с ликвидацией основных средств""/", П010010004_ЛиквидацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией нематериальных активов""/", П010010004_РеализацияНМА);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией нематериальных активов""/ в корреспонденции со счетом 68.02 ", -П04_НДС_РеализацияНМА);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией прочего имущества""/", П010010004_РеализацияПрочегоИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией прочего имущества""/ в корреспонденции со счетом 68.02 ", -П04_НДС_РеализацияПрочегоИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования как оказания финансовых услуг""/", П010010004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования как оказания финансовых услуг""/ в корреспонденции со счетом 68.02 ", -П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования до наступления срока платежа""/", П010010004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования до наступления срока платежа""/ в корреспонденции со счетом 68.02 ", -П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования после наступления срока платежа""/", П010010004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией права требования после наступления срока платежа""/ в корреспонденции со счетом 68.02 ", -П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав, кроме права требования""/", П010010004_РеализацияИмущественныхПравКромеПраваТребования);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав, кроме права требования""/ в корреспонденции со счетом 68.02 ", -П04_НДС_РеализацияИмущественныхПравКромеПраваТребования);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств""/", П010010004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств""/ в корреспонденции со счетом 68.02 ", -П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с реализацией ценных бумаг""/", П010010004_РеализацияЦенныхБумаг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы) по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке""/", П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы) по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке""/", П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные со сдачей имущества в аренду (субаренду)""/", П010010004_СдачаИмуществаВАренду);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные со сдачей имущества в аренду (субаренду)""/ в корреспонденции со счетом 68.02 ", -П04_НДС_СдачаИмуществаВАренду);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Отчисления в оценочные резервы""/", П010010004_ОтчисленияВОценочныеРезервы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам""/", П010010004_РазницаСтоимостиЦенныхБумаг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Расходы на услуги банков""/", П010010004_РасходыНаУслугиБанков);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/", П010010004_ПрочиеОперационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/ в корреспонденции со счетом 68.02 ", -П04_НДС_ПрочиеОперационныеДоходыРасходы);

	// бывшая строка 130 "Внереализационные расходы"
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/", П010010004_ШтрафыПениНеустойкиКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/ в корреспонденции со счетом 68.02", -П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/", П010010004_ПрибыльУбытокПрошлыхЛет);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/ в корреспонденции со счетом 68.02", -П04_НДС_ПрибыльУбытокПрошлыхЛет);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Возмещение убытков к получению (уплате)""/", П010010004_ВозмещениеУбытковКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы""/", П010010004_КурсовыеРазницы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы по расчетам в у.е.""/", П010010004_КурсовыеРазницыПоРасчетамВУЕ);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Налоги и сборы""/", П010010004_НалогиИСборы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Премия, выплаченная покупателю""/", П010010004_ПремияПокупателю);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Списание дебиторской (кредиторской) задолженности""/", П010010004_СписаниеДебиторскойКредиторскойЗадолженности);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""НДС по списанной кредиторской задолженности""/", П010010004_НДСПоСписаннойКредиторскойЗадолженности);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Доходы (расходы), связанные с безвозмездным получением имущества, работ, услуг или имущественных прав""/", П010010004_БезвозмездноеПолучениеИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд""/", П010010004_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/", П010010004_ПрочиеВнереализационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/ в корреспонденции со счетом 68.02", -П04_НДС_ПрочиеВнереализационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Расходы от снижения стоимости активов""/", П010010004_РасходыОтСниженияСтоимостиАктивов);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие косвенные расходы""/", П010010004_ПрочиеКосвенныеРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие косвенные расходы""/ в корреспонденции со счетом 68.02", -П04_НДС_ПрочиеКосвенныеРасходы);

	// Чрезвычайные расходы
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "!ДО", П010010004_ЧрезвычайныеДоходыРасходы, Счет("99.01"),,,,,,,, Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);

	// Расходы, связанные с переоценкой внеоборотных активов
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 01, 03, 04", ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов,  Счет("91.02"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 02, 05", -КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.01"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
	
	// строка 2410 "Текущий налог на прибыль"
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "68.04", , , , "Организация", мОргРасшифровка);

	П010015004_68_4_2__68_4_1 = ОБ(Счет("68.04.2"), Счет("68.04.1"));
	П010015004_68_4_1__68_4_2 = ОБ(Счет("68.04.1"), Счет("68.04.2"));

	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет, КорСубконто1", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "99", , "68.04.1", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "Организация", мОргРасшифровка);

	П010015004_99_1_1__68_4_1 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет, КорСубконто1" , Счет("99.01.1"), Счет("68.04.1"), Перечисления.ВидыПлатежейВГосБюджет.Налог);

	П010015004_99_2__68_4_1 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("99.02"), Счет("68.04.1"));
	П010015004_68_4_1__99_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("99.02"), Счет("68.04.1"));

	П010015004 = П010015004_68_4_2__68_4_1 - П010015004_68_4_1__68_4_2 
	           + П010015004_99_1_1__68_4_1;

	УстановитьЗначениеПоказателя("П000100241005", -П010015004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100241005", "Строка 2410 ""Текущий налог на прибыль"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ОБ", П010015004_68_4_2__68_4_1, Счет("68.04.2"), Счет("68.04.1"), 1, , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100241005", "", "-", "!ОБ", -П010015004_68_4_1__68_4_2, Счет("68.04.1"), Счет("68.04.2"));
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100241005", "", "+", "Оборот с кредита счета 68.04.1 /субконто ""Налог (взносы): начислено / уплачено""/ в дебет счета 99.01.1",  П010015003_99_1_1__68_4_1, Счет("99.01.1"), Счет("68.04.1"));

	// строка 2421 "в т.ч. постоянные налоговые обязательства (активы)"
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "99.02.3", , "68.04", , "Организация", мОргРасшифровка);

	П010020004_99_2_3__68_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("99.02.3"), Счет("68.04"));
	П010020004_68_4__99_2_3 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("99.02.3"), Счет("68.04"));

	П010020004 = П010020004_99_2_3__68_4 - П010020004_68_4__99_2_3;
	УстановитьЗначениеПоказателя("П000100242105", -П010020004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100242105", "Строка 2421 ""в т. ч. постоянные налоговые обязательства (активы)"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ОБ", П010020004_99_2_3__68_4, Счет("99.02.3"), Счет("68.04"), 1, , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100242105", "", "-", "!ОБ", -П010020004_68_4__99_2_3, Счет("68.04"), Счет("99.02.3"));

	// строка 2430 "Изменение отложенных налоговых обязательств" 
	// В форме №2 необходимо учесть возможную переоценку отложенных налоговых
	// активов и отложенных налоговых обязательств, проведенную в связи с
	// изменением ставки налога на прибыль. Проводки, отражающие результаты
	// переоценки, не должны влиять на финансовые результаты отчетного периода.
	// Для учета результатов переоценки корректируем обороты счета 77 на обороты
	// - в корреспонденции со счетами 84.01 и 84.02 - для совместимости с предыдущими годами
	// - в корреспонденции со счетоми 99 (99.02.4) - для учета периодов 2011 г и позже.

	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "77", , , , "Организация", мОргРасшифровка);

	ОБ_77__84_01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("77"), Счет("84.01"));
	ОБ_84_02__77 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("77"), Счет("84.02"));

	ОБ_77__99_2_4 = 0;
	ОБ_99_2_4__77 = 0;

	Если ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда

		ОБ_77__99_2_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("77"), Счет("99.02.4"));
		ОБ_99_2_4__77 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("77"), Счет("99.02.4"));

	КонецЕсли;

	ОБ77__68_4_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("77"), Счет("68.04.2"));
	ОБ68_4_2__77 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("77"), Счет("68.04.2"));

	П010014204 = ОБ68_4_2__77 - ОБ77__68_4_2 - ОБ_84_02__77 + ОБ_77__84_01 - ОБ_99_2_4__77 + ОБ_77__99_2_4;

	УстановитьЗначениеПоказателя("П000100243005", -П010014204);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243005", "Строка 2430 ""Изменение отложенных налоговых обязательств"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!КО", ОБ68_4_2__77, Счет("77"), Счет("68.04.2"), 1, , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243005", "", "-", "!ДО", -ОБ77__68_4_2, Счет("77"), Счет("68.04.2"));

	Если ((ОБ_84_02__77 <> 0) ИЛИ (ОБ_77__84_01 <> 0)) Тогда

		// Корректировку оборотов  счета 77 в расшифровку добавляем только тогда, 
		// когда такая корректировка существует
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243005", "", "-", "!ОБ", -ОБ_84_02__77, Счет("84.02"), Счет("77"));
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243005", "", "+", "!ОБ",  ОБ_77__84_01, Счет("77"), Счет("84.01"));

	КонецЕсли;

	Если ((ОБ_77__99_2_4 <> 0) ИЛИ (ОБ_99_2_4__77 <> 0)) Тогда

		// Корректировку оборотов  счета 77 в расшифровку добавляем только тогда, 
		// когда такая корректировка существует
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243005", "", "-", "!ОБ", -ОБ_99_2_4__77, Счет("99.02.4"),Счет("77"));
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243005", "", "+", "!ОБ",  ОБ_77__99_2_4, Счет("77"), Счет("99.02.4"));

	КонецЕсли;

	// строка 2450 "Изменение отложенных налоговых активов"
	// В форме №2 необходимо учесть возможную переоценку отложенных налоговых
	// активов и отложенных налоговых обязательств, проведенную в связи с
	// изменением ставки налога на прибыль. Проводки, отражающие результаты
	// переоценки, не должны влиять на финансовые результаты отчетного периода.
	// Для учета результатов переоценки корректируем обороты счета 09 на обороты: 
	// - в корреспонденции со счетами 84.01 и 84.02 - для совместимости с предыдущими годами
	// - в корреспонденции со счетоми 99 (99.02.4) - для учета периодов 2011 г и позже.

	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "09", , , , "Организация", мОргРасшифровка);

	ОБ_09__84_01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("09"), Счет("84.01"));
	ОБ_84_02__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("09"), Счет("84.02"));

	ОБ_09__99_2_4 = 0;
	ОБ_99_2_4__09 = 0;

	Если ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда
		ОБ_09__99_2_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("09"), Счет("99.02.4"));
		ОБ_99_2_4__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("09"), Счет("99.02.4"));
	КонецЕсли;

	ОБ_09__68_4_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("09"), Счет("68.04.2"));
	ОБ_68_4_2__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("09"), Счет("68.04.2"));

	П010014104 = ОБ_09__68_4_2 - ОБ_68_4_2__09 - ОБ_09__84_01 + ОБ_84_02__09 - ОБ_09__99_2_4 + ОБ_99_2_4__09;

	УстановитьЗначениеПоказателя("П000100245005", П010014104);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245005", "Строка 2450 ""Изменение отложенных налоговых активов"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ОБ", ОБ_09__68_4_2, Счет("09"), Счет("68.04.2"), 1, , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245005", "", "-", "!ОБ", -ОБ_68_4_2__09, Счет("68.04.2"), Счет("09"), 1, , "ФормаОтчета");

	Если ((ОБ_09__84_01 <> 0) ИЛИ (ОБ_84_02__09 <> 0)) Тогда

		// Корректировку оборотов счета 09 в расшифровку добавляем только тогда, 
		// когда такая корректировка существует
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245005", "", "-", "!ОБ", -ОБ_09__84_01, Счет("09"), Счет("84.01"), 1, , "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245005", "", "+", "!ОБ",  ОБ_84_02__09, Счет("84.02"), Счет("09"), 1, , "ФормаОтчета");

	КонецЕсли;

	Если ((ОБ_09__99_2_4 <> 0) ИЛИ (ОБ_99_2_4__09 <> 0)) Тогда

		// Корректировку оборотов счета 09 в расшифровку добавляем только тогда, 
		// когда такая корректировка существует
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245005", "", "-", "!ОБ", -ОБ_09__99_2_4,     Счет("09"), Счет("99.02.4"), 1, , "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245005", "", "+", "!ОБ",  ОБ_99_2_4__09, Счет("99.02.4"),     Счет("09"), 1, , "ФормаОтчета");

	КонецЕсли;

	// строка 2460 "Прочее"

	// Если ПБУ 18 не применяется, должна выводится строка "Налог на прибыль 
	// и иные аналогичные обязательные платежи", как в "старой" форме №2
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "99", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки, , , "Организация", мОргРасшифровка);

	П010018004_99_1_НалогНаПрибыль   = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("99.01"), Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
	П010018004_99_1_НалоговыеСанкции = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("99.01"), Перечисления.ПрибылиИУбытки.НалоговыеСанкции);

	П010018004_99_2_4_Д = 0;
	П010018004_99_2_4_К = 0;

	Если ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда
		П010018004_99_2_4_Д = ОБ_99_2_4__09;
		П010018004_99_2_4_К = ОБ_77__99_2_4;
	КонецЕсли;

	П010018004_99_9_Д = 0;
	П010018004_99_9_К = 0;

	Если ЗначениеЗаполнено(мСчет["99.09"]) Тогда
		П010018004_99_9_Д = ДО("99.09");
		П010018004_99_9_К = КО("99.09");
	КонецЕсли;

	Если ПрименениеЕНВД Тогда
		ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , Счет("99.01.2"), , , , "Организация", мОргРасшифровка);
		ОБ_99_01_2__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("99.01.2"), Счет("09"));
		ОБ_77__99_01_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("99.01.2"), Счет("77"));
	КонецЕсли;	
	
	П010018004 = П010018004_99_1_НалогНаПрибыль
	           - П010015004_99_1_1__68_4_1 // сумма текущего налога на прибыль из строки 2410
	           + П010018004_99_1_НалоговыеСанкции
	           + П010018004_99_2_4_Д - П010018004_99_2_4_К
	           + П010018004_99_9_Д - П010018004_99_9_К;

	Если ПрименениеЕНВД Тогда
		П010018004 = П010018004 + ОБ_99_01_2__09 - ОБ_77__99_01_2;
	КонецЕсли;
			   
	УстановитьЗначениеПоказателя("П000100246005", -П010018004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "Строка 2460 ""Прочее"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "Оборот по дебету счета 99.01 /субконто ""Налог на прибыль и аналогичные платежи""/", П010018004_99_1_НалогНаПрибыль, Счет("99.01"), , 1, , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "", "-", "Оборот с кредита счета 68.04.1 /субконто ""Налог (взносы): начислено / уплачено""/ в дебет счета 99.01.1", -П010015004_99_1_1__68_4_1, Счет("99.01.1"), Счет("68.04.1"));
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "", "+", "Оборот по дебету счета 99.01 /субконто ""Причитающиеся налоговые санкции""/", П010018004_99_1_НалоговыеСанкции, Счет("99.01"), ,1, , "ФормаОтчета");

	Если ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "", "+", "!ДО",  П010018004_99_2_4_Д, Счет("99.02.4"), Счет("09"), ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "", "-", "!КО", -П010018004_99_2_4_К, Счет("99.02.4"), Счет("77"), ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, , "ФормаОтчета");
	КонецЕсли;

	Если ЗначениеЗаполнено(мСчет["99.09"]) Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "", "+", "!ДО",  П010018004_99_9_Д, Счет("99.09"), , , , "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "", "-", "!КО", -П010018004_99_9_К, Счет("99.09"), , , , "ФормаОтчета");
	КонецЕсли;

	Если ПрименениеЕНВД Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "", "+", "!ДО",  ОБ_99_01_2__09, Счет("99.01.2"), Счет("09"), , , "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "", "-", "!КО", -ОБ_77__99_01_2, Счет("99.01.2"), Счет("77"), , , "ФормаОтчета");
	КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвтоФормаОтчета()

// Процедура выполняет заполнение отдельной графы отчета о прибылях и убытках по данным ИБ за заданный период
//		
// 		Для работы процедуры необходимы заполненные переменные модуля:
//			мСчет - соответствие номеров счетов и объектов плана счетов бухгалтерского учета
//			мОргРасшифровка - ссылка на Организацию, по которой строится отчет
// 			мБухИтоги, мБухИтогиРС - объекты вида Обработка.БухгалтерскиеИтоги
//
// Параметры
// 
//  Графа - Строка длиной 2 символа, указывает на графу, по которой заполняется показатель
//
//  ЗаголовокГрафы - Строка, задает наименование заполняемой графы в расшифровке показателя
//
//  НачалоПериодаОтчета - Дата, задает начало периода отчета
//
//  КонецПериодаОтчета - Дата, задает конец периода отчета
//
//  ДеревоНастроек - ДеревоЗначений, задает дерево настроек вывода расшифровки строк отчета
//
Процедура ЗаполнитьАвтоФормаОтчетаОбщие(Графа, ЗаголовокГрафы, НачалоПериодаОтчета, КонецПериодаОтчета, ДеревоНастроек)

	ДеревоНастроекСтрокРасшифровки = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета;
	
	// Счета для расчета оборотов по видам прочих доходов и расходов
	СчетаОборотов = Новый Массив();
	СчетаОборотов.Добавить(Счет("91.01"));
	СчетаОборотов.Добавить(Счет("91.02"));
	
	СчетаОборотовКор = Новый Массив();
	СчетаОборотовКор.Добавить(Счет("68.02")); // счет 76.Н не используется с 2006 года
	СчетаОборотовКор.Добавить(Счет("01")); // счета 01, 02, 03, 04, 05 необходимы для расчета доходов и расходов, связанных с переоценкой внеоборотных активов

	СчетаОборотовКор.Добавить(Счет("02"));
	СчетаОборотовКор.Добавить(Счет("03"));
	СчетаОборотовКор.Добавить(Счет("04"));
	СчетаОборотовКор.Добавить(Счет("05"));
	
	// Обороты по видам прочих доходов и расходов за отчетный период
	КО_91_01_ВПДР = Новый Структура;
	ДО_91_02_ВПДР = Новый Структура;
	ДО_91_02__68_02_ВПДР = Новый Структура;
	
	КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", НачалоПериодаОтчета, КонецПериодаОтчета, , СчетаОборотов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, СчетаОборотовКор, , "Организация", мОргРасшифровка);
	ОстаткиИОбороты = мБухИтогиРС.ПолучитьОстаткиИОбороты();

	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ВидыПрочихДоходовИРасходов.ЗначенияПеречисления Цикл
		КО_91_01_ВПДР.Вставить(ЗначениеПеречисления.Имя, 0);
		ДО_91_02_ВПДР.Вставить(ЗначениеПеречисления.Имя, 0);
		ДО_91_02__68_02_ВПДР.Вставить(ЗначениеПеречисления.Имя, 0);
	КонецЦикла;
	
	ВыборкаПоСубконто = ОстаткиИОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	
	Пока ВыборкаПоСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;
		Если ЗначениеЗаполнено(ВыбранноеСубконто.ВидПрочихДоходовИРасходов) Тогда
			ИндексВидаПДР = Перечисления.ВидыПрочихДоходовИРасходов.Индекс(ВыбранноеСубконто.ВидПрочихДоходовИРасходов);
			ИмяВидаПДР = Метаданные.Перечисления.ВидыПрочихДоходовИРасходов.ЗначенияПеречисления[ИндексВидаПДР].Имя;
			
			// КО 91.01
			СуммаОБ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("91.01"), ВыбранноеСубконто);
			КО_91_01_ВПДР[ИмяВидаПДР] = КО_91_01_ВПДР[ИмяВидаПДР] + СуммаОБ;
			
			// ДО 91.02
			СуммаОБ = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("91.02"), ВыбранноеСубконто);
			ДО_91_02_ВПДР[ИмяВидаПДР] = ДО_91_02_ВПДР[ИмяВидаПДР] + СуммаОБ;
			
			// ДО 91.02 в корреспонденции с 68.02
			СуммаОБ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("68.02"));
			ДО_91_02__68_02_ВПДР[ИмяВидаПДР] = ДО_91_02__68_02_ВПДР[ИмяВидаПДР] + СуммаОБ;
			
			// расчет показателей доходов и расходов, связанных с переоценкой внеоборотных активов
			Если ВыбранноеСубконто.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов Тогда
				ДО_91_02__01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("01"));
				ДО_91_02__02 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("02"));
				ДО_91_02__03 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("03"));
				ДО_91_02__04 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("04"));
				ДО_91_02__05 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("05"));
				
				КО_91_01__01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("01"));
				КО_91_01__02 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("02"));
				КО_91_01__03 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("03"));
				КО_91_01__04 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("04"));
				КО_91_01__05 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("05"));
				
				КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + КО_91_01__01 + КО_91_01__03 + КО_91_01__04;
				КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов   = КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + КО_91_01__02 + КО_91_01__05;
				ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + ДО_91_02__01 + ДО_91_02__03 + ДО_91_02__04;
				ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов   = ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + ДО_91_02__02 + ДО_91_02__05;
			КонецЕсли;
			
		Иначе
			// обороты, у которых не заполнен вид прочих доходов и расходов, не учитываются
		КонецЕсли;
		
	КонецЦикла;
	
	// строка 23101 "Доходы (расходы), связанные с участием в других организациях"

	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23101", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях;

		П0001023101 = КО_91_01_ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях;

		УстановитьЗначениеПоказателя("П0001023101" + Графа, П0001023101);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023101" + Графа, "Строка 23101 ""Доходы (расходы), связанные с участием в других организациях"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23102 "Долевое участие в иностранных организациях"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23102", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДолевоеУчастиеВИностранныхОрганизациях = КО_91_01_ВПДР.ДолевоеУчастиеВИностранныхОрганизациях;

		П0001023102 = КО_91_01_ДолевоеУчастиеВИностранныхОрганизациях;

		УстановитьЗначениеПоказателя("П0001023102" + Графа, П0001023102);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023102" + Графа, "Строка 23102 ""Долевое участие в иностранных организациях"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДолевоеУчастиеВИностранныхОрганизациях"]) + """/", КО_91_01_ДолевоеУчастиеВИностранныхОрганизациях,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23103 "Долевое участие в российских организациях"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23103", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДолевоеУчастиеВРоссийскихОрганизациях = КО_91_01_ВПДР.ДолевоеУчастиеВРоссийскихОрганизациях;

		П0001023103 = КО_91_01_ДолевоеУчастиеВРоссийскихОрганизациях;

		УстановитьЗначениеПоказателя("П0001023103" + Графа, П0001023103);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023103" + Графа, "Строка 23103 ""Долевое участие в российских организациях"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДолевоеУчастиеВРоссийскихОрганизациях"]) + """/", КО_91_01_ДолевоеУчастиеВРоссийскихОрганизациях,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23201 "Проценты к получению"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23201", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ПроцентыКПолучениюУплате = КО_91_01_ВПДР.ПроцентыКПолучениюУплате;

		П0001023201 = КО_91_01_ПроцентыКПолучениюУплате;

		УстановитьЗначениеПоказателя("П0001023201" + Графа, П0001023201);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023201" + Графа, "Строка 23201 ""Проценты к получению"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПроцентыКПолучениюУплате"]) + """/", КО_91_01_ПроцентыКПолучениюУплате,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23202 "Проценты по государственным ценным бумагам"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23202", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ПроцентыПоГосударственнымЦеннымБумагам = КО_91_01_ВПДР.ПроцентыПоГосударственнымЦеннымБумагам;

		П0001023202 = КО_91_01_ПроцентыПоГосударственнымЦеннымБумагам;

		УстановитьЗначениеПоказателя("П0001023202" + Графа, П0001023202);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023202" + Графа, "Строка 23202 ""Проценты по государственным ценным бумагам"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПроцентыПоГосударственнымЦеннымБумагам"]) + """/", КО_91_01_ПроцентыПоГосударственнымЦеннымБумагам,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23203 "Проценты по государственным ценным бумагам по ставке 0%"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23203", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 = КО_91_01_ВПДР.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0;

		П0001023203 = КО_91_01_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0;

		УстановитьЗначениеПоказателя("П0001023203" + Графа, П0001023203);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023203" + Графа, "Строка 23203 ""Проценты по государственным ценным бумагам по ставке 0%"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0"]) + """/", КО_91_01_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23301 "Проценты к уплате"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23301", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ПроцентыКПолучениюУплате = ДО_91_02_ВПДР.ПроцентыКПолучениюУплате;

		П0001023301 = ДО_91_02_ПроцентыКПолучениюУплате;
		П0001023301 = -П0001023301; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023301" + Графа, П0001023301);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023301" + Графа, "Строка 23301 ""Проценты к уплате"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПроцентыКПолучениюУплате"]) + """/", ДО_91_02_ПроцентыКПолучениюУплате,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23302 "Проценты, начисленные в соответствии со статьей 269 НК РФ"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23302", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ПроцентыНачисленныеПоСт269 = ДО_91_02_ВПДР.ПроцентыНачисленныеПоСт269;

		П0001023302 = ДО_91_02_ПроцентыНачисленныеПоСт269;
		П0001023302 = -П0001023302; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023302" + Графа, П0001023302);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023302" + Графа, "Строка 23302 ""Проценты, начисленные в соответствии со статьей 269 НК РФ"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПроцентыНачисленныеПоСт269"]) + """/", ДО_91_02_ПроцентыНачисленныеПоСт269,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23401 "Доходы, связанные с реализацией основных средств"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23401", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств;

		П0001023401 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств;

		УстановитьЗначениеПоказателя("П0001023401" + Графа, П0001023401);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023401" + Графа, "Строка 23401 ""Доходы, связанные с реализацией основных средств"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейОсновныхСредств"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023401" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейОсновныхСредств"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств,  Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23402 "Доходы, связанные с ликвидацией основных средств"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23402", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств;

		П0001023402 = КО_91_01_ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств;

		УстановитьЗначениеПоказателя("П0001023402" + Графа, П0001023402);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023402" + Графа, "Строка 23402 ""Доходы, связанные с ликвидацией основных средств"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23403 "Доходы, связанные с реализацией нематериальных активов"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23403", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов;

		П0001023403 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов;

		УстановитьЗначениеПоказателя("П0001023403" + Графа, П0001023403);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023403" + Графа, "Строка 23403 ""Доходы, связанные с реализацией нематериальных активов"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023403" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23404 "Доходы, связанные с реализацией прочего имущества"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23404", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества;

		П0001023404 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества;

		УстановитьЗначениеПоказателя("П0001023404" + Графа, П0001023404);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023404" + Графа, "Строка 23404 ""Доходы, связанные с реализацией прочего имущества"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023404" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23405 "Доходы, связанные с реализацией права требования как оказания финансовых услуг"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23405", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг;

		П0001023405 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг;

		УстановитьЗначениеПоказателя("П0001023405" + Графа, П0001023405);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023405" + Графа, "Строка 23405 ""Доходы, связанные с реализацией права требования как оказания финансовых услуг"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023405" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23406 "Доходы, связанные с реализацией права до наступления платежа"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23406", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа;

		П0001023406 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа;

		УстановитьЗначениеПоказателя("П0001023406" + Графа, П0001023406);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023406" + Графа, "Строка 23406 ""Доходы, связанные с реализацией права до наступления платежа"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023406" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23407 "Доходы, связанные с реализацией права после наступления срока платежа"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23407", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа;

		П0001023407 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа;

		УстановитьЗначениеПоказателя("П0001023407" + Графа, П0001023407);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023407" + Графа, "Строка 23407 ""Доходы, связанные с реализацией права после наступления срока платежа"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023407" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23408 "Доходы, связанные с реализацией имущественных прав, кроме права требования"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23408", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования;

		П0001023408 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования;

		УстановитьЗначениеПоказателя("П0001023408" + Графа, П0001023408);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023408" + Графа, "Строка 23408 ""Доходы, связанные с реализацией имущественных прав, кроме права требования"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023408" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23409 "Доходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23409", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств;

		П0001023409 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств;

		УстановитьЗначениеПоказателя("П0001023409" + Графа, П0001023409);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023409" + Графа, "Строка 23409 ""Доходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023409" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23410 "Доходы, связанные с реализацией ценных бумаг"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23410", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг;

		П0001023410 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг;

		УстановитьЗначениеПоказателя("П0001023410" + Графа, П0001023410);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023410" + Графа, "Строка 23410 ""Доходы, связанные с реализацией ценных бумаг"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23411 "Доходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23411", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = КО_91_01_ВПДР.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок;

		П0001023411 = КО_91_01_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок;

		УстановитьЗначениеПоказателя("П0001023411" + Графа, П0001023411);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023411" + Графа, "Строка 23411 ""Доходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок"]) + """/", КО_91_01_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23412 "Доходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23412", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = КО_91_01_ВПДР.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР;

		П0001023412 = КО_91_01_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР;

		УстановитьЗначениеПоказателя("П0001023412" + Графа, П0001023412);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023412" + Графа, "Строка 23412 ""Доходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР"]) + """/", КО_91_01_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23413 "Доходы, связанные со сдачей имущества в аренду (субаренду)"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23413", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду;

		П0001023413 = КО_91_01_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду - ДО_91_02__68_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду;

		УстановитьЗначениеПоказателя("П0001023413" + Графа, П0001023413);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023413" + Графа, "Строка 23413 ""Доходы, связанные со сдачей имущества в аренду (субаренду)"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023413" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23414 "Доходы в виде восстановленных оценочных резервов"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23414", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ОтчисленияВОценочныеРезервы = КО_91_01_ВПДР.ОтчисленияВОценочныеРезервы;

		П0001023414 = КО_91_01_ОтчисленияВОценочныеРезервы;

		УстановитьЗначениеПоказателя("П0001023414" + Графа, П0001023414);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023414" + Графа, "Строка 23414 ""Доходы в виде восстановленных оценочных резервов"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ОтчисленияВОценочныеРезервы"]) + """/", КО_91_01_ОтчисленияВОценочныеРезервы,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23415 "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23415", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам = КО_91_01_ВПДР.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам;

		П0001023415 = КО_91_01_РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам;

		УстановитьЗначениеПоказателя("П0001023415" + Графа, П0001023415);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023415" + Графа, "Строка 23415 ""Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам"]) + """/", КО_91_01_РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23416 "Прочие операционные доходы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23416", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ПрочиеОперационныеДоходыРасходы = КО_91_01_ВПДР.ПрочиеОперационныеДоходыРасходы;
		ДО_91_02__68_02_ПрочиеОперационныеДоходыРасходы = ДО_91_02__68_02_ВПДР.ПрочиеОперационныеДоходыРасходы;

		П0001023416 = КО_91_01_ПрочиеОперационныеДоходыРасходы - ДО_91_02__68_02_ПрочиеОперационныеДоходыРасходы;

		УстановитьЗначениеПоказателя("П0001023416" + Графа, П0001023416);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023416" + Графа, "Строка 23416 ""Прочие операционные доходы"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеОперационныеДоходыРасходы"]) + """/", КО_91_01_ПрочиеОперационныеДоходыРасходы,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023416" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеОперационныеДоходыРасходы"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ПрочиеОперационныеДоходыРасходы, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23417 "Штрафы, пени, неустойки к получению"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23417", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ШтрафыПениНеустойкиКПолучениюУплате = КО_91_01_ВПДР.ШтрафыПениНеустойкиКПолучениюУплате;
		ДО_91_02__68_02_ШтрафыПениНеустойкиКПолучениюУплате = ДО_91_02__68_02_ВПДР.ШтрафыПениНеустойкиКПолучениюУплате;

		П0001023417 = КО_91_01_ШтрафыПениНеустойкиКПолучениюУплате - ДО_91_02__68_02_ШтрафыПениНеустойкиКПолучениюУплате;

		УстановитьЗначениеПоказателя("П0001023417" + Графа, П0001023417);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023417" + Графа, "Строка 23417 ""Штрафы, пени, неустойки к получению"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ШтрафыПениНеустойкиКПолучениюУплате"]) + """/", КО_91_01_ШтрафыПениНеустойкиКПолучениюУплате,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023417" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ШтрафыПениНеустойкиКПолучениюУплате"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ШтрафыПениНеустойкиКПолучениюУплате, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23418 "Прибыль прошлых лет"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23418", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ПрибыльУбытокПрошлыхЛет = КО_91_01_ВПДР.ПрибыльУбытокПрошлыхЛет;
		ДО_91_02__68_02_ПрибыльУбытокПрошлыхЛет = ДО_91_02__68_02_ВПДР.ПрибыльУбытокПрошлыхЛет;

		П0001023418 = КО_91_01_ПрибыльУбытокПрошлыхЛет - ДО_91_02__68_02_ПрибыльУбытокПрошлыхЛет;

		УстановитьЗначениеПоказателя("П0001023418" + Графа, П0001023418);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023418" + Графа, "Строка 23418 ""Прибыль прошлых лет"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрибыльУбытокПрошлыхЛет"]) + """/", КО_91_01_ПрибыльУбытокПрошлыхЛет,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023418" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрибыльУбытокПрошлыхЛет"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ПрибыльУбытокПрошлыхЛет, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23419 "Возмещение убытков к получению"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23419", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ВозмещениеУбытковКПолучениюУплате = КО_91_01_ВПДР.ВозмещениеУбытковКПолучениюУплате;

		П0001023419 = КО_91_01_ВозмещениеУбытковКПолучениюУплате;

		УстановитьЗначениеПоказателя("П0001023419" + Графа, П0001023419);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023419" + Графа, "Строка 23419 ""Возмещение убытков к получению"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ВозмещениеУбытковКПолучениюУплате"]) + """/", КО_91_01_ВозмещениеУбытковКПолучениюУплате,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23420 "Курсовые разницы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23420", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_КурсовыеРазницы = КО_91_01_ВПДР.КурсовыеРазницы;

		П0001023420 = КО_91_01_КурсовыеРазницы;

		УстановитьЗначениеПоказателя("П0001023420" + Графа, П0001023420);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023420" + Графа, "Строка 23420 ""Курсовые разницы"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["КурсовыеРазницы"]) + """/", КО_91_01_КурсовыеРазницы,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23421 "Курсовые разницы по расчетам в у.е."
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23421", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_КурсовыеРазницыПоРасчетамВУЕ = КО_91_01_ВПДР.КурсовыеРазницыПоРасчетамВУЕ;

		П0001023421 = КО_91_01_КурсовыеРазницыПоРасчетамВУЕ;

		УстановитьЗначениеПоказателя("П0001023421" + Графа, П0001023421);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023421" + Графа, "Строка 23421 ""Курсовые разницы по расчетам в у.е."", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["КурсовыеРазницыПоРасчетамВУЕ"]) + """/", КО_91_01_КурсовыеРазницыПоРасчетамВУЕ,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23422 "Доходы в виде списанной кредиторской задолженности"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23422", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_СписаниеДебиторскойКредиторскойЗадолженности = КО_91_01_ВПДР.СписаниеДебиторскойКредиторскойЗадолженности;

		П0001023422 = КО_91_01_СписаниеДебиторскойКредиторскойЗадолженности;

		УстановитьЗначениеПоказателя("П0001023422" + Графа, П0001023422);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023422" + Графа, "Строка 23422 ""Доходы в виде списанной кредиторской задолженности"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["СписаниеДебиторскойКредиторскойЗадолженности"]) + """/", КО_91_01_СписаниеДебиторскойКредиторскойЗадолженности,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23423 "Доходы, связанные с переоценкой внеоборотных активов"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23423", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П0001023423 = КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов - ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;

		УстановитьЗначениеПоказателя("П0001023423" + Графа, П0001023423);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023423" + Графа, "Строка 23423 ""Доходы, связанные с переоценкой внеоборотных активов"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 01, 03, 04", КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023423" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 02, 05", -ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23424 "Прочие внереализационные доходы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23424", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ПрочиеВнереализационныеДоходыРасходы = КО_91_01_ВПДР.ПрочиеВнереализационныеДоходыРасходы;
		ДО_91_02__68_02_ПрочиеВнереализационныеДоходыРасходы = ДО_91_02__68_02_ВПДР.ПрочиеВнереализационныеДоходыРасходы;

		П0001023424 = КО_91_01_ПрочиеВнереализационныеДоходыРасходы - ДО_91_02__68_02_ПрочиеВнереализационныеДоходыРасходы;

		УстановитьЗначениеПоказателя("П0001023424" + Графа, П0001023424);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023424" + Графа, "Строка 23424 ""Прочие внереализационные доходы"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеВнереализационныеДоходыРасходы"]) + """/", КО_91_01_ПрочиеВнереализационныеДоходыРасходы,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023424" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеВнереализационныеДоходыРасходы"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ПрочиеВнереализационныеДоходыРасходы, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23501 "Расходы, связанные с участием в других организациях"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23501", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях;

		П0001023501 = ДО_91_02_ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях;
		П0001023501 = -П0001023501; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023501" + Графа, П0001023501);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023501" + Графа, "Строка 23501 ""Расходы, связанные с участием в других организациях"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23502 "Расходы, связанные с участием в российских организациях"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23502", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДолевоеУчастиеВРоссийскихОрганизациях = ДО_91_02_ВПДР.ДолевоеУчастиеВРоссийскихОрганизациях;

		П0001023502 = ДО_91_02_ДолевоеУчастиеВРоссийскихОрганизациях;
		П0001023502 = -П0001023502; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023502" + Графа, П0001023502);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023502" + Графа, "Строка 23502 ""Расходы, связанные с участием в российских организациях"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДолевоеУчастиеВРоссийскихОрганизациях"]) + """/", ДО_91_02_ДолевоеУчастиеВРоссийскихОрганизациях,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23503 "Расходы, связанные с участием в иностранных организациях"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23503", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДолевоеУчастиеВИностранныхОрганизациях = ДО_91_02_ВПДР.ДолевоеУчастиеВИностранныхОрганизациях;

		П0001023503 = ДО_91_02_ДолевоеУчастиеВИностранныхОрганизациях;
		П0001023503 = -П0001023503; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023503" + Графа, П0001023503);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023503" + Графа, "Строка 23503 ""Расходы, связанные с участием в иностранных организациях"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДолевоеУчастиеВИностранныхОрганизациях"]) + """/", ДО_91_02_ДолевоеУчастиеВИностранныхОрганизациях,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23504 "Расходы, связанные с реализацией основных средств"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23504", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств;

		П0001023504 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств;
		П0001023504 = -П0001023504; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023504" + Графа, П0001023504);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023504" + Графа, "Строка 23504 ""Расходы, связанные с реализацией основных средств"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейОсновныхСредств"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023504" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейОсновныхСредств"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23505 "Расходы, связанные с ликвидацией основных средств"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23505", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств;

		П0001023505 = ДО_91_02_ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств;
		П0001023505 = -П0001023505; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023505" + Графа, П0001023505);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023505" + Графа, "Строка 23505 ""Расходы, связанные с ликвидацией основных средств"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23506 "Расходы, связанные с реализацией нематериальных активов"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23506", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов;

		П0001023506 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов;
		П0001023506 = -П0001023506; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023506" + Графа, П0001023506);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023506" + Графа, "Строка 23506 ""Расходы, связанные с реализацией нематериальных активов"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023506" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23507 "Расходы, связанные с реализацией прочего имущества"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23507", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества;

		П0001023507 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества;
		П0001023507 = -П0001023507; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023507" + Графа, П0001023507);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023507" + Графа, "Строка 23507 ""Расходы, связанные с реализацией прочего имущества"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023507" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23508 "Расходы, связанный с реализацией права требования как оказания финансовых услуг"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23508", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг;

		П0001023508 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг;
		П0001023508 = -П0001023508; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023508" + Графа, П0001023508);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023508" + Графа, "Строка 23508 ""Расходы, связанный с реализацией права требования как оказания финансовых услуг"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023508" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23509 "Расходы, связанные с реализацией права требования до наступления срока платежа"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23509", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа;

		П0001023509 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа;
		П0001023509 = -П0001023509; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023509" + Графа, П0001023509);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023509" + Графа, "Строка 23509 ""Расходы, связанные с реализацией права требования до наступления срока платежа"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023509" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23510 "Расходы, связанные с реализацией права требования после наступления срока платежа"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23510", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа;

		П0001023510 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа;
		П0001023510 = -П0001023510; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023510" + Графа, П0001023510);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023510" + Графа, "Строка 23510 ""Расходы, связанные с реализацией права требования после наступления срока платежа"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023510" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23511 "Расходы, связанные с реализацией имущественных прав, кроме права требования"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23511", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования;

		П0001023511 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования;
		П0001023511 = -П0001023511; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023511" + Графа, П0001023511);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023511" + Графа, "Строка 23511 ""Расходы, связанные с реализацией имущественных прав, кроме права требования"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023511" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23512 "Расходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23512", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств;

		П0001023512 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств;
		П0001023512 = -П0001023512; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023512" + Графа, П0001023512);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023512" + Графа, "Строка 23512 ""Расходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023512" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23513 "Расходы, связанные с реализацией ценных бумаг"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23513", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг;

		П0001023513 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг;
		П0001023513 = -П0001023513; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023513" + Графа, П0001023513);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023513" + Графа, "Строка 23513 ""Расходы, связанные с реализацией ценных бумаг"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23514 "Расходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23514", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = ДО_91_02_ВПДР.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок;

		П0001023514 = ДО_91_02_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок;
		П0001023514 = -П0001023514; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023514" + Графа, П0001023514);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023514" + Графа, "Строка 23514 ""Расходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок"]) + """/", ДО_91_02_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23515 "Расходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23515", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = ДО_91_02_ВПДР.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР;

		П0001023515 = ДО_91_02_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР;
		П0001023515 = -П0001023515; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023515" + Графа, П0001023515);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023515" + Графа, "Строка 23515 ""Расходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР"]) + """/", ДО_91_02_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23516 "Расходы, связанные со сдачей имущества в аренду (субаренду)"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23516", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду;

		П0001023516 = ДО_91_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду - ДО_91_02__68_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду;
		П0001023516 = -П0001023516; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023516" + Графа, П0001023516);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023516" + Графа, "Строка 23516 ""Расходы, связанные со сдачей имущества в аренду (субаренду)"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023516" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23517 "Расходы в виде образованных оценочных резервов"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23517", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ОтчисленияВОценочныеРезервы = ДО_91_02_ВПДР.ОтчисленияВОценочныеРезервы;

		П0001023517 = ДО_91_02_ОтчисленияВОценочныеРезервы;
		П0001023517 = -П0001023517; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023517" + Графа, П0001023517);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023517" + Графа, "Строка 23517 ""Расходы в виде образованных оценочных резервов"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ОтчисленияВОценочныеРезервы"]) + """/", ДО_91_02_ОтчисленияВОценочныеРезервы,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23518 "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23518", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам = ДО_91_02_ВПДР.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам;

		П0001023518 = ДО_91_02_РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам;
		П0001023518 = -П0001023518; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023518" + Графа, П0001023518);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023518" + Графа, "Строка 23518 ""Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам"]) + """/", ДО_91_02_РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23519 "Расходы на услуги банков"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23519", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_РасходыНаУслугиБанков = ДО_91_02_ВПДР.РасходыНаУслугиБанков;

		П0001023519 = ДО_91_02_РасходыНаУслугиБанков;
		П0001023519 = -П0001023519; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023519" + Графа, П0001023519);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023519" + Графа, "Строка 23519 ""Расходы на услуги банков"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["РасходыНаУслугиБанков"]) + """/", ДО_91_02_РасходыНаУслугиБанков,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23520 "Прочие операционные расходы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23520", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ПрочиеОперационныеДоходыРасходы = ДО_91_02_ВПДР.ПрочиеОперационныеДоходыРасходы;
		ДО_91_02__68_02_ПрочиеОперационныеДоходыРасходы = ДО_91_02__68_02_ВПДР.ПрочиеОперационныеДоходыРасходы;

		П0001023520 = ДО_91_02_ПрочиеОперационныеДоходыРасходы - ДО_91_02__68_02_ПрочиеОперационныеДоходыРасходы;
		П0001023520 = -П0001023520; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023520" + Графа, П0001023520);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023520" + Графа, "Строка 23520 ""Прочие операционные расходы"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеОперационныеДоходыРасходы"]) + """/", ДО_91_02_ПрочиеОперационныеДоходыРасходы,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023520" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеОперационныеДоходыРасходы"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ПрочиеОперационныеДоходыРасходы, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23521 "Штрафы, пени, неустойки к уплате"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23521", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ШтрафыПениНеустойкиКПолучениюУплате = ДО_91_02_ВПДР.ШтрафыПениНеустойкиКПолучениюУплате;
		ДО_91_02__68_02_ШтрафыПениНеустойкиКПолучениюУплате = ДО_91_02__68_02_ВПДР.ШтрафыПениНеустойкиКПолучениюУплате;

		П0001023521 = ДО_91_02_ШтрафыПениНеустойкиКПолучениюУплате - ДО_91_02__68_02_ШтрафыПениНеустойкиКПолучениюУплате;
		П0001023521 = -П0001023521; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023521" + Графа, П0001023521);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023521" + Графа, "Строка 23521 ""Штрафы, пени, неустойки к уплате"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ШтрафыПениНеустойкиКПолучениюУплате"]) + """/", ДО_91_02_ШтрафыПениНеустойкиКПолучениюУплате,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023521" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ШтрафыПениНеустойкиКПолучениюУплате"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ШтрафыПениНеустойкиКПолучениюУплате, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23522 "Убытки прошлых лет"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23522", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ПрибыльУбытокПрошлыхЛет = ДО_91_02_ВПДР.ПрибыльУбытокПрошлыхЛет;
		ДО_91_02__68_02_ПрибыльУбытокПрошлыхЛет = ДО_91_02__68_02_ВПДР.ПрибыльУбытокПрошлыхЛет;

		П0001023522 = ДО_91_02_ПрибыльУбытокПрошлыхЛет - ДО_91_02__68_02_ПрибыльУбытокПрошлыхЛет;
		П0001023522 = -П0001023522; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023522" + Графа, П0001023522);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023522" + Графа, "Строка 23522 ""Убытки прошлых лет"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрибыльУбытокПрошлыхЛет"]) + """/", ДО_91_02_ПрибыльУбытокПрошлыхЛет,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023522" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрибыльУбытокПрошлыхЛет"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ПрибыльУбытокПрошлыхЛет, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23523 "Курсовые разницы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23523", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_КурсовыеРазницы = ДО_91_02_ВПДР.КурсовыеРазницы;

		П0001023523 = ДО_91_02_КурсовыеРазницы;
		П0001023523 = -П0001023523; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023523" + Графа, П0001023523);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023523" + Графа, "Строка 23523 ""Курсовые разницы"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["КурсовыеРазницы"]) + """/", ДО_91_02_КурсовыеРазницы,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23524 "Курсовые разницы по расчетам в у.е."
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23524", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_КурсовыеРазницыПоРасчетамВУЕ = ДО_91_02_ВПДР.КурсовыеРазницыПоРасчетамВУЕ;

		П0001023524 = ДО_91_02_КурсовыеРазницыПоРасчетамВУЕ;
		П0001023524 = -П0001023524; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023524" + Графа, П0001023524);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023524" + Графа, "Строка 23524 ""Курсовые разницы по расчетам в у.е."", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["КурсовыеРазницыПоРасчетамВУЕ"]) + """/", ДО_91_02_КурсовыеРазницыПоРасчетамВУЕ,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23525 "Налоги и сборы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23525", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_НалогиИСборы = ДО_91_02_ВПДР.НалогиИСборы;

		П0001023525 = ДО_91_02_НалогиИСборы;
		П0001023525 = -П0001023525; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023525" + Графа, П0001023525);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023525" + Графа, "Строка 23525 ""Налоги и сборы"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["НалогиИСборы"]) + """/", ДО_91_02_НалогиИСборы,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23526 "Премия, выплаченная покупателю"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23526", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ПремияПокупателю = ДО_91_02_ВПДР.ПремияПокупателю;

		П0001023526 = ДО_91_02_ПремияПокупателю;
		П0001023526 = -П0001023526; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023526" + Графа, П0001023526);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023526" + Графа, "Строка 23526 ""Премия, выплаченная покупателю"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПремияПокупателю"]) + """/", ДО_91_02_ПремияПокупателю,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23527 "Расходы в виде списанной дебиторской задолженности"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23528", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_СписаниеДебиторскойКредиторскойЗадолженности = ДО_91_02_ВПДР.СписаниеДебиторскойКредиторскойЗадолженности;
		ДО_91_02_НДСПоСписаннойКредиторскойЗадолженности = ДО_91_02_ВПДР.НДСПоСписаннойКредиторскойЗадолженности;

		П0001023527 = ДО_91_02_СписаниеДебиторскойКредиторскойЗадолженности - ДО_91_02_НДСПоСписаннойКредиторскойЗадолженности;
		П0001023527 = -П0001023527; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023527" + Графа, П0001023527);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023527" + Графа, "Строка 23527 ""Расходы в виде списанной дебиторской задолженности"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["СписаниеДебиторскойКредиторскойЗадолженности"]) + """/", ДО_91_02_СписаниеДебиторскойКредиторскойЗадолженности,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023527" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["НДСПоСписаннойКредиторскойЗадолженности"]) + """/", -ДО_91_02_НДСПоСписаннойКредиторскойЗадолженности, Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23528 "Расходы, связанные с безвозмездным получением имущества, работ, услуг или имущественных прав"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23528", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества;

		П0001023528 = ДО_91_02_ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества;
		П0001023528 = -П0001023528; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023528" + Графа, П0001023528);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023528" + Графа, "Строка 23528 ""Расходы, связанные с безвозмездным получением имущества, работ, услуг или имущественных прав"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23529 "Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23529", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд = ДО_91_02_ВПДР.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд;

		П0001023529 = ДО_91_02_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд;
		П0001023529 = -П0001023529; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023529" + Графа, П0001023529);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023529" + Графа, "Строка 23529 ""Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд"]) + """/", ДО_91_02_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23530 "Прочие внереализационные расходы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23530", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ПрочиеВнереализационныеДоходыРасходы = ДО_91_02_ВПДР.ПрочиеВнереализационныеДоходыРасходы;
		ДО_91_02__68_02_ПрочиеВнереализационныеДоходыРасходы = ДО_91_02__68_02_ВПДР.ПрочиеВнереализационныеДоходыРасходы;

		П0001023530 = ДО_91_02_ПрочиеВнереализационныеДоходыРасходы - ДО_91_02__68_02_ПрочиеВнереализационныеДоходыРасходы;
		П0001023530 = -П0001023530; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023530" + Графа, П0001023530);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023530" + Графа, "Строка 23530 ""Прочие внереализационные расходы"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеВнереализационныеДоходыРасходы"]) + """/", ДО_91_02_ПрочиеВнереализационныеДоходыРасходы,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023530" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеВнереализационныеДоходыРасходы"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ПрочиеВнереализационныеДоходыРасходы, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23531 "Прочие косвенные расходы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23531", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ПрочиеКосвенныеРасходы = ДО_91_02_ВПДР.ПрочиеКосвенныеРасходы;
		ДО_91_02__68_02_ПрочиеКосвенныеРасходы = ДО_91_02__68_02_ВПДР.ПрочиеКосвенныеРасходы;

		П0001023531 = ДО_91_02_ПрочиеКосвенныеРасходы - ДО_91_02__68_02_ПрочиеКосвенныеРасходы;
		П0001023531 = -П0001023531; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023531" + Графа, П0001023531);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023531" + Графа, "Строка 23531 ""Прочие косвенные расходы"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеКосвенныеРасходы"]) + """/", ДО_91_02_ПрочиеКосвенныеРасходы,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023531" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеКосвенныеРасходы"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ПрочиеКосвенныеРасходы, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23532 "Расходы, связанные с переоценкой внеоборотных активов"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23532", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П0001023532 = ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов 
					- КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;
		П0001023532 = -П0001023532; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023532" + Графа, П0001023532);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023532" + Графа, "Строка 23532 ""Расходы, связанные с переоценкой внеоборотных активов"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 01, 03, 04", ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023532" + Графа, "", "-", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 02, 05", -КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 24601 "Налоги, уплачиваемые организациями, применяющими специальные налоговые режимы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока24601", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", НачалоПериодаОтчета, КонецПериодаОтчета, , Счет("99"), ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки, Счет("68.04.1"), , "Организация", мОргРасшифровка);

		ДО_99_01_НалогНаПрибыль   = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("99.01"), Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
		ДО_99_01_НалоговыеСанкции = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("99.01"), Перечисления.ПрибылиИУбытки.НалоговыеСанкции);
		
		ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, КорСчет, КорСубконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , Счет("99"), , Счет("68.04.1"), ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "Организация", мОргРасшифровка);

		КО_68_04_1__99_01_1_Налог = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет, Субконто1", Счет("68.04.1"), Счет("99.01.1"), Перечисления.ВидыПлатежейВГосБюджет.Налог);

		П0001024601 = ДО_99_01_НалогНаПрибыль
		            - КО_68_04_1__99_01_1_Налог;

		УстановитьЗначениеПоказателя("П0001024601" + Графа, П0001024601);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001024601" + Графа, "Строка 24601 ""Налоги, уплачиваемые организациями, применяющими специальные налоговые режимы"", графа """ + ЗаголовокГрафы + """", "+", "!ДО", ДО_99_01_НалогНаПрибыль, Счет("99.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета", , , , Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001024601" + Графа, "", "-", "!КО", -КО_68_04_1__99_01_1_Налог, Счет("68.04.1"), Счет("99.01.1"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета", , , , Перечисления.ВидыПлатежейВГосБюджет.Налог);
	КонецЕсли;
	
	// строка 24602 "Штрафные санкции и пени за нарушение налогового и иного законодательства"
	
	П0001024602 = ДО_99_01_НалоговыеСанкции;

	УстановитьЗначениеПоказателя("П0001024602" + Графа, П0001024602);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001024602" + Графа, "Строка 24602 ""Штрафные санкции и пени за нарушение налогового и иного законодательства"", графа """ + ЗаголовокГрафы + """", "+", "!ДО", ДО_99_01_НалоговыеСанкции, Счет("99.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета", , , , Перечисления.ПрибылиИУбытки.НалоговыеСанкции);

	// Показатели строки 2510 и строк расшифровки показателей строки 2510 рассчитываются только при составлении годовой отчетности
	Если КонецПериодаОтчета = КонецГода(КонецПериодаОтчета) Тогда
	
		// строка 2510 "Результат от переоценки внеоборотных активов, не включаемый в чистую прибыль (убыток) периода"
		КО_83_01 = КО("83.01");
		ДО_83_01 = ДО("83.01");

		П0001002510 = КО_83_01 - ДО_83_01;

		УстановитьЗначениеПоказателя("П0001002510" + Графа, П0001002510);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001002510" + Графа, "Строка 2510 ""Результат от переоценки внеоборотных активов, не включаемый в чистую прибыль (убыток) периода"", графа """ + ЗаголовокГрафы + """", "+","!КО", КО_83_01,  Счет("83.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001002510" + Графа, "", "-","!ДО", -ДО_83_01, Счет("83.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");


		// строка 25101 "Результат от переоценки основных средств, не включаемый в чистую прибыль (убыток) периода"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока25101", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			ОБ_01_01__83_01_1 = ОБ("01.01", "83.01.1", мБухИтоги);
			ОБ_83_01_1__02_01 = ОБ("83.01.1", "02.01", мБухИтоги);
			ОБ_83_01_1__01_01 = ОБ("83.01.1", "01.01", мБухИтоги);
			ОБ_02_01__83_01_1 = ОБ("02.01", "83.01.1", мБухИтоги);

			П0001025101 = ОБ_01_01__83_01_1 - ОБ_83_01_1__02_01 - ОБ_83_01_1__01_01 + ОБ_02_01__83_01_1;

			УстановитьЗначениеПоказателя("П0001025101" + Графа, П0001025101);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001025101" + Графа, "Строка 25101 ""Результат от переоценки основных средств, не включаемый в чистую прибыль (убыток) периода"", графа """ + ЗаголовокГрафы + """", "+","!ОБ", ОБ_01_01__83_01_1, мСчет["01.01"], мСчет["83.01.1"], НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001025101" + Графа, "", "-", "!ОБ", -ОБ_83_01_1__02_01, мСчет["83.01.1"], мСчет["02.01"], НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001025101" + Графа, "", "-", "!ОБ", -ОБ_83_01_1__01_01, мСчет["83.01.1"], мСчет["01.01"], НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001025101" + Графа, "", "+", "!ОБ", ОБ_02_01__83_01_1, мСчет["02.01"], мСчет["83.01.1"], НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		КонецЕсли;

		// строка 25102 "Результат от переоценки нематериальных активов, не включаемый в чистую прибыль (убыток) периода"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока25102", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			ОБ_04_01__83_01_2 = ОБ("04.01", "83.01.2", мБухИтоги);
			ОБ_83_01_2__05 	  = ОБ("83.01.2", "05", мБухИтоги);
			ОБ_83_01_2__04_01 = ОБ("83.01.2", "04.01", мБухИтоги);
			ОБ_05__83_01_2    = ОБ("05", "83.01.2", мБухИтоги);

			П0001025102 = ОБ_04_01__83_01_2 - ОБ_83_01_2__05 - ОБ_83_01_2__04_01 + ОБ_05__83_01_2;

			УстановитьЗначениеПоказателя("П0001025102" + Графа, П0001025102);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001025102" + Графа, "Строка 25102 ""Результат от переоценки нематериальных активов, не включаемый в чистую прибыль (убыток) периода"", графа """ + ЗаголовокГрафы + """", "+","!ОБ", ОБ_04_01__83_01_2, мСчет["04.01"], мСчет["83.01.2"], НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001025102" + Графа, "", "-","!ОБ", -ОБ_83_01_2__05,  мСчет["83.01.2"], мСчет["05"], НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001025102" + Графа, "", "-","!ОБ", -ОБ_83_01_2__04_01,  мСчет["83.01.2"], мСчет["04.01"], НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001025102" + Графа, "", "+","!ОБ", ОБ_05__83_01_2,  мСчет["05"], мСчет["83.01.2"], НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьАвтоФормаОтчетаОбщие()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	// АвторасчетПоказателей  - булево, признак авторасчета показателей отчетов
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("АвторасчетПоказателей",    Новый ОписаниеТипов("Булево"));

	мДеревоСтраницОтчета.Строки.Очистить();

    ///***
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Баланс";
	СтрокаУровня1.Представление            = "Бухгалтерский баланс";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаБаланс";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	///***
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФормаОтчета";
	СтрокаУровня1.Представление            = "Отчет о прибылях и убытках";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаФормаОтчета";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	ФормироватьСтруктуруСтраницОтчета();

	УстановитьВидСдачиОтчетности(1);
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(ИмяМакетаССоставомПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		
		Если ТекОбласть.Имя = "ФормаОтчетаЕНВД" И ПрименениеЕНВД Тогда
			ИмяСтраницы = "ФормаОтчета";
		ИначеЕсли ТекОбласть.Имя = "ФормаОтчетаЕНВД" И НЕ ПрименениеЕНВД Тогда
			Продолжить;
		ИначеЕсли ТекОбласть.Имя = "ФормаОтчетаНеЕНВД" И НЕ ПрименениеЕНВД Тогда
			ИмяСтраницы = "ФормаОтчета";
		ИначеЕсли ТекОбласть.Имя = "ФормаОтчетаНеЕНВД" И ПрименениеЕНВД Тогда
			Продолжить;
		Иначе
			ИмяСтраницы = ТекОбласть.Имя;
		КонецЕсли;
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			// Переопределение варианты заполнения для отдельных показателей
			// отчета движения денежных средств по сведениям до 2010 года
			Если мДатаКонцаПериодаОтчета < '20110101' Тогда
				// графа 03
				Если КодПоказателя = "П000100411203"
				 ИЛИ КодПоказателя = "П000100411303"
				 ИЛИ КодПоказателя = "П000100412303"
				 ИЛИ КодПоказателя = "П000100412403"
				 ИЛИ КодПоказателя = "П000100421203"
				 ИЛИ КодПоказателя = "П000100422203"
				 ИЛИ КодПоказателя = "П000100431203" Тогда
					чВариантЗаполнения = 0;
				КонецЕсли;
			КонецЕсли;

			Если ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12) < '20110101' Тогда
				// Графа 04
				Если КодПоказателя = "П000100411204"
				 ИЛИ КодПоказателя = "П000100411304"
				 ИЛИ КодПоказателя = "П000100412304"
				 ИЛИ КодПоказателя = "П000100412404"
				 ИЛИ КодПоказателя = "П000100421204"
				 ИЛИ КодПоказателя = "П000100422204"
				 ИЛИ КодПоказателя = "П000100431204" Тогда
					чВариантЗаполнения = 0;
				КонецЕсли;
			КонецЕсли;
			
			// Переопределение вариантов заполнения строки 2510 и строк расшифровки показателей строки 2510
			// при заполнении промежуточной отчетности
			Если мДатаКонцаПериодаОтчета <> КонецГода(мДатаКонцаПериодаОтчета) Тогда
				Если КодПоказателя = "П000100251004"
				 ИЛИ КодПоказателя = "П000100251005"
				 ИЛИ КодПоказателя = "П000102510104"
				 ИЛИ КодПоказателя = "П000102510105"
				 ИЛИ КодПоказателя = "П000102510204"
				 ИЛИ КодПоказателя = "П000102510205" Тогда
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура ПоказатьКодЕИ
// Отображает единицу измерения
//
Процедура ПоказатьКодЕИ()

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мБаланс.Области.КодЕИ.Значение = "383";
		мБаланс.Области.НазвЕИ.Значение = "в рублях";
		мФормаОтчета.Области.КодЕИ.Значение = "383";
		мФормаОтчета.Области.НазвЕИ.Значение = "в рублях";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мБаланс.Области.КодЕИ.Значение = "384";
		мБаланс.Области.НазвЕИ.Значение = "в тыс. рублей";
		мФормаОтчета.Области.КодЕИ.Значение = "384";
		мФормаОтчета.Области.НазвЕИ.Значение = "в тыс. рублей";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мБаланс.Области.КодЕИ.Значение = "385";
		мБаланс.Области.НазвЕИ.Значение = "в млн. рублей";
		мФормаОтчета.Области.КодЕИ.Значение = "385";
		мФормаОтчета.Области.НазвЕИ.Значение = "в млн. рублей";
	КонецЕсли;

КонецПроцедуры // ПоказатьКодЕИ

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// формируем соответствие счетов и их номеров
	ЗаполнитьСоответствиеСчетов(мСчет);
	
	мБезОткрытияФормы = БезОткрытияФормы;
	
	мБаланс 		= ЭлементыФормы.ПолеТабличногоДокументаБаланс;
	мФормаОтчета 	= ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета;
	
	// ряд настроек формы необходимо определить до того как произойдет начальное заполнение настроек и т.п.
	ЗаполнитьЗависимыеНастройки();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	мВПрограммеИзмененаОрганизация = Ложь;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	мРежимПечати = Ложь;
	
	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтрокаГруппы = СтруктураГруппы.Добавить();

			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки    = Колонка.Имя;
				КодПоказателя = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

				Если ОбластьЯчейки.СодержитЗначение Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
		
	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			ТочностьЕдиницыИзмерения = 0;
			
			// Инициализация переменных настройки формы
			//мПечатьБезШтрихкодаРазрешена = Истина;
			мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			
			мСохранятьРасшифровку = Истина;
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.ПодменюРасшифровка.Кнопки.КнопкаСохранятьРасшифровку.Пометка = Истина;

			УстановитьФорматВывода();

			// При создании нового всегда по умолчанию подставляем почтовый адрес организации.
			// Перевыбрать адрес можно на форме отчета.
			мТипАдреса = "ПолныйАдрПочт";

			// Заполним настройки состава дополнительных строк по умолчанию
			СформироватьНастройкиСоставаДополнительныхСтрок(СоставДополнительныхСтрок);
			
		КонецЕсли;
		
	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	
	мБаланс.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	мФормаОтчета.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,, Страница.Имя);
	КонецЦикла;

	РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма);

	мБезКонсолидации = мГруппаОрганизаций.Количество() = 0;
	НазванияОрганизаций = ПолучитьНазванияОрганизацийСтрокой();
	ЭлементыФормы.Надпись30.Заголовок = НазванияОрганизаций;
	Если НЕ мБезКонсолидации Тогда
		ЭлементыФормы.Надпись30.ГиперСсылка = Истина;
		ЭлементыФормы.Надпись30.Подсказка = "Список организаций, по которым формируется отчет";
		ЭлементыФормы.Надпись.Заголовок = "Организации:";
		Если мСохраненныйДок = Неопределено Тогда
			// При первом открытии отчета, который должен собираться по нескольким организациям
			// в поле Комментарий запишем названия всех организаций.
			КомментарийОбщий = НазванияОрганизаций;
		КонецЕсли;

	КонецЕсли;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		ПрорисоватьПодменюПечать();
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		
		ПодменюНастроекАвторасчета = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.Авторасчет;
		Для Каждого СтрокаОтчета Из мДеревоСтраницОтчета.Строки Цикл
			ПодменюНастроекАвторасчета.Кнопки.Добавить(СтрокаОтчета.ИмяСтраницы, ТипКнопкиКоманднойПанели.Действие, СтрокаОтчета.Представление, Новый Действие("ПереключитьАвторасчет"));
			Если мДеревоСтраницОтчета.Колонки.Найти("АвторасчетПоказателей") = Неопределено Тогда
				мДеревоСтраницОтчета.Колонки.Добавить("АвторасчетПоказателей");
				СтрокаОтчета.АвторасчетПоказателей = Истина;
			Иначе
				Если СтрокаОтчета.АвторасчетПоказателей = Неопределено Тогда
					СтрокаОтчета.АвторасчетПоказателей = Истина;
				КонецЕсли;
			КонецЕсли;
			ПодменюНастроекАвторасчета.Кнопки[СтрокаОтчета.ИмяСтраницы].Пометка = СтрокаОтчета.АвторасчетПоказателей;
		КонецЦикла;
	КонецЕсли;
	
	// Скрываем от пользователя дополнительные строки, не предназначенные для отображения
	УстановитьВидимостьДополнительныхСтрок();
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

Процедура ПрорисоватьПодменюПечать()
	
	ЭтоЛиквидационнаяОтчетность = (ВидСдачиОтчетности = 2 ИЛИ ВидСдачиОтчетности = 3);
	
	Если Месяц(мДатаКонцаПериодаОтчета) % 3 = 0 ИЛИ ЭтоЛиквидационнаяОтчетность Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	Иначе
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), , Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗависимыеНастройки()
	
	ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
	
	// Определяем признак применения организацией ЕНВД
	ПрименениеЕНВД = НалоговыйУчет.ПрименениеЕНВД(Организация, мДатаКонцаПериодаОтчета)
				 ИЛИ НалоговыйУчет.ПрименениеЕНВД(Организация, ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));

	// переназначаем признак применения организацией ЕНВД, если эти сведения сохранены в информационной базе
	Если мСохраненныйДок <> Неопределено Тогда
		СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
		СохраненноеПрименениеЕНВД = Неопределено;
		Если СписокСохранения.Свойство("ПрименениеЕНВД", СохраненноеПрименениеЕНВД) Тогда
			ПрименениеЕНВД = СохраненноеПрименениеЕНВД;
		КонецЕсли;
	КонецЕсли;
	
	// подменяем макет отчета о прибылях и убытках, если организация вела учет по ЕНВД в отчетном периоде или в предшествующем году
	мФормаОтчета.Очистить();
	Если ПрименениеЕНВД Тогда
		МакетОтчета = ЭтотОбъект.ПолучитьМакет("ОПУ_ЕНВД_2011Кв3");
	Иначе
		МакетОтчета = ЭтотОбъект.ПолучитьМакет("ОПУ_НеЕНВД_2011Кв3");
	КонецЕсли;
	мФормаОтчета.Вывести(МакетОтчета);
	
	// Многострочный раздел Баланс 11199
	мИдБаланс11199 = "П0001011199";

	// структура строк многострочного раздела на странице
	СтруктураБаланс11199 = Новый ТаблицаЗначений;
	СтруктураБаланс11199.Колонки.Добавить("П000101119902", ОписаниеТиповСтрока);
	СтруктураБаланс11199.Колонки.Добавить("П000101119903", ОписаниеТиповСтрока);
	СтруктураБаланс11199.Колонки.Добавить("П000101119904", ОписаниеТиповЧисло);
	СтруктураБаланс11199.Колонки.Добавить("П000101119905", ОписаниеТиповЧисло);
	СтруктураБаланс11199.Колонки.Добавить("П000101119906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс11199, СтруктураБаланс11199);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс11199, 1);

	// Многострочный раздел Баланс 11299
	мИдБаланс11299 = "П0001011299";

	// структура строк многострочного раздела на странице
	СтруктураБаланс11299 = Новый ТаблицаЗначений;
	СтруктураБаланс11299.Колонки.Добавить("П000101129902", ОписаниеТиповСтрока);
	СтруктураБаланс11299.Колонки.Добавить("П000101129903", ОписаниеТиповСтрока);
	СтруктураБаланс11299.Колонки.Добавить("П000101129904", ОписаниеТиповЧисло);
	СтруктураБаланс11299.Колонки.Добавить("П000101129905", ОписаниеТиповЧисло);
	СтруктураБаланс11299.Колонки.Добавить("П000101129906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс11299, СтруктураБаланс11299);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс11299, 1);

	// Многострочный раздел Баланс 11399
	мИдБаланс11399 = "П0001011399";

	// структура строк многострочного раздела на странице
	СтруктураБаланс11399 = Новый ТаблицаЗначений;
	СтруктураБаланс11399.Колонки.Добавить("П000101139902", ОписаниеТиповСтрока);
	СтруктураБаланс11399.Колонки.Добавить("П000101139903", ОписаниеТиповСтрока);
	СтруктураБаланс11399.Колонки.Добавить("П000101139904", ОписаниеТиповЧисло);
	СтруктураБаланс11399.Колонки.Добавить("П000101139905", ОписаниеТиповЧисло);
	СтруктураБаланс11399.Колонки.Добавить("П000101139906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс11399, СтруктураБаланс11399);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс11399, 1);

	// Многострочный раздел Баланс 11499
	мИдБаланс11499 = "П0001011499";

	// структура строк многострочного раздела на странице
	СтруктураБаланс11499 = Новый ТаблицаЗначений;
	СтруктураБаланс11499.Колонки.Добавить("П000101149902", ОписаниеТиповСтрока);
	СтруктураБаланс11499.Колонки.Добавить("П000101149903", ОписаниеТиповСтрока);
	СтруктураБаланс11499.Колонки.Добавить("П000101149904", ОписаниеТиповЧисло);
	СтруктураБаланс11499.Колонки.Добавить("П000101149905", ОписаниеТиповЧисло);
	СтруктураБаланс11499.Колонки.Добавить("П000101149906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс11499, СтруктураБаланс11499);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс11499, 1);

	// Многострочный раздел Баланс 11599
	мИдБаланс11599 = "П0001011599";

	// структура строк многострочного раздела на странице
	СтруктураБаланс11599 = Новый ТаблицаЗначений;
	СтруктураБаланс11599.Колонки.Добавить("П000101159902", ОписаниеТиповСтрока);
	СтруктураБаланс11599.Колонки.Добавить("П000101159903", ОписаниеТиповСтрока);
	СтруктураБаланс11599.Колонки.Добавить("П000101159904", ОписаниеТиповЧисло);
	СтруктураБаланс11599.Колонки.Добавить("П000101159905", ОписаниеТиповЧисло);
	СтруктураБаланс11599.Колонки.Добавить("П000101159906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс11599, СтруктураБаланс11599);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс11599, 1);

	// Многострочный раздел Баланс 11699
	мИдБаланс11699 = "П0001011699";

	// структура строк многострочного раздела на странице
	СтруктураБаланс11699 = Новый ТаблицаЗначений;
	СтруктураБаланс11699.Колонки.Добавить("П000101169902", ОписаниеТиповСтрока);
	СтруктураБаланс11699.Колонки.Добавить("П000101169903", ОписаниеТиповСтрока);
	СтруктураБаланс11699.Колонки.Добавить("П000101169904", ОписаниеТиповЧисло);
	СтруктураБаланс11699.Колонки.Добавить("П000101169905", ОписаниеТиповЧисло);
	СтруктураБаланс11699.Колонки.Добавить("П000101169906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс11699, СтруктураБаланс11699);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс11699, 1);

	// Многострочный раздел Баланс 11799
	мИдБаланс11799 = "П0001011799";

	// структура строк многострочного раздела на странице
	СтруктураБаланс11799 = Новый ТаблицаЗначений;
	СтруктураБаланс11799.Колонки.Добавить("П000101179902", ОписаниеТиповСтрока);
	СтруктураБаланс11799.Колонки.Добавить("П000101179903", ОписаниеТиповСтрока);
	СтруктураБаланс11799.Колонки.Добавить("П000101179904", ОписаниеТиповЧисло);
	СтруктураБаланс11799.Колонки.Добавить("П000101179905", ОписаниеТиповЧисло);
	СтруктураБаланс11799.Колонки.Добавить("П000101179906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс11799, СтруктураБаланс11799);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс11799, 1);

	// Многострочный раздел Баланс 12199
	мИдБаланс12199 = "П0001012199";

	// структура строк многострочного раздела на странице
	СтруктураБаланс12199 = Новый ТаблицаЗначений;
	СтруктураБаланс12199.Колонки.Добавить("П000101219902", ОписаниеТиповСтрока);
	СтруктураБаланс12199.Колонки.Добавить("П000101219903", ОписаниеТиповСтрока);
	СтруктураБаланс12199.Колонки.Добавить("П000101219904", ОписаниеТиповЧисло);
	СтруктураБаланс12199.Колонки.Добавить("П000101219905", ОписаниеТиповЧисло);
	СтруктураБаланс12199.Колонки.Добавить("П000101219906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс12199, СтруктураБаланс12199);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс12199, 1);

	// Многострочный раздел Баланс 12299
	мИдБаланс12299 = "П0001012299";

	// структура строк многострочного раздела на странице
	СтруктураБаланс12299 = Новый ТаблицаЗначений;
	СтруктураБаланс12299.Колонки.Добавить("П000101229902", ОписаниеТиповСтрока);
	СтруктураБаланс12299.Колонки.Добавить("П000101229903", ОписаниеТиповСтрока);
	СтруктураБаланс12299.Колонки.Добавить("П000101229904", ОписаниеТиповЧисло);
	СтруктураБаланс12299.Колонки.Добавить("П000101229905", ОписаниеТиповЧисло);
	СтруктураБаланс12299.Колонки.Добавить("П000101229906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс12299, СтруктураБаланс12299);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс12299, 1);

	// Многострочный раздел Баланс 12399
	мИдБаланс12399 = "П0001012399";

	// структура строк многострочного раздела на странице
	СтруктураБаланс12399 = Новый ТаблицаЗначений;
	СтруктураБаланс12399.Колонки.Добавить("П000101239902", ОписаниеТиповСтрока);
	СтруктураБаланс12399.Колонки.Добавить("П000101239903", ОписаниеТиповСтрока);
	СтруктураБаланс12399.Колонки.Добавить("П000101239904", ОписаниеТиповЧисло);
	СтруктураБаланс12399.Колонки.Добавить("П000101239905", ОписаниеТиповЧисло);
	СтруктураБаланс12399.Колонки.Добавить("П000101239906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс12399, СтруктураБаланс12399);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс12399, 1);

	// Многострочный раздел Баланс 12499
	мИдБаланс12499 = "П0001012499";

	// структура строк многострочного раздела на странице
	СтруктураБаланс12499 = Новый ТаблицаЗначений;
	СтруктураБаланс12499.Колонки.Добавить("П000101249902", ОписаниеТиповСтрока);
	СтруктураБаланс12499.Колонки.Добавить("П000101249903", ОписаниеТиповСтрока);
	СтруктураБаланс12499.Колонки.Добавить("П000101249904", ОписаниеТиповЧисло);
	СтруктураБаланс12499.Колонки.Добавить("П000101249905", ОписаниеТиповЧисло);
	СтруктураБаланс12499.Колонки.Добавить("П000101249906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс12499, СтруктураБаланс12499);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс12499, 1);

	// Многострочный раздел Баланс 12599
	мИдБаланс12599 = "П0001012599";

	// структура строк многострочного раздела на странице
	СтруктураБаланс12599 = Новый ТаблицаЗначений;
	СтруктураБаланс12599.Колонки.Добавить("П000101259902", ОписаниеТиповСтрока);
	СтруктураБаланс12599.Колонки.Добавить("П000101259903", ОписаниеТиповСтрока);
	СтруктураБаланс12599.Колонки.Добавить("П000101259904", ОписаниеТиповЧисло);
	СтруктураБаланс12599.Колонки.Добавить("П000101259905", ОписаниеТиповЧисло);
	СтруктураБаланс12599.Колонки.Добавить("П000101259906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс12599, СтруктураБаланс12599);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс12599, 1);

	// Многострочный раздел Баланс 12699
	мИдБаланс12699 = "П0001012699";

	// структура строк многострочного раздела на странице
	СтруктураБаланс12699 = Новый ТаблицаЗначений;
	СтруктураБаланс12699.Колонки.Добавить("П000101269902", ОписаниеТиповСтрока);
	СтруктураБаланс12699.Колонки.Добавить("П000101269903", ОписаниеТиповСтрока);
	СтруктураБаланс12699.Колонки.Добавить("П000101269904", ОписаниеТиповЧисло);
	СтруктураБаланс12699.Колонки.Добавить("П000101269905", ОписаниеТиповЧисло);
	СтруктураБаланс12699.Колонки.Добавить("П000101269906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс12699, СтруктураБаланс12699);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс12699, 1);

	// Многострочный раздел Баланс 13199
	мИдБаланс13199 = "П0001013199";

	// структура строк многострочного раздела на странице
	СтруктураБаланс13199 = Новый ТаблицаЗначений;
	СтруктураБаланс13199.Колонки.Добавить("П000101319902", ОписаниеТиповСтрока);
	СтруктураБаланс13199.Колонки.Добавить("П000101319903", ОписаниеТиповСтрока);
	СтруктураБаланс13199.Колонки.Добавить("П000101319904", ОписаниеТиповЧисло);
	СтруктураБаланс13199.Колонки.Добавить("П000101319905", ОписаниеТиповЧисло);
	СтруктураБаланс13199.Колонки.Добавить("П000101319906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс13199, СтруктураБаланс13199);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс13199, 1);

	// Многострочный раздел Баланс 13299
	мИдБаланс13299 = "П0001013299";

	// структура строк многострочного раздела на странице
	СтруктураБаланс13299 = Новый ТаблицаЗначений;
	СтруктураБаланс13299.Колонки.Добавить("П000101329902", ОписаниеТиповСтрока);
	СтруктураБаланс13299.Колонки.Добавить("П000101329903", ОписаниеТиповСтрока);
	СтруктураБаланс13299.Колонки.Добавить("П000101329904", ОписаниеТиповЧисло);
	СтруктураБаланс13299.Колонки.Добавить("П000101329905", ОписаниеТиповЧисло);
	СтруктураБаланс13299.Колонки.Добавить("П000101329906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс13299, СтруктураБаланс13299);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс13299, 1);

	// Многострочный раздел Баланс 13499
	мИдБаланс13499 = "П0001013499";

	// структура строк многострочного раздела на странице
	СтруктураБаланс13499 = Новый ТаблицаЗначений;
	СтруктураБаланс13499.Колонки.Добавить("П000101349902", ОписаниеТиповСтрока);
	СтруктураБаланс13499.Колонки.Добавить("П000101349903", ОписаниеТиповСтрока);
	СтруктураБаланс13499.Колонки.Добавить("П000101349904", ОписаниеТиповЧисло);
	СтруктураБаланс13499.Колонки.Добавить("П000101349905", ОписаниеТиповЧисло);
	СтруктураБаланс13499.Колонки.Добавить("П000101349906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс13499, СтруктураБаланс13499);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс13499, 1);

	// Многострочный раздел Баланс 13599
	мИдБаланс13599 = "П0001013599";

	// структура строк многострочного раздела на странице
	СтруктураБаланс13599 = Новый ТаблицаЗначений;
	СтруктураБаланс13599.Колонки.Добавить("П000101359902", ОписаниеТиповСтрока);
	СтруктураБаланс13599.Колонки.Добавить("П000101359903", ОписаниеТиповСтрока);
	СтруктураБаланс13599.Колонки.Добавить("П000101359904", ОписаниеТиповЧисло);
	СтруктураБаланс13599.Колонки.Добавить("П000101359905", ОписаниеТиповЧисло);
	СтруктураБаланс13599.Колонки.Добавить("П000101359906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс13599, СтруктураБаланс13599);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс13599, 1);

	// Многострочный раздел Баланс 13699
	мИдБаланс13699 = "П0001013699";

	// структура строк многострочного раздела на странице
	СтруктураБаланс13699 = Новый ТаблицаЗначений;
	СтруктураБаланс13699.Колонки.Добавить("П000101369902", ОписаниеТиповСтрока);
	СтруктураБаланс13699.Колонки.Добавить("П000101369903", ОписаниеТиповСтрока);
	СтруктураБаланс13699.Колонки.Добавить("П000101369904", ОписаниеТиповЧисло);
	СтруктураБаланс13699.Колонки.Добавить("П000101369905", ОписаниеТиповЧисло);
	СтруктураБаланс13699.Колонки.Добавить("П000101369906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс13699, СтруктураБаланс13699);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс13699, 1);

	// Многострочный раздел Баланс 13799
	мИдБаланс13799 = "П0001013799";

	// структура строк многострочного раздела на странице
	СтруктураБаланс13799 = Новый ТаблицаЗначений;
	СтруктураБаланс13799.Колонки.Добавить("П000101379902", ОписаниеТиповСтрока);
	СтруктураБаланс13799.Колонки.Добавить("П000101379903", ОписаниеТиповСтрока);
	СтруктураБаланс13799.Колонки.Добавить("П000101379904", ОписаниеТиповЧисло);
	СтруктураБаланс13799.Колонки.Добавить("П000101379905", ОписаниеТиповЧисло);
	СтруктураБаланс13799.Колонки.Добавить("П000101379906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс13799, СтруктураБаланс13799);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс13799, 1);

	// Многострочный раздел Баланс 14199
	мИдБаланс14199 = "П0001014199";

	// структура строк многострочного раздела на странице
	СтруктураБаланс14199 = Новый ТаблицаЗначений;
	СтруктураБаланс14199.Колонки.Добавить("П000101419902", ОписаниеТиповСтрока);
	СтруктураБаланс14199.Колонки.Добавить("П000101419903", ОписаниеТиповСтрока);
	СтруктураБаланс14199.Колонки.Добавить("П000101419904", ОписаниеТиповЧисло);
	СтруктураБаланс14199.Колонки.Добавить("П000101419905", ОписаниеТиповЧисло);
	СтруктураБаланс14199.Колонки.Добавить("П000101419906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс14199, СтруктураБаланс14199);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс14199, 1);

	// Многострочный раздел Баланс 14299
	мИдБаланс14299 = "П0001014299";

	// структура строк многострочного раздела на странице
	СтруктураБаланс14299 = Новый ТаблицаЗначений;
	СтруктураБаланс14299.Колонки.Добавить("П000101429902", ОписаниеТиповСтрока);
	СтруктураБаланс14299.Колонки.Добавить("П000101429903", ОписаниеТиповСтрока);
	СтруктураБаланс14299.Колонки.Добавить("П000101429904", ОписаниеТиповЧисло);
	СтруктураБаланс14299.Колонки.Добавить("П000101429905", ОписаниеТиповЧисло);
	СтруктураБаланс14299.Колонки.Добавить("П000101429906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс14299, СтруктураБаланс14299);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс14299, 1);

	// Многострочный раздел Баланс 14599
	мИдБаланс14599 = "П0001014599";

	// структура строк многострочного раздела на странице
	СтруктураБаланс14599 = Новый ТаблицаЗначений;
	СтруктураБаланс14599.Колонки.Добавить("П000101459902", ОписаниеТиповСтрока);
	СтруктураБаланс14599.Колонки.Добавить("П000101459903", ОписаниеТиповСтрока);
	СтруктураБаланс14599.Колонки.Добавить("П000101459904", ОписаниеТиповЧисло);
	СтруктураБаланс14599.Колонки.Добавить("П000101459905", ОписаниеТиповЧисло);
	СтруктураБаланс14599.Колонки.Добавить("П000101459906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс14599, СтруктураБаланс14599);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс14599, 1);

	// Многострочный раздел Баланс 15199
	мИдБаланс15199 = "П0001015199";

	// структура строк многострочного раздела на странице
	СтруктураБаланс15199 = Новый ТаблицаЗначений;
	СтруктураБаланс15199.Колонки.Добавить("П000101519902", ОписаниеТиповСтрока);
	СтруктураБаланс15199.Колонки.Добавить("П000101519903", ОписаниеТиповСтрока);
	СтруктураБаланс15199.Колонки.Добавить("П000101519904", ОписаниеТиповЧисло);
	СтруктураБаланс15199.Колонки.Добавить("П000101519905", ОписаниеТиповЧисло);
	СтруктураБаланс15199.Колонки.Добавить("П000101519906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс15199, СтруктураБаланс15199);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс15199, 1);

	// Многострочный раздел Баланс 15299
	мИдБаланс15299 = "П0001015299";

	// структура строк многострочного раздела на странице
	СтруктураБаланс15299 = Новый ТаблицаЗначений;
	СтруктураБаланс15299.Колонки.Добавить("П000101529902", ОписаниеТиповСтрока);
	СтруктураБаланс15299.Колонки.Добавить("П000101529903", ОписаниеТиповСтрока);
	СтруктураБаланс15299.Колонки.Добавить("П000101529904", ОписаниеТиповЧисло);
	СтруктураБаланс15299.Колонки.Добавить("П000101529905", ОписаниеТиповЧисло);
	СтруктураБаланс15299.Колонки.Добавить("П000101529906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс15299, СтруктураБаланс15299);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс15299, 1);

	// Многострочный раздел Баланс 15399
	мИдБаланс15399 = "П0001015399";

	// структура строк многострочного раздела на странице
	СтруктураБаланс15399 = Новый ТаблицаЗначений;
	СтруктураБаланс15399.Колонки.Добавить("П000101539902", ОписаниеТиповСтрока);
	СтруктураБаланс15399.Колонки.Добавить("П000101539903", ОписаниеТиповСтрока);
	СтруктураБаланс15399.Колонки.Добавить("П000101539904", ОписаниеТиповЧисло);
	СтруктураБаланс15399.Колонки.Добавить("П000101539905", ОписаниеТиповЧисло);
	СтруктураБаланс15399.Колонки.Добавить("П000101539906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс15399, СтруктураБаланс15399);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс15399, 1);

	// Многострочный раздел Баланс 15599
	мИдБаланс15599 = "П0001015599";

	// структура строк многострочного раздела на странице
	СтруктураБаланс15599 = Новый ТаблицаЗначений;
	СтруктураБаланс15599.Колонки.Добавить("П000101559902", ОписаниеТиповСтрока);
	СтруктураБаланс15599.Колонки.Добавить("П000101559903", ОписаниеТиповСтрока);
	СтруктураБаланс15599.Колонки.Добавить("П000101559904", ОписаниеТиповЧисло);
	СтруктураБаланс15599.Колонки.Добавить("П000101559905", ОписаниеТиповЧисло);
	СтруктураБаланс15599.Колонки.Добавить("П000101559906", ОписаниеТиповЧисло);

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(мИдБаланс15599, СтруктураБаланс15599);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдБаланс15599, 1);

	// многострочные части отчета о прибылях и убытках, зависящие от использования ЕНВД
	Если ПрименениеЕНВД Тогда
		
		// Многострочный раздел ФормаОтчета 02340
		мИдФормаОтчета02340 = "П1001002340";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02340 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02340.Колонки.Добавить("П100100234002", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02340.Колонки.Добавить("П100100234003", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02340.Колонки.Добавить("П100100234004", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02340.Колонки.Добавить("П100100234005", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02340, СтруктураФормаОтчета02340);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02340, 1);

		// Многострочный раздел ФормаОтчета 02350
		мИдФормаОтчета02350 = "П1001002350";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02350 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02350.Колонки.Добавить("П100100235002", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02350.Колонки.Добавить("П100100235003", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02350.Колонки.Добавить("П100100235004", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02350.Колонки.Добавить("П100100235005", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02350, СтруктураФормаОтчета02350);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02350, 1);

		// Многострочный раздел ФормаОтчета 02421
		мИдФормаОтчета02421 = "П1001002421";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02421 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02421.Колонки.Добавить("П100100242102", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02421.Колонки.Добавить("П100100242103", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02421.Колонки.Добавить("П100100242104", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02421.Колонки.Добавить("П100100242105", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02421, СтруктураФормаОтчета02421);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02421, 1);

		// Многострочный раздел ФормаОтчета 02430
		мИдФормаОтчета02430 = "П1001002430";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02430 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02430.Колонки.Добавить("П100100243002", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02430.Колонки.Добавить("П100100243003", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02430.Колонки.Добавить("П100100243004", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02430.Колонки.Добавить("П100100243005", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02430, СтруктураФормаОтчета02430);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02430, 1);

		// Многострочный раздел ФормаОтчета 02450
		мИдФормаОтчета02450 = "П1001002450";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02450 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02450.Колонки.Добавить("П100100245002", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02450.Колонки.Добавить("П100100245003", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02450.Колонки.Добавить("П100100245004", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02450.Колонки.Добавить("П100100245005", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02450, СтруктураФормаОтчета02450);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02450, 1);

		// Многострочный раздел ФормаОтчета 02460
		мИдФормаОтчета02460 = "П1001002460";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02460 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02460.Колонки.Добавить("П100100246002", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02460.Колонки.Добавить("П100100246003", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02460.Колонки.Добавить("П100100246004", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02460.Колонки.Добавить("П100100246005", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02460, СтруктураФормаОтчета02460);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02460, 1);

		// Многострочный раздел ФормаОтчета 21001
		мИдФормаОтчета21001 = "П1001021001";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета21001 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета21001.Колонки.Добавить("П100102100102", ОписаниеТиповСтрока);
		СтруктураФормаОтчета21001.Колонки.Добавить("П100102100103", ОписаниеТиповСтрока);
		СтруктураФормаОтчета21001.Колонки.Добавить("П100102100104", ОписаниеТиповЧисло);
		СтруктураФормаОтчета21001.Колонки.Добавить("П100102100105", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета21001, СтруктураФормаОтчета21001);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета21001, 1);

		// Многострочный раздел ФормаОтчета 21002
		мИдФормаОтчета21002 = "П1001021002";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета21002 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета21002.Колонки.Добавить("П100102100202", ОписаниеТиповСтрока);
		СтруктураФормаОтчета21002.Колонки.Добавить("П100102100203", ОписаниеТиповСтрока);
		СтруктураФормаОтчета21002.Колонки.Добавить("П100102100204", ОписаниеТиповЧисло);
		СтруктураФормаОтчета21002.Колонки.Добавить("П100102100205", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета21002, СтруктураФормаОтчета21002);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета21002, 1);

		// Многострочный раздел ФормаОтчета 21101
		мИдФормаОтчета21101 = "П1001021101";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета21101 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета21101.Колонки.Добавить("П100102110102", ОписаниеТиповСтрока);
		СтруктураФормаОтчета21101.Колонки.Добавить("П100102110103", ОписаниеТиповСтрока);
		СтруктураФормаОтчета21101.Колонки.Добавить("П100102110104", ОписаниеТиповЧисло);
		СтруктураФормаОтчета21101.Колонки.Добавить("П100102110105", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета21101, СтруктураФормаОтчета21101);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета21101, 1);

		// Многострочный раздел ФормаОтчета 21102
		мИдФормаОтчета21102 = "П1001021102";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета21102 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета21102.Колонки.Добавить("П100102110202", ОписаниеТиповСтрока);
		СтруктураФормаОтчета21102.Колонки.Добавить("П100102110203", ОписаниеТиповСтрока);
		СтруктураФормаОтчета21102.Колонки.Добавить("П100102110204", ОписаниеТиповЧисло);
		СтруктураФормаОтчета21102.Колонки.Добавить("П100102110205", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета21102, СтруктураФормаОтчета21102);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета21102, 1);

		// Многострочный раздел ФормаОтчета 21201
		мИдФормаОтчета21201 = "П1001021201";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета21201 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета21201.Колонки.Добавить("П100102120102", ОписаниеТиповСтрока);
		СтруктураФормаОтчета21201.Колонки.Добавить("П100102120103", ОписаниеТиповСтрока);
		СтруктураФормаОтчета21201.Колонки.Добавить("П100102120104", ОписаниеТиповЧисло);
		СтруктураФормаОтчета21201.Колонки.Добавить("П100102120105", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета21201, СтруктураФормаОтчета21201);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета21201, 1);

		// Многострочный раздел ФормаОтчета 21202
		мИдФормаОтчета21202 = "П1001021202";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета21202 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета21202.Колонки.Добавить("П100102120202", ОписаниеТиповСтрока);
		СтруктураФормаОтчета21202.Колонки.Добавить("П100102120203", ОписаниеТиповСтрока);
		СтруктураФормаОтчета21202.Колонки.Добавить("П100102120204", ОписаниеТиповЧисло);
		СтруктураФормаОтчета21202.Колонки.Добавить("П100102120205", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета21202, СтруктураФормаОтчета21202);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета21202, 1);

		// Многострочный раздел ФормаОтчета 22001
		мИдФормаОтчета22001 = "П1001022001";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета22001 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета22001.Колонки.Добавить("П100102200102", ОписаниеТиповСтрока);
		СтруктураФормаОтчета22001.Колонки.Добавить("П100102200103", ОписаниеТиповСтрока);
		СтруктураФормаОтчета22001.Колонки.Добавить("П100102200104", ОписаниеТиповЧисло);
		СтруктураФормаОтчета22001.Колонки.Добавить("П100102200105", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета22001, СтруктураФормаОтчета22001);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета22001, 1);

		// Многострочный раздел ФормаОтчета 22002
		мИдФормаОтчета22002 = "П1001022002";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета22002 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета22002.Колонки.Добавить("П100102200202", ОписаниеТиповСтрока);
		СтруктураФормаОтчета22002.Колонки.Добавить("П100102200203", ОписаниеТиповСтрока);
		СтруктураФормаОтчета22002.Колонки.Добавить("П100102200204", ОписаниеТиповЧисло);
		СтруктураФормаОтчета22002.Колонки.Добавить("П100102200205", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета22002, СтруктураФормаОтчета22002);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета22002, 1);

		// Многострочный раздел ФормаОтчета 22101
		мИдФормаОтчета22101 = "П1001022101";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета22101 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета22101.Колонки.Добавить("П100102210102", ОписаниеТиповСтрока);
		СтруктураФормаОтчета22101.Колонки.Добавить("П100102210103", ОписаниеТиповСтрока);
		СтруктураФормаОтчета22101.Колонки.Добавить("П100102210104", ОписаниеТиповЧисло);
		СтруктураФормаОтчета22101.Колонки.Добавить("П100102210105", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета22101, СтруктураФормаОтчета22101);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета22101, 1);

		// Многострочный раздел ФормаОтчета 22102
		мИдФормаОтчета22102 = "П1001022102";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета22102 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета22102.Колонки.Добавить("П100102210202", ОписаниеТиповСтрока);
		СтруктураФормаОтчета22102.Колонки.Добавить("П100102210203", ОписаниеТиповСтрока);
		СтруктураФормаОтчета22102.Колонки.Добавить("П100102210204", ОписаниеТиповЧисло);
		СтруктураФормаОтчета22102.Колонки.Добавить("П100102210205", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета22102, СтруктураФормаОтчета22102);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета22102, 1);

		// Многострочный раздел ФормаОтчета 22201
		мИдФормаОтчета22201 = "П1001022201";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета22201 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета22201.Колонки.Добавить("П100102220102", ОписаниеТиповСтрока);
		СтруктураФормаОтчета22201.Колонки.Добавить("П100102220103", ОписаниеТиповСтрока);
		СтруктураФормаОтчета22201.Колонки.Добавить("П100102220104", ОписаниеТиповЧисло);
		СтруктураФормаОтчета22201.Колонки.Добавить("П100102220105", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета22201, СтруктураФормаОтчета22201);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета22201, 1);

		// Многострочный раздел ФормаОтчета 22202
		мИдФормаОтчета22202 = "П1001022202";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета22202 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета22202.Колонки.Добавить("П100102220202", ОписаниеТиповСтрока);
		СтруктураФормаОтчета22202.Колонки.Добавить("П100102220203", ОписаниеТиповСтрока);
		СтруктураФормаОтчета22202.Колонки.Добавить("П100102220204", ОписаниеТиповЧисло);
		СтруктураФормаОтчета22202.Колонки.Добавить("П100102220205", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета22202, СтруктураФормаОтчета22202);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета22202, 1);

	Иначе
		// Многострочный раздел ФормаОтчета 02100
		мИдФормаОтчета02100 = "П1001002100";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02100 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02100.Колонки.Добавить("П100100210002", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02100.Колонки.Добавить("П100100210003", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02100.Колонки.Добавить("П100100210004", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02100.Колонки.Добавить("П100100210005", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02100, СтруктураФормаОтчета02100);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02100, 1);

		// Многострочный раздел ФормаОтчета 02110
		мИдФормаОтчета02110 = "П1001002110";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02110 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02110.Колонки.Добавить("П100100211002", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02110.Колонки.Добавить("П100100211003", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02110.Колонки.Добавить("П100100211004", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02110.Колонки.Добавить("П100100211005", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02110, СтруктураФормаОтчета02110);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02110, 1);

		// Многострочный раздел ФормаОтчета 02120
		мИдФормаОтчета02120 = "П1001002120";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02120 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02120.Колонки.Добавить("П100100212002", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02120.Колонки.Добавить("П100100212003", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02120.Колонки.Добавить("П100100212004", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02120.Колонки.Добавить("П100100212005", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02120, СтруктураФормаОтчета02120);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02120, 1);

		// Многострочный раздел ФормаОтчета 02200
		мИдФормаОтчета02200 = "П1001002200";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02200 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02200.Колонки.Добавить("П100100220002", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02200.Колонки.Добавить("П100100220003", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02200.Колонки.Добавить("П100100220004", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02200.Колонки.Добавить("П100100220005", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02200, СтруктураФормаОтчета02200);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02200, 1);

		// Многострочный раздел ФормаОтчета 02210
		мИдФормаОтчета02210 = "П1001002210";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02210 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02210.Колонки.Добавить("П100100221002", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02210.Колонки.Добавить("П100100221003", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02210.Колонки.Добавить("П100100221004", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02210.Колонки.Добавить("П100100221005", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02210, СтруктураФормаОтчета02210);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02210, 1);

		// Многострочный раздел ФормаОтчета 02220
		мИдФормаОтчета02220 = "П1001002220";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02220 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02220.Колонки.Добавить("П100100222002", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02220.Колонки.Добавить("П100100222003", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02220.Колонки.Добавить("П100100222004", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02220.Колонки.Добавить("П100100222005", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02220, СтруктураФормаОтчета02220);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02220, 1);

		// Многострочный раздел ФормаОтчета 02300
		мИдФормаОтчета02300 = "П1001002300";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02300 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02300.Колонки.Добавить("П100100230002", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02300.Колонки.Добавить("П100100230003", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02300.Колонки.Добавить("П100100230004", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02300.Колонки.Добавить("П100100230005", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02300, СтруктураФормаОтчета02300);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02300, 1);

		// Многострочный раздел ФормаОтчета 02340
		мИдФормаОтчета02340 = "П1001002340";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02340 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02340.Колонки.Добавить("П100100234002", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02340.Колонки.Добавить("П100100234003", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02340.Колонки.Добавить("П100100234004", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02340.Колонки.Добавить("П100100234005", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02340, СтруктураФормаОтчета02340);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02340, 1);

		// Многострочный раздел ФормаОтчета 02350
		мИдФормаОтчета02350 = "П1001002350";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02350 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02350.Колонки.Добавить("П100100235002", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02350.Колонки.Добавить("П100100235003", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02350.Колонки.Добавить("П100100235004", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02350.Колонки.Добавить("П100100235005", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02350, СтруктураФормаОтчета02350);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02350, 1);

		// Многострочный раздел ФормаОтчета 02421
		мИдФормаОтчета02421 = "П1001002421";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02421 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02421.Колонки.Добавить("П100100242102", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02421.Колонки.Добавить("П100100242103", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02421.Колонки.Добавить("П100100242104", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02421.Колонки.Добавить("П100100242105", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02421, СтруктураФормаОтчета02421);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02421, 1);

		// Многострочный раздел ФормаОтчета 02430
		мИдФормаОтчета02430 = "П1001002430";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02430 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02430.Колонки.Добавить("П100100243002", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02430.Колонки.Добавить("П100100243003", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02430.Колонки.Добавить("П100100243004", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02430.Колонки.Добавить("П100100243005", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02430, СтруктураФормаОтчета02430);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02430, 1);

		// Многострочный раздел ФормаОтчета 02450
		мИдФормаОтчета02450 = "П1001002450";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02450 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02450.Колонки.Добавить("П100100245002", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02450.Колонки.Добавить("П100100245003", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02450.Колонки.Добавить("П100100245004", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02450.Колонки.Добавить("П100100245005", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02450, СтруктураФормаОтчета02450);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02450, 1);

		// Многострочный раздел ФормаОтчета 02460
		мИдФормаОтчета02460 = "П1001002460";

		// структура строк многострочного раздела на странице
		СтруктураФормаОтчета02460 = Новый ТаблицаЗначений;
		СтруктураФормаОтчета02460.Колонки.Добавить("П100100246002", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02460.Колонки.Добавить("П100100246003", ОписаниеТиповСтрока);
		СтруктураФормаОтчета02460.Колонки.Добавить("П100100246004", ОписаниеТиповЧисло);
		СтруктураФормаОтчета02460.Колонки.Добавить("П100100246005", ОписаниеТиповЧисло);

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(мИдФормаОтчета02460, СтруктураФормаОтчета02460);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдФормаОтчета02460, 1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьСтраницыОтчета(Форма) Экспорт

	Если ТипЗнч(Форма.мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	ИмеютсяСкрытые      = Ложь;
	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из Форма.мДеревоВыбранныхСтраниц.Строки Цикл

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		ПоказатьСтраницу   = СтрокаУровня1.ПоказатьСтраницу;

		Если Форма.ЭлементыФормы.ОсновнаяПанель.Страницы.Найти(ИмяСтраницыПанели) <> Неопределено Тогда
			Если ПоказатьСтраницу = 0 Тогда
				Форма.ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Ложь;
				ИмеютсяСкрытые = Истина;
			Иначе
				Форма.ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Истина;

			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	// обновляем исходное дерево значений 
	Форма.мДеревоСтраницОтчета = Форма.мДеревоВыбранныхСтраниц.Скопировать();

	КнопкиНастройки = Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.КнопкаНастройкаСтраниц;
	ИсходныйТекст   = "Настройка";

	Если ИмеютсяСкрытые Тогда
		// Выводим в названии кнопки "Настройка страниц" доп. сммвол '*'.
		КнопкиНастройки.Текст = ИсходныйТекст + " (*)...";
	КонецЕсли;
	Если НЕ ИмеютсяСкрытые Тогда
		КнопкиНастройки.Текст = ИсходныйТекст + "...";
	КонецЕсли;

КонецПроцедуры // ПоказатьСтраницыОтчета()

Процедура УстановитьВидСдачиОтчетности(КодВидаСдачиОтчетности = 1)

	Если КодВидаСдачиОтчетности <> Неопределено Тогда
		Если НЕ (КодВидаСдачиОтчетности = 2 ИЛИ КодВидаСдачиОтчетности = 3) Тогда
			КодВидаСдачиОтчетности = 1;
		КонецЕсли;
	Иначе
		КодВидаСдачиОтчетности = 1;
	КонецЕсли;
	
	ВидСдачиОтчетности = КодВидаСдачиОтчетности;
	ЭлементыФормы.ПолеВыбораВидСдачиОтчетности.Значение = ВидСдачиОтчетности;

КонецПроцедуры // УстановитьВидСдачиОтчетности()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонфигурации = "БП" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		ЭлементыФормы.ФлажокВнешДанные.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	Ответ = Вопрос("Внимание! Перед заполнением будут очищены все показатели отчетов." + Символы.ПС
		  + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Если Ответ = КодВозвратаДиалога.Нет Тогда

		Возврат;

	Иначе

		ЗаполнитьАвто();

	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Ответ = Вопрос("Внимание! Будут очищены все показатели отчета." + Символы.ПС
		  + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Если Ответ = КодВозвратаДиалога.Нет Тогда

		Возврат;

	Иначе

		Очистить();

	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено И ВыполняетсяСоотношениеПоказателей(Истина) Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
	//РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);
	// процедура перенесена в модуль формы в связи с необходимостью расширенного управления настройками
	ПоказатьСтраницыОтчета(ЭтаФорма); 

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	мДеревоВыбранныхСтраниц = "";
	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();
	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Ложь;
	ФормаНастройкиОтчета.мПараметры.ПроверкаСоотношений = Ложь;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		ПрорисоватьПодменюПечать();
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Изменяет признак авторасчета для показателей отчетов
// Кнопки переключения регистрируются в функции Иницилизация(). Имена кнопок должны
// соответствовать именам страниц элемента ОсновнаяПанель
//
// Параметры
//  Элемент  - ЭлементФормы, элемент формы, из которого вызван обработчик
//
Процедура ПереключитьАвторасчет(Элемент)
	Элемент.Пометка = НЕ Элемент.Пометка;
	
	ИмяСтраницы = Элемент.Имя;
	СтрокаНастройки = мДеревоСтраницОтчета.Строки.Найти(ИмяСтраницы, "ИмяСтраницы");
	
	Если СтрокаНастройки <> Неопределено Тогда
		СтрокаНастройки.АвторасчетПоказателей = НЕ СтрокаНастройки.АвторасчетПоказателей;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницы);
		Для Каждого СтрокаВариантаЗаполнения Из ТаблицаВариантыЗаполнения Цикл
			Если СтрокаВариантаЗаполнения.ВариантЗаполнения = 4 ИЛИ СтрокаВариантаЗаполнения.ВариантЗаполнения = 0 Тогда
				СтрокаВариантаЗаполнения.ВариантЗаполнения = ?(СтрокаНастройки.АвторасчетПоказателей, 4, 0);
			Иначе
				// изменений не требуется
			КонецЕсли;
		КонецЦикла;
		
		УстановитьЦветФонаЯчейки(, , ИмяСтраницы);
	Иначе
		// предполагается что все странцы формы корректно прописаны в дереве значений мДеревоСтраницОтчета
	КонецЕсли;
	
	// инициируем пересчет показателей
	Расчет();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасшифровка(Кнопка)
	Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
	Обраб.Форма = ЭтаФорма;
	ТекущийЛист = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ТекущееТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ТекущийЛист];
	Обраб.ИмяЯчейки = ЭлементыФормы[ТекущееТабличноеПоле.Имя].ТекущаяОбласть.Имя;
	
	// переопределение вызова формы
	ИмяЯчейки = ЭлементыФормы[ТекущееТабличноеПоле.Имя].ТекущаяОбласть.Имя;	
	Если СпП.Найти(ИмяЯчейки, "ИмяЯчейки") = Неопределено Тогда
		Предупреждение("Расшифровка для выбранной ячейки не существует");
	Иначе
		Обраб.ПолучитьФорму(, ЭтаФорма).Показать();
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельФормыСохранять(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	мСохранятьРасшифровку = Кнопка.Пометка;
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	мБаланс.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	мФормаОтчета.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;

	ЗаполнитьСведенияОбОрганизации(Истина);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленной единицей измерения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленной единицей измерения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаБалансПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Баланс");
	
КонецПроцедуры // ПолеТабличногоДокументаБалансПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаФормаОтчетаПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ФормаОтчета");
	
КонецПроцедуры

// Процедуры - обработчики события "ПриИзмененияСодержимогоОбласти"
// поля табличного документа формы
// 
Процедура ПолеТабличногоДокументаБалансПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения(мБаланс);
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаБалансПриИзмененииСодержимогоОбласти

Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)
	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения(мФормаОтчета);
	Иначе
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

// Процедуры - обработчики события "ПриИзменении" поля выбора варианта заполнения
// активной ячейки табличного документа.
//
Процедура ПолеВыбораВариантЗаполненияБалансПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист2ПриИзменении()

Процедура ПолеВыбораВариантЗаполненияФормаОтчетаПриИзменении(Элемент)
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиБалансПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

Процедура ПолеВводаЗначениеКорректировкиФормаОтчетаПриИзменении(Элемент)
	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;
КонецПроцедуры

// Процедуры - обработчики события "ПриИзменении" значения в поле ввода
// "Комментарий" по ячейке, для которой установлен алгоритм автозаполнения 
// [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийБалансПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийПриИзменении()

Процедура ПолеВводаКомментарийФормаОтчетаПриИзменении(Элемент)
	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ  
//                                                             

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Если ВыполняетсяСоотношениеПоказателей(Истина) Тогда
		Выгрузить();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	// проверям соотношение показателей
	Если ВыполняетсяСоотношениеПоказателей(Истина) Тогда
		НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
		СпДокОсн = Новый СписокЗначений;
		СпДокОсн.Добавить(мСохраненныйДок);
	 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	Возврат ПроверитьПоказателиXML();
	
КонецФункции

Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УниверсальнаяВыгрузкаXML(Текст);
	
КонецФункции

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ФОРМАТЕ 5 (XML)
//

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		//Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказателиXML() Экспорт
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция УниверсальнаяВыгрузкаXML(ТекстВыгрузки = Неопределено) Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в тысячах"" или ""в миллионах"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""0"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	Иначе
		//Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИдФайл + ".xml";
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СхемаВыгрузки501_Кв3");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИдФайл(Параметры)
	
	Возврат Параметры.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПосредника), Параметры.КодИФНСПосредника, Параметры.КодИФНС)
			+ "_" + Параметры.КодИФНС
			+ "_" + ?(Параметры.Свойство("ЭтоПБОЮЛ") И Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННОрг), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
			+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Процедура ОбработатьПоказателиПередВыгрузкой()
	Перем ЗначениеПоказателя;

	Разделы = Новый Массив;
	Разделы.Добавить(мДанныеОтчета.ПолеТабличногоДокументаБаланс);
	Разделы.Добавить(мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета);
	Для Каждого Пок Из ИменаПоказателейСоЗнакомПлюс Цикл
		Для Каждого ПоказателиТекущегоРаздела Из Разделы Цикл
			Если ПоказателиТекущегоРаздела.Свойство(Пок + "_1") Тогда
				НомерСтроки = 1;
				Пока ПоказателиТекущегоРаздела.Свойство(Пок + "_" + Формат(НомерСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
					Если ЗначениеПоказателя < 0 Тогда
						ПоказателиТекущегоРаздела.Вставить(Пок + "_" + Формат(НомерСтроки, "ЧГ="), -ЗначениеПоказателя);
					КонецЕсли;
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла;
			ИначеЕсли ПоказателиТекущегоРаздела.Свойство(Пок, ЗначениеПоказателя) И ЗначениеПоказателя < 0 Тогда
				ПоказателиТекущегоРаздела.Вставить(Пок, -ЗначениеПоказателя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВиртуальныеСтрокиРасшифровки(Раздел, ДанныеРаздела, СоставДополнительныхСтрок, ПрименяетсяЕНВД = Ложь)

	Если Раздел = "ПолеТабличногоДокументаБаланс" Тогда
		ДеревоНастройкиСостава = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
		
		// Строки расшифровки строки 1110
		НомерСтроки = 1;
		ПрефиксВиртуальнойСтроки = "П2001001110";
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока11101") Тогда
			ПрефиксСтроки = "П0001011101";
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, "Нематериальные активы в организации");
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04"]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05"]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "06"]);
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока11102") Тогда
			ПрефиксСтроки = "П0001011102";
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, "Приобретение нематериальных активов");
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04"]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05"]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "06"]);
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		ПрефиксСтроки = "П0001011199";
		НомерСтрокиМногострочнойЧасти = 1;
		Пока ДанныеРаздела.Свойство(ПрефиксСтроки + "02_" + НомерСтрокиМногострочнойЧасти) Цикл
			Если Не ПустаяСтрока(ДанныеРаздела[ПрефиксСтроки + "02_" + НомерСтрокиМногострочнойЧасти]) Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "02_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "06_" + НомерСтрокиМногострочнойЧасти]);
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
			НомерСтрокиМногострочнойЧасти = НомерСтрокиМногострочнойЧасти + 1;
		КонецЦикла;
		
		// Строки расшифровки строки 1120
		НомерСтроки = 1;
		ПрефиксВиртуальнойСтроки = "П2001001120";
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока11201") Тогда
			ПрефиксСтроки = "П0001011201";
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, "Расходы на научно-исследовательские, опытно-конструкторские и технологические работы");
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04"]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05"]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "06"]);
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока11202") Тогда
			ПрефиксСтроки = "П0001011202";
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, "Выполнение научно-исследовательских, опытно-конструкторских и технологических работ");
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04"]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05"]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "06"]);
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		ПрефиксСтроки = "П0001011299";
		НомерСтрокиМногострочнойЧасти = 1;
		Пока ДанныеРаздела.Свойство(ПрефиксСтроки + "02_" + НомерСтрокиМногострочнойЧасти) Цикл
			Если Не ПустаяСтрока(ДанныеРаздела[ПрефиксСтроки + "02_" + НомерСтрокиМногострочнойЧасти]) Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "02_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "06_" + НомерСтрокиМногострочнойЧасти]);
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
			НомерСтрокиМногострочнойЧасти = НомерСтрокиМногострочнойЧасти + 1;
		КонецЦикла;
		
		// Строки расшифровки строки 1130
		ПрефиксВиртуальнойСтроки  = "П2001001130";
		ПрефиксМногострочнойЧасти = "П0001011399";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("11301", "Основные средства в организации");
		СписокФиксированныхСтрок.Добавить("11302", "Объекты недвижимости, права собственности на которые не зарегистрированы");
		СписокФиксированныхСтрок.Добавить("11303", "Оборудование к установке");
		СписокФиксированныхСтрок.Добавить("11304", "Приобретение земельных участков");
		СписокФиксированныхСтрок.Добавить("11305", "Приобретение объектов природопользования");
		СписокФиксированныхСтрок.Добавить("11306", "Строительство объектов основных средств");
		СписокФиксированныхСтрок.Добавить("11307", "Приобретение объектов основных средств");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1140
		ПрефиксВиртуальнойСтроки  = "П2001001140";
		ПрефиксМногострочнойЧасти = "П0001011499";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("11401", "Материальные ценности в организации");
		СписокФиксированныхСтрок.Добавить("11402", "Материальные ценности предоставленные во временное владение и пользование");
		СписокФиксированныхСтрок.Добавить("11403", "Материальные ценности предоставленные во временное пользование");
		СписокФиксированныхСтрок.Добавить("11404", "Прочие доходные вложения");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1150
		ПрефиксВиртуальнойСтроки  = "П2001001150";
		ПрефиксМногострочнойЧасти = "П0001011599";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("11501", "Паи");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1160
		ПрефиксВиртуальнойСтроки  = "П2001001160";
		ПрефиксМногострочнойЧасти = "П0001011699";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1170
		ПрефиксВиртуальнойСтроки  = "П2001001170";
		ПрефиксМногострочнойЧасти = "П0001011799";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("11701", "Перевод молодняка животных в основное стадо");
		СписокФиксированныхСтрок.Добавить("11702", "Приобретение взрослых животных");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1210
		ПрефиксВиртуальнойСтроки  = "П2001001210";
		ПрефиксМногострочнойЧасти = "П0001012199";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12101", "Материалы");
		СписокФиксированныхСтрок.Добавить("12102", "Брак в производстве");
		СписокФиксированныхСтрок.Добавить("12103", "Товары отгруженные");
		СписокФиксированныхСтрок.Добавить("12104", "Товары");
		СписокФиксированныхСтрок.Добавить("12105", "Готовая продукция");
		СписокФиксированныхСтрок.Добавить("12106", "Расходы на продажу");
		СписокФиксированныхСтрок.Добавить("12107", "Выполненные этапы по незавершенным работам");
		СписокФиксированныхСтрок.Добавить("12108", "Основное производство");
		СписокФиксированныхСтрок.Добавить("12109", "Полуфабрикаты собственного производства");
		СписокФиксированныхСтрок.Добавить("12110", "Вспомогательные производства");
		СписокФиксированныхСтрок.Добавить("12111", "Обслуживающие производства и хозяйства");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1220
		ПрефиксВиртуальнойСтроки  = "П2001001220";
		ПрефиксМногострочнойЧасти = "П0001012299";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12201", "НДС по приобретенным ОС");
		СписокФиксированныхСтрок.Добавить("12202", "НДС по приобретенным НМА");
		СписокФиксированныхСтрок.Добавить("12203", "НДС по приобретенным материально-производственным запасам");
		СписокФиксированныхСтрок.Добавить("12204", "НДС по приобретенным услугам");
		СписокФиксированныхСтрок.Добавить("12205", "НДС, уплаченный при ввозе товаров на территорию РФ");
		СписокФиксированныхСтрок.Добавить("12206", "НДС по товарам, реализованным по ставке 0% (экспорт)");
		СписокФиксированныхСтрок.Добавить("12207", "НДС при строительстве ОС");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1230
		ПрефиксВиртуальнойСтроки  = "П2001001230";
		ПрефиксМногострочнойЧасти = "П0001012399";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12301", "Расчеты с поставщиками и подрядчиками");
		СписокФиксированныхСтрок.Добавить("12302", "Расчеты с покупателями и заказчиками");
		СписокФиксированныхСтрок.Добавить("12303", "Расчеты по налогам и сборам");
		СписокФиксированныхСтрок.Добавить("12304", "Расчеты по социальному страхованию и обеспечению");
		СписокФиксированныхСтрок.Добавить("12305", "Расчеты с подотчетными лицами");
		СписокФиксированныхСтрок.Добавить("12306", "Расчеты с персоналом по прочим операциям");
		СписокФиксированныхСтрок.Добавить("12307", "Расчеты по вкладам в уставный (складочный) капитал");
		СписокФиксированныхСтрок.Добавить("12308", "Расчеты с разными дебиторами и кредиторами");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1240
		ПрефиксВиртуальнойСтроки  = "П2001001240";
		ПрефиксМногострочнойЧасти = "П0001012499";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12401", "Акции");
		СписокФиксированныхСтрок.Добавить("12402", "Долговые ценные бумаги");
		СписокФиксированныхСтрок.Добавить("12403", "Предоставленные займы");
		СписокФиксированныхСтрок.Добавить("12404", "Вклады по договору простого товарищества");
		СписокФиксированныхСтрок.Добавить("12405", "Приобретенные права в рамках оказания финансовых услуг");
		СписокФиксированныхСтрок.Добавить("12406", "Депозитные счета");
		СписокФиксированныхСтрок.Добавить("12407", "Депозитные счета (в валюте)");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1250
		ПрефиксВиртуальнойСтроки  = "П2001001250";
		ПрефиксМногострочнойЧасти = "П0001012599";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12501", "Касса организации");
		СписокФиксированныхСтрок.Добавить("12502", "Операционная касса");
		СписокФиксированныхСтрок.Добавить("12503", "Касса организации (в валюте)");
		СписокФиксированныхСтрок.Добавить("12504", "Расчетные счета");
		СписокФиксированныхСтрок.Добавить("12505", "Валютные счета");
		СписокФиксированныхСтрок.Добавить("12506", "Аккредитивы");
		СписокФиксированныхСтрок.Добавить("12507", "Чековые книжки");
		СписокФиксированныхСтрок.Добавить("12508", "Прочие специальные счета");
		СписокФиксированныхСтрок.Добавить("12509", "Аккредитивы (в валюте)");
		СписокФиксированныхСтрок.Добавить("12510", "Прочие специальные счета (в валюте)");
		СписокФиксированныхСтрок.Добавить("12511", "Переводы в пути");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1260
		ПрефиксВиртуальнойСтроки  = "П2001001260";
		ПрефиксМногострочнойЧасти = "П0001012699";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12601", "Акцизы по оплаченным материальным ценностям");
		СписокФиксированныхСтрок.Добавить("12602", "Денежные документы");
		СписокФиксированныхСтрок.Добавить("12603", "Денежные документы (в валюте)");
		СписокФиксированныхСтрок.Добавить("12604", "НДС по экспорту к возмещению");
		СписокФиксированныхСтрок.Добавить("12605", "НДС по авансам и предоплатам");
		СписокФиксированныхСтрок.Добавить("12606", "НДС, начисленный по отгрузке");
		СписокФиксированныхСтрок.Добавить("12607", "Расчеты по НДС при исполнении обязанностей налогового агента");
		СписокФиксированныхСтрок.Добавить("12608", "Расходы будущих периодов");
		СписокФиксированныхСтрок.Добавить("12609", "Недостачи и потери от порчи ценностей");
		СписокФиксированныхСтрок.Добавить("12610", "Оценочные обязательства");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1310
		ПрефиксВиртуальнойСтроки  = "П2001001310";
		ПрефиксМногострочнойЧасти = "П0001013199";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1320
		ПрефиксВиртуальнойСтроки  = "П2001001320";
		ПрефиксМногострочнойЧасти = "П0001013299";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1340
		ПрефиксВиртуальнойСтроки  = "П2001001340";
		ПрефиксМногострочнойЧасти = "П0001013499";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("13401", "Переоценка основных средств");
		СписокФиксированныхСтрок.Добавить("13402", "Переоценка НМА");
		СписокФиксированныхСтрок.Добавить("13403", "Переоценка прочих внеоборотных активов");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1350
		ПрефиксВиртуальнойСтроки  = "П2001001350";
		ПрефиксМногострочнойЧасти = "П0001013599";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1360
		ПрефиксВиртуальнойСтроки  = "П2001001360";
		ПрефиксМногострочнойЧасти = "П0001013699";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("13601", "Резервы, образованные в соответствии с законодательством");
		СписокФиксированныхСтрок.Добавить("13602", "Резервы, образованные в соответствии с учредительными документами");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1370
		ПрефиксВиртуальнойСтроки  = "П2001001370";
		ПрефиксМногострочнойЧасти = "П0001013799";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1410
		ПрефиксВиртуальнойСтроки  = "П2001001410";
		ПрефиксМногострочнойЧасти = "П0001014199";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("14101", "Долгосрочные кредиты");
		СписокФиксированныхСтрок.Добавить("14102", "Долгосрочные займы");
		СписокФиксированныхСтрок.Добавить("14103", "Долгосрочные кредиты (в валюте)");
		СписокФиксированныхСтрок.Добавить("14104", "Долгосрочные займы (в валюте)");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1420
		ПрефиксВиртуальнойСтроки  = "П2001001420";
		ПрефиксМногострочнойЧасти = "П0001014299";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1450
		ПрефиксВиртуальнойСтроки  = "П2001001450";
		ПрефиксМногострочнойЧасти = "П0001014599";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1510
		ПрефиксВиртуальнойСтроки  = "П2001001510";
		ПрефиксМногострочнойЧасти = "П0001015199";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("15101", "Краткосрочные кредиты");
		СписокФиксированныхСтрок.Добавить("15102", "Краткосрочные займы");
		СписокФиксированныхСтрок.Добавить("15103", "Проценты по краткосрочным кредитам");
		СписокФиксированныхСтрок.Добавить("15104", "Проценты по долгосрочным кредитам");
		СписокФиксированныхСтрок.Добавить("15105", "Проценты по краткосрочным займам");
		СписокФиксированныхСтрок.Добавить("15106", "Проценты по долгосрочным займам");
		СписокФиксированныхСтрок.Добавить("15107", "Краткосрочные кредиты (в валюте)");
		СписокФиксированныхСтрок.Добавить("15108", "Краткосрочные займы (в валюте)");
		СписокФиксированныхСтрок.Добавить("15109", "Проценты по краткосрочным кредитам (в валюте)");
		СписокФиксированныхСтрок.Добавить("15110", "Проценты по долгосрочным кредитам (в валюте)");
		СписокФиксированныхСтрок.Добавить("15111", "Проценты по краткосрочным займам (в валюте)");
		СписокФиксированныхСтрок.Добавить("15112", "Проценты по долгосрочным займам (в валюте)");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1520
		ПрефиксВиртуальнойСтроки  = "П2001001520";
		ПрефиксМногострочнойЧасти = "П0001015299";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("15201", "Расчеты с поставщиками и подрядчиками");
		СписокФиксированныхСтрок.Добавить("15202", "Расчеты с покупателями и заказчиками");
		СписокФиксированныхСтрок.Добавить("15203", "Расчеты по налогам и сборам");
		СписокФиксированныхСтрок.Добавить("15204", "Расчеты по социальному страхованию и обеспечению");
		СписокФиксированныхСтрок.Добавить("15205", "Расчеты с персоналом по оплате труда");
		СписокФиксированныхСтрок.Добавить("15206", "Расчеты с подотчетными лицами");
		СписокФиксированныхСтрок.Добавить("15207", "Задолженность участникам (учредителям) по выплате доходов");
		СписокФиксированныхСтрок.Добавить("15208", "Расчеты с разными дебиторами и кредиторами");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
				
		// Строки расшифровки строки 1530
		ПрефиксВиртуальнойСтроки  = "П2001001530";
		ПрефиксМногострочнойЧасти = "П0001015399";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("15301", "Целевое финансирование");
		СписокФиксированныхСтрок.Добавить("15302", "Доходы, полученные в счет будущих периодов");
		СписокФиксированныхСтрок.Добавить("15303", "Безвозмездные поступления");
		СписокФиксированныхСтрок.Добавить("15304", "Предстоящие поступления по недостачам, выявленным за прошлые годы");
		СписокФиксированныхСтрок.Добавить("15305", "Разница между суммой, подлежащей взысканию с виновных лиц, и балансовой стоимостью по недостачам ценностей");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1550
		ПрефиксВиртуальнойСтроки  = "П2001001550";
		ПрефиксМногострочнойЧасти = "П0001015599";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
	КонецЕсли;
	
	Если Раздел = "ПолеТабличногоДокументаФормаОтчета" Тогда
		
		ДеревоНастройкиСостава = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета;
		
		// Строки расшифровки строки 2110
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002110";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("21101", "Выручка по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("21102", "Выручка по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002110";
			ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока2110"), "П1001002110", "");
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2120
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002120";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("21201", "Cебестоимость продаж по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("21202", "Cебестоимость продаж по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002120";
			ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока2120"), "П1001002120", "");
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2100
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002100";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("21001", "Валовая прибыль (убыток) по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("21002", "Валовая прибыль (убыток) по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002100";
			ПрефиксМногострочнойЧасти = "П1001002100";
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2210
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002210";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("22101", "Коммерческие расходы по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("22102", "Коммерческие расходы по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002210";
			ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока2210"), "П1001002210", "");
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2220
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002220";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("22201", "Управленческие расходы по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("22202", "Управленческие  расходы по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002220";
			ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока2220"), "П1001002220", "");
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2200
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002200";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("22001", "Прибыль (убыток) от продаж по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("22002", "Прибыль (убыток) от продаж по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002200";
			ПрефиксМногострочнойЧасти = "П1001002200";
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2310
		ПрефиксВиртуальнойСтроки  = "П2001002310";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23101", "Доходы (расходы), связанные с участием в других организациях");
		СписокФиксированныхСтрок.Добавить("23102", "Долевое участие в иностранных организациях");
		СписокФиксированныхСтрок.Добавить("23103", "Долевое участие в российских организациях");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2320
		ПрефиксВиртуальнойСтроки  = "П2001002320";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23201", "Проценты к получению");
		СписокФиксированныхСтрок.Добавить("23202", "Проценты по государственным ценным бумагам");
		СписокФиксированныхСтрок.Добавить("23203", "Проценты по государственным ценным бумагам по ставке 0%");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2330
		ПрефиксВиртуальнойСтроки  = "П2001002330";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23301", "Проценты к уплате");
		СписокФиксированныхСтрок.Добавить("23302", "Проценты, начисленные в соответствии со статьей 269 НК РФ");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2340
		ПрефиксВиртуальнойСтроки  = "П2001002340";
		ПрефиксМногострочнойЧасти = "П1001002340";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23401", "Доходы, связанные с реализацией основных средств");
		СписокФиксированныхСтрок.Добавить("23402", "Доходы, связанные с ликвидацией основных средств");
		СписокФиксированныхСтрок.Добавить("23403", "Доходы, связанные с реализацией нематериальных активов");
		СписокФиксированныхСтрок.Добавить("23404", "Доходы, связанные с реализацией прочего имущества");
		СписокФиксированныхСтрок.Добавить("23405", "Доходы, связанные с реализацией права требования как оказания финансовых услуг");
		СписокФиксированныхСтрок.Добавить("23406", "Доходы, связанные с реализацией права до наступления платежа");
		СписокФиксированныхСтрок.Добавить("23407", "Доходы, связанные с реализацией права после наступления срока платежа");
		СписокФиксированныхСтрок.Добавить("23408", "Доходы, связанные с реализацией имущественных прав, кроме права требования");
		СписокФиксированныхСтрок.Добавить("23409", "Доходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств");
		СписокФиксированныхСтрок.Добавить("23410", "Доходы, связанные с реализацией ценных бумаг");
		СписокФиксированныхСтрок.Добавить("23411", "Доходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке");
		СписокФиксированныхСтрок.Добавить("23412", "Доходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке");
		СписокФиксированныхСтрок.Добавить("23413", "Доходы, связанные со сдачей имущества в аренду (субаренду)");
		СписокФиксированныхСтрок.Добавить("23414", "Доходы в виде восстановленных оценочных резервов");
		СписокФиксированныхСтрок.Добавить("23415", "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам");
		СписокФиксированныхСтрок.Добавить("23416", "Прочие операционные доходы");
		СписокФиксированныхСтрок.Добавить("23417", "Штрафы, пени, неустойки к получению");
		СписокФиксированныхСтрок.Добавить("23418", "Прибыль прошлых лет");
		СписокФиксированныхСтрок.Добавить("23419", "Возмещение убытков к получению");
		СписокФиксированныхСтрок.Добавить("23420", "Курсовые разницы");
		СписокФиксированныхСтрок.Добавить("23421", "Курсовые разницы по расчетам в у.е.");
		СписокФиксированныхСтрок.Добавить("23422", "Доходы в виде списанной кредиторской задолженности");
		СписокФиксированныхСтрок.Добавить("23423", "Доходы, связанные с переоценкой внеоборотных активов");
		СписокФиксированныхСтрок.Добавить("23424", "Прочие внереализационные доходы");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2350
		ПрефиксВиртуальнойСтроки  = "П2001002350";
		ПрефиксМногострочнойЧасти = "П1001002350";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23501", "Расходы, связанные с участием в других организациях");
		СписокФиксированныхСтрок.Добавить("23502", "Расходы, связанные с участием в российских организациях");
		СписокФиксированныхСтрок.Добавить("23503", "Расходы, связанные с участием в иностранных организациях");
		СписокФиксированныхСтрок.Добавить("23504", "Расходы, связанные с реализацией основных средств");
		СписокФиксированныхСтрок.Добавить("23505", "Расходы, связанные с ликвидацией основных средств");
		СписокФиксированныхСтрок.Добавить("23506", "Расходы, связанные с реализацией нематериальных активов");
		СписокФиксированныхСтрок.Добавить("23507", "Расходы, связанные с реализацией прочего имущества");
		СписокФиксированныхСтрок.Добавить("23508", "Расходы, связанный с реализацией права требования как оказания финансовых услуг");
		СписокФиксированныхСтрок.Добавить("23509", "Расходы, связанные с реализацией права требования до наступления срока платежа");
		СписокФиксированныхСтрок.Добавить("23510", "Расходы, связанные с реализацией права требования после наступления срока платежа");
		СписокФиксированныхСтрок.Добавить("23511", "Расходы, связанные с реализацией имущественных прав, кроме права требования");
		СписокФиксированныхСтрок.Добавить("23512", "Расходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств");
		СписокФиксированныхСтрок.Добавить("23513", "Расходы, связанные с реализацией ценных бумаг");
		СписокФиксированныхСтрок.Добавить("23514", "Расходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке");
		СписокФиксированныхСтрок.Добавить("23515", "Расходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке");
		СписокФиксированныхСтрок.Добавить("23516", "Расходы, связанные со сдачей имущества в аренду (субаренду)");
		СписокФиксированныхСтрок.Добавить("23517", "Расходы в виде образованных оценочных резервов");
		СписокФиксированныхСтрок.Добавить("23518", "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам");
		СписокФиксированныхСтрок.Добавить("23519", "Расходы на услуги банков");
		СписокФиксированныхСтрок.Добавить("23520", "Прочие операционные расходы");
		СписокФиксированныхСтрок.Добавить("23521", "Штрафы, пени, неустойки к уплате");
		СписокФиксированныхСтрок.Добавить("23522", "Убытки прошлых лет");
		СписокФиксированныхСтрок.Добавить("23523", "Курсовые разницы");
		СписокФиксированныхСтрок.Добавить("23524", "Курсовые разницы по расчетам в у.е.");
		СписокФиксированныхСтрок.Добавить("23525", "Налоги и сборы");
		СписокФиксированныхСтрок.Добавить("23526", "Премия, выплаченная покупателю");
		СписокФиксированныхСтрок.Добавить("23527", "Расходы в виде списанной дебиторской задолженности");
		СписокФиксированныхСтрок.Добавить("23528", "Расходы, связанные с безвозмездным получением имущества, работ, услуг или имущественных прав");
		СписокФиксированныхСтрок.Добавить("23529", "Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд");
		СписокФиксированныхСтрок.Добавить("23530", "Прочие внереализационные расходы");
		СписокФиксированныхСтрок.Добавить("23531", "Прочие косвенные расходы");
		СписокФиксированныхСтрок.Добавить("23532", "Расходы, связанные с переоценкой внеоборотных активов");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2300
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002300";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("23001", "Прибыль (убыток) до налогообложения по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("23002", "Прибыль (убыток) до налогообложения по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002300";
			ПрефиксМногострочнойЧасти = "П1001002300";
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2421
		ПрефиксВиртуальнойСтроки  = "П2001002421";
		ПрефиксМногострочнойЧасти = "П1001002421";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
 		// Строки расшифровки строки 2430
		ПрефиксВиртуальнойСтроки  = "П2001002430";
		ПрефиксМногострочнойЧасти = "П1001002430";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
 		// Строки расшифровки строки 2450
		ПрефиксВиртуальнойСтроки  = "П2001002450";
		ПрефиксМногострочнойЧасти = "П1001002450";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
 		// Строки расшифровки строки 2460
		ПрефиксВиртуальнойСтроки  = "П2001002460";
		ПрефиксМногострочнойЧасти = "П1001002460";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("24601", "Налоги, уплачиваемые организациями, применяющими специальные налоговые режимы");
		СписокФиксированныхСтрок.Добавить("24602", "Штрафные санкции и пени за нарушению налогового и иного законодательства");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
 		// Строки расшифровки строки 2510
		ПрефиксВиртуальнойСтроки  = "П2001002510";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("25101", "Результат от переоценки основных средств, не включаемый в чистую прибыль (убыток) периода");
		СписокФиксированныхСтрок.Добавить("25102", "Результат от переоценки нематериальных активов, не включаемый в чистую прибыль (убыток) периода");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
   КонецЕсли;
	
	Возврат ДанныеРаздела; 

КонецФункции // ПолучитьВиртуальныеСтрокиРасшифровки()

Процедура ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СтруктураФиксированныхСтрок = Неопределено, ПрефиксМногострочнойЧасти)

	НомерСтроки = 1;
	// обработка фиксированных строк
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Значение;
			НаименованиеСтроки = ФиксированнаяСтрока.Представление;
			ПрефиксСтроки = "П00010" + КодСтроки;
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока" + КодСтроки) Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, НаименованиеСтроки);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "06"]);
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// обработка пользовательских строк
	НомерСтрокиМногострочнойЧасти = 1;
	Пока ДанныеРаздела.Свойство(ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти) Цикл
		Если Не ПустаяСтрока(ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти]) Тогда
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "04_" + НомерСтрокиМногострочнойЧасти]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "05_" + НомерСтрокиМногострочнойЧасти]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "06_" + НомерСтрокиМногострочнойЧасти]);
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		НомерСтрокиМногострочнойЧасти = НомерСтрокиМногострочнойЧасти + 1;
	КонецЦикла;
	
КонецПроцедуры // ВнестиВиртуальныеСтрокиРасшифровкиБаланс()

Процедура ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СтруктураФиксированныхСтрок = Неопределено, ПрефиксМногострочнойЧасти)

	НомерСтроки = 1;
	// обработка фиксированных строк
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Значение;
			НаименованиеСтроки = ФиксированнаяСтрока.Представление;
			ПрефиксСтроки = "П00010" + КодСтроки;
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока" + КодСтроки) Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, НаименованиеСтроки);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05"]);
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// обработка пользовательских строк
	Если Не ПустаяСтрока(ПрефиксМногострочнойЧасти) Тогда
		НомерСтрокиМногострочнойЧасти = 1;
		Пока ДанныеРаздела.Свойство(ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти) Цикл
			Если Не ПустаяСтрока(ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти]) Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "04_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "05_" + НомерСтрокиМногострочнойЧасти]);
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
			НомерСтрокиМногострочнойЧасти = НомерСтрокиМногострочнойЧасти + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ВнестиВиртуальныеСтрокиРасшифровкиБаланс()

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	СоставДополнительныхСтрок = СохрСтруктура.СоставДополнительныхСтрок;
	ПрименяетсяЕНВД = СохрСтруктура.ПрименениеЕНВД;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		// Подмена строк расшифровки виртуальной многострочной частью
		ЗначенияРаздела = ПолучитьВиртуальныеСтрокиРасшифровки(Раздел.Ключ, Раздел.Значение, СоставДополнительныхСтрок, ПрименяетсяЕНВД);
		мДанныеОтчета.Вставить(Раздел.Ключ, ЗначенияРаздела);
	КонецЦикла;
	
	ОбработатьПоказателиПередВыгрузкой();
	
	АдресДляВыгрузки = "";
	Если ПустаяСтрока(ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргПочтАдрес) Тогда
		мАдресДляВыгрузки = "";
	ИначеЕсли НЕ СохрСтруктура.Свойство("Адрес9Запятых", АдресДляВыгрузки) ИЛИ НЕ ЗначениеЗаполнено(АдресДляВыгрузки) Тогда
		Адреса = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "АдрЮР, АдрПочт");
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
			АдрЮР = "";
		Иначе
			АдрЮР = Адреса.АдрЮР;
		КонецЕсли;
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
			АдрПочт = "";
		Иначе
			АдрПочт = Адреса.АдрПочт;
		КонецЕсли;
		Если ЗначениеЗаполнено(АдрПочт) Тогда
			АдресДляВыгрузки = АдрПочт;
		Иначе
			АдресДляВыгрузки = АдрЮР;
		КонецЕсли;
	КонецЕсли;
	мДанныеОтчета.Вставить("АдресДляВыгрузки", АдресДляВыгрузки);
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
	
	Перем ВидСдачиОтчетности; // переопределяем переменную для восстановления вида отчетности из сведений сохраненного документа
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаБаланс;
	
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода = Новый Соответствие;
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(3,		"21");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(6,		"31");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(9,		"33");
	//СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(12,	"34");
	
	СоответствиеЕдиницыИзмеренияСдвигу = Новый Соответствие;
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 6);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 3);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 0);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВерсПрог",					РегламентированнаяОтчетность.СформироватьВерсПрог());
	Параметры.Вставить("КНД",						"0710099");
	Параметры.Вставить("ДатаДок",					Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	
	// Для промежуточного и ликвидационного баланса период определяется другими кодами
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	Если СписокСохранения.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности) Тогда
		Если ВидСдачиОтчетности = 2 Тогда
			// промежуточная отчетность при ликвидации/реорганизации
			Параметры.Вставить("Период", "94");
		ИначеЕсли ВидСдачиОтчетности = 3 Тогда
			// ликвидационная отчетность
			Параметры.Вставить("Период", "90");
		Иначе
			// обычная отчетность
			Параметры.Вставить("Период", СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[Месяц(мСохраненныйДок.ДатаОкончания)]);
		КонецЕсли;
	Иначе
		Параметры.Вставить("Период", СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[Месяц(мСохраненныйДок.ДатаОкончания)]);
	КонецЕсли;
	
	Параметры.Вставить("ОтчетГод",					Формат(мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	Параметры.Вставить("ВидДок",					""); //показатель выгружается только для годовых отчетов, перед выгрузкой будет удален
	Параметры.Вставить("НаимОрг",					СокрЛП(Титульный.ОргНазв));
	Параметры.Вставить("ИННОрг",					СокрЛП(Титульный.ОргИНН));
	Параметры.Вставить("КППОрг", 					СокрЛП(Организация.КПП));
	Параметры.Вставить("КодИФНС",					СокрЛП(Организация.КодИМНС));
	Параметры.Вставить("КодИФНСПосредника",			СокрЛП(Организация.КодИФНСПолучателя));
	
	// различные коды
	Параметры.Вставить("ОКПО",						СокрЛП(Титульный.ОргКодОКПО));
	Параметры.Вставить("ОКВЭД",						СокрЛП(Титульный.ОргКодОКВЭД));
	Параметры.Вставить("ОКОПФ",						СокрЛП(Титульный.ОргКодОКОПФ));
	Параметры.Вставить("ОКФС",						СокрЛП(Титульный.ОргКодОКФС));
	Параметры.Вставить("ОКЕИ",						СокрЛП(Титульный.КодЕИ));
	
	// ОКУД
	Параметры.Вставить("ОКУД1",						"0710001");
	Параметры.Вставить("ОКУД2",						"0710002");
	
	// определяем форматную строку, используемую для получения суммовых значений, помещаемых в файл выгрузки
	Параметры.Вставить("ФорматВывода",				"ЧДЦ=0; ЧН=0; ЧС=" + СоответствиеЕдиницыИзмеренияСдвигу[мСохраненныйДок.ЕдиницаИзмерения]);
	
	// ФИО руководителя
	ФИОРук = РазложитьФИО(Титульный.ОргДиректор);
	Параметры.Вставить("ФамилияРук",				СокрЛП(ФИОРук.Фамилия));
	Параметры.Вставить("ИмяРук",					СокрЛП(ФИОРук.Имя));
	Параметры.Вставить("ОтчествоРук",				СокрЛП(ФИОРук.Отчество));
	
	// ФИО главного бухгалтера
	ФИОБух = РазложитьФИО(Титульный.ОргБухгалтер);
	Параметры.Вставить("ФамилияБух",				СокрЛП(ФИОБух.Фамилия));
	Параметры.Вставить("ИмяБух",					СокрЛП(ФИОБух.Имя));
	Параметры.Вставить("ОтчествоБух",				СокрЛП(ФИОБух.Отчество));
	
	// телефон
	Параметры.Вставить("ТелОрг",					РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(мСохраненныйДок.Организация, мСохраненныйДок.ДатаПодписи, "ТелОрганизации").ТелОрганизации);
	
	// адрес
	СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(мДанныеОтчета.АдресДляВыгрузки);
	Параметры.Вставить("АдрИндекс",					СокрЛП(СтруктураАдреса.Индекс));
	Параметры.Вставить("АдрКодРегион",				РегламентированнаяОтчетность.КодРегионаПоНазванию(СокрЛП(СтруктураАдреса.Регион)));
	Параметры.Вставить("АдрРегион",					СокрЛП(СтруктураАдреса.Регион));
	Параметры.Вставить("АдрРайон",					СокрЛП(СтруктураАдреса.Район));
	Параметры.Вставить("АдрГород",					СокрЛП(СтруктураАдреса.Город));
	Параметры.Вставить("АдрНаселПункт",				СокрЛП(СтруктураАдреса.НаселенныйПункт));
	Параметры.Вставить("АдрУлица",					СокрЛП(СтруктураАдреса.Улица));
	Параметры.Вставить("АдрДом",					СокрЛП(СтруктураАдреса.Дом));
	Параметры.Вставить("АдрКорпус",					СокрЛП(СтруктураАдреса.Корпус));
	Параметры.Вставить("АдрКварт",					СокрЛП(СтруктураАдреса.Квартира));
	
	Параметры.Вставить("ВерсФорм",					"5.01");
	Параметры.Вставить("ПрефиксИмениФайлаВыгрузки",	"NO_BUHOTCH");
	
	// формируем ИдФайл на основании значений других параметров
	Параметры.Вставить("ИдФайл",					СформироватьИдФайл(Параметры));

	Возврат Параметры;
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПроверитьВозможностьВыгрузки(Параметры)
	
	СтатусПроверки = Истина;
	
	Если ПустаяСтрока(Параметры.КодИФНС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В справочнике ""Организации"" для текущей организации не задан код ИФНС, необходимый для формирования имени файла выгрузки!", "Баланс");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.КППОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В справочнике ""Организации"" для текущей организации не задан КПП, необходимый для формирования корректного файла выгрузки!", "Баланс");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.НаимОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На указано полное наименование организации!", "Баланс", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Период) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Формат выгрузки допускает выгрузку отчетов только за I квартал, полугодие, 9 месяцев!", "Баланс", "ДатаБаланса");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ИННОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Параметры.ИННОрг, Перечисления.ЮрФизЛицо.ЮрЛицо) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный ИНН юридического лица!", "Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ФамилияРук) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию руководителя!", "Баланс", "ОргДиректор");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИмяРук) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя руководителя!", "Баланс", "ОргДиректор");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ФамилияБух) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию главного бухгалтера!", "Баланс", "ОргБухгалтер");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИмяБух) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя главного бухгалтера!", "Баланс", "ОргБухгалтер");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Параметры.ОКПО) И (СтрДлина(Параметры.ОКПО) < 8 ИЛИ СтрДлина(Параметры.ОКПО) > 10 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКПО)) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код по ОКПО!", "Баланс", "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указано значение кода вида деятельности по ОКВЭД!", "Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Указано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).!", "Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКОПФ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКОПФ!", "Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.ОКОПФ) <> 2 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКОПФ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКОПФ!", "Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКФС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКФС!", "Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.ОКФС) <> 2 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКФС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКФС!", "Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКЕИ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКЕИ!", "Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.ОКЕИ) <> 3 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКЕИ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКЕИ!", "Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.АдрКодРегион) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Требуется указание как минимум кода региона в адресе!", "Баланс", "ОргПочтАдрес");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	ПостобработкаДереваВыгрузки(ДеревоВыгрузки);//!!!
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ПостобработкаДереваВыгрузки(ДеревоВыгрузки)
	
	// находим ключевые узлы выгрузки многострочных частей
	ГоловнойУзелТЧ = ДеревоВыгрузки.Строки.Найти("ПрочЦен", "Код", Истина);
	Если ГоловнойУзелТЧ <> Неопределено Тогда
		
		СуммыПоАтрибутам = Новый Структура;
		УзлыВтчНаим = ГоловнойУзелТЧ.Строки.НайтиСтроки(Новый Структура("Код", "ВтчНаим"));
		Для Каждого УзелВтчНаим Из УзлыВтчНаим Цикл
			Для Каждого СтрАтрибут Из УзелВТчНаим.Строки Цикл
				Если СтрАтрибут.Тип = "А" И СтрАтрибут.Формат = "N" Тогда
					ЗначениеАтрибутаЧисло = ЧисловоеЗначение(СтрАтрибут.Значение);
					СуммаПоАтрибуту = ?(СуммыПоАтрибутам.Свойство(СтрАтрибут.Код), СуммыПоАтрибутам[СтрАтрибут.Код], 0);
					СуммыПоАтрибутам.Вставить(СтрАтрибут.Код, СуммаПоАтрибуту + ЗначениеАтрибутаЧисло);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из СуммыПоАтрибутам Цикл
			АтрибутГоловногоУзлаТЧ = ГоловнойУзелТЧ.Строки.Найти(КлючИЗначение.Ключ, "Код");
			Если АтрибутГоловногоУзлаТЧ <> Неопределено Тогда
				АтрибутГоловногоУзлаТЧ.Значение = Формат(КлючИЗначение.Значение, "ЧН=; ЧГ=");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЧисловоеЗначение(Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Число") Тогда
		Возврат Значение;
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Попытка
			Возврат Число(Значение);
		Исключение
			Возврат 0;
		КонецПопытки;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		УзелПуст = УзелПуст(Узел);
		Если УзелПуст Тогда
			Если Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0 Тогда // учтем оба варианта: кириллицу и латиницу
				УдалитьУзел(Узел);
			ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
				УдалитьУзел(Узел);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Баланс", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Баланс", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПервыйКлючВПодчиненииКУзлу(Узел)
	
	Если ЗначениеЗаполнено(Узел.Ключ) Тогда
		Возврат Узел.Ключ;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		КлючВПодчинении = ПолучитьПервыйКлючВПодчиненииКУзлу(Стр);
		Если ЗначениеЗаполнено(КлючВПодчинении) Тогда
			Возврат КлючВПодчинении;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОпределитьКоличествоСтрокМногострочнойЧасти(Параметры, Узел)
	
	ПервыйКлюч = ПолучитьПервыйКлючВПодчиненииКУзлу(Узел);
	Если ЗначениеЗаполнено(ПервыйКлюч) Тогда
		НомерСтроки = 1;
		Пока Параметры.Свойство(ПервыйКлюч + "_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		Возврат НомерСтроки - 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ЗначениеПериведенноеКЕдиницеИзмерения(Значение, Параметры)
	
	Возврат Число(Формат(Значение, Параметры.ФорматВывода));
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел, НомерСтроки = Неопределено)
	
	МассивУзлов = Новый Массив;
	Для Каждого Ед Из Узел.Строки Цикл
		МассивУзлов.Добавить(Ед);
	КонецЦикла;
	
	Для Каждого Стр из МассивУзлов Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда // !!!
				КоличествоСтрок = ОпределитьКоличествоСтрокМногострочнойЧасти(Параметры, Стр);
				Для НомСтр = 1 По КоличествоСтрок Цикл
					НовыйУзел = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(Параметры, НовыйУзел, НомСтр);
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ИмяСвойства = Стр.Ключ + ?(НомерСтроки = Неопределено, "", "_" + Формат(НомерСтроки, "ЧГ="));
					Если Параметры.Свойство(ИмяСвойства) Тогда // !!!
						ЗначениеСвойства = Параметры[ИмяСвойства];
						Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
							ВывестиПоказательВXML(Стр, ЗначениеСвойства);
						Иначе
							ВывестиПоказательВXML(Стр, ЗначениеПериведенноеКЕдиницеИзмерения(ЗначениеСвойства, Параметры));
						КонецЕсли;
					Иначе
						Стр.Значение = ?(Стр.Формат = "N", "0", "");
					КонецЕсли;
				Иначе
					Стр.Значение = ?(Стр.Формат = "N", "0", "");
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "#" Тогда
				//ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Баланс", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Баланс", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("UTF-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		//ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", "NO_BUH1_1_023_00_05_01_01.xsd");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

// Надпись30Нажатие
//
Процедура Надпись30Нажатие(Элемент)
	// Вставить содержимое обработчика.
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	СписокОрганизаций.ВыбратьЭлемент("Список организаций, по которым формируется отчет");
КонецПроцедуры // Надпись30Нажатие

Процедура ПолеТабличногоДокументаБалансВыбор(Элемент, Область, СтандартнаяОбработка)
	Если Область.Имя = "ОргПочтАдрес" Тогда
		// Запросим адреса.
		Адреса = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ПолныйАдрЮР, ПолныйАдрПочт");
		ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
		Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
			Если ПустаяСтрока(СтрЗаменить(Адреса.ПолныйАдрЮР, ",", "")) Тогда
				Адреса.ПолныйАдрЮР = "";
			Иначе
				Адреса.ПолныйАдрЮР = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(Адреса.ПолныйАдрЮР);
			КонецЕсли;
			
			Если ПустаяСтрока(СтрЗаменить(Адреса.ПолныйАдрПочт, ",", "")) Тогда
				Адреса.ПолныйАдрПочт = "";
			Иначе
				Адреса.ПолныйАдрПочт = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(Адреса.ПолныйАдрПочт);
			КонецЕсли;
		КонецЕсли;

		ТаблицаАдресов = Новый ТаблицаЗначений;
		ТаблицаАдресов.Колонки.Добавить("НазваниеАдреса",,"Тип адреса",18);
		ТаблицаАдресов.Колонки.Добавить("Адрес",,,100);

		НовСтр = ТаблицаАдресов.Добавить();
		НовСтр.НазваниеАдреса = "Пустое значение";
		НовСтр.Адрес = "Адрес не указывается";

		Если НЕ ПустаяСтрока(Адреса.ПолныйАдрПочт) Тогда
			НовСтр = ТаблицаАдресов.Добавить();
			НовСтр.НазваниеАдреса = "Почтовый адрес";
			НовСтр.Адрес = Адреса.ПолныйАдрПочт;
		КонецЕсли;

		Если НЕ ПустаяСтрока(Адреса.ПолныйАдрЮР) Тогда
			НовСтр = ТаблицаАдресов.Добавить();
			НовСтр.НазваниеАдреса = "Юридический адрес";
			НовСтр.Адрес = Адреса.ПолныйАдрЮР;
		КонецЕсли;

		Если ТаблицаАдресов.Количество() = 1 Тогда
			Предупреждение("В контактной информации юридический и почтовый адрес не указаны.");
			Возврат;
		КонецЕсли;

		ПоискЗначение = ?(ПустаяСтрока(Область.Значение), "Адрес не указывается", Область.Значение);
		НайденнаяСтрока = ТаблицаАдресов.Найти(ПоискЗначение, "Адрес");
		Если НайденнаяСтрока = Неопределено Тогда
			УказанныйАдрес = ТаблицаАдресов.ВыбратьСтроку("Выберите");
		Иначе
			УказанныйАдрес = ТаблицаАдресов.ВыбратьСтроку("Выберите адрес", НайденнаяСтрока);
		КонецЕсли;

		Если УказанныйАдрес = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Модифицированность = Истина;

		Область.Значение = ?(УказанныйАдрес.Получить(1) = "Адрес не указывается", "", УказанныйАдрес.Получить(1));

		Если УказанныйАдрес.Получить(1) = "Адрес не указывается" Тогда
			// По умолчанию для следующих обновлений поставим, что тип адреса должен быть почтовым.
			мТипАдреса = "ПолныйАдрПочт";
			мАдресДляВыгрузки = "";
		КонецЕсли;

		Если УказанныйАдрес.НазваниеАдреса = "Юридический адрес" Тогда
			мТипАдреса = "ПолныйАдрЮР";
			мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "АдрЮР").АдрЮР;
		КонецЕсли;

		Если УказанныйАдрес.НазваниеАдреса = "Почтовый адрес" Тогда
			мТипАдреса = "ПолныйАдрПочт";
			мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "АдрПочт").АдрПочт;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта "Показать машиночитаемый бланк" подменю "Печать"
// командной панели действий формы. 
//
// Обработчик уставливается динамически методом "Действие" из общего модуля
// "Регламентированная отчетность".
//
Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	Если ВыполняетсяСоотношениеПоказателей(Истина) Тогда
		РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ЗАГРУЗКИ ДАННЫХ

Функция ИмпортироватьДанныеОтчета()
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Фильтр = "*.xml|*.xml";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выбор xml файла";

	Если НЕ ДиалогОткрытияФайла.Выбрать() Тогда
		Возврат Неопределено; // Пользователь отказался выбрать файл.
	КонецЕсли;
	
	Возврат ЗагрузитьДанные(ДиалогОткрытияФайла.ПолноеИмяФайла);

КонецФункции

Функция ЗагрузитьДанные(Путь)
	
	ДеревоСтруктуры = ИзвлечьСтруктуруXML();
	
	СтруктураДанных = Новый Структура;
	
	ФайлОбмена = Новый ЧтениеXML();
	
	ОтчетныйГодЗагрузкиДанных = 2011;
	
	ФайлОбмена.ОткрытьФайл(Путь);
	Пока ФайлОбмена.Прочитать() Цикл
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		
		Если ИмяУзла = "Документ" Тогда
			Период = ФайлОбмена.ПолучитьАтрибут("Период");
			ОтчетныйГод = ФайлОбмена.ПолучитьАтрибут("ОтчетГод");
			
			ПериодЗагрузкиДанных      = ?(Период = Неопределено, 0, Число(Период));
			ОтчетныйГодЗагрузкиДанных = ?(ОтчетныйГод = Неопределено, 0, Число(ОтчетныйГод));		
			
			Прервать;
		КонецЕсли;

	КонецЦикла;
	
	ФайлОбмена.ОткрытьФайл(Путь);
	
	СумПрдщ  = 0;
	СумПрдшв = 0;
	СумПред  = 0;
	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		
		ОсновнаяВетка = ДеревоСтруктуры;
		
		// БАЛАНС
		Если ИмяУзла = "Баланс" Тогда
			
			Пока ФайлОбмена.Прочитать() Цикл 
				
				ИмяУзла = ФайлОбмена.ЛокальноеИмя;
								
				Если ИмяУзла = "ПрибУб" Тогда
					Прервать;
				КонецЕсли;
				
				Если ИмяУзла = "КапРез" 
				 ИЛИ ИмяУзла = "ВнеобА" 
				 ИЛИ ИмяУзла = "ОбА" 
				 ИЛИ ИмяУзла = "ДолгосрОбяз" 
				 ИЛИ ИмяУзла = "КраткосрОбяз"  Тогда
					
					// Искать строки надо в пределах родителя, т.к. есть совпадающие идентификаторы строк 
					ОсновнаяВетка = ДеревоСтруктуры.Строки.Найти(ИмяУзла, "Код", Истина);
					
				КонецЕсли;				
				
				ВеткаРодителя = ОсновнаяВетка.Строки.Найти(ИмяУзла, "Код", Истина);
				
				Если ВеткаРодителя <> Неопределено Тогда
					
					Если ОтчетныйГодЗагрузкиДанных = 2011 Тогда // данных 2011 г. в 1.6 быть не должно
						СумПрдщ = ФайлОбмена.ПолучитьАтрибут("СумПрдщ");
						Если СумПрдщ <> Неопределено Тогда
							Значение = Число(СумПрдщ);
							СтрокаДерева = ВеткаРодителя.Строки.Найти("СумПрдщ", "Код");
							КлючЗначения = СтрокаДерева.Ключ;
							Если ИменаПоказателейСоЗнакомПлюс.Найти(КлючЗначения) <> Неопределено Тогда ;
								Значение = -Значение;
							КонецЕСли;
							СтруктураДанных.Вставить(КлючЗначения, Значение);
						КонецЕсли;
					КонецЕсли;
					
					Если ОтчетныйГодЗагрузкиДанных < 2012 Тогда // данных 2011 г. в 1.6 быть не должно
						СумПрдшв = ФайлОбмена.ПолучитьАтрибут("СумПрдшв");
						Если СумПрдшв <> Неопределено Тогда
							Значение = Число(СумПрдшв);
							СтрокаДерева = ВеткаРодителя.Строки.Найти("СумПрдшв", "Код");
							КлючЗначения = СтрокаДерева.Ключ;
							Если ИменаПоказателейСоЗнакомПлюс.Найти(КлючЗначения) <> Неопределено Тогда ;
								Значение = -Значение;
							КонецЕСли;
							СтруктураДанных.Вставить(КлючЗначения, Значение);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// ФОРМА 2
		
		Если ИмяУзла = "ПрибУб" Тогда
			
			Если ОтчетныйГодЗагрузкиДанных = 2011 Тогда // данных 2011 г. в 1.6 быть не должно
				
				Пока ФайлОбмена.Прочитать() Цикл
					
					ИмяУзла = ФайлОбмена.ЛокальноеИмя;
					
					ВеткаРодителя = ДеревоСтруктуры.Строки.Найти(ИмяУзла, "Код", Истина);
					
					Если ВеткаРодителя <> Неопределено Тогда
						СумПред = ФайлОбмена.ПолучитьАтрибут("СумПред");
						Если СумПред <> Неопределено Тогда							
							Значение = Число(СумПред);
							СтрокаДерева = ВеткаРодителя.Строки.Найти("СумПред", "Код");
							КлючЗначения = СтрокаДерева.Ключ;
							Если ИменаПоказателейСоЗнакомПлюс.Найти(КлючЗначения) <> Неопределено Тогда ;
								Значение = -Значение;
							КонецЕСли;
							СтруктураДанных.Вставить(КлючЗначения, Значение);						
						КонецЕсли;
												
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураДанных;

КонецФункции

Процедура ЗагрузитьДанныеВОтчет(СтруктураДанныхОтчета)
	
	Для Каждого ЗаписьСтруктуры ИЗ СтруктураДанныхОтчета Цикл
		
		Попытка
			мБаланс.Области[ЗаписьСтруктуры.Ключ].Значение = ЗаписьСтруктуры.Значение;
		Исключение
			мФормаОтчета.Области[ЗаписьСтруктуры.Ключ].Значение = ЗаписьСтруктуры.Значение;
		КонецПопытки
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОпределитьПериодЗагружаемыхДанных()
	
	ГодОтчета = Год(мДатаКонцаПериодаОтчета);
	Если ГодОтчета = 2011 И ОтчетныйГодЗагрузкиДанных = 2011 Тогда
		ЗаполнятьГодПредыдущий = Ложь;
		ЗаполнятьГодПредшествующийПредыдущему  = Ложь;		
	ИначеЕсли ГодОтчета = 2012 И ОтчетныйГодЗагрузкиДанных = 2012 Тогда
		ЗаполнятьГодПредыдущий = Истина;
		ЗаполнятьГодПредшествующийПредыдущему  = Ложь;		
	Иначе
		ЗаполнятьГодПредыдущий = Истина;
		ЗаполнятьГодПредшествующийПредыдущему  = Истина;		
	КонецЕсли;
				
КонецПроцедуры		


////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет соответствие номеров счетов и их ссылок для плана счетов Хозрасчетный
//
// Параметры
//  СоответствиеСчетов - Неопределено, переменная в которую будет внесено соответствие
//
Процедура ЗаполнитьСоответствиеСчетов(СоответствиеСчетов)

	Если СоответствиеСчетов <> Неопределено Тогда
		// соответствие уже заполнено
		Возврат;
	КонецЕсли;

	СоответствиеСчетов = Новый Соответствие;
	
	ПС = ПланыСчетов["Хозрасчетный"];

	СоответствиеСчетов.Вставить("01", ПС.ОсновныеСредства);
	СоответствиеСчетов.Вставить("01.01", ПС.ОСвОрганизации);
	СоответствиеСчетов.Вставить("01.08", ПС.ОСБезГосРегистрации);
	
	СоответствиеСчетов.Вставить("02", ПС.АмортизацияОсновныхСредств);
	СоответствиеСчетов.Вставить("02.01", ПС.АмортизацияОС_01);
	СоответствиеСчетов.Вставить("02.02", ПС.АмортизацияОС_03);
	
	СоответствиеСчетов.Вставить("03", ПС.ДоходныеВложенияВ_МЦ);
	СоответствиеСчетов.Вставить("03.01", ПС.МЦвОрганизации);
	СоответствиеСчетов.Вставить("03.02", ПС.МЦ_ПредоставленныеВоВременноеВладение);
	СоответствиеСчетов.Вставить("03.03", ПС.МЦ_ПредоставленныеВоВременноеПользование);
	СоответствиеСчетов.Вставить("03.04", ПС.ПрочиеДоходныеВложения);
	
	СоответствиеСчетов.Вставить("04", ПС.НематериальныеАктивы);
	СоответствиеСчетов.Вставить("04.01", ПС.НематериальныеАктивыОрганизации);
	СоответствиеСчетов.Вставить("04.02", ПС.РасходыНаНИОКР);
	СоответствиеСчетов.Вставить("05", ПС.АмортизацияНематериальныхАктивов);
	СоответствиеСчетов.Вставить("07", ПС.ОборудованиеКУстановке);
	
	СоответствиеСчетов.Вставить("08", ПС.ВложенияВоВнеоборотныеАктивы);
	СоответствиеСчетов.Вставить("08.01", ПС.ПриобретениеЗемельныхУчастков);
	СоответствиеСчетов.Вставить("08.02", ПС.ПриобретениеОбъектовПриродопользования);
	СоответствиеСчетов.Вставить("08.03", ПС.СтроительствоОбъектовОсновныхСредств);
	СоответствиеСчетов.Вставить("08.04", ПС.ПриобретениеОбъектовОсновныхСредств);
	СоответствиеСчетов.Вставить("08.05", ПС.ПриобретениеНематериальныхАктивов);
	СоответствиеСчетов.Вставить("08.06", ПС.ПереводМолоднякаЖивотныхВОсновноеСтадо);
	СоответствиеСчетов.Вставить("08.07", ПС.ПриобретениеВзрослыхЖивотных);
	СоответствиеСчетов.Вставить("08.08", ПС.ВыполнениеНИОКР);
	
	СоответствиеСчетов.Вставить("09", ПС.ОтложенныеНалоговыеАктивы);
	СоответствиеСчетов.Вставить("10", ПС.Материалы);
	СоответствиеСчетов.Вставить("11", ПС.ЖивотныеНаВыращиванииИОткорме);
	
	СоответствиеСчетов.Вставить("14", ПС.РезервыПодСнижениеСтоимостиМЦ);
	СоответствиеСчетов.Вставить("14.01", ПС.РезервыПодСнижениеСтоимостиМатериалов);
	СоответствиеСчетов.Вставить("14.02", ПС.РезервыПодСнижениеСтоимостиТоваров);
	СоответствиеСчетов.Вставить("14.03", ПС.РезервыПодСнижениеСтоимостиГотовойПродукции);
	СоответствиеСчетов.Вставить("14.04", ПС.РезервыПодСнижениеСтоимостиНезавершенногоПроизводства);
	
	СоответствиеСчетов.Вставить("15", ПС.ЗаготовлениеИПриобретениеМЦ);
	СоответствиеСчетов.Вставить("15.01", ПС.ЗаготовлениеИПриобретениеМатериалов);
	СоответствиеСчетов.Вставить("15.02", ПС.ПриобретениеТоваров);
	
	СоответствиеСчетов.Вставить("16", ПС.ОтклонениеВСтоимостиМЦ);
	СоответствиеСчетов.Вставить("16.01", ПС.ОтклонениеВСтоимостиМатериалов);
	СоответствиеСчетов.Вставить("16.02", ПС.ОтклонениеВСтоимостиТоваров);

	СоответствиеСчетов.Вставить("19", ПС.НДСпоПриобретеннымЦенностям);
	СоответствиеСчетов.Вставить("19.01", ПС.НДСприПриобретенииОсновныхСредств);
	СоответствиеСчетов.Вставить("19.02", ПС.НДСпоПриобретеннымНематериальнымАктивам);
	СоответствиеСчетов.Вставить("19.03", ПС.НДСпоПриобретеннымМПЗ);
	СоответствиеСчетов.Вставить("19.04", ПС.НДСпоПриобретеннымУслугам);
	СоответствиеСчетов.Вставить("19.05", ПС.НДСуплачиваемыйТаможеннымОрганам);
	СоответствиеСчетов.Вставить("19.06", ПС.АкцизыПоОплаченнымМатериальнымЦенностям);
	СоответствиеСчетов.Вставить("19.07", ПС.НДСПоТоварамРеализованнымПоСтавке0);
	СоответствиеСчетов.Вставить("19.08", ПС.НДСприСтроительствеОсновныхСредств);

	СоответствиеСчетов.Вставить("20", ПС.ОсновноеПроизводство_);
	СоответствиеСчетов.Вставить("20.01", ПС.ОсновноеПроизводство);
	СоответствиеСчетов.Вставить("20.02", ПС.ПроизводствоИзДавальческогоСырья);
	
	СоответствиеСчетов.Вставить("21", ПС.Полуфабрикаты);
	СоответствиеСчетов.Вставить("23", ПС.ВспомогательныеПроизводства);
	СоответствиеСчетов.Вставить("25", ПС.ОбщепроизводственныеРасходы);
	СоответствиеСчетов.Вставить("26", ПС.ОбщехозяйственныеРасходы);
	СоответствиеСчетов.Вставить("28", ПС.БракВПроизводстве);
	СоответствиеСчетов.Вставить("29", ПС.ОбслуживающиеПроизводства);
	СоответствиеСчетов.Вставить("41", ПС.Товары);
	СоответствиеСчетов.Вставить("42", ПС.ТорговаяНаценка);
	СоответствиеСчетов.Вставить("43", ПС.ГотоваяПродукция);
	СоответствиеСчетов.Вставить("44", ПС.РасходыНаПродажу);
	СоответствиеСчетов.Вставить("45", ПС.ТоварыОтгруженные);
	СоответствиеСчетов.Вставить("46", ПС.ВыполненныеЭтапыПоНезавершеннымРаботам);

	СоответствиеСчетов.Вставить("50", ПС.Касса);
	СоответствиеСчетов.Вставить("50.01", ПС.КассаОрганизации);
	СоответствиеСчетов.Вставить("50.02", ПС.ОперационнаяКасса);
	СоответствиеСчетов.Вставить("50.03", ПС.ДенежныеДокументы);
	СоответствиеСчетов.Вставить("50.21", ПС.КассаОрганизацииВал);
	СоответствиеСчетов.Вставить("50.23", ПС.ДенежныеДокументыВал);

	СоответствиеСчетов.Вставить("51", ПС.РасчетныеСчета);
	СоответствиеСчетов.Вставить("52", ПС.ВалютныеСчета);
	
	СоответствиеСчетов.Вставить("55", ПС.СпециальныеСчета);
	СоответствиеСчетов.Вставить("55.01", ПС.Аккредитивы);
	СоответствиеСчетов.Вставить("55.02", ПС.ЧековыеКнижки);
	СоответствиеСчетов.Вставить("55.03", ПС.ДепозитныеСчета);
	СоответствиеСчетов.Вставить("55.04", ПС.ПрочиеСпециальныеСчета);
	СоответствиеСчетов.Вставить("55.21", ПС.АккредитивыВал);
	СоответствиеСчетов.Вставить("55.23", ПС.ДепозитныеСчетаВал);
	СоответствиеСчетов.Вставить("55.24", ПС.ПрочиеСпециальныеСчетаВал);
	
	СоответствиеСчетов.Вставить("57", ПС.ПереводыВПути_);
	
	Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
		СоответствиеСчетов.Вставить("57.02", ПС.ПокупкаИностраннойВалюты); // 57.11
		СоответствиеСчетов.Вставить("57.22", ПС.ПродажаИностраннойВалюты); // 57.22
		СоответствиеСчетов.Вставить("57.03", ПС.ПустаяСсылка()); // счет отсутсвует
	Иначе
		СоответствиеСчетов.Вставить("57.02", ПС.ПриобретениеИностраннойВалюты);
		СоответствиеСчетов.Вставить("57.22", ПС.РеализацияИностраннойВалюты);
		СоответствиеСчетов.Вставить("57.03", ПС.ПродажиПоПлатежнымКартам);
	КонецЕсли;
	
	СоответствиеСчетов.Вставить("58.01.1", ПС.Паи);
	СоответствиеСчетов.Вставить("58.01.2", ПС.Акции);
	СоответствиеСчетов.Вставить("58.02", ПС.ДолговыеЦенныеБумаги);
	СоответствиеСчетов.Вставить("58.03", ПС.ПредоставленныеЗаймы);
	СоответствиеСчетов.Вставить("58.04", ПС.ВкладыПоДоговоруПростогоТоварищества);
	СоответствиеСчетов.Вставить("58.05", ПС.ПриобретенныеПрава);
	СоответствиеСчетов.Вставить("59", ПС.РезервыПодОбесценениеФинансовыхВложений);
	
	СоответствиеСчетов.Вставить("60.01", ПС.РасчетыСПоставщиками);
	СоответствиеСчетов.Вставить("60.02", ПС.РасчетыПоАвансамВыданным);
	СоответствиеСчетов.Вставить("60.03", ПС.ВекселяВыданные);
	СоответствиеСчетов.Вставить("60.21", ПС.РасчетыСПоставщикамиВал);
	СоответствиеСчетов.Вставить("60.22", ПС.РасчетыПоАвансамВыданнымВал);
	СоответствиеСчетов.Вставить("60.31", ПС.РасчетыСПоставщикамиУЕ);
	СоответствиеСчетов.Вставить("60.32", ПС.РасчетыПоАвансамВыданнымУЕ);

	СоответствиеСчетов.Вставить("62.01", ПС.РасчетыСПокупателями);
	СоответствиеСчетов.Вставить("62.02", ПС.РасчетыПоАвансамПолученным);
	СоответствиеСчетов.Вставить("62.03", ПС.ВекселяПолученные);
	СоответствиеСчетов.Вставить("62.21", ПС.РасчетыСПокупателямиВал);
	СоответствиеСчетов.Вставить("62.22", ПС.РасчетыПоАвансамПолученнымВал);
	СоответствиеСчетов.Вставить("62.31", ПС.РасчетыСПокупателямиУЕ);
	СоответствиеСчетов.Вставить("62.32", ПС.РасчетыПоАвансамПолученнымУЕ);

	СоответствиеСчетов.Вставить("63", ПС.РезервыПоСомнительнымДолгам);
	
	СоответствиеСчетов.Вставить("66", ПС.РасчетыПоКраткосрочнымКредитамИЗаймам);
	СоответствиеСчетов.Вставить("66.01", ПС.КраткосрочныеКредиты);
	СоответствиеСчетов.Вставить("66.02", ПС.ПроцентыПоКраткосрочнымКредитам);
	СоответствиеСчетов.Вставить("66.03", ПС.КраткосрочныеЗаймы);
	СоответствиеСчетов.Вставить("66.04", ПС.ПроцентыПоКраткосрочнымЗаймам);
	СоответствиеСчетов.Вставить("66.21", ПС.КраткосрочныеКредитыВал);
	СоответствиеСчетов.Вставить("66.22", ПС.ПроцентыПоКраткосрочнымКредитамВал);
	СоответствиеСчетов.Вставить("66.23", ПС.КраткосрочныеЗаймыВал);
	СоответствиеСчетов.Вставить("66.24", ПС.ПроцентыПоКраткосрочнымЗаймамВал);
	
	СоответствиеСчетов.Вставить("67", ПС.РасчетыПоДолгосрочнымКредитамИЗаймам);
	СоответствиеСчетов.Вставить("67.01", ПС.ДолгосрочныеКредиты);
	СоответствиеСчетов.Вставить("67.02", ПС.ПроцентыПоДолгосрочнымКредитам);
	СоответствиеСчетов.Вставить("67.03", ПС.ДолгосрочныеЗаймы);
	СоответствиеСчетов.Вставить("67.04", ПС.ПроцентыПоДолгосрочнымЗаймам);
	СоответствиеСчетов.Вставить("67.21", ПС.ДолгосрочныеКредитыВал);
	СоответствиеСчетов.Вставить("67.22", ПС.ПроцентыПоДолгосрочнымКредитамВал);
	СоответствиеСчетов.Вставить("67.23", ПС.ДолгосрочныеЗаймыВал);
	СоответствиеСчетов.Вставить("67.24", ПС.ПроцентыПоДолгосрочнымЗаймамВал);

	СоответствиеСчетов.Вставить("68.01", ПС.НДФЛ);
	СоответствиеСчетов.Вставить("68.02", ПС.НДС);
	СоответствиеСчетов.Вставить("68.03", ПС.Акцизы);
	СоответствиеСчетов.Вставить("68.04", ПС.НалогНаПрибыль);
	СоответствиеСчетов.Вставить("68.04.1", ПС.РасчетыСБюджетом);
	СоответствиеСчетов.Вставить("68.04.2", ПС.РасчетНалогаНаПрибыль);
	СоответствиеСчетов.Вставить("68.07", ПС.ТранспортныйНалог);
	СоответствиеСчетов.Вставить("68.08", ПС.НалогНаИмущество);
	СоответствиеСчетов.Вставить("68.09", ПС.НалогНаРекламу);
	СоответствиеСчетов.Вставить("68.10", ПС.ПрочиеНалогиИСборы);
	СоответствиеСчетов.Вставить("68.11", ПС.ЕНВД);
	СоответствиеСчетов.Вставить("68.12", ПС.ЕНприУСН);
	СоответствиеСчетов.Вставить("68.22", ПС.НДСпоЭкспортуКВозмещению);
	СоответствиеСчетов.Вставить("68.32", ПС.НДСНалоговогоАгента);
	
	СоответствиеСчетов.Вставить("69", ПС.РасчетыПоСоциальномуСтрахованию);
	СоответствиеСчетов.Вставить("69.01", ПС.ФСС);
	СоответствиеСчетов.Вставить("69.02", ПС.ПФР);
	СоответствиеСчетов.Вставить("69.03", ПС.ФОМС);
	СоответствиеСчетов.Вставить("69.05", ПС.ПФР_ДОБР);
	СоответствиеСчетов.Вставить("69.13", ПС.ФСС_СПЕЦ);
	
	
	СоответствиеСчетов.Вставить("70", ПС.РасчетыСПерсоналомПоОплатеТруда);
	СоответствиеСчетов.Вставить("71", ПС.РасчетыСПодотчетнымиЛицами_);
	СоответствиеСчетов.Вставить("71.01", ПС.РасчетыСПодотчетнымиЛицами);
	СоответствиеСчетов.Вставить("71.21", ПС.РасчетыСПодотчетнымиЛицамиВал);
	
	СоответствиеСчетов.Вставить("73", ПС.РасчетыСПерсоналомПоПрочимОперациям);
	СоответствиеСчетов.Вставить("73.02", ПС.РасчетыПоВозмещениюМатериальногоУщерба);
	СоответствиеСчетов.Вставить("75.01", ПС.РасчетыПоВкладамВУставныйКапитал);
	СоответствиеСчетов.Вставить("75.02", ПС.РасчетыПоВыплатеДоходов);

	СоответствиеСчетов.Вставить("76.01", ПС.РасчетыПоИмущественномуЛичномуИДобровольномуСтрахованию);
	СоответствиеСчетов.Вставить("76.02", ПС.РасчетыПоПретензиям);
	СоответствиеСчетов.Вставить("76.03", ПС.РасчетыПоПричитающимсяДивидендам);
	СоответствиеСчетов.Вставить("76.04", ПС.РасчетыПоДепонированнымСуммам);
	СоответствиеСчетов.Вставить("76.05", ПС.РасчетыСПрочимиПоставщикамиИПодрядчиками);
	СоответствиеСчетов.Вставить("76.06", ПС.РасчетыСПрочимиПокупателямиИЗаказчиками);
	СоответствиеСчетов.Вставить("76.09", ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами);
	СоответствиеСчетов.Вставить("76.21", ПС.РасчетыПоИмущественномуИЛичномуСтрахованиюВал);
	СоответствиеСчетов.Вставить("76.22", ПС.РасчетыПоПретензиямВал);
	СоответствиеСчетов.Вставить("76.25", ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);
	СоответствиеСчетов.Вставить("76.26", ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);
	СоответствиеСчетов.Вставить("76.29", ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал);
	СоответствиеСчетов.Вставить("76.32", ПС.РасчетыПоПретензиямУЕ);
	СоответствиеСчетов.Вставить("76.35", ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ);
	СоответствиеСчетов.Вставить("76.36", ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);
	СоответствиеСчетов.Вставить("76.39", ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ);
	СоответствиеСчетов.Вставить("76.41", ПС.РасчетыПоИсполнительнымДокументамРаботников);
	СоответствиеСчетов.Вставить("76.ВА", ПС.НДСпоАвансамИПредоплатамВыданным);
	СоответствиеСчетов.Вставить("76.АВ", ПС.НДСпоАвансамИПредоплатам);
	СоответствиеСчетов.Вставить("76.Н", ПС.РасчетыПоНДСотложенномуДляУплатыВБюджет);
	СоответствиеСчетов.Вставить("76.НА", ПС.РасчетыНДСНалоговогоАгента);
	СоответствиеСчетов.Вставить("76.ОТ", ПС.НДСНачисленныйПоОтгрузке);

	СоответствиеСчетов.Вставить("77", ПС.ОтложенныеНалоговыеОбязательства);
	СоответствиеСчетов.Вставить("79", ПС.ВнутрихозяйственныеРасчеты);

	СоответствиеСчетов.Вставить("80", ПС.УставныйКапитал);
	СоответствиеСчетов.Вставить("81", ПС.СобственныеАкции);
	СоответствиеСчетов.Вставить("82", ПС.РезервныйКапитал);
	СоответствиеСчетов.Вставить("82.01", ПС.РезервыОбразованныеВСоответствииСЗаконодательством);
	СоответствиеСчетов.Вставить("82.02", ПС.РезервыОбразованныеВСоответствииСУчредительнымиДокументами);
	
	СоответствиеСчетов.Вставить("83", ПС.ДобавочныйКапитал);

	СоответствиеСчетов.Вставить("83.01", ПС.ПриростСтоимостиПоПереоценке);
	СоответствиеСчетов.Вставить("83.01.1", ПС.ПриростСтоимостиИмуществаПоПереоценке);
	СоответствиеСчетов.Вставить("83.01.2", ПС.ПриростСтоимостиНМАПоПереоценке);
	СоответствиеСчетов.Вставить("83.01.3", ПС.ПриростСтоимостиПрочихВнеоборотныхАктивоПоПереоценке);

	СоответствиеСчетов.Вставить("84", ПС.НераспределеннаяПрибыль);
	СоответствиеСчетов.Вставить("84.01", ПС.ПрибыльПодлежащаяРаспределению);
	СоответствиеСчетов.Вставить("84.02", ПС.УбытокПодлежащийПокрытию);

	СоответствиеСчетов.Вставить("86", ПС.ЦелевоеФинансирование);

	СоответствиеСчетов.Вставить("90.01", ПС.Выручка);
	СоответствиеСчетов.Вставить("90.02", ПС.СебестоимостьПродаж);
	СоответствиеСчетов.Вставить("90.03", ПС.Продажи_НДС);
	СоответствиеСчетов.Вставить("90.04", ПС.Продажи_Акцизы);
	СоответствиеСчетов.Вставить("90.05", ПС.Продажи_ЭкспортныеПошлины);
	СоответствиеСчетов.Вставить("90.08", ПС.Продажи_УправленческиеРасходы);
	СоответствиеСчетов.Вставить("90.07", ПС.Продажи_РасходыНаПродажу);
	
	Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
		СоответствиеСчетов.Вставить("90.01.1", ПС.ВыручкаНеОблагаемаяЕНВД);
		СоответствиеСчетов.Вставить("90.01.2", ПС.ВыручкаОблагаемаяЕНВД);
		СоответствиеСчетов.Вставить("90.02.1", ПС.СебестоимостьПродажНеОблагаемаяЕНВД);
		СоответствиеСчетов.Вставить("90.02.2", ПС.СебестоимостьПродажОблагаемаяЕНВД);
		СоответствиеСчетов.Вставить("90.07.1", ПС.Продажи_РасходыНаПродажуНеОблагаемыеЕНВД);
		СоответствиеСчетов.Вставить("90.07.2", ПС.Продажи_РасходыНаПродажуОблагаемыеЕНВД);
		СоответствиеСчетов.Вставить("90.08.1", ПС.Продажи_УправленческиеРасходыНеОблагаемыеЕНВД);
		СоответствиеСчетов.Вставить("90.08.2", ПС.Продажи_УправленческиеРасходыОблагаемыеЕНВД);
	Иначе
		СоответствиеСчетов.Вставить("90.01.1", ПС.ВыручкаНеЕНВД);
		СоответствиеСчетов.Вставить("90.01.2", ПС.ВыручкаЕНВД);
		СоответствиеСчетов.Вставить("90.02.1", ПС.СебестоимостьПродажНеЕНВД);
		СоответствиеСчетов.Вставить("90.02.2", ПС.СебестоимостьПродажЕНВД);
		СоответствиеСчетов.Вставить("90.07.1", ПС.Продажи_РасходыНаПродажуНеЕНВД);
		СоответствиеСчетов.Вставить("90.07.2", ПС.Продажи_РасходыНаПродажуЕНВД);
		СоответствиеСчетов.Вставить("90.08.1", ПС.Продажи_УправленческиеРасходыНеЕНВД);
		СоответствиеСчетов.Вставить("90.08.2", ПС.Продажи_УправленческиеРасходыЕНВД);
	КонецЕсли;
	
	СоответствиеСчетов.Вставить("91.01", ПС.ПрочиеДоходы);
	СоответствиеСчетов.Вставить("91.02", ПС.ПрочиеРасходы);
	СоответствиеСчетов.Вставить("99", ПС.ПрибылиИУбытки);
	СоответствиеСчетов.Вставить("99.01", ПС.ПрибылиИУбыткиБезНалогаНаПрибыль);

	СоответствиеСчетов.Вставить("99.02", ПС.ПрибылиИУбытки_НалогНаПрибыль);
	СоответствиеСчетов.Вставить("99.02.3", ПС.ПостоянноеНалоговоеОбязательство);
	СоответствиеСчетов.Вставить("99.02.4", ПС.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
	
	Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
		СоответствиеСчетов.Вставить("99.01.1", ПС.ПрибылиИУбыткиНеОблагаемыеЕНВД);
		СоответствиеСчетов.Вставить("99.01.2", ПС.ПрибылиИУбыткиОблагаемыеЕНВД);
		СоответствиеСчетов.Вставить("99.09", ПС.ПустаяСсылка()); // отсуствует
	Иначе
		СоответствиеСчетов.Вставить("99.01.1", ПС.ПрибылиИУбыткиНеЕНВД);
		СоответствиеСчетов.Вставить("99.01.2", ПС.ПрибылиИУбыткиЕНВД);
		СоответствиеСчетов.Вставить("99.09", ПС.ПрочиеПрибылиИУбытки);
	КонецЕсли;

	СоответствиеСчетов.Вставить("94", ПС.НедостачиИПотериОтПорчиЦенностей);

	СоответствиеСчетов.Вставить("96", ПС.РезервыПредстоящихРасходов);

	СоответствиеСчетов.Вставить("97", ПС.РасходыБудущихПериодов);
	СоответствиеСчетов.Вставить("98", ПС.ДоходыБудущихПериодов);
	СоответствиеСчетов.Вставить("98.01", ПС.ДоходыПолученныеВСчетБудущихПериодов);
	СоответствиеСчетов.Вставить("98.02", ПС.БезвозмездныеПоступления);
	СоответствиеСчетов.Вставить("98.03", ПС.ПредстоящиеПоступленияПоНедостачамВыявленнымЗаПрошлыеГоды);
	СоответствиеСчетов.Вставить("98.04", ПС.РазницаМеждуСуммойПодлежащейВзысканиюСВиновныхЛицИБалансовойСтоимостьюПоНедостачамЦенностей);
	
	Если ЭтоБалансДляАУ Тогда
		СоответствиеСчетов.Вставить("01.11", ПС.ОСвРамкахЦелевогоФинансирования);
		СоответствиеСчетов.Вставить("08.14", ПС.ПриобретениеОСВРамкахЦелевогоФинансирования);
		СоответствиеСчетов.Вставить("76.51", ПС.РасчетыПоЦелевомуФинансированию);
		СоответствиеСчетов.Вставить("76.52", ПС.РасчетыПоЦелевомуФинансированиюВал);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСоответствиеСчетов()

Функция Счет(КодСчета)

	НайденныйСчет = мСчет[КодСчета];
	
	Если Не ЗначениеЗаполнено(НайденныйСчет) Тогда
		Предупреждение("Ошибка. Не определен счет " + КодСчета + " в соответствии счетов");
	КонецЕсли;

	Возврат НайденныйСчет;
	
КонецФункции // Счет()

Процедура КнопкаДобавитьДопСтрокиБалансНажатие(Элемент)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиБалансНажатие(Элемент)
	
	УдалитьДополнительнуюСтроку();
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиФормаОтчетаНажатие(Элемент)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиФормаОтчетаНажатие(Элемент)
	
	УдалитьДополнительнуюСтроку();
	
КонецПроцедуры

// Функция определяет является ли показатель многострочным, и возвращает количество строк многострочной части
//
// Параметры
//  ИмяПоказателя  - Строка - Имя показателя
//
// Возвращаемое значение:
//   Число   - признак многострочности показателя
//			 0 - показатель не является многострочным
//			 >1 - показатель является многострочным, значение соответствует имеющемуся количеству строк
//
Функция ПоказательВходитВМногострочнуюЧасть(ИмяПоказателя)
	
	Перем ИмяГруппы;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		СтруктураГруппы = ЭлементСтруктуры.Значение;
		Если СтруктураГруппы.Колонки.Найти(ИмяПоказателя) <> Неопределено Тогда
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяГруппы <> Неопределено Тогда
		Возврат мСтруктураМногострочныхРазделов[ИмяГруппы].Количество();
	Иначе
		Возврат 0;		
	КонецЕсли;	

КонецФункции // ПоказательВходитВМногострочнуюЧасть()

Функция АвторасчетПоказателей(ИмяСтраницы)
	
	Если мДеревоСтраницОтчета.Колонки.Найти("АвторасчетПоказателей") = Неопределено Тогда
		// в дереве настроек страниц отчета отсутствует необходимая колонка
		// значи авторасчет определяется какими-то иными механизмами
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаНастройки = мДеревоСтраницОтчета.Строки.Найти(ИмяСтраницы, "ИмяСтраницы");
	
	Если СтрокаНастройки <> Неопределено Тогда
		Возврат СтрокаНастройки.АвторасчетПоказателей;
	Иначе
		// предполагается что все странцы формы корректно прописаны в дереве значений мДеревоСтраницОтчета
		// если страница не описана, то автоматический расчет показателя производиться не должен
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // АвтоРасчетПоказателей()

// Функция возвращает результат проверки соблюдения соотношения показателей отчетов
//
// Параметры
//  ВыводитьФорму  - Булево - признак открытия формы для просмотра результатов проверки соотношения показателей
//							Ложь (по умолчанию) - не открывать
//							Истина - открыть
//
// Возвращаемое значение:
//   Булево  - признак соблюдения соотношения показателей
//			 Ложь - соотношение показателей не соблюдается
//			 Истина - соотношение показателей соблюдается
//
Функция ВыполняетсяСоотношениеПоказателей(ВыводитьФорму = Ложь)
	
	Если Не мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		Возврат Истина;
	КонецЕсли;
	
	РезультатыПроверки = ПолучитьРезультатыПроверкиСоотношенияПоказателей();
	
	СтрокиНарушенныхСоотношений = РезультатыПроверки.НайтиСтроки(Новый Структура("РезультатПроверки", Ложь));
	
	// Открываем форму показа результатов проверки
	Если ВыводитьФорму И СтрокиНарушенныхСоотношений.Количество() <> 0 Тогда
		ФормаКонтрольныхСоотношений = ЭтотОбъект.ПолучитьФорму("КонтрольныеСоотношения");
		ФормаКонтрольныхСоотношений.РезультатыПроверки = РезультатыПроверки;
		ФормаКонтрольныхСоотношений.Макет = ЭтотОбъект.ПолучитьМакет("РезультатКонтроляСоотношений");
		ФормаКонтрольныхСоотношений.ФормаРодитель = ЭтаФорма;
		ФормаКонтрольныхСоотношений.Открыть();
	КонецЕсли;

	Возврат (СтрокиНарушенныхСоотношений.Количество() = 0);

КонецФункции // ВыполняетсяСоотношениеПоказателей()

// Функция производит проверку соотношений показателей и возвращает таблицу с детальными записями о проверяемых соотношениях
// и результатах прохождения проверки
//
// Возвращаемое значение:
//   ТаблицаЗначений  - Таблица с детальными записями о результатах проверки
//
Функция ПолучитьРезультатыПроверкиСоотношенияПоказателей() Экспорт

	ТаблицаРезультатовПроверки = Новый ТаблицаЗначений;
	ТаблицаРезультатовПроверки.Колонки.Добавить("ПроверяемоеСоотношение");
	ТаблицаРезультатовПроверки.Колонки.Добавить("РасшифровкаЗначений");
	ТаблицаРезультатовПроверки.Колонки.Добавить("РезультатПроверки");
	ТаблицаРезультатовПроверки.Колонки.Добавить("НормаЗаконодательства");
	ТаблицаРезультатовПроверки.Колонки.Добавить("ОписаниеНарушения");
	ТаблицаРезультатовПроверки.Колонки.Добавить("Комментарий");

	// Бухгалтерский баланс
	ДеревоНастроекСтрокРасшифровкиБаланс = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
	
	СоответствиеЗаголовковГраф = Новый Соответствие;
	СоответствиеЗаголовковГраф.Вставить("04", ЗаголовокДатаОтчетная); 
	СоответствиеЗаголовковГраф.Вставить("05", ЗаголовокДатаКонцаПрошлогоГода); 
	СоответствиеЗаголовковГраф.Вставить("06", ЗаголовокДатаКонцаПозапрошлогоГода); 
	
	МассивГраф = Новый Массив;
	МассивГраф.Добавить("04");
	МассивГраф.Добавить("05");
	МассивГраф.Добавить("06");
	
	// строка 1110
	ГрафаПоказателя = "04";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя 1110 ""Нематериальные активы"" в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П0001001110" + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11101"), мБаланс.Области["П0001011101" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11102"), мБаланс.Области["П0001011102" + ГрафаПоказателя].Значение, 0)
								+ ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11199, "П0001011199" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	ГрафаПоказателя = "05";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя 1110 ""Нематериальные активы"" в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П0001001110" + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11101"), мБаланс.Области["П0001011101" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11102"), мБаланс.Области["П0001011102" + ГрафаПоказателя].Значение, 0)
								+ ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11199, "П0001011199" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	ГрафаПоказателя = "06";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя 1110 ""Нематериальные активы"" в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П0001001110" + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11101"), мБаланс.Области["П0001011101" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11102"), мБаланс.Области["П0001011102" + ГрафаПоказателя].Значение, 0)
								+ ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11199, "П0001011199" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	// строка 1120
	ГрафаПоказателя = "04";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя 1120 ""Результаты исследований и разработок"" в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П0001001120" + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11201"), мБаланс.Области["П0001011201" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11202"), мБаланс.Области["П0001011202" + ГрафаПоказателя].Значение, 0)
								+ ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11299, "П0001011299" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	ГрафаПоказателя = "05";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя 1120 ""Результаты исследований и разработок"" в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П0001001120" + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11201"), мБаланс.Области["П0001011201" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11202"), мБаланс.Области["П0001011202" + ГрафаПоказателя].Значение, 0)
								+ ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11299, "П0001011299" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	ГрафаПоказателя = "06";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя 1120 ""Результаты исследований и разработок"" в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П0001001120" + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11201"), мБаланс.Области["П0001011201" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11202"), мБаланс.Области["П0001011202" + ГрафаПоказателя].Значение, 0)
								+ ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11299, "П0001011299" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	// строка 1130
	ГрафаПоказателя = "04";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя 1130 ""Основные средства"" в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П0001001130" + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11301"), мБаланс.Области["П0001011301" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11302"), мБаланс.Области["П0001011302" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11303"), мБаланс.Области["П0001011303" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11304"), мБаланс.Области["П0001011304" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11305"), мБаланс.Области["П0001011305" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11306"), мБаланс.Области["П0001011306" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11307"), мБаланс.Области["П0001011307" + ГрафаПоказателя].Значение, 0)
								+ ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11399, "П0001011399" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	ГрафаПоказателя = "05";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя 1130 ""Основные средства"" в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П0001001130" + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11301"), мБаланс.Области["П0001011301" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11302"), мБаланс.Области["П0001011302" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11303"), мБаланс.Области["П0001011303" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11304"), мБаланс.Области["П0001011304" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11305"), мБаланс.Области["П0001011305" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11306"), мБаланс.Области["П0001011306" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11307"), мБаланс.Области["П0001011307" + ГрафаПоказателя].Значение, 0)
								+ ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11399, "П0001011399" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	ГрафаПоказателя = "06";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя 1130 ""Основные средства"" в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П0001001130" + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11301"), мБаланс.Области["П0001011301" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11302"), мБаланс.Области["П0001011302" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11303"), мБаланс.Области["П0001011303" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11304"), мБаланс.Области["П0001011304" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11305"), мБаланс.Области["П0001011305" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11306"), мБаланс.Области["П0001011306" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11307"), мБаланс.Области["П0001011307" + ГрафаПоказателя].Значение, 0)
								+ ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11399, "П0001011399" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	// строка 1140
	ГрафаПоказателя = "04";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя 1140 ""Доходные вложения в материальные ценности"" в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П0001001140" + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11401"), мБаланс.Области["П0001011401" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11402"), мБаланс.Области["П0001011402" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11403"), мБаланс.Области["П0001011403" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11404"), мБаланс.Области["П0001011404" + ГрафаПоказателя].Значение, 0)
								+ ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11499, "П0001011499" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	ГрафаПоказателя = "05";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя 1140 ""Доходные вложения в материальные ценности"" в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П0001001140" + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11401"), мБаланс.Области["П0001011401" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11402"), мБаланс.Области["П0001011402" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11403"), мБаланс.Области["П0001011403" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11404"), мБаланс.Области["П0001011404" + ГрафаПоказателя].Значение, 0)
								+ ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11499, "П0001011499" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	ГрафаПоказателя = "06";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя 1140 ""Доходные вложения в материальные ценности"" в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П0001001140" + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11401"), мБаланс.Области["П0001011401" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11402"), мБаланс.Области["П0001011402" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11403"), мБаланс.Области["П0001011403" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11404"), мБаланс.Области["П0001011404" + ГрафаПоказателя].Значение, 0)
								+ ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11499, "П0001011499" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	// строка 1150
	ГрафаПоказателя = "04";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя 1150 ""Финансовые вложения"" в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П0001001150" + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11501"), мБаланс.Области["П0001011501" + ГрафаПоказателя].Значение, 0)
								+ ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11599, "П0001011599" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	ГрафаПоказателя = "05";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя 1150 ""Финансовые вложения"" в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П0001001150" + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11501"), мБаланс.Области["П0001011501" + ГрафаПоказателя].Значение, 0)
								+ ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11599, "П0001011599" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	ГрафаПоказателя = "06";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя 1150 ""Финансовые вложения"" в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П0001001150" + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11501"), мБаланс.Области["П0001011501" + ГрафаПоказателя].Значение, 0)
								+ ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11599, "П0001011599" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	// строка 1160
	КодПоказателя = "1160";
	ГрафаПоказателя = "04";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11699, "П0001011699" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	КодПоказателя = "1160";
	ГрафаПоказателя = "05";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11699, "П0001011699" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	КодПоказателя = "1160";
	ГрафаПоказателя = "06";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11699, "П0001011699" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;

	// строка 1170
	КодПоказателя = "1170";
	ГрафаПоказателя = "04";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11701"), мБаланс.Области["П0001011701" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11702"), мБаланс.Области["П0001011702" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11799, "П0001011799" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1170";
	ГрафаПоказателя = "05";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11701"), мБаланс.Области["П0001011701" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11702"), мБаланс.Области["П0001011702" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11799, "П0001011799" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1170";
	ГрафаПоказателя = "06";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11701"), мБаланс.Области["П0001011701" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока11702"), мБаланс.Области["П0001011702" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс11799, "П0001011799" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	// строка 1210
	КодПоказателя = "1210";
	ГрафаПоказателя = "04";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12101"), мБаланс.Области["П0001012101" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12102"), мБаланс.Области["П0001012102" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12103"), мБаланс.Области["П0001012103" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12104"), мБаланс.Области["П0001012104" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12105"), мБаланс.Области["П0001012105" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12106"), мБаланс.Области["П0001012106" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12107"), мБаланс.Области["П0001012107" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12108"), мБаланс.Области["П0001012108" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12109"), мБаланс.Области["П0001012109" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12110"), мБаланс.Области["П0001012110" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12111"), мБаланс.Области["П0001012111" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12199, "П0001012199" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1210";
	ГрафаПоказателя = "05";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12101"), мБаланс.Области["П0001012101" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12102"), мБаланс.Области["П0001012102" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12103"), мБаланс.Области["П0001012103" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12104"), мБаланс.Области["П0001012104" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12105"), мБаланс.Области["П0001012105" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12106"), мБаланс.Области["П0001012106" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12107"), мБаланс.Области["П0001012107" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12108"), мБаланс.Области["П0001012108" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12109"), мБаланс.Области["П0001012109" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12110"), мБаланс.Области["П0001012110" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12111"), мБаланс.Области["П0001012111" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12199, "П0001012199" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1210";
	ГрафаПоказателя = "06";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12101"), мБаланс.Области["П0001012101" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12102"), мБаланс.Области["П0001012102" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12103"), мБаланс.Области["П0001012103" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12104"), мБаланс.Области["П0001012104" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12105"), мБаланс.Области["П0001012105" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12106"), мБаланс.Области["П0001012106" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12107"), мБаланс.Области["П0001012107" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12108"), мБаланс.Области["П0001012108" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12109"), мБаланс.Области["П0001012109" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12110"), мБаланс.Области["П0001012110" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12111"), мБаланс.Области["П0001012111" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12199, "П0001012199" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	// строка 1220
	КодПоказателя = "1220";
	ГрафаПоказателя = "04";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12201"), мБаланс.Области["П0001012201" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12202"), мБаланс.Области["П0001012202" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12203"), мБаланс.Области["П0001012203" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12204"), мБаланс.Области["П0001012204" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12205"), мБаланс.Области["П0001012205" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12206"), мБаланс.Области["П0001012206" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12207"), мБаланс.Области["П0001012207" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12299, "П0001012299" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1220";
	ГрафаПоказателя = "05";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12201"), мБаланс.Области["П0001012201" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12202"), мБаланс.Области["П0001012202" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12203"), мБаланс.Области["П0001012203" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12204"), мБаланс.Области["П0001012204" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12205"), мБаланс.Области["П0001012205" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12206"), мБаланс.Области["П0001012206" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12207"), мБаланс.Области["П0001012207" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12299, "П0001012299" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1220";
	ГрафаПоказателя = "06";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12201"), мБаланс.Области["П0001012201" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12202"), мБаланс.Области["П0001012202" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12203"), мБаланс.Области["П0001012203" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12204"), мБаланс.Области["П0001012204" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12205"), мБаланс.Области["П0001012205" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12206"), мБаланс.Области["П0001012206" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12207"), мБаланс.Области["П0001012207" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12299, "П0001012299" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	// строка 1230
	КодПоказателя = "1230";
	ГрафаПоказателя = "04";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12301"), мБаланс.Области["П0001012301" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12302"), мБаланс.Области["П0001012302" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12303"), мБаланс.Области["П0001012303" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12304"), мБаланс.Области["П0001012304" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12305"), мБаланс.Области["П0001012305" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12306"), мБаланс.Области["П0001012306" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12307"), мБаланс.Области["П0001012307" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12308"), мБаланс.Области["П0001012308" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12399, "П0001012399" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1230";
	ГрафаПоказателя = "05";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12301"), мБаланс.Области["П0001012301" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12302"), мБаланс.Области["П0001012302" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12303"), мБаланс.Области["П0001012303" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12304"), мБаланс.Области["П0001012304" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12305"), мБаланс.Области["П0001012305" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12306"), мБаланс.Области["П0001012306" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12307"), мБаланс.Области["П0001012307" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12308"), мБаланс.Области["П0001012308" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12399, "П0001012399" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1230";
	ГрафаПоказателя = "06";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12301"), мБаланс.Области["П0001012301" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12302"), мБаланс.Области["П0001012302" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12303"), мБаланс.Области["П0001012303" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12304"), мБаланс.Области["П0001012304" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12305"), мБаланс.Области["П0001012305" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12306"), мБаланс.Области["П0001012306" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12307"), мБаланс.Области["П0001012307" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12308"), мБаланс.Области["П0001012308" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12399, "П0001012399" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	// строка 1240
	КодПоказателя = "1240";
	ГрафаПоказателя = "04";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12401"), мБаланс.Области["П0001012401" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12402"), мБаланс.Области["П0001012402" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12403"), мБаланс.Области["П0001012403" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12404"), мБаланс.Области["П0001012404" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12405"), мБаланс.Области["П0001012405" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12406"), мБаланс.Области["П0001012406" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12407"), мБаланс.Области["П0001012407" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12499, "П0001012499" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1240";
	ГрафаПоказателя = "05";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12401"), мБаланс.Области["П0001012401" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12402"), мБаланс.Области["П0001012402" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12403"), мБаланс.Области["П0001012403" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12404"), мБаланс.Области["П0001012404" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12405"), мБаланс.Области["П0001012405" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12406"), мБаланс.Области["П0001012406" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12407"), мБаланс.Области["П0001012407" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12499, "П0001012499" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1240";
	ГрафаПоказателя = "06";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12401"), мБаланс.Области["П0001012401" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12402"), мБаланс.Области["П0001012402" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12403"), мБаланс.Области["П0001012403" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12404"), мБаланс.Области["П0001012404" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12405"), мБаланс.Области["П0001012405" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12406"), мБаланс.Области["П0001012406" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12407"), мБаланс.Области["П0001012407" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12499, "П0001012499" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	// строка 1250
	КодПоказателя = "1250";
	ГрафаПоказателя = "04";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12501"), мБаланс.Области["П0001012501" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12502"), мБаланс.Области["П0001012502" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12503"), мБаланс.Области["П0001012503" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12504"), мБаланс.Области["П0001012504" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12505"), мБаланс.Области["П0001012505" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12506"), мБаланс.Области["П0001012506" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12507"), мБаланс.Области["П0001012507" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12508"), мБаланс.Области["П0001012508" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12509"), мБаланс.Области["П0001012509" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12510"), мБаланс.Области["П0001012510" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12511"), мБаланс.Области["П0001012511" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12599, "П0001012599" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1250";
	ГрафаПоказателя = "05";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12501"), мБаланс.Области["П0001012501" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12502"), мБаланс.Области["П0001012502" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12503"), мБаланс.Области["П0001012503" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12504"), мБаланс.Области["П0001012504" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12505"), мБаланс.Области["П0001012505" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12506"), мБаланс.Области["П0001012506" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12507"), мБаланс.Области["П0001012507" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12508"), мБаланс.Области["П0001012508" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12509"), мБаланс.Области["П0001012509" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12510"), мБаланс.Области["П0001012510" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12511"), мБаланс.Области["П0001012511" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12599, "П0001012599" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1250";
	ГрафаПоказателя = "06";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12501"), мБаланс.Области["П0001012501" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12502"), мБаланс.Области["П0001012502" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12503"), мБаланс.Области["П0001012503" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12504"), мБаланс.Области["П0001012504" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12505"), мБаланс.Области["П0001012505" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12506"), мБаланс.Области["П0001012506" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12507"), мБаланс.Области["П0001012507" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12508"), мБаланс.Области["П0001012508" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12509"), мБаланс.Области["П0001012509" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12510"), мБаланс.Области["П0001012510" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12511"), мБаланс.Области["П0001012511" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12599, "П0001012599" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	// строка 1260
	КодПоказателя = "1260";
	ГрафаПоказателя = "04";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12601"), мБаланс.Области["П0001012601" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12602"), мБаланс.Области["П0001012602" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12603"), мБаланс.Области["П0001012603" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12604"), мБаланс.Области["П0001012604" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12605"), мБаланс.Области["П0001012605" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12606"), мБаланс.Области["П0001012606" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12607"), мБаланс.Области["П0001012607" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12608"), мБаланс.Области["П0001012608" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12609"), мБаланс.Области["П0001012609" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12610"), мБаланс.Области["П0001012610" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12699, "П0001012699" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1260";
	ГрафаПоказателя = "05";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12601"), мБаланс.Области["П0001012601" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12602"), мБаланс.Области["П0001012602" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12603"), мБаланс.Области["П0001012603" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12604"), мБаланс.Области["П0001012604" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12605"), мБаланс.Области["П0001012605" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12606"), мБаланс.Области["П0001012606" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12607"), мБаланс.Области["П0001012607" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12608"), мБаланс.Области["П0001012608" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12609"), мБаланс.Области["П0001012609" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12610"), мБаланс.Области["П0001012610" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12699, "П0001012699" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1260";
	ГрафаПоказателя = "06";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12601"), мБаланс.Области["П0001012601" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12602"), мБаланс.Области["П0001012602" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12603"), мБаланс.Области["П0001012603" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12604"), мБаланс.Области["П0001012604" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12605"), мБаланс.Области["П0001012605" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12606"), мБаланс.Области["П0001012606" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12607"), мБаланс.Области["П0001012607" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12608"), мБаланс.Области["П0001012608" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12609"), мБаланс.Области["П0001012609" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока12610"), мБаланс.Области["П0001012610" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс12699, "П0001012699" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	// строка 1310
	КодПоказателя = "1310";
	ГрафаПоказателя = "04";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ПолучитьСуммуМногострочногоПоказателя(мИдБаланс13199, "П0001013199" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1310";
	ГрафаПоказателя = "05";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ПолучитьСуммуМногострочногоПоказателя(мИдБаланс13199, "П0001013199" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1310";
	ГрафаПоказателя = "06";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ПолучитьСуммуМногострочногоПоказателя(мИдБаланс13199, "П0001013199" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	// строка 1320
	КодПоказателя = "1320";
	ГрафаПоказателя = "04";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = -мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение; // вычитаемый показатель
	СуммаПоказателейРасшифровки = -ПолучитьСуммуМногострочногоПоказателя(мИдБаланс13299, "П0001013299" + ГрафаПоказателя); // вычитаемый показатель
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1320";
	ГрафаПоказателя = "05";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = -мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение; // вычитаемый показатель
	СуммаПоказателейРасшифровки = -ПолучитьСуммуМногострочногоПоказателя(мИдБаланс13299, "П0001013299" + ГрафаПоказателя); // вычитаемый показатель
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1320";
	ГрафаПоказателя = "06";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = -мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение; // вычитаемый показатель
	СуммаПоказателейРасшифровки = -ПолучитьСуммуМногострочногоПоказателя(мИдБаланс13299, "П0001013299" + ГрафаПоказателя); // вычитаемый показатель
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	// строка 1340
	КодПоказателя = "1340";
	ГрафаПоказателя = "04";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока13401"), мБаланс.Области["П0001013401" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока13402"), мБаланс.Области["П0001013402" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока13403"), мБаланс.Области["П0001013403" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс13499, "П0001013499" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1340";
	ГрафаПоказателя = "05";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока13401"), мБаланс.Области["П0001013401" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока13402"), мБаланс.Области["П0001013402" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока13403"), мБаланс.Области["П0001013403" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс13499, "П0001013499" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1340";
	ГрафаПоказателя = "06";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока13401"), мБаланс.Области["П0001013401" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока13402"), мБаланс.Области["П0001013402" + ГрафаПоказателя].Значение, 0)
							    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока13403"), мБаланс.Области["П0001013403" + ГрафаПоказателя].Значение, 0)
							    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс13499, "П0001013499" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	// строка 1350
	КодПоказателя = "1350";
	ГрафаПоказателя = "04";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ПолучитьСуммуМногострочногоПоказателя(мИдБаланс13599, "П0001013599" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1350";
	ГрафаПоказателя = "05";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ПолучитьСуммуМногострочногоПоказателя(мИдБаланс13599, "П0001013599" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодПоказателя = "1350";
	ГрафаПоказателя = "06";
	СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
	СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
	ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
	СуммаПоказателейРасшифровки = ПолучитьСуммуМногострочногоПоказателя(мИдБаланс13599, "П0001013599" + ГрафаПоказателя);
	СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
	СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
	Если НЕ СоотношениеСоблюдается Тогда
		СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
	КонецЕсли;
	
	// строка 1360
	Для Каждого ГрафаПоказателя Из МассивГраф Цикл
		КодПоказателя = "1360";
		СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
		СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
		ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
		СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока13601"), мБаланс.Области["П0001013601" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока13602"), мБаланс.Области["П0001013602" + ГрафаПоказателя].Значение, 0)
								    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс13699, "П0001013699" + ГрафаПоказателя);
		СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
		СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
		Если НЕ СоотношениеСоблюдается Тогда
			СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
		КонецЕсли;
	КонецЦикла;
	
	// строка 1370
	Для Каждого ГрафаПоказателя Из МассивГраф Цикл
		КодПоказателя = "1370";
		СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
		СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
		ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
		СуммаПоказателейРасшифровки = ПолучитьСуммуМногострочногоПоказателя(мИдБаланс13799, "П0001013799" + ГрафаПоказателя);
		СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
		СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
		Если НЕ СоотношениеСоблюдается Тогда
			СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
		КонецЕсли;
	КонецЦикла;
	
	// строка 1410
	Для Каждого ГрафаПоказателя Из МассивГраф Цикл
		КодПоказателя = "1410";
		СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
		СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
		ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
		СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока14101"), мБаланс.Области["П0001014101" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока14102"), мБаланс.Области["П0001014102" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока14103"), мБаланс.Области["П0001014103" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока14104"), мБаланс.Области["П0001014104" + ГрафаПоказателя].Значение, 0)
								    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс14199, "П0001014199" + ГрафаПоказателя);
		СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
		СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
		Если НЕ СоотношениеСоблюдается Тогда
			СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
		КонецЕсли;
	КонецЦикла;
	
	// строка 1420
	Для Каждого ГрафаПоказателя Из МассивГраф Цикл
		КодПоказателя = "1420";
		СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
		СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
		ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
		СуммаПоказателейРасшифровки = ПолучитьСуммуМногострочногоПоказателя(мИдБаланс14299, "П0001014299" + ГрафаПоказателя);
		СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
		СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
		Если НЕ СоотношениеСоблюдается Тогда
			СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
		КонецЕсли;
	КонецЦикла;
	
	// строка 1450
	Для Каждого ГрафаПоказателя Из МассивГраф Цикл
		КодПоказателя = "1450";
		СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
		СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
		ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
		СуммаПоказателейРасшифровки = ПолучитьСуммуМногострочногоПоказателя(мИдБаланс14599, "П0001014599" + ГрафаПоказателя);
		СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
		СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
		Если НЕ СоотношениеСоблюдается Тогда
			СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
		КонецЕсли;
	КонецЦикла;
	
	// строка 1510
	Для Каждого ГрафаПоказателя Из МассивГраф Цикл
		КодПоказателя = "1510";
		СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
		СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
		ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
		СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15101"), мБаланс.Области["П0001015101" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15102"), мБаланс.Области["П0001015102" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15103"), мБаланс.Области["П0001015103" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15104"), мБаланс.Области["П0001015104" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15105"), мБаланс.Области["П0001015105" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15106"), мБаланс.Области["П0001015106" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15107"), мБаланс.Области["П0001015107" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15108"), мБаланс.Области["П0001015108" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15109"), мБаланс.Области["П0001015109" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15110"), мБаланс.Области["П0001015110" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15111"), мБаланс.Области["П0001015111" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15112"), мБаланс.Области["П0001015112" + ГрафаПоказателя].Значение, 0)
								    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс15199, "П0001015199" + ГрафаПоказателя);
		СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
		СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
		Если НЕ СоотношениеСоблюдается Тогда
			СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
		КонецЕсли;
	КонецЦикла;
	
	// строка 1520
	Для Каждого ГрафаПоказателя Из МассивГраф Цикл
		КодПоказателя = "1520";
		СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
		СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
		ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
		СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15201"), мБаланс.Области["П0001015201" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15202"), мБаланс.Области["П0001015202" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15203"), мБаланс.Области["П0001015203" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15204"), мБаланс.Области["П0001015204" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15205"), мБаланс.Области["П0001015205" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15206"), мБаланс.Области["П0001015206" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15207"), мБаланс.Области["П0001015207" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15208"), мБаланс.Области["П0001015208" + ГрафаПоказателя].Значение, 0)
								    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс15299, "П0001015299" + ГрафаПоказателя);
		СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
		СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
		Если НЕ СоотношениеСоблюдается Тогда
			СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
		КонецЕсли;
	КонецЦикла;
	
	// строка 1530
	Для Каждого ГрафаПоказателя Из МассивГраф Цикл
		КодПоказателя = "1530";
		СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
		СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
		ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
		СуммаПоказателейРасшифровки = ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15301"), мБаланс.Области["П0001015301" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15302"), мБаланс.Области["П0001015302" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15303"), мБаланс.Области["П0001015303" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15304"), мБаланс.Области["П0001015304" + ГрафаПоказателя].Значение, 0)
								    + ?(ВключенВОтчет(ДеревоНастроекСтрокРасшифровкиБаланс, "ДопСтрока15305"), мБаланс.Области["П0001015305" + ГрафаПоказателя].Значение, 0)
								    + ПолучитьСуммуМногострочногоПоказателя(мИдБаланс15399, "П0001015399" + ГрафаПоказателя);
		СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
		СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
		Если НЕ СоотношениеСоблюдается Тогда
			СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
		КонецЕсли;
	КонецЦикла;
	
	// строка 1550
	Для Каждого ГрафаПоказателя Из МассивГраф Цикл
		КодПоказателя = "1550";
		СтрокаРезультатаПроверки = ТаблицаРезультатовПроверки.Добавить();
		СтрокаРезультатаПроверки.ПроверяемоеСоотношение = "Сумма по строкам расшифровки показателя " + КодПоказателя + " """ + СокрЛП(мБаланс.Области["П000100" + КодПоказателя + "02"].Текст) + """ в графе """ + СоответствиеЗаголовковГраф[ГрафаПоказателя] + """ должна быть меньше или равна значению показателя";
		ПроверяемыйПоказатель = мБаланс.Области["П000100" + КодПоказателя + ГрафаПоказателя].Значение;
		СуммаПоказателейРасшифровки = ПолучитьСуммуМногострочногоПоказателя(мИдБаланс15599, "П0001015599" + ГрафаПоказателя);
		СоотношениеСоблюдается = (ПроверяемыйПоказатель >= СуммаПоказателейРасшифровки);
		СтрокаРезультатаПроверки.РезультатПроверки = СоотношениеСоблюдается;
		Если НЕ СоотношениеСоблюдается Тогда
			СтрокаРезультатаПроверки.ОписаниеНарушения = Формат(ПроверяемыйПоказатель, "ЧН=; ЧГ=0") + " < " + Формат(СуммаПоказателейРасшифровки, "ЧН=; ЧГ=0");
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаРезультатовПроверки;
	
КонецФункции // ПолучитьРезультатыПроверкиСоотношенияПоказателей()


Функция ВключенВОтчет(ДеревоНастроекСтрокРасшифровки, ИмяОбластиДопСтроки)
	
	НайденнаяВетвьНастройки = ДеревоНастроекСтрокРасшифровки.Строки.Найти(ИмяОбластиДопСтроки, "ИмяОбластиДопСтроки", Истина);
	
	Если НайденнаяВетвьНастройки = Неопределено Тогда
		// если настройка не обнаружена, считаем что допстрока должна входить в отчет
		Возврат Истина;
	Иначе
		Возврат НайденнаяВетвьНастройки.ВключатьВОтчет;
	КонецЕсли;

КонецФункции // ВключенВОтчет()

Процедура КнопкаНастроитьДопСтрокиБалансНажатие(Элемент)
	// Передать данные настройки и исходный макет в форму настройки
	МакетНастроек = ЭтотОбъект.ПолучитьМакет(ИмяМакетаНастроекСоставаДопСтрок);
	ФормаНастроек = ЭтотОбъект.ПолучитьФорму("НастройкаРасшифровкиОтдельныхПоказателей");
	
	ФормаНастроек.ДеревоНастроек = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
	ФормаНастроек.ДеревоНастроекПоУмолчанию = ИзвлечьИсходнуюСтруктуруНастроек(ИмяМакетаНастроекСоставаДопСтрок, "Баланс");
	ФормаНастроек.Заголовок = "Настройка расшифровки отдельных показателей бухгалтерского баланса";
	РезультатНастройки = ФормаНастроек.ОткрытьМодально();
	
	Если РезультатНастройки <> Неопределено Тогда
		Модифицированность = Истина;
		СоставДополнительныхСтрок.Модифицированность = Истина;
		СоставДополнительныхСтрок.СтруктураСоставов.Баланс = РезультатНастройки;
	КонецЕсли;
	
	УстановитьВидимостьДополнительныхСтрок();
	
КонецПроцедуры

Процедура КнопкаНастроитьДопСтрокиФормаОтчетаНажатие(Элемент)
	
	// Передать данные настройки и исходный макет в форму настройки
	МакетНастроек = ЭтотОбъект.ПолучитьМакет(ИмяМакетаНастроекСоставаДопСтрок);
	ФормаНастроек = ЭтотОбъект.ПолучитьФорму("НастройкаРасшифровкиОтдельныхПоказателей");
	
	ФормаНастроек.ДеревоНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета;
	ФормаНастроек.ДеревоНастроекПоУмолчанию = ИзвлечьИсходнуюСтруктуруНастроек(ИмяМакетаНастроекСоставаДопСтрок, ?(ПрименениеЕНВД, "ОПУ_ЕНВД", "ОПУ_НеЕНВД"));
	ФормаНастроек.Заголовок = "Настройка расшифровки отдельных показателей отчета о прибылях и убытках";
	РезультатНастройки = ФормаНастроек.ОткрытьМодально();
	
	Если РезультатНастройки <> Неопределено Тогда
		Модифицированность = Истина;
		СоставДополнительныхСтрок.Модифицированность = Истина;
		СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета = РезультатНастройки;
	КонецЕсли;
	
	УстановитьВидимостьДополнительныхСтрок();
	
	Расчет(мФормаОтчета);
	
КонецПроцедуры

Процедура СформироватьНастройкиСоставаДополнительныхСтрок(ПеременнаяНастроекСостава)

	ПеременнаяНастроекСостава = Новый Структура;
	МакетНастроекПоУмолчанию = ЭтотОбъект.ПолучитьМакет(ИмяМакетаНастроекСоставаДопСтрок);
	
	// Обрабатываем версию макета настроек
	ОбластьВерсии = МакетНастроекПоУмолчанию.Области["Версия"];
	НаименованиеВерсии = МакетНастроекПоУмолчанию.Область(ОбластьВерсии.Верх, 1).Текст;
	ПеременнаяНастроекСостава.Вставить("Версия", НаименованиеВерсии);
	
	ПеременнаяНастроекСостава.Вставить("Модифицированность", Ложь); // Настройки по умолчанию не модифицированы
	
	ПеременнаяНастроекСостава.Вставить("СтруктураСоставов", Новый Структура);
	
	// Обработка состава дополнительных строк отчета Баланс
	ПеременнаяНастроекСостава.СтруктураСоставов.Вставить("Баланс", ИзвлечьИсходнуюСтруктуруНастроек(МакетНастроекПоУмолчанию, "Баланс"));
	ПеременнаяНастроекСостава.СтруктураСоставов.Вставить("ФормаОтчета", ИзвлечьИсходнуюСтруктуруНастроек(МакетНастроекПоУмолчанию, ?(ПрименениеЕНВД, "ОПУ_ЕНВД", "ОПУ_НеЕНВД")));

КонецПроцедуры // СформироватьНастройкиСоставаДополнительныхСтрок()

Функция ИзвлечьИсходнуюСтруктуруНастроек(Знач МакетНастроек, ИмяСекции)

	Если ТипЗнч(МакетНастроек) = Тип("Строка") Тогда
		МакетНастроек = ЭтотОбъект.ПолучитьМакет(МакетНастроек);
	КонецЕсли;
	
	ДеревоНастроек = Новый ДеревоЗначений;
	ДеревоНастроек.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"), "Наименование");
	ДеревоНастроек.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"), "Код строки");
	ДеревоНастроек.Колонки.Добавить("ВключатьВОтчет", Новый ОписаниеТипов("Булево"), "Включать в отчет");
	ДеревоНастроек.Колонки.Добавить("Существенность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2, ДопустимыйЗнак.Неотрицательный)), "Уровень существ. в %");
	ДеревоНастроек.Колонки.Добавить("ИмяОбластиДопСтроки", Новый ОписаниеТипов("Строка"));
	ДеревоНастроек.Колонки.Добавить("ТипСостава", Новый ОписаниеТипов("Строка"));
	ДеревоНастроек.Колонки.Добавить("МаксимальноеКоличество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)), "Макс. кол-во строк");
	ДеревоНастроек.Колонки.Добавить("ЗначениеЭлемента");
	
	Если ПустаяСтрока(ИмяСекции) Тогда
		Возврат ДеревоНастроек;
	КонецЕсли;
	
	ПерваяСтрокаМакетаСостава = МакетНастроек.Области[ИмяСекции].Верх;
	ВысотаМакетаСостава = МакетНастроек.Области[ИмяСекции].Низ;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По МакетНастроек.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		МакетНастроек.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = ПерваяСтрокаМакетаСостава По ВысотаМакетаСостава Цикл
			НомСтр = ВысотаМакетаСостава - (НомерСтроки - ПерваяСтрокаМакетаСостава);
			Если МакетНастроек.Область(НомСтр, 1, НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоНастроек;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 1 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Наименование = СокрЛП(МакетНастроек.Область(НомСтр, 1).Текст);
				НовСтр.Код = СокрЛП(МакетНастроек.Область(НомСтр, 2).Текст);
				НовСтр.ВключатьВОтчет = НЕ ПустаяСтрока(МакетНастроек.Область(НомСтр, 3).Текст);
				НовСтр.Существенность = СокрЛП(МакетНастроек.Область(НомСтр, 4).Текст);
				НовСтр.ИмяОбластиДопСтроки = СокрЛП(МакетНастроек.Область(НомСтр, 5).Текст);
				НовСтр.ТипСостава = СокрЛП(МакетНастроек.Область(НомСтр, 6).Текст);
				НовСтр.МаксимальноеКоличество = СокрЛП(МакетНастроек.Область(НомСтр, 7).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоНастроек;
	
КонецФункции // ИзвлечьИсходнуюСтруктуруНастроек()

Процедура УстановитьВидимостьДополнительныхСтрок()

	Для Каждого НастройкаДопСтрок Из СоставДополнительныхСтрок.СтруктураСоставов Цикл
		ИмяОтчета = НастройкаДопСтрок.Ключ;
		ДеревоНастроек = НастройкаДопСтрок.Значение;
		
		ПолеОтчета = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяОтчета];
		
		// Цикл 1-го уровня
		Для Каждого СтрокаОсновногоПоказателя Из ДеревоНастроек.Строки Цикл
			Если Не ПустаяСтрока(СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки) Тогда
				ОбластьДополнительнойСтроки = ПолеОтчета.Области.Найти(СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки);
				Если ОбластьДополнительнойСтроки <> Неопределено Тогда
					ОбластьДополнительнойСтроки.Видимость = СтрокаОсновногоПоказателя.ВключатьВОтчет;
				КонецЕсли;
			КонецЕсли;
			// Цикл 2-го уровня
			Для Каждого ДополнительнаяСтрока Из СтрокаОсновногоПоказателя.Строки Цикл
				Если Не ПустаяСтрока(ДополнительнаяСтрока.ИмяОбластиДопСтроки) Тогда
					ОбластьДополнительнойСтроки = ПолеОтчета.Области.Найти(ДополнительнаяСтрока.ИмяОбластиДопСтроки);
					Если ОбластьДополнительнойСтроки <> Неопределено Тогда
						ОбластьДополнительнойСтроки.Видимость = ДополнительнаяСтрока.ВключатьВОтчет;
					КонецЕсли;
				КонецЕсли;
				// Цикл 3-го уровня
				Для Каждого СтрокаУровня3 Из ДополнительнаяСтрока.Строки Цикл
					Если Не ПустаяСтрока(СтрокаУровня3.ИмяОбластиДопСтроки) Тогда
						ОбластьДополнительнойСтроки = ПолеОтчета.Области.Найти(СтрокаУровня3.ИмяОбластиДопСтроки);
						Если ОбластьДополнительнойСтроки <> Неопределено Тогда
							ОбластьДополнительнойСтроки.Видимость = СтрокаУровня3.ВключатьВОтчет;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;

	// Настройка видимости строк оформления "в том числе" для варинта ОПУ при применении ЕНВД
	Если ПрименениеЕНВД Тогда
		
		ДеревоНастройкиСостава = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета;
		
		мФормаОтчета.Области.ВТомЧисле2110.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21101")
		                                           ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21102");
		мФормаОтчета.Области.ВТомЧисле2120.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21201")
		                                           ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21202");
		мФормаОтчета.Области.ВТомЧисле2210.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22101")
		                                           ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22102");
		мФормаОтчета.Области.ВТомЧисле2220.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22201")
		                                           ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22202");
		мФормаОтчета.Области.ВТомЧисле2100.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21001")
		                                           ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21002");
		мФормаОтчета.Области.ВТомЧисле2200.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22001")
		                                           ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22002");
		мФормаОтчета.Области.ВТомЧисле2300.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23001")
		                                           ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23002");
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДополнительныхСтрок()

Процедура КоманднаяПанельФормыЗаполнитьОтчет(Кнопка)
	
	Ответ = Вопрос("Внимание! Перед заполнением будут очищены все показатели текущего отчета." + Символы.ПС
		  + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		ЗаполнитьАвто(ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура КоманднаяПанельФормыОчиститьОтчет(Кнопка)
	Ответ = Вопрос("Внимание! Будут очищены все показатели текущего отчета." + Символы.ПС
		  + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Очистить(ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеВыбораВидСдачиОтчетностиОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ПолеВыбораВидСдачиОтчетностиПриИзменении(Элемент)
	ВидСдачиОтчетности = Элемент.Значение;
	Модифицированность = Истина;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

// Список выбора поля выбора "ВариантЗаполнения"

СписокВыбораВариантовЗаполнения = Новый СписокЗначений;
СписокВыбораВариантовЗаполнения.Добавить(1, "не заполнять автоматически");
СписокВыбораВариантовЗаполнения.Добавить(2, "заполнять автоматически с корректировкой");
СписокВыбораВариантовЗаполнения.Добавить(3, "заполнять автоматически без корректировки");

ЭлементыФормы.ПолеВыбораВариантЗаполненияБаланс.СписокВыбора        = СписокВыбораВариантовЗаполнения.Скопировать();
ЭлементыФормы.ПолеВыбораВариантЗаполненияФормаОтчета.СписокВыбора   = СписокВыбораВариантовЗаполнения.Скопировать();

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика   = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
ЦветЗаполняетсяВсегдаВручную    = Новый Цвет(255, 255, 192);
ЦветНеЗаполняется    			= Новый Цвет(255, 255, 255); // БЕЛЫЙ

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяВсегдаВручную);
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветНеЗаполняется);

ИменаПоказателейСоЗнакомПлюс = Новый Массив;
ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132004");
ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132005");
ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132006");
ИменаПоказателейСоЗнакомПлюс.Добавить("П000100212004");
ИменаПоказателейСоЗнакомПлюс.Добавить("П000100212005");
ИменаПоказателейСоЗнакомПлюс.Добавить("П000100221004");
ИменаПоказателейСоЗнакомПлюс.Добавить("П000100221005");
ИменаПоказателейСоЗнакомПлюс.Добавить("П000100222004");
ИменаПоказателейСоЗнакомПлюс.Добавить("П000100222005");
ИменаПоказателейСоЗнакомПлюс.Добавить("П000100233004");
ИменаПоказателейСоЗнакомПлюс.Добавить("П000100233005");
ИменаПоказателейСоЗнакомПлюс.Добавить("П000100235004");
ИменаПоказателейСоЗнакомПлюс.Добавить("П000100235005");
ИменаПоказателейСоЗнакомПлюс.Добавить("П000100241004");
ИменаПоказателейСоЗнакомПлюс.Добавить("П000100241005");
ИменаПоказателейСоЗнакомПлюс.Добавить("П000100242104"); // 2421 изначально расчитывается со знаком "-"
ИменаПоказателейСоЗнакомПлюс.Добавить("П000100242105");
// виртуальные вычитаемые многострочные параметры
ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132004");
ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132005");
ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132006");
ИменаПоказателейСоЗнакомПлюс.Добавить("П200100212004");
ИменаПоказателейСоЗнакомПлюс.Добавить("П200100212005");
ИменаПоказателейСоЗнакомПлюс.Добавить("П200100221004");
ИменаПоказателейСоЗнакомПлюс.Добавить("П200100221005");
ИменаПоказателейСоЗнакомПлюс.Добавить("П200100222004");
ИменаПоказателейСоЗнакомПлюс.Добавить("П200100222005");
ИменаПоказателейСоЗнакомПлюс.Добавить("П200100233004");
ИменаПоказателейСоЗнакомПлюс.Добавить("П200100233005");
ИменаПоказателейСоЗнакомПлюс.Добавить("П200100235004");
ИменаПоказателейСоЗнакомПлюс.Добавить("П200100235005");
ИменаПоказателейСоЗнакомПлюс.Добавить("П200100241004");
ИменаПоказателейСоЗнакомПлюс.Добавить("П200100241005");
ИменаПоказателейСоЗнакомПлюс.Добавить("П200100242104");
ИменаПоказателейСоЗнакомПлюс.Добавить("П200100242105");

////////////////////////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "01/09/2011";

// Имена вспомогательных макетов и форм
ИмяМакетаССоставомПоказателей = "СоставПоказателей2011Кв3";
ИмяМакетаНастроекСоставаДопСтрок = "НастройкаСоставаПоказателей2011Кв3";

//универсальная выгрузка и попутные
ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
ЭтоБалансДляАУ = (ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ");

////////////////////////////////////////////////////////////////////////////////
// СТРУКТУРА МНОГОСТРОЧНЫХ РАЗДЕЛОВ ОТЧЕТОВ
// заполнение осуществляется в рамках выполнения процедуры Инициализация()
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураМногостраничныхРазделов = Новый Структура;

////////////////////////////////////////////////////////////////////////////////

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

мПечатныеФормы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;

СпП = Новый ТаблицаЗначений;
СпП.Колонки.Добавить("НомСтроки");
СпП.Колонки.Добавить("ИмяЯчейки");
СпП.Колонки.Добавить("ИмяПоказателя");
СпП.Колонки.Добавить("ЗнакОперации");
СпП.Колонки.Добавить("ИмяСлагаемого");
СпП.Колонки.Добавить("Сумма");
СпП.Колонки.Добавить("КодСчета");
СпП.Колонки.Добавить("КодКорСчета");
СпП.Колонки.Добавить("ДатаНачала");
СпП.Колонки.Добавить("ДатаКонца");
СпП.Колонки.Добавить("Сдвиг");
СпП.Колонки.Добавить("Раздел");
СпП.Колонки.Добавить("Страница");
СпП.Колонки.Добавить("МнЧ");
СпП.Колонки.Добавить("СтрокаПП");
СпП.Колонки.Добавить("Субконто1");                                                                       	
СпП.Колонки.Добавить("Субконто2");
СпП.Колонки.Добавить("Субконто3");
СпП.Колонки.Добавить("Организация"); // Ссылка на организацию.

// Объявим таблицу значений мТаблицаИтоговыхПоказателейПриКонсолидации.
// Используется при заполнении отчета за несколько организаций. Хранит данные по показателям
// которые записываются через процедуру УстановитьЗначениеПоказателя.

мТаблицаИтоговыхПоказателейПриКонсолидации = Новый ТаблицаЗначений;
мТаблицаИтоговыхПоказателейПриКонсолидации.Колонки.Добавить("ИмяПоказателя");
мТаблицаИтоговыхПоказателейПриКонсолидации.Колонки.Добавить("Сумма");
