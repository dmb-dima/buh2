////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мРаздел1_1; //Таб 1
Перем мРаздел1_2; //Таб 2
Перем мРаздел1_3; //Таб 3,4
Перем мРаздел2_1; //Таб 5,6
Перем мРаздел2_2; //Таб 7
Перем мРаздел2_4; //Таб 8
Перем мРаздел3_1; //Таб 9,10
Перем мРаздел3_2; //Таб 11,12,13

Перем мОписаниеТиповБулево;

Перем мСоставПоказателей Экспорт;

// Хранят имена многострочных разделов
//Перем мИдГруппы1;
//Перем мИдГруппы2;
//Перем мИдГруппы3;
//Перем мИдГруппы4;
//Перем мИдГруппы5;
//Перем мИдГруппы6;
//Перем мИдГруппы7;

Перем мВПрограммеИзмененаОрганизация;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель Экспорт;

// Хранит код отчета по КНД
Перем мКодОтчета Экспорт;

// Хранит версию формы отчета
Перем мВерсияФормы Экспорт;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// Переменные хранят параметры дополнительных листов
Перем НомТекГруппы;

Перем мИННЮЛ;
Перем мКППЮЛ;
Перем мКодОрганаФСС;

Перем мПечатныеФормы Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;
Перем мОписаниеТиповЧислоЕ Экспорт;

Перем мДокументВосстановлен;

Перем мАдресвФорматеДляВыгрузки;

Перем мПоляПоискаПоказателяВТСП Экспорт;

Перем мСтруктураДанныхОтчетаXMLКонтейнер Экспорт;
Перем ИДКонфигурации;
Перем ИзМакета; // для ББУ, чтоб авторасчитываемые ячейки окрашивались из макета

Перем НомУдалСтраницы; // для синхронизации удаления доп страниц таблиц 5, 6, 7

Перем мДанныеОтчета Экспорт;
Перем ТаблицаСообщений Экспорт;
Перем ВариантыФорматовВыгрузки;

Перем ТекущаяОтправка;
Перем Крипт;
Перем ДвДанные;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_4";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел3_1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел3_2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы)
	//Перем ТекТабличноеПоле;

	//Если ИдГруппы = мИдГруппы1 Тогда
	//// ИЛИ ИдГруппы = мИдГруппы2 Тогда

	//	ТекТабличноеПоле = мРаздел1_2;
	//ИначеЕсли ИдГруппы = мИдГруппы2 Тогда
	//	ТекТабличноеПоле = мРаздел2_2;

	////ИначеЕсли ИдГруппы = мИдГруппы3 Тогда
	////	ТекТабличноеПоле = мРаздел3_2;

	//КонецЕсли;

	//Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()
	//Перем ИмяГруппы;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	//ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	//Если ИмяТекущейСтраницыПанели = "Раздел1_2" Тогда
	//	ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел1_2.ТекущаяОбласть);
	//ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_2" Тогда
	//	ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_2.ТекущаяОбласть);
	//ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_4" Тогда
	//	ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_4.ТекущаяОбласть);
	//ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3_2" Тогда
	//	ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел3_2.ТекущаяОбласть);
	//КонецЕсли;

	//Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		//Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
		//	Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
		//		мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
		//		ЕстьИзменения = Истина;
		//	КонецЕсли;

		//КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// При необходимости уравниваем количество доп страниц в разделах "Раздел2_1" и "Раздел2_2"
// <Описание функции>
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Процедура ДобавитьДопСтраницы()
	Перем ТаблицаСтраницРаздела2_1;
	Перем ТаблицаСтраницРаздела2_2;
	
	Если мСтруктураМногостраничныхРазделов.Свойство("Раздел2_1", ТаблицаСтраницРаздела2_1) 
		И мСтруктураМногостраничныхРазделов.Свойство("Раздел2_2", ТаблицаСтраницРаздела2_2) Тогда
		Кол2_1 = ТаблицаСтраницРаздела2_1.Количество();
		Кол2_2 = ТаблицаСтраницРаздела2_2.Количество();
		Если Кол2_1 > Кол2_2 Тогда
			Пока Кол2_1 > Кол2_2 Цикл  				
				ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2_2");
				РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2_2");
				РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел2_2", Истина);
				РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);
				УстановитьЦветФонаЯчейки(,,"Раздел2_2");
				
				ДополнительныйКод = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ДополнительныйКод_"));
				Для Сч = СтрДлина(ДополнительныйКод) По 9 Цикл
					ДополнительныйКод = ДополнительныйКод + " ";		
				КонецЦикла; 				
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2_2", "ДополнительныйКод_", 10, ДополнительныйКод);
				
				Кол2_2 = Кол2_2 + 1;			
			КонецЦикла;  	
			
			Сообщить("Количество страниц Раздела II (табл. 5, 6) и Раздела II (табл. 7) должно быть одинаковым.
			|Автоматически добавлены страницы Раздела II (табл. 7).", СтатусСообщения.Информация);
			
		ИначеЕсли Кол2_1 < Кол2_2 Тогда
			Пока Кол2_1 < Кол2_2 Цикл
				ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2_1");
				РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2_1"); 
				РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел2_1", Истина); 
				РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);
				УстановитьЦветФонаЯчейки(,,"Раздел2_1");	
				ДополнительныйКод = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ДополнительныйКод_"));
				Для Сч = СтрДлина(ДополнительныйКод) По 9 Цикл
					ДополнительныйКод = ДополнительныйКод + " ";		
				КонецЦикла;  				
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2_1", "ДополнительныйКод_", 10, ДополнительныйКод);
				
				Кол2_1 = Кол2_1 + 1;	
			КонецЦикла;
			
			Сообщить("Количество страниц Раздела II (табл. 5, 6) и Раздела II (табл. 7) должно быть одинаковым.
			|Автоматически добавлены страницы Раздела II (табл. 5, 6).", СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЕсли;  
	
КонецПроцедуры// ДобавитьДопСтраницы()


// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = Ложь;
		
		Если ВариантЗаполнения = 4 Тогда

			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;

		Иначе

			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;

		КонецЕсли;

		// установим цвет ячейки
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);

		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			//ЗначениеВКвадратах = ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяПоказателя);
			ЗначениеВКвадратах = Ложь;

			Если ВариантЗаполнения = 4 Тогда
				//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

			Иначе

					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;

			КонецЕсли;

				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов() Экспорт
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];

			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки    = Колонка.Имя;
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейки.СодержитЗначение Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	МассивМесяцев = РегламентированнаяОтчетность.РазобратьСтрокуВМассивПоРазделителю("1.2.4.5.7.8.10.11");
	Если МассивМесяцев.Найти(НомерМесяца) <> Неопределено Тогда
		НомерМесяца = "1";
	КонецЕсли;
	
	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина");

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

	// Период на титульном листе
	Номер1МесяцаКвартала = НомерКвартала * 3 - 2;
	Номер2МесяцаКвартала = НомерКвартала * 3 - 1;
	Номер3МесяцаКвартала = НомерКвартала * 3;
	
	мТитульный.Области.ОтчПериод.Значение = НомерМесяца;
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "РасчПериод", 4, НомерГода);
	
	Название1МесяцаКвартала = Формат(Дата(НомерГода, Номер1МесяцаКвартала, 1), "ДФ=ММММ");
	Название2МесяцаКвартала = Формат(Дата(НомерГода, Номер2МесяцаКвартала, 1), "ДФ=ММММ");
	Название3МесяцаКвартала = Формат(Дата(НомерГода, Номер3МесяцаКвартала, 1), "ДФ=ММММ");
	
	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке2.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке2.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке2.Значение = Название3МесяцаКвартала;
	
	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке3.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке3.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке3.Значение = Название3МесяцаКвартала;

	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке5.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке5.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке5.Значение = Название3МесяцаКвартала;
	
	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке6.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке6.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке6.Значение = Название3МесяцаКвартала;
	
	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке15.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке15.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке15.Значение = Название3МесяцаКвартала;

	мРаздел3_1.Области.Название1МесяцаКварталаВСтроке2.Значение = Название1МесяцаКвартала;
	мРаздел3_1.Области.Название2МесяцаКварталаВСтроке2.Значение = Название2МесяцаКвартала;
	мРаздел3_1.Области.Название3МесяцаКварталаВСтроке2.Значение = Название3МесяцаКвартала;

	мРаздел3_1.Области.Название1МесяцаКварталаВСтроке10.Значение = Название1МесяцаКвартала;
	мРаздел3_1.Области.Название2МесяцаКварталаВСтроке10.Значение = Название2МесяцаКвартала;
	мРаздел3_1.Области.Название3МесяцаКварталаВСтроке10.Значение = Название3МесяцаКвартала;
	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом даты представления отчета в соответствующие
// области табличного документа.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	мРаздел3_2.области.ДатаОтчета.Значение = Формат(ДатаПодписи, "ДФ=""д ММММ гггг 'г.' """);

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Получить ПолучитьРазмерСтраховогоТарифа
// Нельзя вызывать без проверки на пустую организацию
//
// возвращает размер страхового тарифа на дату конца отчетного периода
//
Функция ПолучитьРазмерСтраховогоТарифа()

	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "СтраховойТариф");
	СтраховойТариф = Неопределено;
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, Сведения);
	ОргСведения.Свойство("СтраховойТариф", СтраховойТариф);
	Возврат СтраховойТариф;

КонецФункции // ПолучитьРазмерСтраховогоТарифа

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	ПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);

	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "КППЮЛ"); // КПП
		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 
		Сведения.Добавить("", "ОГРН"); 
		Сведения.Добавить("", "ОКАТО");
		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКВЭД");
		Сведения.Добавить("", "ОКОПФ");
		Сведения.Добавить("", "ОКФС");
		Сведения.Добавить("", "РегистрационныйНомерФСС");
	КонецЕсли;

	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	Сведения.Добавить("", "ФИО"); // ФИО предпринимателя
	Сведения.Добавить("", "ФИОИсп"); // ФИО исполнителя
	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "ТелОрганизации");


	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		// Инициализируем переменные
		ИННЮЛ = ""; // ИНН
		КППЮЛ = ""; // КПП
		НаимЮЛПол = ""; // Полное наименование 
		ОГРН = "";
		ОКАТО = "";
		ОКПО = "";
		ОКВЭД = "";
		ОКОПФ = "";
		ОКФС = "";
		РегистрационныйНомерФСС = "";

	КонецЕсли;

	ФИОРук = ""; // ФИО руководителя
	ФИОБух = ""; // ФИО бухгалтера
	ФИО = "";
	ФИОИсп = "";
	ТелИсп = "";
	ТелОрганизации = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		// Получаем данные
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ", КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОГРН", ОГРН);
		ОргСведения.Свойство("ОКАТО", ОКАТО);
		ОргСведения.Свойство("ОКПО", ОКПО);
		ОргСведения.Свойство("ОКВЭД", ОКВЭД);
		ОргСведения.Свойство("ОКОПФ", ОКОПФ);
		ОргСведения.Свойство("ОКФС", ОКФС);
		ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
	КонецЕсли;

	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	ОргСведения.Свойство("ФИО", ФИО);
	ОргСведения.Свойство("ФИОИсп", ФИОИсп);
	ОргСведения.Свойство("ТелИсп", ТелИсп);
	ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);

	Если ПБОЮЛ Тогда
		НаимЮлПол = ФИО;
		ФИОРук = "";
		ФИОБух = "";
		ФИОИсп = "";
		ТелИсп = "";
	КонецЕсли;

	Если ВПрограммеИзмененаДатаПодписи Тогда

		Если НЕ ПБОЮЛ Тогда
			// Обновим только то, что зависит от даты подписи и выйдем
			мРаздел3_2.Области.ОргДиректор.Значение = ФИОРук;
			мРаздел3_2.Области.ОргБухгалтер.Значение = ФИОБух;
		Иначе
			мРаздел3_2.Области.ФИОИП.Значение = ФИО;
			мТитульный.Области.ОргНазв.Значение = ФИО;
		КонецЕсли;

		ФИОИсп = ?(ПустаяСтрока(ФИОИсп), ФИОБух, ФИОИсп);
		ТелИсп = ?(ПустаяСтрока(ТелИсп), ТелОрганизации, ТелИсп);
		ФИОИсп = ФИОИсп + ?(НЕ ПустаяСтрока(ФИОИсп), ?(НЕ ПустаяСтрока(ТелИсп), " " + ТелИсп, ""), "");
		мРаздел3_2.Области.ОргИсполнитель.Значение = ФИОИсп;

		Возврат;

	КонецЕсли;

	// Производим операции связанные с текущей формой отчетности

	// Работаем с названием ЮЛ
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргНазв.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		мТитульный.Области.ОргНазв.Значение = НаимЮЛПол;
		Если ПБОЮЛ Тогда
			мРаздел3_2.Области.ФИОИП.Значение = ФИО;
		КонецЕсли;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодОКПО.Значение)) Тогда
		мТитульный.Области.ОргКодОКПО.Значение  = ОКПО;
	КонецЕсли;
	
	Если ПустаяСтрока(мТитульный.Области.ОргКодОКАТО.Значение) Тогда
		мТитульный.Области.ОргКодОКАТО.Значение  = ОКАТО;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) ИЛИ ПустаяСтрока(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ИНН_")) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ИНН_", 12, ИННЮЛ);
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ ПустаяСтрока(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП_")) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "КПП_", 9, КППЮЛ);
	КонецЕсли;
	
	// Работаем с ОГРН
	Если (мВПрограммеИзмененаОрганизация) ИЛИ ПустаяСтрока(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОргКодОГРН_")) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОргКодОГРН_", 15, ОГРН);
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодОКВЭД.Значение)) Тогда
		мТитульный.Области.ОргКодОКВЭД.Значение = ОКВЭД;
	КонецЕсли;

	// Работаем с ФИО Бухгалтера
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел3_2.Области.ОргБухгалтер.Значение)) Тогда
		мРаздел3_2.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;

	// Работаем с ФИО руководителя организации
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел3_2.Области.ОргДиректор.Значение)) Тогда
		мРаздел3_2.Области.ОргДиректор.Значение = ФИОРук;
	КонецЕсли;

	// Работаем с ФИО исполнителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел3_2.Области.ОргИсполнитель.Значение)) Тогда
		ФИОИсп = ?(ПустаяСтрока(ФИОИсп), ФИОБух, ФИОИсп);
		ТелИсп = ?(ПустаяСтрока(ТелИсп), ТелОрганизации, ТелИсп);
		ФИОИсп = ФИОИсп + ?(НЕ ПустаяСтрока(ФИОИсп), ?(НЕ ПустаяСтрока(ТелИсп), " " + ТелИсп, ""), "");
		мРаздел3_2.Области.ОргИсполнитель.Значение = ФИОИсп;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодКОПФ.Значение)) Тогда
		мТитульный.Области.ОргКодКОПФ.Значение = ОКОПФ;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодКФС.Значение)) Тогда
		мТитульный.Области.ОргКодКФС.Значение = ОКФС;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) ИЛИ ПустаяСтрока(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОргФССКод_")) Тогда
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, РегистрационныйНомерФСС, "ОргФССКод_", , , , Ложь);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОргФССКод_", 10, РегистрационныйНомерФСС);
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (РегламентированнаяОтчетность.ПустоеЗначение(мРаздел3_1.Области.П000090001007.Значение)) Тогда
		мРаздел3_1.Области.П000090001007.Значение = ПолучитьРазмерСтраховогоТарифа();
		Расчет();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);
	
КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
// Лист - имя листа, необходимо для интерактивного добавления
// если Лист - неопределно, то текущий берется, равносильно нажатию на кнопку Добавить или Удалить
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	Если Лист = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// Устанавливает страницу с указанным номером активной (для многостраничных)
// ИмяЛиста - имя многосраничного листа, у которого нужно поменять активную страницу
// Номер - номер листа, коорый нужно сделать активным
Процедура УстановитьАктивнуюСтраницу(ИмяЛиста, Номер)
	Перем ТаблицаСтраниц;
	
	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяЛиста, ТаблицаСтраниц) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаЛиста = ТаблицаСтраниц.Найти(Истина, "АктивнаяСтраница");   		
		Если СтрТаблицаЛиста <> Неопределено Тогда
			
			// Убираем активность у текущей страницы
			СтрТаблицаЛиста.АктивнаяСтраница = Ложь;
			
			// Устанавливаем ативность у нужной страницы
			СтрТаблицаЛиста = ТаблицаСтраниц.Получить(Номер);
			СтрТаблицаЛиста.АктивнаяСтраница   = Истина;  			
			
		КонецЕсли;
		
	КонецЕсли;   	

КонецПроцедуры


// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();
	
	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
				Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
			Иначе
				Дельта = 0;
			КонецЕсли;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Истина;
	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати

	Если СтруктураПараметровЛиста.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПараметровЛиста);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	ПечатнаяФорма = Новый ТабличныйДокумент();

	ТабличноеПоле = ЭлементыФормы[ИмяТабличногоПоля];

	Если ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть();
	Иначе
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть(ИмяОбластиТаблПоля);
	КонецЕсли;

	ПечатнаяФорма.Вывести(ОбластьПечати);

	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;

	//Если ВидПечати = "ПоказатьБланк" Тогда
	//	ПечатнаяФорма.Показать(СокрП(Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
	//ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
	//	ПечатнаяФорма.Напечатать();
	//КонецЕсли;
	мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);

КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)
	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяЯчейка);
КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий1;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт
	РегламентированнаяОтчетность.роОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПоле);
КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	ОргИсполнитель = мРаздел3_2.Области.ОргИсполнитель.Значение;
	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);

		мРаздел3_2.Области.ОргИсполнитель.Значение = ОргИсполнитель;
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);
	УстановитьЦветФонаЯчейки(,,"ИмяТекущейСтраницыПанел");
	Если ИмяТекущейСтраницыПанели = "Раздел2_2" Тогда
		СделатьНедоступнойКнопку("ОчиститьТекущийРазделРаздел2_2");
    КонецЕсли;
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = СтрокаУровня2.ВыводНаПечать;

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = СтрокаУровня3.ВыводНаПечать;
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	
	Если ЧтоИскать = Неопределено Тогда
		Если мСчетчикСтраниц <> Истина Тогда
			//проставляем номера страниц
			НомерЛиста = 1;
			Для Каждого Эл Из мПечатныеФормы Цикл
				Если НЕ УдалосьПроставитьНомерСтраницы(Эл.Значение, НомерЛиста) Тогда
					Сообщить("Не удалось проставить номер страницы для " + Эл.Представление);
					Продолжить;
				КонецЕсли;
				НомерЛиста = НомерЛиста + 1;
			КонецЦикла;
		КонецЕсли;
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Пытается проставить номер страницы НомерЛиста в соответствующие ячейки табличного документа ТаблДок.
// Возвращает Истина, если удалось проставить номер. В противном случае возвращает Ложь.
Функция УдалосьПроставитьНомерСтраницы(ТаблДок,Знач НомерЛиста)
	
	ОбластиСНомерамиЛистов = Новый СписокЗначений;
	Для Каждого Обл Из ТаблДок.Области Цикл
		Если Обл.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник ИЛИ Обл.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		КрайнийПравыйСимвол = Прав(Обл.Имя, 1);
		Если Лев(ВРЕГ(Обл.Имя), 6) = "НОМСТР" И (КодСимвола(КрайнийПравыйСимвол) >= КодСимвола("0") И КодСимвола(КрайнийПравыйСимвол) <= КодСимвола("9"))Тогда
			ОбластиСНомерамиЛистов.Добавить(Обл, Обл.Имя);
		КонецЕсли;
		ОбластиСНомерамиЛистов.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	КонецЦикла;
	
	Цифры = Новый Массив;
	Для Инд = 1 По 9 Цикл
		Цифра = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
		НомерЛиста = Цел(НомерЛиста / 10);
		Если ПустаяСтрока(Цифра) Тогда
			Прервать;
		Иначе
			Цифры.Добавить(Цифра);
		КонецЕсли;
	КонецЦикла;
	
	Для Инд = 0 По ОбластиСНомерамиЛистов.Количество() - 1 Цикл
		ОбластиСНомерамиЛистов.Получить(Инд).Значение.Значение = Формат(?(Цифры.Количество() > Инд, Цифры[Инд], 0), "ЧЦ=1; ЧН=0; ЧГ=");
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // УдалосьПроставитьНомерСтраницы()


// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт 

	Вариант = ВидДокумента * НомерКорректировки;
	
	мКодОрганаФСС = СокрЛП(мТитульный.Рисунки.D29.Значение
						+ мТитульный.Рисунки.D30.Значение
						+ мТитульный.Рисунки.D31.Значение
						+ мТитульный.Рисунки.D32.Значение);

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.Вид                        = Вариант;
	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	// обновляем структуру многостраничных разделов
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// обновляем структуру многостраничных разделов
	//ОбновитьСтруктуруМногостраничныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	СписокСохранения.Вставить("ФлажокВнешДанные", ФлажокВнешДанные);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	СписокСохранения.Вставить("КодОрганаФСС", мКодОрганаФСС);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц();
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	Если ДеревоНастройкиСтраниц = Неопределено Тогда
		ФормироватьСтруктуруСтраницОтчета();
	Иначе
		мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();	
	КонецЕсли;

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);

			РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);

		КонецЦикла;

	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Если СписокСохранения.Свойство("ФлажокВнешДанные") Тогда
		ФлажокВнешДанные = СписокСохранения.ФлажокВнешДанные;
	Иначе
		ФлажокВнешДанные = Ложь;
	КонецЕсли;

	ДобавитьСтраницы = Ложь;
	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.			
			ОбновитьПользовательскиеНастройки();
			// При необходимости уравниваем количество доп страниц в разделах "Раздел2_1" и "Раздел2_2"
			ДобавитьСтраницы = Истина;  
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");
       
		Если ИмяТекТабличноеПоле = "ПолеТабличногоДокументаТитульный" Тогда 
		    Если СписокСохранения.Свойство("КодОрганаФСС", мКодОрганаФСС) Тогда
				мТитульный.Рисунки.D29.Значение = Сред(мКодОрганаФСС, 1, 1);
				мТитульный.Рисунки.D30.Значение = Сред(мКодОрганаФСС, 2, 1);
				мТитульный.Рисунки.D31.Значение = Сред(мКодОрганаФСС, 3, 1);
				мТитульный.Рисунки.D32.Значение = Сред(мКодОрганаФСС, 4, 1);
			КонецЕсли;
		КонецЕсли;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	// При необходимости уравниваем количество доп страниц в разделах "Раздел2_1" и "Раздел2_2"
	Если ДобавитьСтраницы Тогда
		ДобавитьДопСтраницы();	
	КонецЕсли;	
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);
	//Расчет();

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;
	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Если ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1_1" Тогда
		// РАЗДЕЛ I
		
		//Сбор данных
		
		П000010002301 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010002301.Значение);
		П000010002401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010002401.Значение);
		П000010002501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010002501.Значение);
		П000010003301 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010003301.Значение);
		П000010003401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010003401.Значение);
		П000010003501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010003501.Значение);
		П000010005301 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010005301.Значение);
		П000010005401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010005401.Значение);
		П000010005501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010005501.Значение);
		П000010006301 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010006301.Значение);
		П000010006401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010006401.Значение);
		П000010006501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010006501.Значение);
		П000010015301 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010015301.Значение);
		П000010015401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010015401.Значение);
		П000010015501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010015501.Значение);
		П000010016301 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010016301.Значение);
		П000010016401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010016401.Значение);
		П000010016501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010016501.Значение);
		
		П000010002101 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010002101.Значение);
		П000010003101 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010003101.Значение);
		П000010005101 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010005101.Значение);
		П000010006101 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010006101.Значение);
		П000010015101 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010015101.Значение);
		П000010016101 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010016101.Значение);
		
		П000010001003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010001003.Значение);
		П000010004003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010004003.Значение);
		П000010007003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010007003.Значение);
		
		П000010011003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010011003.Значение);
		
		П000010013003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010013003.Значение);
		П000010014003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010014003.Значение);
		П000010017003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010017003.Значение);
		
		//Расчеты
		
		П000010002201 = П000010002301 + П000010002401 + П000010002501;
		П000010003201 = П000010003301 + П000010003401 + П000010003501;
		П000010005201 = П000010005301 + П000010005401 + П000010005501;
		П000010006201 = П000010006301 + П000010006401 + П000010006501;
		П000010015201 = П000010015301 + П000010015401 + П000010015501;
		П000010016201 = П000010016301 + П000010016401 + П000010016501;
		
		П000010002003 = П000010002101 + П000010002201;
		П000010003003 = П000010003101 + П000010003201;
		П000010005003 = П000010005101 + П000010005201;
		П000010006003 = П000010006101 + П000010006201;
		П000010015003 = П000010015101 + П000010015201;
		П000010016003 = П000010016101 + П000010016201;
		
		П000010008003 = П000010001003 + П000010002003 + П000010003003
					  + П000010004003 + П000010005003 + П000010006003
					  + П000010007003;
		
		П000010012003 = П000010013003 + П000010014003;
		
		П000010018003 =  П000010012003 +  П000010015003 + П000010016003 + П000010017003;
		
		Если П000010018003 > П000010008003 Тогда 
			ЗадолженностьЗаФондомВсего = П000010018003 - П000010008003;
			П000010019003 = 0;
		Иначе
			П000010019003 = П000010008003 - П000010018003;
			ЗадолженностьЗаФондомВсего = 0;
		КонецЕсли;
		
		П000010010003 = ЗадолженностьЗаФондомВсего - П000010011003;
		П000010009003 = П000010010003 + П000010011003;
		
		//Запишем, что посчитали
		
		мРаздел1_1.Области.П000010002201.Значение = П000010002201;
		мРаздел1_1.Области.П000010003201.Значение = П000010003201;
		мРаздел1_1.Области.П000010005201.Значение = П000010005201;
		мРаздел1_1.Области.П000010006201.Значение = П000010006201;
		мРаздел1_1.Области.П000010015201.Значение = П000010015201;
		мРаздел1_1.Области.П000010016201.Значение = П000010016201;
		
		мРаздел1_1.Области.П000010002003.Значение = П000010002003;
		мРаздел1_1.Области.П000010003003.Значение = П000010003003;
		мРаздел1_1.Области.П000010005003.Значение = П000010005003;
		мРаздел1_1.Области.П000010006003.Значение = П000010006003;
		мРаздел1_1.Области.П000010015003.Значение = П000010015003;
		мРаздел1_1.Области.П000010016003.Значение = П000010016003;
		
		мРаздел1_1.Области.П000010008003.Значение = П000010008003;
		мРаздел1_1.Области.П000010009003.Значение = П000010009003;
		мРаздел1_1.Области.П000010010003.Значение = П000010010003;
		мРаздел1_1.Области.П000010012003.Значение = П000010012003;
		мРаздел1_1.Области.П000010018003.Значение = П000010018003;
		мРаздел1_1.Области.П000010019003.Значение = П000010019003;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_2" Тогда

		//Сбор данных
		
		П000020001003 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020001003.Значение);
		П000020001004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020001004.Значение);
		П000020001005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020001005.Значение);
		
		П000020003003 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020003003.Значение);
		П000020003004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020003004.Значение);
		П000020003005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020003005.Значение);
		
		П000020005003 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020005003.Значение);
		П000020005004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020005004.Значение);
		
		П000020006003 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020006003.Значение);
		П000020006004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020006004.Значение);
		
		П000020008001 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020008001.Значение);
		
		П000020009003 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020009003.Значение);
		П000020009004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020009004.Значение);
		П000020009005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020009005.Значение);
		
		П000020010003 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020010003.Значение);
		П000020010004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020010004.Значение);
		П000020010005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020010005.Значение);
		
		П000020011001 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020011001.Значение);
		
		П000020012003 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020012003.Значение);
		П000020012004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020012004.Значение);
		П000020012005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020012005.Значение);
		
		П000020013003 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020013003.Значение);
		П000020013004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020013004.Значение);
		П000020013005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020013005.Значение);
		
		П000020014003 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020014003.Значение);
		П000020014004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020014004.Значение);
		
		П000020015003 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020015003.Значение);
		П000020015004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020015004.Значение);
		П000020015005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000020015005.Значение);
		
		//Расчеты
		
		П000020008003 = П000020009003 + П000020010003;
		П000020011003 = П000020012003 + П000020013003;
		П000020007001 = П000020008001 + П000020011001;
		П000020007003 = П000020008003 + П000020011003;
		П000020016003 = П000020001003 + П000020003003 + П000020005003
					  + П000020006003 + П000020007003 + П000020014003
					  + П000020015003;
					  
		П000020008004 = П000020009004 + П000020010004;
		П000020011004 = П000020012004 + П000020013004;
		П000020007004 = П000020008004 + П000020011004;
		П000020016004 = П000020001004 + П000020003004 + П000020005004
					  + П000020006004 + П000020007004 + П000020014004
					  + П000020015004;
					  
		П000020008005 = П000020009005 + П000020010005;
		П000020011005 = П000020012005 + П000020013005;
		П000020007005 = П000020008005 + П000020011005;
		П000020014005 = П000020014004;
		П000020016005 = П000020001005 + П000020003005 
					  + П000020007005 + П000020014005
					  + П000020015005;
					  
		//Запишем, что посчитали
		
		мРаздел1_2.Области.П000020007001.Значение = П000020007001;
		
		мРаздел1_2.Области.П000020007003.Значение = П000020007003;
		мРаздел1_2.Области.П000020008003.Значение = П000020008003;
		мРаздел1_2.Области.П000020011003.Значение = П000020011003;
		мРаздел1_2.Области.П000020016003.Значение = П000020016003;
		
		мРаздел1_2.Области.П000020007004.Значение = П000020007004;
		мРаздел1_2.Области.П000020008004.Значение = П000020008004;
		мРаздел1_2.Области.П000020011004.Значение = П000020011004;
		мРаздел1_2.Области.П000020016004.Значение = П000020016004;
		
		мРаздел1_2.Области.П000020007005.Значение = П000020007005;
		мРаздел1_2.Области.П000020008005.Значение = П000020008005;
		мРаздел1_2.Области.П000020011005.Значение = П000020011005;
		мРаздел1_2.Области.П000020014005.Значение = П000020014005;
		мРаздел1_2.Области.П000020016005.Значение = П000020016005;
		

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_3" Тогда
		
		//Сбор данных
		
		П000030001003 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000030001003.Значение);
		П000030003003 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000030003003.Значение);
		П000030004003 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000030004003.Значение);
		П000030005003 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000030005003.Значение);
		
		П000030001004 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000030001004.Значение);
		П000030003004 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000030003004.Значение);
		П000030004004 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000030004004.Значение);
		П000030005004 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000030005004.Значение);
		
		П000030001005 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000030001005.Значение);
		П000030003005 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000030003005.Значение);
		П000030004005 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000030004005.Значение);
		П000030005005 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000030005005.Значение);
		
		П000030001006 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000030001006.Значение);
		П000030003006 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000030003006.Значение);
		П000030004006 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000030004006.Значение);
		П000030005006 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000030005006.Значение);
		
		П000040001003 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000040001003.Значение);
		П000040002003 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000040002003.Значение);
		П000040004003 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000040004003.Значение);
		П000040005003 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000040005003.Значение);
		
		П000040001004 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000040001004.Значение);
		П000040002004 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000040002004.Значение);
		П000040004004 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000040004004.Значение);
		П000040005004 = ОкруглитьЧислоПоФормату(мРаздел1_3.Области.П000040005004.Значение);
		
		//Расчеты
		
		П000030002003 = П000030003003 + П000030004003 + П000030005003;
		П000030002004 = П000030003004 + П000030004004 + П000030005004;
		П000030002005 = П000030003005 + П000030004005 + П000030005005;
		П000030002006 = П000030003006 + П000030004006 + П000030005006;
		
		П000030001007 = П000030001003 - П000030001004 - П000030001005 - П000030001006;
		П000030002007 = П000030002003 - П000030002004 - П000030002005 - П000030002006;
		П000030003007 = П000030003003 - П000030003004 - П000030003005 - П000030003006;
		П000030004007 = П000030004003 - П000030004004 - П000030004005 - П000030004006;
		П000030005007 = П000030005003 - П000030005004 - П000030005005 - П000030005006;
		
		П000040003003 = П000040001003 + П000040002003;
		П000040003004 = П000040001004 + П000040002004;
		
		П000040006003 = П000040003003 - П000040004003 + П000040005003;
		П000040006004 = П000040003004 - П000040004004 + П000040005004;
		
		//Запишем, что посчитали
		
		мРаздел1_3.Области.П000030002003.Значение = П000030002003;
		мРаздел1_3.Области.П000030002004.Значение = П000030002004;
		мРаздел1_3.Области.П000030002005.Значение = П000030002005;
		мРаздел1_3.Области.П000030002006.Значение = П000030002006;
		мРаздел1_3.Области.П000030001007.Значение = П000030001007;
		мРаздел1_3.Области.П000030002007.Значение = П000030002007;
		мРаздел1_3.Области.П000030003007.Значение = П000030003007;
		мРаздел1_3.Области.П000030004007.Значение = П000030004007;
		мРаздел1_3.Области.П000030005007.Значение = П000030005007;
		мРаздел1_3.Области.П000040003003.Значение = П000040003003;
		мРаздел1_3.Области.П000040006003.Значение = П000040006003;
		мРаздел1_3.Области.П000040003004.Значение = П000040003004;
		мРаздел1_3.Области.П000040006004.Значение = П000040006004;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_1" Тогда	
		
		// РАЗДЕЛ II
		
		//Сбор данных
		
		П000060003003 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000060003003.Значение);
		П000060004003 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000060004003.Значение);
		
		//Расчеты
		
		П000060005003 = П000060003003 + П000060004003;
		
		//Запишем, что посчитали
		
		мРаздел2_1.Области.П000060005003.Значение = П000060005003;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_2" Тогда
		
		//Сбор данных
		
		П000070001003 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070001003.Значение);
		П000070001004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070001004.Значение);
		П000070001005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070001005.Значение);
		
		П000070003003 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070003003.Значение);
		П000070003004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070003004.Значение);
		П000070003005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070003005.Значение);
		
		П000070005003 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070005003.Значение);
		П000070005004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070005004.Значение);
		
		П000070006003 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070006003.Значение);
		П000070006004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070006004.Значение);
		
		П000070008001 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070008001.Значение);
		
		П000070009003 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070009003.Значение);
		П000070009004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070009004.Значение);
		П000070009005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070009005.Значение);
		
		П000070010003 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070010003.Значение);
		П000070010004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070010004.Значение);
		П000070010005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070010005.Значение);
		
		П000070011001 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070011001.Значение);
		
		П000070012003 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070012003.Значение);
		П000070012004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070012004.Значение);
		П000070012005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070012005.Значение);
		
		П000070013003 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070013003.Значение);
		П000070013004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070013004.Значение);
		П000070013005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070013005.Значение);
		
		П000070014003 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070014003.Значение);
		П000070014004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070014004.Значение);
		
		П000070015003 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070015003.Значение);
		П000070015004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070015004.Значение);
		П000070015005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000070015005.Значение);
		
		//Расчеты
		
		П000070008003 = П000070009003 + П000070010003;
		П000070011003 = П000070012003 + П000070013003;
		П000070007001 = П000070008001 + П000070011001;
		П000070007003 = П000070008003 + П000070011003;
		П000070016003 = П000070001003 + П000070003003 + П000070005003
					  + П000070006003 + П000070007003 + П000070014003
					  + П000070015003;
					  
		П000070008004 = П000070009004 + П000070010004;
		П000070011004 = П000070012004 + П000070013004;
		П000070007004 = П000070008004 + П000070011004;
		П000070016004 = П000070001004 + П000070003004 + П000070005004
					  + П000070006004 + П000070007004 + П000070014004
					  + П000070015004;
					  
		П000070008005 = П000070009005 + П000070010005;
		П000070011005 = П000070012005 + П000070013005;
		П000070007005 = П000070008005 + П000070011005;
		П000070014005 = П000070014004;
		П000070016005 = П000070001005 + П000070003005 
					  + П000070007005 + П000070014005
					  + П000070015005;
					  
		//Запишем, что посчитали
		
		мРаздел2_2.Области.П000070007001.Значение = П000070007001;
		
		мРаздел2_2.Области.П000070007003.Значение = П000070007003;
		мРаздел2_2.Области.П000070008003.Значение = П000070008003;
		мРаздел2_2.Области.П000070011003.Значение = П000070011003;
		мРаздел2_2.Области.П000070016003.Значение = П000070016003;
		
		мРаздел2_2.Области.П000070007004.Значение = П000070007004;
		мРаздел2_2.Области.П000070008004.Значение = П000070008004;
		мРаздел2_2.Области.П000070011004.Значение = П000070011004;
		мРаздел2_2.Области.П000070016004.Значение = П000070016004;
		
		мРаздел2_2.Области.П000070007005.Значение = П000070007005;
		мРаздел2_2.Области.П000070008005.Значение = П000070008005;
		мРаздел2_2.Области.П000070011005.Значение = П000070011005;
		мРаздел2_2.Области.П000070014005.Значение = П000070014005;
		мРаздел2_2.Области.П000070016005.Значение = П000070016005;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_4" Тогда	
		
		//Сбор данных
		
		П000080001006 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001006.Значение);
		П000080002006 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002006.Значение);
		П000080003006 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003006.Значение);
		П000080004006 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004006.Значение);
		П000080005006 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005006.Значение);
		П000080006006 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006006.Значение);
		
		П000080001007 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001007.Значение);
		П000080002007 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002007.Значение);
		П000080004007 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004007.Значение);
		П000080005007 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005007.Значение);
		П000080006007 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006007.Значение);
		
		П000080001008 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001008.Значение);
		П000080002008 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002008.Значение);
		П000080004008 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004008.Значение);
		П000080005008 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005008.Значение);
		П000080006008 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006008.Значение);
		
		П000080001009 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001009.Значение);
		П000080002009 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002009.Значение);
		П000080003009 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003009.Значение);
		П000080004009 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004009.Значение);
		П000080005009 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005009.Значение);
		П000080006009 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006009.Значение);
		
		П000080001010 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001010.Значение);
		П000080002010 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002010.Значение);
		П000080004010 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004010.Значение);
		П000080005010 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005010.Значение);
		П000080006010 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006010.Значение);
		
		П000080001011 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001011.Значение);
		П000080002011 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002011.Значение);
		П000080004011 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004011.Значение);
		П000080005011 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005011.Значение);
		П000080006011 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006011.Значение);
		
		П000080001012 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001012.Значение);
		П000080001013 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001013.Значение);
		П000080001014 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001014.Значение);
		
		П000080001015 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001015.Значение);
		П000080002015 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002015.Значение);
		П000080003015 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003015.Значение);
		П000080004015 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004015.Значение);
		П000080005015 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005015.Значение);
		П000080006015 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006015.Значение);
		
		П000080001016 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001016.Значение);
		П000080002016 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002016.Значение);
		П000080004016 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004016.Значение);
		П000080005016 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005016.Значение);
		П000080006016 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006016.Значение);
		
		П000080001017 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001017.Значение);
		П000080002017 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002017.Значение);
		П000080004017 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004017.Значение);
		П000080005017 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005017.Значение);
		П000080006017 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006017.Значение);
		
		П000080001018 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001018.Значение);
		П000080002018 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002018.Значение);
		П000080001019 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001019.Значение);
		П000080002019 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002019.Значение);
		П000080001020 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001020.Значение);
		П000080002020 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002020.Значение);
		
		//Расчеты
		
		//П000080003006 = П000080004006 + П000080005006;
		П000080003007 = П000080004007 + П000080005007;
		П000080003008 = П000080004008 + П000080005008;
		//П000080003009 = П000080004009 + П000080005009;
		П000080003010 = П000080004010 + П000080005010;
		П000080003011 = П000080004011 + П000080005011;
		П000080003015 = П000080004015 + П000080005015;
		П000080003016 = П000080004016 + П000080005016;
		П000080003017 = П000080004017 + П000080005017;
		
		П000080001003 = П000080001006 + П000080001009 + П000080001012 + П000080001015 + П000080001018;
		П000080002003 = П000080002006 + П000080002009 + П000080002015 + П000080002018;
		П000080003003 = П000080003006 + П000080003009 + П000080003015;
		П000080004003 = П000080004006 + П000080004009 + П000080004015;
		П000080005003 = П000080005006 + П000080005009 + П000080005015;
		П000080006003 = П000080006006 + П000080006009 + П000080006015;
		
		П000080001004 = П000080001007 + П000080001010 + П000080001013 + П000080001016 + П000080001019;
		П000080002004 = П000080002007 + П000080002010 + П000080002016 + П000080002019;
		П000080003004 = П000080003007 + П000080003010 + П000080003016;
		П000080004004 = П000080004007 + П000080004010 + П000080004016;
		П000080005004 = П000080005007 + П000080005010 + П000080005016;
		П000080006004 = П000080006007 + П000080006010 + П000080006016;
		
		П000080001005 = П000080001008 + П000080001011 + П000080001014 + П000080001017 + П000080001020;
		П000080002005 = П000080002008 + П000080002011 + П000080002017 + П000080002020;
		П000080003005 = П000080003008 + П000080003011 + П000080003017;
		П000080004005 = П000080004008 + П000080004011 + П000080004017;
		П000080005005 = П000080005008 + П000080005011 + П000080005017;
		П000080006005 = П000080006008 + П000080006011 + П000080006017;
		
		П000080007003 = П000080001003 + П000080002003 + П000080003003 + П000080006003;
		П000080007005 = П000080001005 + П000080002005 + П000080003005 + П000080006005;
		П000080007006 = П000080001006 + П000080002006 + П000080003006 + П000080006006;
		П000080007008 = П000080001008 + П000080002008 + П000080003008 + П000080006008;
		П000080007009 = П000080001009 + П000080002009 + П000080003009 + П000080006009;
		П000080007011 = П000080001011 + П000080002011 + П000080003011 + П000080006011;
		П000080007012 = П000080001012;
		П000080007014 = П000080001014;
		П000080007015 = П000080001015 + П000080002015 + П000080003015 + П000080006015;
		П000080007017 = П000080001017 + П000080002017 + П000080003017 + П000080006017;
		П000080007018 = П000080001018 + П000080002018;
		П000080007020 = П000080001020 + П000080002020;
		
		//Запишем, что посчитали
		
		мРаздел2_4.Области.П000080001003.Значение = П000080001003;
		мРаздел2_4.Области.П000080002003.Значение = П000080002003;
		мРаздел2_4.Области.П000080003003.Значение = П000080003003;
		мРаздел2_4.Области.П000080004003.Значение = П000080004003;
		мРаздел2_4.Области.П000080005003.Значение = П000080005003;
		мРаздел2_4.Области.П000080006003.Значение = П000080006003;
		
		мРаздел2_4.Области.П000080001004.Значение = П000080001004;
		мРаздел2_4.Области.П000080002004.Значение = П000080002004;
		мРаздел2_4.Области.П000080003004.Значение = П000080003004;
		мРаздел2_4.Области.П000080004004.Значение = П000080004004;
		мРаздел2_4.Области.П000080005004.Значение = П000080005004;
		мРаздел2_4.Области.П000080006004.Значение = П000080006004;
		
		мРаздел2_4.Области.П000080001005.Значение = П000080001005;
		мРаздел2_4.Области.П000080002005.Значение = П000080002005;
		мРаздел2_4.Области.П000080003005.Значение = П000080003005;
		мРаздел2_4.Области.П000080004005.Значение = П000080004005;
		мРаздел2_4.Области.П000080005005.Значение = П000080005005;
		мРаздел2_4.Области.П000080006005.Значение = П000080006005;
		
		//мРаздел2_4.Области.П000080003006.Значение = П000080003006;
		мРаздел2_4.Области.П000080003007.Значение = П000080003007;
		мРаздел2_4.Области.П000080003008.Значение = П000080003008;
		//мРаздел2_4.Области.П000080003009.Значение = П000080003009;
		мРаздел2_4.Области.П000080003010.Значение = П000080003010;
		мРаздел2_4.Области.П000080003011.Значение = П000080003011;
		//мРаздел2_4.Области.П000080003015.Значение = П000080003015;
		мРаздел2_4.Области.П000080003016.Значение = П000080003016;
		мРаздел2_4.Области.П000080003017.Значение = П000080003017;
		
		мРаздел2_4.Области.П000080007003.Значение = П000080007003;
		мРаздел2_4.Области.П000080007005.Значение = П000080007005;
		мРаздел2_4.Области.П000080007006.Значение = П000080007006;
		мРаздел2_4.Области.П000080007008.Значение = П000080007008;
		мРаздел2_4.Области.П000080007009.Значение = П000080007009;
		мРаздел2_4.Области.П000080007011.Значение = П000080007011;
		мРаздел2_4.Области.П000080007012.Значение = П000080007012;
		мРаздел2_4.Области.П000080007014.Значение = П000080007014;
		мРаздел2_4.Области.П000080007015.Значение = П000080007015;
		мРаздел2_4.Области.П000080007017.Значение = П000080007017;
		мРаздел2_4.Области.П000080007018.Значение = П000080007018;
		мРаздел2_4.Области.П000080007020.Значение = П000080007020;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3_1" Тогда	
		
		// РАЗДЕЛ III
		
		//Сбор данных
		
		П000090001007 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000090001007.Значение);
		П000090001008 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000090001008.Значение);
		П000090001010 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000090001010.Значение);
		П000100001003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100001003.Значение);
		П000100003003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100003003.Значение);
		П000100004003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100004003.Значение);
		П000100005003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100005003.Значение);
		П000100006003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100006003.Значение);
		П000100009003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100009003.Значение);
		П000100012003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100012003.Значение);
		П000100002001 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100002001.Значение);
		П000100002101 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100002101.Значение);
		П000100002201 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100002201.Значение);
		П000100002301 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100002301.Значение);
		П000100010001 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100010001.Значение);
		П000100010101 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100010101.Значение);
		П000100010201 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100010201.Значение);
		П000100010301 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100010301.Значение);
		П000100011001 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100011001.Значение);
		П000100011101 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100011101.Значение);
		П000100011201 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100011201.Значение);
		П000100011301 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100011301.Значение);
		
		//Расчеты
		
		П000090001011 = П000090001007 * (1 - П000090001008 / 100 + П000090001010 / 100);
		П000100002003 = П000100002001 + П000100002101 + П000100002201 + П000100002301;
		П000100010003 = П000100010001 + П000100010101 + П000100010201 + П000100010301;
		П000100011003 = П000100011001 + П000100011101 + П000100011201 + П000100011301;
		
		П000100007003 = П000100001003 + П000100002003 + П000100003003
					  + П000100004003 + П000100005003 + П000100006003;
					  
		П000100013003 = П000100009003 + П000100010003 + П000100011003 + П000100012003;
		П000100008003 = ?(П000100013003 > П000100007003, П000100013003 - П000100007003, 0);
		П000100014003 = ?(П000100007003 > П000100013003, П000100007003 - П000100013003, 0);
		
		//Запишем, что посчитали
		
		мРаздел3_1.Области.П000090001011.Значение = П000090001011;
		мРаздел3_1.Области.П000100002003.Значение = П000100002003;
		мРаздел3_1.Области.П000100007003.Значение = П000100007003;
		мРаздел3_1.Области.П000100008003.Значение = П000100008003;
		мРаздел3_1.Области.П000100010003.Значение = П000100010003;
		мРаздел3_1.Области.П000100011003.Значение = П000100011003;
		мРаздел3_1.Области.П000100013003.Значение = П000100013003;
		мРаздел3_1.Области.П000100014003.Значение = П000100014003;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3_2" Тогда	
		
		//Сбор данных
		
		П000110001004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110001004.Значение);
		П000110004004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110004004.Значение);
		П000110007004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110007004.Значение);
		П000110009004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110009004.Значение);
		П000120001003 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000120001003.Значение);
		П000120002003 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000120002003.Значение);
		П000120004003 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000120004003.Значение);
		П000120005003 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000120005003.Значение);
		П000120001004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000120001004.Значение);
		П000120002004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000120002004.Значение);
		П000120004004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000120004004.Значение);
		П000120005004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000120005004.Значение);
		П000130001003 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000130001003.Значение);
		П000130003003 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000130003003.Значение);
		
		//Расчеты
		
		П000110010004 = П000110001004 + П000110004004 + П000110007004 + П000110009004;
		П000120003003 = П000120001003 + П000120002003;
		П000120006003 = П000120003003 - П000120004003 + П000120005003;
		П000120003004 = П000120001004 + П000120002004;
		П000120006004 = П000120003004 - П000120004004 + П000120005004;
		П000130004003 = П000130001003 + П000130003003;
		
		//Запишем, что посчитали
		
		мРаздел3_2.Области.П000110010004.Значение = П000110010004;
		мРаздел3_2.Области.П000120003003.Значение = П000120003003;
		мРаздел3_2.Области.П000120006003.Значение = П000120006003;
		мРаздел3_2.Области.П000120003004.Значение = П000120003004;
		мРаздел3_2.Области.П000120006004.Значение = П000120006004;
		мРаздел3_2.Области.П000130004003.Значение = П000130004003;

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		// ОБЩИЙ РАСЧЕТ ПОКАЗАТЕЛЕЙ ВСЕХ РАЗДЕЛОВ ДЕКЛАРАЦИИ

		// Используется, например, в случае изменения точности или единицы измерения
		// (так как разделы взаимосвязаны, порядок пересчета не важен).
		Расчет("Раздел1_1");
		Расчет("Раздел1_2");
		Расчет("Раздел1_3");
		Расчет("Раздел2_1");
		Расчет("Раздел2_2");
		Расчет("Раздел2_4");
		Расчет("Раздел3_1");
		Расчет("Раздел3_2");
		
	КонецЕсли;

КонецПроцедуры // Расчет()

//  Делает недоступной кнопку "Очистить все разделы"
Процедура СделатьНедоступнойКнопку(ИмяКопки)
	
  // Запретим индивидуальную очистку всего раздел2_2 
	ПодменюОчистить = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюОчистить;
    КнопкаУдалить = ПодменюОчистить.Кнопки.Найти(ИмяКопки);		
	Если КнопкаУдалить <> Неопределено Тогда
		КнопкаУдалить.Доступность = Ложь;  
	КонецЕсли;
    
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

// Выполняет вывод полей запроса в табличный документ
// ЗавершитьИмпортXMLфайлаВОтчет
//
Процедура ЗавершитьИмпортXMLфайлаВОтчет(СтруктураДанныхОтчетаXMLКонтейнер)
	Если СтруктураДанныхОтчетаXMLКонтейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Перебор по страницам.
	Инд = 0;
	Для каждого Экз Из СтруктураДанныхОтчетаXMLКонтейнер.ДанныеРазделовОтчета Цикл
	
		ИмяРаздела = ОпределитьИмяРазделаПриИмпорте(Экз.Данные[0].СтруктураДанных);
		Если ИмяРаздела = Неопределено Тогда
			// Не удалось по показателю определить имя раздела декларации.
			Продолжить;
		КонецЕсли;
		
		МногостраничностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяРаздела, "МногостраничностьВРазделе", Ложь);
		
		Если МногостраничностьВРазделе Тогда
			Если мСтруктураМногостраничныхРазделов[ИмяРаздела].Количество() <> Экз.Данные.Количество() Тогда
				// Вставим нужные экземпляры.
				Для Инд1 = 1 По Экз.Данные.Количество() - 1 Цикл
					ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяРаздела);
					РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяРаздела);
					Если ИмяРаздела = "Раздел2_1" Тогда
						ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2_2");
						РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2_2");
						Расчет("Раздел2_2");
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Для каждого Экз2 Из Экз.Данные Цикл
			Если МногостраничностьВРазделе Тогда
				ПоказатьСтраницуМногостраничногоРаздела(Инд, ИмяРаздела, Истина);
				Если ИмяРаздела = "Раздел2_1" Тогда
					ПоказатьСтраницуМногостраничногоРаздела(Инд, "Раздел2_2", Истина);
				КонецЕсли;
				Инд = Инд + 1;
			КонецЕсли;
			
			Для каждого Экз3 Из Экз2.СтруктураДанных Цикл
				Показатель = Экз3.Ключ;
				Значение = СокрЛП(Экз3.Значение);
				
				НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(Показатель, "КодПоказателяПоСоставу");
				
				Если НайденнаяСтрока = Неопределено Тогда
					// Либо показателя нет, или он в квадратах
					Если (Показатель = "Шифр1" Или Показатель = "Шифр2" Или Показатель = "Шифр3")
					  И (ИмяРаздела = "Раздел2_1") Тогда
						мРаздел2_1.Области[Показатель].Значение = Значение;
						Продолжить;
					Иначе
						Продолжить;
					КонецЕсли;
				
				Иначе
					ТипДанных = НайденнаяСтрока.ТипДанныхПоказателя;
				КонецЕсли;
				
				Если ТипДанных = "Е" Или ТипДанных = "E" Или ТипДанных = "Ч" Тогда
					Значение = ?(РегламентированнаяОтчетность.роЯвляетсяЧислом(Значение), Число(Значение), 0);
				ИначеЕсли ТипДанных = "Д" Тогда
					Если РегламентированнаяОтчетность.ПустоеЗначение(Значение) Тогда
						Значение = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
					Иначе
						Год = Прав(Значение, 4);
						Мес = Сред(Значение, 4, 2);
						День = Лев(Значение, 2);
						Значение = Год + Мес + День;
						Значение = ?(РегламентированнаяОтчетность.роЯвляетсяДатой(Значение), Дата(Значение), ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")));
					КонецЕсли;
				КонецЕсли;
				РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, Показатель, Значение);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // ЗавершитьИмпортXMLфайлаВОтчет

// ОпределитьИмяРазделаПриИмпорте
//
Функция ОпределитьИмяРазделаПриИмпорте(СтруктураДанных)
	Перем Результат;

	Для каждого Зап Из СтруктураДанных Цикл
		ИмяСтраницы = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, Зап.Ключ);
		Если ИмяСтраницы <> Неопределено Тогда
			Результат = ИмяСтраницы;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ОпределитьИмяРазделаПриИмпорте

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто(ВсеДанные = Истина) Экспорт 
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ФлажокВнешДанные И НЕ ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		Предупреждение("Заполнение по данным информационной базы не предусмотрено!");
		Возврат;
	КонецЕсли;
	
	// запрашиваем подтверждение у пользователя и очищаем отчет
	ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма, "Раздел2_1, Раздел2_2");
	Если ПрерватьАвтоЗаполнение Тогда
		Возврат;
	КонецЕсли;

	// формируем структуру с данными из внешнего файла, если установлен признак заполнения по внешним данным
	мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено;
	Если ФлажокВнешДанные Тогда
		мСтруктураДанныхОтчетаXMLКонтейнер = РегламентированнаяОтчетность.ИмпортироватьДанныеКонтейнераXML(ЭтаФорма);
		Если мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено Тогда
			Сообщить("Данные из XML файла не подходят для текущего отчета.", СтатусСообщения.Важное);
			Сообщить("Необходимо проверить период отчета и организацию (ИНН/КПП).", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	
	// если авторасчет не отключен, то заполним размер страхового тарифа
	Если Не ФлажокОтклАвтоРасчет Тогда
		мРаздел3_1.Области.П000090001007.Значение = ПолучитьРазмерСтраховогоТарифа();
	КонецЕсли;
	
	// заполняем содержательную часть
	СчетчикиЛистовМногостраничныхРазделов = Новый Соответствие;
	Для Каждого Стр Из мСтруктураМногостраничныхРазделов Цикл
		СчетчикиЛистовМногостраничныхРазделов.Вставить(Стр.Ключ, 0);
	КонецЦикла;
	
	ЕстьДанныеДляЗаполненияПоказателей = ложь;
	
	Если ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		ПараметрыОтчета = РегламентированнаяОтчетность.СформироватьСтруктуруПараметровОтчетаДляЗаполнения(ЭтаФорма);
		ПараметрыОтчета.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		ПараметрыОтчета.Вставить("ТочностьЕдиницыИзмерения", ТочностьЕдиницыИзмерения);
		ДанныеЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьДанныеЗаполненияОтчета(ЭтаФорма, , мВыбраннаяФорма, , ПараметрыОтчета);
		Если ТипЗнч(ДанныеЗаполненияОтчета) = Тип("ДеревоЗначений") Тогда
			ЕстьДанныеДляЗаполненияПоказателей = истина;
			Для Каждого СтрУровня1 Из ДанныеЗаполненияОтчета.Строки Цикл
				СчетчикЛистовРаздела = СчетчикиЛистовМногостраничныхРазделов[СтрУровня1.Имя];
				Если СчетчикЛистовРаздела = Неопределено Тогда // раздел не многостраничный
					Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
						УстановитьЗначениеПоказателя(СтрУровня2.Имя, СтрУровня2.Значение);
					КонецЦикла;
				Иначе // раздел многостраничный
					СчетчикиЛистовМногостраничныхРазделов.Вставить(СтрУровня1.Имя, СчетчикЛистовРаздела + 1);
					Если СчетчикЛистовРаздела > 0 Тогда // если это не первый лист раздела, то добавим еще один
						Расчет(СтрУровня1.Имя);
						ИзменитьТаблицуПараметровАвтозаполнения(1, СтрУровня1.Имя);
						РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, СтрУровня1.Имя);
						РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, СтрУровня1.Имя, Истина);
						РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);
						УстановитьЦветФонаЯчейки(,,СтрУровня1.Имя);
					КонецЕсли;
					Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
						УстановитьЗначениеПоказателя(СтрУровня2.Имя, СтрУровня2.Значение);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// добавляем показатели в внешнего файла
	ЗавершитьИмпортXMLФайлаВОтчет(мСтруктураДанныхОтчетаXMLКонтейнер);

	Расчет();
	
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто()

// УстановитьЗначениеПоказателя
// Процедура "прослойка". Она обрабатывает показатель с учетом источника данных ИБ и XML контейнера.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя)
	// Вызываем процедуру, которая обработает показатель на предмет присутствия в XML контейнере.
	// Если в xml нет такого показателя, то установится из ИБ. Если есть, то из XML.
	РегламентированнаяОтчетность.УстановитьПоказательСУчетомXML(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
КонецПроцедуры // УстановитьЗначениеПоказателя

Процедура НачальнаяПодготовкаФормы() Экспорт 

	Перем ИсходноеКоличествоСтрокГруппы;

	мВПрограммеИзмененаОрганизация = Ложь;

	мВПрограммеИзмененаОрганизация = Ложь;

	мДокументВосстановлен = Ложь;

	мАдресвФорматеДляВыгрузки = "";

	мАвтоВыборКодов = Ложь;
	
	СвойстваЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьСвойстваЗаполненияОтчета(ЭтотОбъект, мВыбраннаяФорма);
	Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ") Тогда
		//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
		ИзМакета = Истина;		
	КонецЕсли;


	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);
	мТитульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_1;
	мРаздел1_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_2;
	мРаздел1_3 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_3;
	мРаздел2_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_1;
	мРаздел2_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_2;
	мРаздел2_4 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_4;
	мРаздел3_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел3_1;
	мРаздел3_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел3_2;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;

					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 2;

			РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	// ИНИЦИАЛИЗАЦИЯ ЗАПОЛНЕНИЯ СОДЕРЖАТЕЛЬНОЙ ЧАСТИ ПО УЧЕТНЫМ ДАННЫМ
	
	СвойстваЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьСвойстваЗаполненияОтчета(ЭтотОбъект, мВыбраннаяФорма);
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета);
	КонецЕсли;
	Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ") Тогда
		//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
		ИзМакета = Истина;
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);		
	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	
	ПоказатьПериод();

	// В случае, если по F9 поменяли организацию при копировании, тогда в переменную
	// мВПрограммеИзмененаОрганизация будет записано значение Истина;
	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда

		ЗаполнитьДатуВЯчейках();
		ЗаполнитьСведенияОбОрганизации();

	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НастройкиОбменаФСС.ИспользоватьОбмен КАК ИспользоватьОбмен
	|ИЗ
	|	РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
	|ГДЕ
	|	НастройкиОбменаФСС.Организация = &ОрганизацияСсылка";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОрганизацияСсылка", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() ИЛИ НЕ Выборка.ИспользоватьОбмен Тогда
		//сворачиваем панель отправки
		ПанельОтправки = ЭлементыФормы.Найти("ПанельОтправкиФСС");
		ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Верх;
		
		//удаляем меню Отправка
		КнопкиПанели = ЭлементыФормы.КоманднаяПанельФормы.Кнопки;
		ИндексКнопки = КнопкиПанели.Индекс(КнопкиПанели.ОтправкаФСС);
		КнопкиПанели.Удалить(ИндексКнопки);
	КонецЕсли;
	
	ОбновитьСогласноТекущейОтправки();
	
КонецПроцедуры

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();

	ФормироватьСтруктуруСвойствСтраниц();

	Если НЕ БезОткрытияФормы Тогда
		Если ИДКонфигурации = "ЗУП" ИЛИ ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" ИЛИ ИДКонфигурации = "ЗБУ" Тогда
			ЭлементыФормы.ФлажокВнешДанные.Видимость = Ложь;
			ФлажокВнешДанные = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	КонецЕсли;

	НачальнаяПодготовкаФормы();
	
	РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма);

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура КнопкаПерейтиНаСтраницуРаздел2_1Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел2_1");
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел2_1Нажатие(Элемент)
	Перем ТаблицаСтраницРаздела;
	// проверяем с какой лист сейчас удаляется
	Если мСтруктураМногостраничныхРазделов.Свойство("Раздел2_1", ТаблицаСтраницРаздела) Тогда
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		НомУдалСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		УстановитьАктивнуюСтраницу("Раздел2_2",НомУдалСтраницы);
	КонецЕсли;	
	
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел2_1");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2_1");
	
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел2_2");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2_2");
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел2_1Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2_1");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2_1");
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел2_1", Истина);
	РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);
	УстановитьЦветФонаЯчейки(,,"Раздел2_1");
	
	ДополнительныйКод = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ДополнительныйКод_"));
		
		Для Сч = СтрДлина(ДополнительныйКод) По 9 Цикл
			ДополнительныйКод = ДополнительныйКод + " ";		
		КонецЦикла;
		
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2_1", "ДополнительныйКод_", 10, ДополнительныйКод);
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2_2");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2_2");
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел2_2", Истина);
	РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);
	УстановитьЦветФонаЯчейки(,,"Раздел2_2");
	ДополнительныйКод = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ДополнительныйКод_"));
		
		Для Сч = СтрДлина(ДополнительныйКод) По 9 Цикл
			ДополнительныйКод = ДополнительныйКод + " ";		
		КонецЦикла;
		
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Раздел2_2", "ДополнительныйКод_", 10, ДополнительныйКод);

КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел2_1Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел2_1");
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел2_1Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел2_1");
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел2_2Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел2_2");
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел2_2Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел2_2");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2_2");
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел2_2Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2_2");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2_2");
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел2_2Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел2_2");
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел2_2Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел2_2");
КонецПроцедуры

Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;
	
	Если Найти(ОбластьИмя, "НомСтр") > 0 Тогда
		ИмяРаздела = Сред(Элемент.Имя, 24);
		НомерСтраницы = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, ИмяРаздела, "НомСтр"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , ИмяРаздела                   // Название раздела.
										   , "НомСтр"                 // Имя ячейки для записи.
										   , НомерСтраницы // Первоначальное значение.
										   , 2              // РазмерностьЦ.
										   , 0                          // РазмерностьД.
										   , Ложь                       // Это сумма?
										   , "Введите номер страницы"                 // Текст ввода.
										   ,                          // Текст выбора из таблицы значений.
										   , // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   , 2    // Кол-во квадратиков, если в квадратах
										   );		
		
	ИначеЕсли Найти(ОбластьИмя, "ДополнительныйКод") > 0 Тогда
		
		ДополнительныйКод = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ДополнительныйКод_"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Титульный"                   // Название раздела.
										   , "ДополнительныйКод_"                 // Имя ячейки для записи.
										   , ДополнительныйКод // Первоначальное значение.
										   , 10              // РазмерностьЦ.
										   , 0                          // РазмерностьД.
										   , Ложь                       // Это сумма?
										   , "Введите код"                 // Текст ввода.
										   ,                          // Текст выбора из таблицы значений.
										   , // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   , 10    // Кол-во квадратиков, если в квадратах
										   );
		ДополнительныйКод = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ДополнительныйКод_"));
		
		Для Сч = СтрДлина(ДополнительныйКод) По 9 Цикл
			ДополнительныйКод = ДополнительныйКод + " ";		
		КонецЦикла;
		
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДополнительныйКод, "ДополнительныйКод_", , , , Ложь);
	
	ИначеЕсли Найти(ОбластьИмя, "ОргКодОКАТО") > 0 Тогда
		
		ОКАТО = мТитульный.Области.ОргКодОКАТО.Значение;
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Титульный"                   // Название раздела.
										   , "ОргКодОКАТО"                 // Имя ячейки для записи.
										   , ОКАТО // Первоначальное значение.
										   , 11              // РазмерностьЦ.
										   , 0                          // РазмерностьД.
										   , Ложь                       // Это сумма?
										   , "ОКАТО"                 // Текст ввода.
										   ,                          // Текст выбора из таблицы значений.
										   , // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   ,     // Кол-во квадратиков, если в квадратах
										   );
	
		
	ИначеЕсли Найти(ОбластьИмя, "КодПодчиненности") > 0 Тогда
		
		ДополнительныйКод = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодПодчиненности_"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Титульный"                   // Название раздела.
										   , "КодПодчиненности_"                 // Имя ячейки для записи.
										   , ДополнительныйКод // Первоначальное значение.
										   , 5              // РазмерностьЦ.
										   , 0                          // РазмерностьД.
										   , Ложь                       // Это сумма?
										   , "Введите код"                 // Текст ввода.
										   ,                          // Текст выбора из таблицы значений.
										   , // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   , 5    // Кол-во квадратиков, если в квадратах
										   );
										   
		ИначеЕсли (Найти(ОбластьИмя, "D29") > 0) ИЛИ (Найти(ОбластьИмя, "D30") > 0) 
			  ИЛИ (Найти(ОбластьИмя, "D31") > 0) ИЛИ (Найти(ОбластьИмя, "D32") > 0) Тогда
		мКодОрганаФСС = СокрЛП(мТитульный.Рисунки.D29.Значение
	                 + мТитульный.Рисунки.D30.Значение
	                 + мТитульный.Рисунки.D31.Значение
	                 + мТитульный.Рисунки.D32.Значение);    
		// спец функция из-за особенности ввода/вывода кода ФСС			 
		ВвестиЗначениеПоказателя(мКодОрганаФСС, 4 , "Введите код", СтандартнаяОбработка, 4); 								   									  											   
										   
	ИначеЕсли Найти(ОбластьИмя, "ШифрРаздел1") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		Табл = Новый ТаблицаЗначений;
		Табл.Колонки.Добавить("Код",,,4);
		Табл.Колонки.Добавить("Название");

		НовСтр = Табл.Добавить();
		НовСтр.Код = "";
		НовСтр.Название = "Пустое значение";

		НовСтр = Табл.Добавить();
		НовСтр.Код = "041";
		НовСтр.Название = "Плательщики страховых взносов, указанные в п. 1 ч.2 ст. 57 Федерального закона от 24.07.2009 № 212-ФЗ";

		НовСтр = Табл.Добавить();
		НовСтр.Код = "051";
		НовСтр.Название = "Плательщики страховых взносов, указанные в п. 2 ч.2 ст. 57 Федерального закона от 24.07.2009 № 212-ФЗ (за исключением организаций и индивидуальных предпринимателей, применяющих упрощенную систему налогообложения, уплачивающих единый налог на вмененный доход для отдельных видов деятельности, плательщиков страховых взносов, производящих выплаты и иные вознаграждения физическим лицам, являющимся инвалидами I, II, III группы";

		НовСтр = Табл.Добавить();
		НовСтр.Код = "061";
		НовСтр.Название = "Плательщики страховых взносов, производящие выплаты и иные вознаграждения физическим лицам, являющимся инвалидами I, II, III группы";
						  
		НовСтр = Табл.Добавить();
		НовСтр.Код = "071";
		НовСтр.Название = "Остальные плательщики страховых взносов";
						  
		Шифр = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел1_1", "ШифрРаздел1_"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Раздел1_1"                   // Название раздела.
										   , "ШифрРаздел1_"                 // Имя ячейки для записи.
										   , Шифр // Первоначальное значение.
										   , 3              // РазмерностьЦ.
										   , 0                          // РазмерностьД.
										   , Ложь                       // Это сумма?
										   , "Введите шифр"                 // Текст ввода.
										   , "Выбор шифра"                         // Текст выбора из таблицы значений.
										   , Табл               // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   , 3    // Кол-во квадратиков, если в квадратах
										   );
	ИначеЕсли Найти(ОбластьИмя, "ШифрРаздел2") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		Табл = Новый ТаблицаЗначений;
		Табл.Колонки.Добавить("Код",,,4);
		Табл.Колонки.Добавить("Название");

		НовСтр = Табл.Добавить();
		НовСтр.Код = "";
		НовСтр.Название = "Пустое значение";

		НовСтр = Табл.Добавить();
		НовСтр.Код = "011";
		НовСтр.Название = "Единый налог, взимаемый в связи с применением упрощенной системы налогообложения";

		НовСтр = Табл.Добавить();
		НовСтр.Код = "021";
		НовСтр.Название = "Единый налог на вмененный доход для отдельных видов деятельности";

		НовСтр = Табл.Добавить();
		НовСтр.Код = "032";
		НовСтр.Название = "Единый сельскохозяйственный налог";
		Шифр = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел2_1", "ШифрРаздел2_"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Раздел2_1"                   // Название раздела.
										   , "ШифрРаздел2_"                 // Имя ячейки для записи.
										   , Шифр // Первоначальное значение.
										   , 3              // РазмерностьЦ.
										   , 0                          // РазмерностьД.
										   , Ложь                       // Это сумма?
										   , "Введите шифр"                 // Текст ввода.
										   , "Выбор шифра"                         // Текст выбора из таблицы значений.
										   , Табл               // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   , 3    // Кол-во квадратиков, если в квадратах
										   );

	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

// Функция предназначена для ввода кода ФСС
Функция ВвестиЗначениеПоказателя(Знач ПервоначальноеЗначение, Знач РазмерностьЦ, Знач ТекстВвода, СтандартнаяОбработка, Знач КолвоКвадратиков) 

	Перем НачальноеЗнач;
	СтандартнаяОбработка = Ложь;
	Результат = Новый Структура();
	Результат.Вставить("ЗначениеВведено", Ложь);
	Результат.Вставить("Значение", Неопределено);
	НачальноеЗнач = ПервоначальноеЗначение;

	Значение = Неопределено; // Вводимое значение.
	РучнойВвод = Истина;
	
	
	Если НЕ ВвестиСтроку(ПервоначальноеЗначение, ТекстВвода, РазмерностьЦ) Тогда
		Возврат Результат;
	КонецЕсли;
		
	Значение = ПервоначальноеЗначение;
	Результат.Вставить("ЗначениеВведено", Истина);

	Если НачальноеЗнач <> Значение Тогда
		Модифицированность = Истина;
	КонецЕсли;

	// Запись на лист.
	Результат.Значение = Значение;   
	мТитульный.Рисунки.D29.Значение = Сред(Значение, 1, 1);
	мТитульный.Рисунки.D30.Значение = Сред(Значение, 2, 1);
	мТитульный.Рисунки.D31.Значение = Сред(Значение, 3, 1);
	мТитульный.Рисунки.D32.Значение = Сред(Значение, 4, 1);
	
	Возврат Результат;

КонецФункции // ВвестиЗначениеПоказателя



// ПолеТабличногоДокументаРаздел1_1Выбор
//
Процедура ПолеТабличногоДокументаРаздел1_1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел1_1Выбор

// ПолеТабличногоДокументаРаздел1_2Выбор
//
Процедура ПолеТабличногоДокументаРаздел1_2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2Выбор

// ПолеТабличногоДокументаРаздел1_3Выбор
//
Процедура ПолеТабличногоДокументаРаздел1_3Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2Выбор

// ПолеТабличногоДокументаРаздел2_1Выбор
//
Процедура ПолеТабличногоДокументаРаздел2_1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1Выбор

// ПолеТабличногоДокументаРаздел2_2Выбор
//
Процедура ПолеТабличногоДокументаРаздел2_2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел2_2Выбор

// ПолеТабличногоДокументаРаздел2_4Выбор
//
Процедура ПолеТабличногоДокументаРаздел2_4Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел2_4Выбор

// ПолеТабличногоДокументаРаздел3_1Выбор
//
Процедура ПолеТабличногоДокументаРаздел3_1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел3_1Выбор

// ПолеТабличногоДокументаРаздел3_2Выбор
//
Процедура ПолеТабличногоДокументаРаздел3_2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел3_2Выбор

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

Процедура СохранитьДеревоНастройкиСтраниц()
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если НЕ мСохраненныйДок.ЭтоНовый() Тогда
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоНастройкиСтраниц();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
	
	//Синхронно очистим листы раздела2_2
	Если Кнопка.Имя = "ОчиститьТекущийРазделРаздел2_1" Тогда  		
	РегламентированнаяОтчетность.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, "Раздел2_2");
	РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);
	УстановитьЦветФонаЯчейки(,,"Раздел2_2");
	КонецЕсли	
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

// Процедура расшифровки отчета показателей отчета 
Процедура КоманднаяПанельФормыРасшифровать(Кнопка)
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда
		СвойстваЗаполненияОтчета.ИсточникЗаполнения.ВывестиОтчетРасшифровку("РегламентированныйОтчет4ФСС_2010", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;
	
    ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИдГруппы <> Неопределено Тогда
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
		ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	КонецЕсли;

	
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	// Запретим индивидуальную очистку всего раздел2_2 
	СделатьНедоступнойКнопку("ОчиститьТекущийРазделРаздел2_2");
	
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ВыполнитьИзменениеТочностиПоказателей(ЭтаФорма, "Для получения точных значений показателей, рассчитываемых нарастающим итогом за отчетный период, рекомендуется перезаполнить эти показатели по данным информационной базы.");
	
КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	РегламентированнаяОтчетность.ВыполнитьИзменениеТочностиПоказателей(ЭтаФорма, "Для получения точных значений показателей, рассчитываемых нарастающим итогом за отчетный период, рекомендуется перезаполнить эти показатели по данным информационной базы.");

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Переформируем листы ФЛ
	//ЗаполнитьСведенияОбФЛ(Истина);

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Истина;

	// Заполним дату на листах
	ЗаполнитьДатуВЯчейках();

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Ложь;

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел I (табл. 1, 2)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел I (табл. 3)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел1_2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел I (табл. 3)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел1_3ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел II (табл. 4, 5)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел2_1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел II (табл. 6)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел2_2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел II (табл. 6)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел2_4ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел III (таблицы 9, 10)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел3_1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел3_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел III (таблицы 11, 12)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел3_2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел3_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел I (табл. 1, 2)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел I (табл. 3)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел1_2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел I (табл. 3)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел1_3ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел II (табл. 4, 5)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2_1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел II (табл. 6)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2_2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()
 
// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел II (табл. 6)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2_4ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел 2.1" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел3_1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел3_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел III (таблицы 11, 12)"
// панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел3_2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел3_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел I (табл. 1, 2)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел1_1ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментария на странице "Раздел I (табл.3)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел1_2ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментария на странице "Раздел I (табл.3)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел1_3ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел II (табл. 4, 5)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2_1ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел II (табл. 6)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2_2ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел II (табл. 6)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2_4ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел III (таблицы 9, 10)" по ячейке, 
// для которой установлен/ алгоритм автозаполнения [автоматически 
// с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел3_1ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел3_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел III (таблицы 11, 12)" по ячейке, 
// для которой установлен/ алгоритм автозаполнения [автоматически 
// с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел3_2ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел3_2ПриИзменении()

// Процедура вызывается при активизации поля табличного документа на странице 
// "Раздел I (табл. 1, 2)" основной панели формы. Определяет текущую область 
// табличного документа и вызывает процедуру управления доступностью 
// полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел1_1ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_1ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел1_2ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел1_3ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел2_2ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_2ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел2_4ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_2ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице 
// "Раздел III (табл. 9, 10)" основной панели формы. Определяет текущую область 
// табличного документа и вызывает процедуру управления доступностью 
// полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел3_1ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел3_1ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел3_2ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел3_2ПриАктивизацииОбласти()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	//мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_1";
	СтрокаУровня1.Представление            = "Раздел I (таблица 1)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_2";
	СтрокаУровня1.Представление            = "Раздел I (таблица 2)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_3";
	СтрокаУровня1.Представление            = "Раздел I (таблицы 3, 4)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_1";
	СтрокаУровня1.Представление            = "Раздел II (таблицы 5, 6)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_2";
	СтрокаУровня1.Представление            = "Раздел II (таблица 7)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_4";
	СтрокаУровня1.Представление            = "Раздел II (таблица 8)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_1";
	СтрокаУровня1.Представление            = "Раздел III (таблицы 9, 10)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_2";
	СтрокаУровня1.Представление            = "Раздел III (таблицы 11, 12, 13)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;

	Расчет(ИмяТекущейСтраницыПанели);
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ОбновитьПараметрыАвтозаполненияЯчейки();
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

//Процедура ПолеТабличногоДокументаТитульныйАдресПриИзменении(Элемент)

//	Модифицированность = Истина;
//	мАдресвФорматеДляВыгрузки = Элемент.Значение;

//КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры
// 
Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
	Если Имясобытия = "Изменение статуса отправки регламентированного отчета" И ЗначениеЗаполнено(Параметр) И мСохраненныйДок <> Неопределено И Источник = мСохраненныйДок.Ссылка Тогда
		
		ОбновитьСогласноТекущейОтправки();
		
		Если ТекущаяОтправка <> Неопределено Тогда
			Если ТекущаяОтправка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
				РегламентированнаяОтчетность.ЗаписатьСтатусОтчета(Источник, Перечисления.СтатусыРегламентированныхОтчетов.Сдан);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
//

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, КаталогВыгрузки = Неопределено) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в рублях"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если ТочностьЕдиницыИзмерения <> 2 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""2"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры, КаталогВыгрузки);
	Иначе
		// Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры, КаталогВыгрузки = Неопределено)
	
	Если КаталогВыгрузки = Неопределено Тогда
		ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
		Если ПутьДляВыгрузки = Ложь Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ПутьДляВыгрузки = КаталогВыгрузки;
	КонецЕсли;
	
	ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИмяФайла;
	ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки, ЗначениеЗаполнено(КаталогВыгрузки)); // записываем XML в файл на диск
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СхемаВыгрузкиXML");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для НомерСтроки = 2 По ВысотаТаблицы Цикл
		НомСтр = ВысотаТаблицы - НомерСтроки + 2;
		Если Макет.Область(НомерСтроки, 0, НомерСтроки, 0).Видимость = Неопределено Тогда
			Сообщить(НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
		
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИмяФайла(Параметры)
	
	КодСтрахователя = ?(ЗначениеЗаполнено(Параметры.ДополнительныйКод), Параметры.ДополнительныйКод, Параметры.НомерСтрахователя);
	РасчетныйГод = Параметры.РасчПериод;
	ОтчетныйКвартал = Параметры.ОтчПериод;
	Возврат КодСтрахователя + "_" + РасчетныйГод + "_" + ОтчетныйКвартал + ".xml";
	
КонецФункции

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
	// !!! дописываем код органа ФСС в структуру с данными с титульного листа
	КодОрганаФСС = "";
	СохрСтруктура.Свойство("КодОрганаФСС", КодОрганаФСС);
	мДанныеОтчета.ПолеТабличногоДокументаТитульный.Вставить("КодОрганаФСС", КодОрганаФСС);
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	ПоследнийЛист = мДанныеОтчета.ПолеТабличногоДокументаРаздел3_2;
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("НомерСтрахователя", СокрЛП(Титульный.ОргФССКод));
	Параметры.Вставить("КодПодчиненности", СокрЛП(Титульный.КодПодчиненности));
	Параметры.Вставить("ДополнительныйКод", СокрЛП(Титульный.ДополнительныйКод));
	Параметры.Вставить("ИНН", СокрЛП(Титульный.ИНН));
	Параметры.Вставить("КПП", ?(ПустаяСтрока(Титульный.КПП), "0", СокрЛП(Титульный.КПП)));
	Параметры.Вставить("ОГРН", СокрЛП(Титульный.ОргКодОГРН));
	Параметры.Вставить("КОПФ", СокрЛП(Титульный.ОргКодКОПФ));
	Параметры.Вставить("ОКАТО", СокрЛП(Титульный.ОргКодОКАТО));
	Параметры.Вставить("ОКПО", СокрЛП(Титульный.ОргКодОКПО));
	Параметры.Вставить("КФС", СокрЛП(Титульный.ОргКодКФС));
	Параметры.Вставить("ОКВЭД", СокрЛП(Титульный.ОргКодОКВЭД));
	Параметры.Вставить("ОтчПериод", СокрЛП(Титульный.ОтчПериод));
	Параметры.Вставить("РасчПериод", СокрЛП(Титульный.РасчПериод));
	Параметры.Вставить("ОргНазв", СокрЛП(Титульный.ОргНазв));
	Параметры.Вставить("ДатаПредставления", ТекущаяДата()); //!!!
	Параметры.Вставить("КодФонда", Титульный.КодОрганаФСС); //!!!
	Параметры.Вставить("ОргДиректор", СокрЛП(ПоследнийЛист.ОргДиректор));
	Параметры.Вставить("ОргБухгалтер", СокрЛП(ПоследнийЛист.ОргБухгалтер));
	
	СведенияОбИсполнителе = РазобратьСтрокуСведенийОбИсполнителе(ПоследнийЛист.ОргИсполнитель);
	Параметры.Вставить("Исполнитель", СведенияОбИсполнителе.ФИО);
	Параметры.Вставить("ТелефонИсполнителя", СведенияОбИсполнителе.Телефон);
	
	Параметры.Вставить("ИмяФайла", СформироватьИмяФайла(Параметры));
	
	Возврат Параметры;
	
КонецФункции

Функция РазобратьСтрокуСведенийОбИсполнителе(СтрИсполнитель)
	
	Результат = Новый Структура("ФИО, Телефон", "", "");
	
	нрегСтрИсполнитель = НРег(СтрИсполнитель);
	
	// сначала пробуем поделить строку по одному из возможных разделителей
	ВозможныеРазделители = Новый Массив;
	ВозможныеРазделители.Добавить(", телефон:");
	ВозможныеРазделители.Добавить(",телефон:");
	ВозможныеРазделители.Добавить(", телефон");
	ВозможныеРазделители.Добавить(",телефон");
	ВозможныеРазделители.Добавить(", тел.:");
	ВозможныеРазделители.Добавить(",тел.:");
	ВозможныеРазделители.Добавить(", тел.");
	ВозможныеРазделители.Добавить(",тел.");
	ВозможныеРазделители.Добавить(", тел:");
	ВозможныеРазделители.Добавить(",тел:");
	ВозможныеРазделители.Добавить(", тел");
	ВозможныеРазделители.Добавить(",тел");
	ВозможныеРазделители.Добавить(",");
	ВозможныеРазделители.Добавить("тел.:");
	ВозможныеРазделители.Добавить("тел.");
	Для Каждого ВозможныйРазделитель Из ВозможныеРазделители Цикл
		ВхождениеРазделителя = Найти(нрегСтрИсполнитель, ВозможныйРазделитель);
		Если ВхождениеРазделителя <> 0 Тогда
			Результат.ФИО = СокрЛП(Лев(СтрИсполнитель, ВхождениеРазделителя - 1));
			Результат.Телефон = СокрЛП(Сред(СтрИсполнитель, ВхождениеРазделителя + СтрДлина(ВозможныйРазделитель)));
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	// если не получилось строку по разделителю, то ищем первую цифру
	Для Инд = 1 По СтрДлина(СтрИсполнитель) Цикл
		ТекСимвол = Сред(СтрИсполнитель, Инд, 1);
		Если Найти("0123456789", ТекСимвол) <> 0 Тогда
			Результат.ФИО = СокрЛП(Лев(СтрИсполнитель, Инд - 1));
			Результат.Телефон = СокрЛП(Сред(СтрИсполнитель, Инд));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////

Функция ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ВозможныеЗначенияШифраВРазделе1 = Новый Массив;
	ВозможныеЗначенияШифраВРазделе1.Добавить("041");
	ВозможныеЗначенияШифраВРазделе1.Добавить("051");
	ВозможныеЗначенияШифраВРазделе1.Добавить("061");
	ВозможныеЗначенияШифраВРазделе1.Добавить("071");
	
	ВозможныеЗначенияШифраВРазделе2 = Новый Массив;
	ВозможныеЗначенияШифраВРазделе2.Добавить("011");
	ВозможныеЗначенияШифраВРазделе2.Добавить("021");
	ВозможныеЗначенияШифраВРазделе2.Добавить("032");
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	Раздел1_1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_1;
	Раздел1_2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_2;
	Раздел1_3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_3;
	
	Раздел2_1 = мДанныеОтчета.Раздел2_1;
	Раздел2_2 = мДанныеОтчета.Раздел2_2;
	
	ДанныеРаздела1 = Новый Массив;
	ДанныеРаздела1.Добавить(Раздел1_1);
	ДанныеРаздела1.Добавить(Раздел1_2);
	ДанныеРаздела1.Добавить(Раздел1_3);
	
	Если Число(Параметры.ОтчПериод) % 3 <> 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "К сожалению, форматом не предусмотрена возможность выгрузки отчетов с признаком отчетного периода ""1""!", "Титульный", "ОтчПериод");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.НомерСтрахователя) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан номер страхователя!", "Титульный", "ОргФССКод");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ОргНазв) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано полное наименование организации (обособленного подразделения) или Ф.И.О. индивидуального предпринимателя!", "Титульный", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.КодФонда) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задано значение кода органа ФСС, в который представляется отчет!", "Титульный");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверяем шифр в разделе 1
	Раздел1Заполнен = Истина;
	ШифрРаздел1 = СокрЛП(Раздел1_1.ШифрРаздел1);
	Если ЗначениеЗаполнено(ШифрРаздел1) И ВозможныеЗначенияШифраВРазделе1.Найти(ШифрРаздел1) = Неопределено Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан шифр в разделе 1!", "Раздел1_1", "ШифрРаздел1");
		СтатусПроверки = Ложь;
	Иначе
		Раздел1Заполнен = НЕ ДанныеУзлаНеЗаполнены(ДеревоВыгрузки, "F4INF1", ДанныеРаздела1);
		Если Раздел1Заполнен И НЕ ЗначениеЗаполнено(ШифрРаздел1) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано значение шифра в разделе 1!", "Раздел1_1", "ШифрРаздел1");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// проверяем шифры в разделе 2
	Раздел2Заполнен = Ложь;
	ЗначенияШифра = Новый Массив;
	Для Каждого СтрРаздел2_1 Из Раздел2_1 Цикл
		
		ИндексСтраницы = Раздел2_1.Индекс(СтрРаздел2_1);
		НомерСтраницы = ИндексСтраницы + 1;
		
		ДанныеРаздел2_1 = СтрРаздел2_1.Данные;
		ДанныеРаздел2_2 = Раздел2_2[ИндексСтраницы].Данные;
		ШифрРаздел2 = СокрЛП(ДанныеРаздел2_1.ШифрРаздел2);
		
		ДанныеРаздела2 = Новый Массив;
		ДанныеРаздела2.Добавить(ДанныеРаздел2_1);
		ДанныеРаздела2.Добавить(ДанныеРаздел2_2);
		
		Если ЗначениеЗаполнено(ШифрРаздел2) И ВозможныеЗначенияШифраВРазделе2.Найти(ШифрРаздел2) = Неопределено Тогда
			Раздел2Заполнен = Истина;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан шифр на странице " + НомерСтраницы + " раздела 2!", "Раздел2_1", "ШифрРаздел2", НомерСтраницы);
			СтатусПроверки = Ложь;
		Иначе
			ЭкземплярРаздела2Заполнен = НЕ ДанныеУзлаНеЗаполнены(ДеревоВыгрузки, "F4INF2", ДанныеРаздела2);
			Если ЭкземплярРаздела2Заполнен Тогда
				Раздел2Заполнен = Истина;
			КонецЕсли;
			Если ЭкземплярРаздела2Заполнен И НЕ ЗначениеЗаполнено(ШифрРаздел2) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано значение шифра на странице " + НомерСтраницы + " раздела 2!", "Раздел2_1", "ШифрРаздел2", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ШифрРаздел2) Тогда
			
			ИндексСтраницыСТемЖеШифром = ЗначенияШифра.Найти(ШифрРаздел2);
			Если ИндексСтраницыСТемЖеШифром <> Неопределено Тогда 
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Значение шифра на странице " + НомерСтраницы + " раздела 2 совпадает со значением на странице " + (ИндексСтраницыСТемЖеШифром + 1) + "!", "Раздел2_1", "ШифрРаздел2", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначенияШифра.Добавить(ШифрРаздел2);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Раздел1Заполнен И НЕ Раздел2Заполнен Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен хотя бы один из следующих разделов: Раздел I (табл. 1), Раздел I (табл. 2), Раздел I (табл. 3, 4), Раздел II (табл. 5, 6) или Раздел II (табл. 7)!", "Раздел1_1", "ШифрРаздел1_1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ДанныеУзлаНеЗаполнены(ДеревоВыгрузки, КодУзла, Данные, ПоказателиИсключения = Неопределено)
	
	Исключения = Новый Структура;
	Если ПоказателиИсключения <> Неопределено Тогда
		Исключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	РезультатыПоиска = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код", КодУзла), Истина);
	Если РезультатыПоиска.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		МассивДанных = Данные;
	Иначе
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(Данные);
	КонецЕсли;
	
	Для Каждого РезультатПоиска Из РезультатыПоиска Цикл
		Для Каждого Узел Из РезультатПоиска.Строки Цикл
			ИДРаздела = Узел.Раздел;
			ИДПоказателя = Узел.Ключ;
			Если ЗначениеЗаполнено(ИДРаздела) И ЗначениеЗаполнено(ИДПоказателя) Тогда
				Если СвойствоОпределено(Исключения, ИДПоказателя) Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого Данное Из МассивДанных Цикл
					ЗначениеСвойства = Неопределено;
					Если Данное.Свойство(ИДПоказателя, ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
						Возврат Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	РодительСтрока = ?(Родитель = Неопределено, Узел.Владелец(), Родитель);
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = РодительСтрока.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = РодительСтрока.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= РодительСтрока.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = РодительСтрока.Строки.Добавить();
	Иначе
		НовыйУзел = РодительСтрока.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть(Параметры, УзелРодитель)
	
	// выгружаем титульный лист
	УзелTITLE = ПолучитьПодчиненныйЭлемент(УзелРодитель, "TITLE");
	ЗаполнитьДаннымиУзел(Параметры, УзелTITLE);
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1_1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_1;
	Раздел1_2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_2;
	Раздел1_3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_3;
	Раздел2_1 = мДанныеОтчета.Раздел2_1;
	Раздел2_2 = мДанныеОтчета.Раздел2_2;
	Раздел2_4 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2_4;
	Раздел3_1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3_1;
	Раздел3_2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3_2;
	
	// выгружаем раздел 1
	УзелF4INF1 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "F4INF1");
	ЗаполнитьДаннымиУзел(Раздел1_1, УзелF4INF1);
	ЗаполнитьДаннымиУзел(Раздел1_2, УзелF4INF1);
	ЗаполнитьДаннымиУзел(Раздел1_3, УзелF4INF1);
	
	// выгружаем раздел 2 (кроме табл. 8)
	УзелF4INF2Шаблон = ПолучитьПодчиненныйЭлемент(УзелРодитель, "F4INF2");
	Для Каждого СтрРаздел2_1 Из Раздел2_1 Цикл
		
		УзелУзелF4INF2 = СкопироватьУзел(УзелF4INF2Шаблон.Родитель, УзелF4INF2Шаблон);
		ЗаполнитьДаннымиУзел(СтрРаздел2_1.Данные, УзелУзелF4INF2);
		
		СтрРаздел2_2 = ?(Раздел2_2.Количество() >= Раздел2_1.Индекс(СтрРаздел2_1) + 1, Раздел2_2[Раздел2_1.Индекс(СтрРаздел2_1)], Неопределено);
		Если СтрРаздел2_2 <> Неопределено Тогда
			ЗаполнитьДаннымиУзел(СтрРаздел2_2.Данные, УзелУзелF4INF2);
		КонецЕсли;
		
	КонецЦикла;
	
	// выгружаем разделы 2 (табл. 8) и 3
	УзелF4INFO = ПолучитьПодчиненныйЭлемент(УзелРодитель, "F4INFO");
	ЗаполнитьДаннымиУзел(Раздел2_4, УзелF4INFO);
	ЗаполнитьДаннымиУзел(Раздел3_1, УзелF4INFO);
	ЗаполнитьДаннымиУзел(Раздел3_2, УзелF4INFO);
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ЗаполнитьСодержательнуюЧасть(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	РодительСтроки = ?(Стр.Родитель = Неопределено, Стр.Владелец(), Стр.Родитель);
	Возврат (РодительСтроки.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Узел.Значение) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0";
	ИначеЕсли Узел.Формат = "D" Тогда
		Возврат Узел.Значение = "0001-01-01";
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=yyyy-MM-dd");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "D" Тогда
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=yyyy-MM-dd"));
		Иначе
			Узел.Значение = "0001-01-01";
		КонецЕсли;
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ЗаполнитьДаннымиУзел(Параметры, Стр);
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И СвойствоОпределено(Параметры, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если СвойствоОпределено(Параметры, Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			Сообщить("Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", СтатусСообщения.Важное);
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			Сообщить("Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("windows-1251");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	
	// !!!
	ПотокXML.ЗаписатьБезОбработки(Символы.ПС + "<?F4FORM version=""0.1""?>");
	
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("F4REPORT");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи, ТихийРежим = Ложь) Экспорт
	
	Если НЕ ТихийРежим Тогда
		ОбъектФайл = Новый Файл(ФайлДляЗаписи);
		Если ОбъектФайл.Существует() Тогда
			Ответ = Вопрос("В указанном каталоге уже существует файл выгрузки с именем """ + ОбъектФайл.Имя + """.
							|Хотите переписать существующий файл?", РежимДиалогаВопрос.ДаНет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI, , , Символы.ПС);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	
	Если НЕ ТихийРежим Тогда
		Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//

Функция ИнициализироватьВнешнююКомпоненту()
	
	Попытка
		Объект = Новый("Addin.CryptS");
		Возврат Истина;
	Исключение
	КонецПопытки;
	
	ВремФайлКомпоненты = ПолучитьИмяВременногоФайла();
	Попытка
		ПолучитьМакет("КомпонентаОбмена").Записать(ВремФайлКомпоненты);
	Исключение
		Сообщить("Не удалось выгрузить внешнюю компоненту ExtIntgr.dll в каталог программы:
				|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	ПолноеИмяФайлаКомпоненты = КаталогПрограммы() + "ExtIntgr.dll";
	Попытка
		ПереместитьФайл(ВремФайлКомпоненты, ПолноеИмяФайлаКомпоненты);
	Исключение
		ОбъектФайлКомпоненты = Новый Файл(ПолноеИмяФайлаКомпоненты);
		Если ОбъектФайлКомпоненты.Существует() Тогда
			СравнениеФайлов = Новый СравнениеФайлов;
			СравнениеФайлов.ПервыйФайл = ВремФайлКомпоненты;
			СравнениеФайлов.ВторойФайл = ПолноеИмяФайлаКомпоненты;
			Если НЕ СравнениеФайлов.Сравнить() Тогда
				Сообщить("Не удалось заменить внешнюю компоненту ExtIntgr.dll в каталоге программы.
						|Несоответствие версий компоненты требуемой может привести к некорректной работе программы!" , СтатусСообщения.Важное);
			КонецЕсли;
		Иначе
			Сообщить("Не удалось выгрузить внешнюю компоненту ExtIntgr.dll в каталог программы:
					|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки;
	
	Попытка
		ЗагрузитьВнешнююКомпоненту(ПолноеИмяФайлаКомпоненты);
	Исключение
		Сообщить("Не удалось загрузить внешнюю компоненту ExtIntgr.dll:
				|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьОбъектДляРаботыСКриптографией()
	Перем Парам1, Парам2, Парам3, Парам4;
	
	Попытка
		Крипт = Новый("Addin.CryptS");
		Крипт.ИмяКриптопровайдера = "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider";
		Крипт.ТипКриптопровайдера = 75;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	// проверка установки КриптоПро
	Попытка
		Крипт.ПолучитьСледующийАлгоритм(Парам1, Парам2, Парам3, Парам4);
	Исключение
		Предупреждение("На компьютере не обнаружено СКЗИ КриптоПро CSP, необходимое для выполнения криптографических операций при формировании пакета.");
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Крипт;
	
КонецФункции

Процедура УдалитьВременныйФайл(ИмяФайла)
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыВыгрузитьПакет(Кнопка)
	
	РезультатВыгрузки = ВыгрузитьПакет();
	Если ЗначениеЗаполнено(РезультатВыгрузки) Тогда
		Сообщить("Пакет успешно выгружен в файл """ + РезультатВыгрузки + """.", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыФормированияПакета(КодСтрахователя, КодОрганаФСС)
	
	ФормаПараметров = ПолучитьФорму("ПараметрыФормированияПакета");
	ФормаПараметров.КодСтрахователя = КодСтрахователя;
	ФормаПараметров.КодОрганаФСС = КодОрганаФСС;
	Возврат ФормаПараметров.ОткрытьМодально();
	
КонецФункции

Функция ПолучитьКодыСтрахователяИОрганаФСС()
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Титульный = ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	
	КодОрганаФСС = "";
	СохрСтруктура.Свойство("КодОрганаФСС", КодОрганаФСС);
	
	ОргФССКод = СокрЛП(Титульный.ОргФССКод_1) + СокрЛП(Титульный.ОргФССКод_2) + СокрЛП(Титульный.ОргФССКод_3)
			  + СокрЛП(Титульный.ОргФССКод_4) + СокрЛП(Титульный.ОргФССКод_5) + СокрЛП(Титульный.ОргФССКод_6)
			  + СокрЛП(Титульный.ОргФССКод_7) + СокрЛП(Титульный.ОргФССКод_8) + СокрЛП(Титульный.ОргФССКод_9)
			  + СокрЛП(Титульный.ОргФССКод_10);
	
	ДопКодФСС = СокрЛП(Титульный.ДополнительныйКод_1) + СокрЛП(Титульный.ДополнительныйКод_2) + СокрЛП(Титульный.ДополнительныйКод_3)
			  + СокрЛП(Титульный.ДополнительныйКод_4) + СокрЛП(Титульный.ДополнительныйКод_5) + СокрЛП(Титульный.ДополнительныйКод_6)
			  + СокрЛП(Титульный.ДополнительныйКод_7) + СокрЛП(Титульный.ДополнительныйКод_8) + СокрЛП(Титульный.ДополнительныйКод_9)
			  + СокрЛП(Титульный.ДополнительныйКод_10);
	
	Возврат Новый Структура("ОргФССКод, ДополнительныйКод, КодОрганаФСС", ОргФССКод, ДопКодФСС, КодОрганаФСС);
	
КонецФункции

Функция ВыгрузитьПакет()
	
	// инициализируем внешнюю компоненту
	Если НЕ ИнициализироватьВнешнююКомпоненту() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// сохраняем при необходимости
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// извлекаем регистрационный номер страхователя и код органа ФСС из данных программы
	КодыОтчета=  ПолучитьКодыСтрахователяИОрганаФСС();
	ОргФССКод = ?(ЗначениеЗаполнено(КодыОтчета.ДополнительныйКод), СокрЛП(КодыОтчета.ДополнительныйКод), СокрЛП(КодыОтчета.ОргФССКод));
	КодОрганаФСС = СокрЛП(КодыОтчета.КодОрганаФСС);
	Если НЕ ЗначениеЗаполнено(ОргФССКод) Тогда
		Сообщить("Не задан регистрационный номер страхователя.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КодОрганаФСС) Тогда
		Сообщить("Не задан код органа ФСС.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// запрашиваем параметры формирования пакета
	ПараметрыФормированияПакета = ПолучитьПараметрыФормированияПакета(ОргФССКод, КодОрганаФСС);
	Если НЕ ЗначениеЗаполнено(ПараметрыФормированияПакета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	СертификатСтрахователя = ПараметрыФормированияПакета.СертификатСтрахователя;
	СертификатФСС = ПараметрыФормированияПакета.СертификатФСС;
	КаталогВыгрузки = ПараметрыФормированияПакета.КаталогВыгрузки;
	
	// формируем файл выгрузки
	ДокВыгрузки = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	ПолноеИмяФайлаВыгрузки = ДокВыгрузки.ПолучитьФорму().ВыгрузитьОтчет(мСохраненныйДок.Ссылка, Ложь);
	Если ПолноеИмяФайлаВыгрузки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектФайлВыгрузки = Новый Файл(ПолноеИмяФайлаВыгрузки);
	ВременныйКаталог = ОбъектФайлВыгрузки.Путь;
	ИмяФайлаВыгрузкиБезРасширения = ОбъектФайлВыгрузки.ИмяБезРасширения;
	
	// инициализируем объект для работы с криптографией
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		УдалитьВременныйФайл(ВременныйКаталог);
		Возврат Неопределено;
	КонецЕсли;
	
	// подписываем
	Состояние("Подписание и шифрование файла выгрузки ...");
	КороткоеИмяЗашифрованногоПакета = ИмяФайлаВыгрузкиБезРасширения + ".ef4";
	ЗашифрованныйПакет = КаталогВыгрузки + КороткоеИмяЗашифрованногоПакета;
	Попытка
		Крипт.PKCS7ПодписатьСДаннымиИЗашифровать(ПолноеИмяФайлаВыгрузки, СертификатСтрахователя.СерийныйНомер, СертификатСтрахователя.Поставщик, СертификатФСС.СерийныйНомер, СертификатФСС.Поставщик, ЗашифрованныйПакет);
	Исключение
		УдалитьВременныйФайл(ВременныйКаталог);
		Сообщить("Не удалось подписать и зашифровать файл выгрузки:
				|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	// удаляем каталог с временным файлом выгрузки
	Состояние("Удаление временных файлов ...");
	УдалитьВременныйФайл(ВременныйКаталог);
	
	Возврат ЗашифрованныйПакет;
	
КонецФункции

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//

Процедура ОбновитьСтатусОтправкиВРегламентированномОтчете()
	
	// находим панель
	ПанельОтправки = ЭлементыФормы.Найти("ПанельОтправкиФСС");
	Если ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		//электронный документооборот не используется панель отправки свернута
		Возврат;
	КонецЕсли;
	
	НадписьПанельОтправки = ЭлементыФормы.Найти("НадписьПанельОтправки");
	Если ПанельОтправки = Неопределено ИЛИ НадписьПанельОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// инициализируем результат
	ТекстПанели = "";
	
	ИмеютсяОшибки = Ложь;
	ОтчетСдан = Ложь;
	
	Если ТекущаяОтправка = Неопределено Тогда
		ТекстПанели = "Отчет не отправлялся.";
	Иначе
		ТекстПанели = "Отчет отправлен " + Формат(ТекущаяОтправка.ДатаОтправки, "ДЛФ=DDT") + ".";
		
		
		Если ТекущаяОтправка.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
			ИмеютсяОшибки = Истина;
			ТекстПанели = ТекстПанели + " Отчет не принят: получен протокол ошибок.";	
		ИначеЕсли ТекущаяОтправка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
			ОтчетСдан = Истина;
			ТекстПанели = ТекстПанели + " Отчет сдан: получена квитанция.";	
		КонецЕсли;
	КонецЕсли;
	
	Если ОтчетСдан Тогда
		ЦветШрифта = Новый Цвет(0, 179, 16);
		ЦветРамки = ЦветШрифта;
	ИначеЕсли ИмеютсяОшибки Тогда
		ЦветШрифта = Новый Цвет(255, 0, 0);
		ЦветРамки = ЦветШрифта;
	Иначе
		ЦветШрифта = Новый Цвет(0, 0, 192);
		ЦветРамки = Новый Цвет(227, 227, 227);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПанели) Тогда
		
		НадписьПанельОтправки.Заголовок = СокрЛП(ТекстПанели);
		НадписьПанельОтправки.ЦветТекста = ЦветШрифта;
		
		ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ПанельОтправкиВнутренняя = ЭлементыФормы.Найти("ПанельОтправкиВнутренняя");
		Если ПанельОтправкиВнутренняя <> Неопределено Тогда
			ПанельОтправкиВнутренняя.ЦветРамки = ЦветРамки;
		КонецЕсли;
		
	Иначе
		ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоИдентификаторОтправкиФСС(Знач Стр)
	Для Инд = 0 По 8 Цикл
		Стр = СтрЗаменить(Стр, Строка(Инд), "9");
	КонецЦикла;
	
	Возврат (Стр = "9999-9999-9999");
	Возврат Истина;
КонецФункции

Процедура КоманднаяПанельФормыОтправить(Кнопка)
	
	// сохраняем при необходимости
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыРегламентированныхОтчетов.ВРаботе Тогда
		
		Если НЕ РегламентированнаяОтчетность.ВопросПредупреждение("Запрещено отправлять неподготовленные отчеты!
			|Изменить статус отчета с ""В работе"" на ""Подготовлен""?
			|
			|Подтверждайте изменение статуса только в случае,
			|ЕСЛИ ВЫ УВЕРЕНЫ В ТОМ, ЧТО ОТЧЕТ ГОТОВ К ПРЕДСТАВЛЕНИЮ В НАЛОГОВЫЙ ОРГАН!",
			"Нет, я не уверен(а) в том, что отчет готов к представлению в налоговый орган.",
			"Да, я уверен(а) в том, что отчет готов к представлению в налоговый орган.") Тогда
			Возврат;
		Иначе
			РегламентированнаяОтчетность.ЗаписатьСтатусОтчета(мСохраненныйДок.Ссылка, Перечисления.СтатусыРегламентированныхОтчетов.Подготовлен);
		КонецЕсли;	
		
	ИначеЕсли Статус = Перечисления.СтатусыРегламентированныхОтчетов.Сдан Тогда
		
		Если Вопрос("Внимание! Вы действительно хотите отправить уже сданный отчет?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		Иначе
			РегламентированнаяОтчетность.ЗаписатьСтатусОтчета(мСохраненныйДок.Ссылка, Перечисления.СтатусыРегламентированныхОтчетов.Подготовлен);
		КонецЕсли;
		
	ИначеЕсли ТекущаяОтправка <> Неопределено И ТекущаяОтправка.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен Тогда
		
		Если Вопрос("Внимание! Не рекомендуется отправлять отчеты, предыдущая попытка отправки которых еще не завершена!
					|Вы действительно хотите отправить отчет?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	ЗашифрованныйПакет = ВыгрузитьДляОтправкиПакет();
	Если НЕ ЗначениеЗаполнено(ЗашифрованныйПакет) Тогда
		Возврат;
	КонецЕсли;
	// отправляем
	Состояние("Отправка файла выгрузки ...");
	
	ПовторятьСоединение = Истина;
	Пока ПовторятьСоединение Цикл
		ФайлРезультата = ОтправкаЗашифрованногоПакетаНаСерверФСС(ЗашифрованныйПакет);
		Если ФайлРезультата <> Неопределено Тогда
			ПовторятьСоединение = Ложь;	
			
			// считываем файл результата
			ОбъектЧтение = Новый ЧтениеТекста(ФайлРезультата);
			стрОтветСервераФСС = СокрЛП(ОбъектЧтение.Прочитать());
			ОбъектЧтение.Закрыть();
			
			Если ЭтоИдентификаторОтправкиФСС(Лев(стрОтветСервераФСС, 14)) Тогда
				//отправленный файл принят сервером, отправке присвоен идентификатор
				
				ФайлПакета = Новый Файл(ЗашифрованныйПакет);
				
				НоваяЗапись = Справочники.ОтправкиФСС.СоздатьЭлемент();
				НоваяЗапись.ОтчетСсылка = мСохраненныйДок.Ссылка;
				НоваяЗапись.ИдентификаторОтправкиНаСервере = стрОтветСервераФСС;
				НоваяЗапись.ЗашифрованныйПакет = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ЗашифрованныйПакет));
				НоваяЗапись.ИмяФайлаПакета = ФайлПакета.Имя;
				НоваяЗапись.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен;
				НоваяЗапись.ДатаОтправки = ТекущаяДата();
				НоваяЗапись.Организация = Организация;
				НоваяЗапись.КодОрганаФСС = мКодОрганаФСС;
				НоваяЗапись.Записать();
				ТекущаяОтправка = НоваяЗапись.Ссылка;	
				
				Сообщить("Транспортный пакет сформирован и отправлен");
				// удаляем каталог с временным файлом выгрузки
				ОбъектФайлЗашифрованныйПакет = Новый Файл(ЗашифрованныйПакет);
				ВременныйКаталог = ОбъектФайлЗашифрованныйПакет.Путь;
				Состояние("Удаление временных файлов ...");
				УдалитьВременныйФайл(ВременныйКаталог);
				
				ОбновитьСтатусОтправкиВРегламентированномОтчете();
				ОбновитьМенюОтправки();
				
				ВызватьФормуАвтозапроса();
			Иначе
				//отправленный файл не был принят сервером
				Сообщить("Сервер ФСС не принял отправленный зашифрованный пакет.");
				Если ЗначениеЗаполнено(стрОтветСервераФСС) Тогда
					Сообщить("Ответ сервера ФСС: " + стрОтветСервераФСС);
				КонецЕсли;
				Возврат;
			КонецЕсли;
		Иначе
			// нет ответа от сервера ФСС
			ПовторятьСоединение = РегламентированнаяОтчетность.ПоказатьДиалогОшибкиДоступаВИнтернет("Не удалось обратиться к серверу ФСС РФ");
		КонецЕсли;                
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанельФормыПоказатьОтправки(Кнопка)
	
	ФормаСписка = Справочники.ОтправкиФСС.ПолучитьФорму("ФормаСписка");
	Если мСохраненныйДок <> Неопределено Тогда
		ФормаСписка.ОтборПоОтчету = мСохраненныйДок.Ссылка;
	Иначе	
		ФормаСписка.ОтборПоОтчету = Документы.РегламентированныйОтчет.ПустаяСсылка();
	КонецЕсли;
	ФормаСписка.Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПолучитьРезультат(Кнопка)
	ПолучитьРезультатОтправки();	
КонецПроцедуры

Процедура КоманднаяПанельФормыПоказатьРезультат(Кнопка)
	СтатусОтправки = ТекущаяОтправка.СтатусОтправки;
	Протокол = ТекущаяОтправка.Протокол.Получить();
	// покажем протокол
	Если СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
		ЗаголовокПротокола = "Протокол ошибок";
	ИначеЕсли СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
		ЗаголовокПротокола = "Протокол успеха";
	Иначе
		ЗаголовокПротокола = "Потокол обработки";
	КонецЕсли;
	РегламентированнаяОтчетность.ПоказатьПротоколОбработки(Протокол, ЗаголовокПротокола);	
КонецПроцедуры

Процедура ПолучитьРезультатОтправки()
	Если ТекущаяОтправка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИдентификаторОтправкиНаСервере = ТекущаяОтправка.ИдентификаторОтправкиНаСервере;
	
	РезультатОтправки = РегламентированнаяОтчетность.ПолучитьРезультатОтправкиФСС(ИдентификаторОтправкиНаСервере);
	
	Если РезультатОтправки <> Неопределено Тогда
		//пришел протокол ошибок или квитанция
		//записываем в текущую попытку получения результата
		ОбъектТекОтправка = ТекущаяОтправка.ПолучитьОбъект();
		ОбъектТекОтправка.ДатаПолученияРезультата = РезультатОтправки.ДатаПолученияРезультата;
		ОбъектТекОтправка.Протокол = Новый ХранилищеЗначения(РезультатОтправки.Протокол);
		Если РезультатОтправки.Квитанция <> Неопределено Тогда
			ОбъектТекОтправка.Квитанция = Новый ХранилищеЗначения(РезультатОтправки.Квитанция);
		КонецЕсли;
		ОбъектТекОтправка.СтатусОтправки = РезультатОтправки.СтатусОтправки;
	КонецЕсли;                
	
	ОбъектТекОтправка.Записать();	
	
	Если РезультатОтправки <> Неопределено Тогда
		
		// передадим в форму элемента справочника "Отправки в ФСС" новый статус отправки
		Оповестить("Изменение статуса отправки регламентированного отчета", РезультатОтправки.СтатусОтправки, мСохраненныйДок.Ссылка);
		
		// покажем протокол
		Если РезультатОтправки.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
			ЗаголовокПротокола = "Протокол ошибок";
		ИначеЕсли РезультатОтправки.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
			ЗаголовокПротокола = "Протокол успеха";
		Иначе
			ЗаголовокПротокола = "Потокол обработки";
		КонецЕсли;
		РегламентированнаяОтчетность.ПоказатьПротоколОбработки(РезультатОтправки.Протокол, ЗаголовокПротокола);
		
		ОбновитьСтатусОтправкиВРегламентированномОтчете();
		ОбновитьМенюОтправки();
	КонецЕсли;                
	
КонецПроцедуры

Функция ОтправкаЗашифрованногоПакетаНаСерверФСС(ИмяФайлаПакета)
	АдресСервераОнлайнПроверки = "f4.fss.ru";
	РесурсНаСервере = "index.php";
	
	// инициализируем настройки прокси, если они определены
	НастройкиПрокси = РегламентированнаяОтчетность.ПолучитьНастройкиПрокси();
	Если ЗначениеЗаполнено(НастройкиПрокси.ИмяПользователя) Тогда
		Прокси = Новый ИнтернетПрокси;
		Прокси.Пользователь = НастройкиПрокси.ИмяПользователя;
		Прокси.Пароль = НастройкиПрокси.Пароль;
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	// устанавливаем соединение с сервером
	Попытка
		Соединение = Новый HTTPСоединение(АдресСервераОнлайнПроверки, , , , Прокси);
	Исключение
		Сообщить("Не удалось установить соединение с сервером онлайн-проверки:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	ОбъектФайлВыгрузки = Новый Файл(ИмяФайлаПакета);
	КороткоеИмяФайлаВыгрузки = ОбъектФайлВыгрузки.Имя;
	
	// формируем файл с запросами для отсылки данных.
   	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла();
   	ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.ANSI);
	
	// формируем POST-данные.
	
	// service
	ФайлОтправки.ЗаписатьСтроку("--My1cV8bNdr");
	ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""service""");
	ФайлОтправки.ЗаписатьСтроку("");
	ФайлОтправки.ЗаписатьСтроку("2");
	
	// inline
	ФайлОтправки.ЗаписатьСтроку("--My1cV8bNdr");
	ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""inline""");
	ФайлОтправки.ЗаписатьСтроку("");
	ФайлОтправки.ЗаписатьСтроку("1");
	
	ФайлОтправки.ЗаписатьСтроку("--My1cV8bNdr");
	ФайлОтправки.ЗаписатьСтроку("Content-Disposition:form-data; name=""filein""; filename=""" + КороткоеИмяФайлаВыгрузки + """");
	ФайлОтправки.ЗаписатьСтроку("");
	ФайлОтправки.ЗаписатьСтроку("*");
	
	ФайлОтправки.ЗаписатьСтроку("--My1cV8bNdr--");
	
	ФайлОтправки.Закрыть();
	
	ЗаменитьМаркерВЗапросеДвоичнымиДанными(ИмяФайлаОтправки, ИмяФайлаПакета);
	
	// формируем общие заголовки
	ЗаголовокHTTP = Новый Соответствие();
   	ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=My1cV8bNdr");
	// укажем длину POST-запроса Content-Length
	ФайлОтправки = Новый Файл(ИмяФайлаОтправки);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
	
	// посылаем запрос
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	Попытка
		Соединение.ОтправитьДляОбработки(ИмяФайлаОтправки, РесурсНаСервере, ФайлРезультата, ЗаголовокHTTP);
		Соединение = Неопределено;
	Исключение
		Возврат Неопределено;
	КонецПопытки;

	Возврат ФайлРезультата;
КонецФункции

Процедура ЗаменитьМаркерВЗапросеДвоичнымиДанными(ИмяФайлаОтправки, ИмяФайлаВыгрузки)
	 
	 КодМаркера = 42;
	 
	 ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	 ДвДанные2 = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	 Если ДвДанные = Неопределено ИЛИ ДвДанные2 = Неопределено Тогда
		  Возврат;
	 КонецЕсли;
	 
	 ДвДанные.Прочитать(ИмяФайлаОтправки);
	 ДвДанные.ТекущаяПозиция = 0;
	 
	 РазмерИсходныхДанных = ДвДанные.Размер;
	 
	 // считываем начало из первого файла и находим маркер "*"
	 Для Инд = 1 По РазмерИсходныхДанных Цикл
		  ОчереднойБайт = ДвДанные.ПолучитьЧисло(1);
		  Если ОчереднойБайт = КодМаркера Тогда
			   Прервать;
		  КонецЕсли;
		  ДвДанные2.ДобавитьЧисло(ОчереднойБайт, 1);
	 КонецЦикла;
	 
	 Если Инд = РазмерИсходныхДанных + 1 Тогда
		  Возврат;
	 КонецЕсли;
	 
	 // добавляем данные из файла
	 ДвДанные2.ДобавитьИзФайла(ИмяФайлаВыгрузки, Истина);
	 
	 // дописываем окончание из первого файла
	 Для Инд = ДвДанные.ТекущаяПозиция + 1 По РазмерИсходныхДанных Цикл
		  ОчереднойБайт = ДвДанные.ПолучитьЧисло(1);
		  ДвДанные2.ДобавитьЧисло(ОчереднойБайт, 1);
	 КонецЦикла;
	 
	 // записываем в файл
	 ДвДанные2.Записать(ИмяФайлаОтправки);
	 
 КонецПроцедуры
 
Функция СоздатьОбъектДляРаботыСДвоичнымиДанными()
	
	// пытаемся создать объект
	Попытка
		Возврат Новый("Addin.BinaryDataS");
	Исключение
	КонецПопытки;
	
	// если создать не удалось, то возможно файл компоненты отсутствует в каталоге программы
	ПолноеИмяФайлаКомпоненты = КаталогПрограммы() + "ExtIntgr.dll";
	ОбъектФайлКомпоненты = Новый Файл(ПолноеИмяФайлаКомпоненты);
	
	Если НЕ ОбъектФайлКомпоненты.Существует() Тогда
		Попытка
			Отчеты.РегламентированныйОтчет4ФСС.ПолучитьМакет("КомпонентаОбмена").Записать(ПолноеИмяФайлаКомпоненты);
		Исключение
			Сообщить("Не удалось выгрузить внешнюю компоненту ExtIntgr.dll в каталог программы:
					|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	// пытаемся повторно загрузить внешнюю компоненту и создать объект
	Попытка
		ЗагрузитьВнешнююКомпоненту(ПолноеИмяФайлаКомпоненты);
		Возврат Новый("Addin.BinaryDataS");
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура РазобратьСоставляющую(СтрСоставляющая, Результат)
	
	// расщепляем текущую составляющую и добавляем в структуру Результат
	Для ВнутрИнд = 1 По СтрДлина(СтрСоставляющая) Цикл
		Если Сред(СтрСоставляющая, ВнутрИнд, 1) = "=" Тогда
			ДоРазделителя = СокрЛП(Лев(СтрСоставляющая, ВнутрИнд - 1));
			ПослеРазделителя = СокрЛП(Сред(СтрСоставляющая, ВнутрИнд + 1));
			Если НЕ ПустаяСтрока(ДоРазделителя) И НЕ ПустаяСтрока(ПослеРазделителя) Тогда
				Результат.Вставить(ДоРазделителя, ПослеРазделителя);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РазобратьСтрокуСубъекта(СтрокаСубъект)
	
	Результат = Новый Соответствие;
	ПоследнийРазделитель = 0;
	
	ДлинаСтрокиСубъект = СтрДлина(СтрокаСубъект);
	Для Инд = 1 По ДлинаСтрокиСубъект Цикл
		ТекСимвол = Сред(СтрокаСубъект, Инд, 1);
		Если ТекСимвол = "," Тогда
			ТекСоставляющая = Сред(СтрокаСубъект, ПоследнийРазделитель + 1, Инд - (ПоследнийРазделитель + 1));
			ПоследнийРазделитель = Инд;
			РазобратьСоставляющую(ТекСоставляющая, Результат);
		КонецЕсли;
	КонецЦикла;
	
	Если ПоследнийРазделитель <> ДлинаСтрокиСубъект Тогда
		РазобратьСоставляющую(СокрЛП(Сред(СтрокаСубъект, ПоследнийРазделитель + 1)), Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Отпечаток16ИзBase64(ОтпечатокBase64, ДвДанные= Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ОтпечатокBase64) Тогда
		Возврат ОтпечатокBase64;
	КонецЕсли;
	
	ДвДанные.Очистить();
	ДвДанные.ДобавитьИзСтрокиBase64(ОтпечатокBase64, Истина);
	ДвДанные.ТекущаяПозиция = 0;
	
	Возврат нрег(ИзвлечьОтпечатокИзДвоичныхДанных(ДвДанные));
	
КонецФункции

Функция ИзвлечьОтпечатокИзДвоичныхДанных(ДвДанные)
	
	Соответствие16 = Новый Соответствие;
	Соответствие16.Вставить(0, "0");
	Соответствие16.Вставить(1, "1");
	Соответствие16.Вставить(2, "2");
	Соответствие16.Вставить(3, "3");
	Соответствие16.Вставить(4, "4");
	Соответствие16.Вставить(5, "5");
	Соответствие16.Вставить(6, "6");
	Соответствие16.Вставить(7, "7");
	Соответствие16.Вставить(8, "8");
	Соответствие16.Вставить(9, "9");
	Соответствие16.Вставить(10, "a");
	Соответствие16.Вставить(11, "b");
	Соответствие16.Вставить(12, "c");
	Соответствие16.Вставить(13, "d");
	Соответствие16.Вставить(14, "e");
	Соответствие16.Вставить(15, "f");
	
	Отпечаток = "";
	Для Инд = 1 По 20 Цикл
		Байт = ДвДанные.ПолучитьЧисло(1);
		Представление16_1 = Соответствие16[Цел(Байт / 16)];
		Представление16_2 = Соответствие16[Байт % 16];
		Отпечаток =  Отпечаток + Представление16_1 + Представление16_2;
	КонецЦикла;
	
	Возврат Отпечаток;
	
КонецФункции

Функция ПолучитьСертификатыИзНастроекОрганизации()
	Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НастройкиОбменаФСС.СертификатСтрахователяОтпечаток КАК СертификатСтрахователяОтпечаток,
		|	НастройкиОбменаФСС.СертификатФССОтпечаток КАК СертификатФССОтпечаток
		|ИЗ
		|	РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
		|ГДЕ
		|	НастройкиОбменаФСС.Организация = &ОрганизацияСсылка
		|	И НастройкиОбменаФСС.ИспользоватьОбмен = ИСТИНА";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ОрганизацияСсылка", Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если НЕ Выборка.Следующий() Тогда
			Сообщить("Требуется выполнить настройку параметров документооборота с ФСС для данной организации
					 |(Справочник ""Организации"" - закладка ""Документооборот"")", СтатусСообщения.Важное); 
			Возврат Неопределено;	
		Иначе
			СертификатыОбщие = ПолучитьСертификатыОбщие();
			
			СертификатСтрахователя 	= СертификатыОбщие.Найти(Выборка.СертификатСтрахователяОтпечаток, "Отпечаток");
			СертификатФСС 			= СертификатыОбщие.Найти(Выборка.СертификатФССОтпечаток, "Отпечаток");
			
			Если СертификатСтрахователя = Неопределено ИЛИ СертификатФСС = Неопределено Тогда
				Сообщить("Требуется выполнить настройку параметров документооборота с ФСС для данной организации
					 	 |(Справочник ""Организации"" - закладка ""Документооборот"")", СтатусСообщения.Важное); 
				Возврат Неопределено;	
			КонецЕсли;
			Возврат Новый Структура("СертификатСтрахователя, СертификатФСС", СертификатСтрахователя, СертификатФСС);
		КонецЕсли;

КонецФункции

Функция ПолучитьСертификатыОбщие()
	
	ТаблицаСертификатовСтрахователя = Новый ТаблицаЗначений;
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("Отпечаток");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("Субъект");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("СерийныйНомер");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("Поставщик");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("ДействителенС");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("ДействителенПо");
	ТаблицаСертификатовСтрахователя.Колонки.Добавить("Наименование");
	
	// перебираем сертификаты хранилища
	Пока Крипт.ПолучитьСледующийСертификат("MY") Цикл
		
		ОтпечатокСертификата = Крипт.Отпечаток;
		
		НовСтрХранилище = ТаблицаСертификатовСтрахователя.Добавить();
		НовСтрХранилище.Отпечаток = Отпечаток16ИзBase64(ОтпечатокСертификата, ДвДанные);
		НовСтрХранилище.Субъект = РазобратьСтрокуСубъекта(Крипт.Субъект);
		НовСтрХранилище.СерийныйНомер = Крипт.СерийныйНомер;
		НовСтрХранилище.Поставщик = Крипт.Поставщик;
		НовСтрХранилище.ДействителенС = Крипт.ДействителенС;
		НовСтрХранилище.ДействителенПо = Крипт.ДействителенДо;
		НовСтрХранилище.Наименование = Крипт.ИмяСертификата;
		
	КонецЦикла;
	
	Пока Крипт.ПолучитьСледующийСертификат("AddressBook") Цикл
		
		ОтпечатокСертификата = Крипт.Отпечаток;
		
		НовСтрХранилище = ТаблицаСертификатовСтрахователя.Добавить();
		НовСтрХранилище.Отпечаток = Отпечаток16ИзBase64(ОтпечатокСертификата, ДвДанные);
		НовСтрХранилище.Субъект = РазобратьСтрокуСубъекта(Крипт.Субъект);
		НовСтрХранилище.СерийныйНомер = Крипт.СерийныйНомер;
		НовСтрХранилище.Поставщик = Крипт.Поставщик;
		НовСтрХранилище.ДействителенС = Крипт.ДействителенС;
		НовСтрХранилище.ДействителенПо = Крипт.ДействителенДо;
		НовСтрХранилище.Наименование = Крипт.ИмяСертификата;
		
	КонецЦикла;
	
	
	Возврат ТаблицаСертификатовСтрахователя;
	
КонецФункции

Функция СертификатыГодятсяДляПодписания(СертификатСтрахователя, СертификатФСС)
	Сертификаты = Новый СписокЗначений();
	Сертификаты.Добавить(СертификатСтрахователя, "Сертификат страхователя");
	Сертификаты.Добавить(СертификатФСС, "Сертификат ФСС");
	
	ТекДата = ТекущаяДата();
	ПризнакОшибки = Ложь;
	
	Для каждого Сертификат Из Сертификаты Цикл
		Серт 	= Сертификат.Значение;
		Предст 	= Сертификат.Представление;

		Если ТекДата < Серт.ДействителенС Тогда
			ПризнакОшибки = Истина;
			Сообщить(Предст + ": " + "период действия сертификата еще не наступил (" + Серт.ДействителенС + ")!", СтатусСообщения.Важное);
		КонецЕсли;
		
		Если ТекДата > Серт.ДействителенПо Тогда
			ПризнакОшибки = Истина;
			Сообщить(Предст + ": " + "период действия сертификата истек (" + Серт.ДействителенПо + ")!", СтатусСообщения.Важное);	
		КонецЕсли;
	КонецЦикла; 
		
    Возврат (НЕ ПризнакОшибки);
КонецФункции

Функция ВыгрузитьДляОтправкиПакет()
	
	// инициализируем внешнюю компоненту
	Если НЕ ИнициализироватьВнешнююКомпоненту() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// сохраняем при необходимости
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// извлекаем регистрационный номер страхователя и код органа ФСС из данных программы
	КодыОтчета=  ПолучитьКодыСтрахователяИОрганаФСС();
	ОргФССКод = ?(ЗначениеЗаполнено(КодыОтчета.ДополнительныйКод), СокрЛП(КодыОтчета.ДополнительныйКод), СокрЛП(КодыОтчета.ОргФССКод));
	КодОрганаФСС = СокрЛП(КодыОтчета.КодОрганаФСС);
	Если НЕ ЗначениеЗаполнено(ОргФССКод) Тогда
		Сообщить("Не задан регистрационный номер страхователя.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КодОрганаФСС) Тогда
		Сообщить("Не задан код органа ФСС.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	
	// инициализируем объект для работы с криптографией
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// запрашиваем параметры формирования пакета
	ПараметрыФормированияПакета = ПолучитьСертификатыИзНастроекОрганизации();
	
	Если НЕ ЗначениеЗаполнено(ПараметрыФормированияПакета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СертификатСтрахователя = ПараметрыФормированияПакета.СертификатСтрахователя;
	СертификатФСС = ПараметрыФормированияПакета.СертификатФСС;
	
	//проверяем коды
	Если НЕ СертификатыГодятсяДляПодписания(СертификатСтрахователя, СертификатФСС) Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	// формируем файл выгрузки
	ДокВыгрузки = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	ПолноеИмяФайлаВыгрузки = ДокВыгрузки.ПолучитьФорму().ВыгрузитьОтчет(мСохраненныйДок.Ссылка, Ложь);
	Если ПолноеИмяФайлаВыгрузки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектФайлВыгрузки = Новый Файл(ПолноеИмяФайлаВыгрузки);
	ВременныйКаталог = ОбъектФайлВыгрузки.Путь;
	ИмяФайлаВыгрузкиБезРасширения = ОбъектФайлВыгрузки.ИмяБезРасширения;
	
	// подписываем и шифруем
	Состояние("Подписание и шифрование файла выгрузки ...");
	КороткоеИмяЗашифрованногоПакета = ИмяФайлаВыгрузкиБезРасширения + ".ef4";
	ЗашифрованныйПакет = ВременныйКаталог + КороткоеИмяЗашифрованногоПакета;
	Попытка
		Крипт.PKCS7ПодписатьСДаннымиИЗашифровать(ПолноеИмяФайлаВыгрузки, СертификатСтрахователя.СерийныйНомер, СертификатСтрахователя.Поставщик, СертификатФСС.СерийныйНомер, СертификатФСС.Поставщик, ЗашифрованныйПакет);
	Исключение
		УдалитьВременныйФайл(ВременныйКаталог);
		Сообщить("Не удалось подписать и зашифровать файл выгрузки:
				|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ЗашифрованныйПакет;
	
КонецФункции

Процедура ВызватьФормуАвтозапроса()
	ФормаАвтозапроса = ТекущаяОтправка.ПолучитьФорму("ФормаАвтозапроса", , Новый УникальныйИдентификатор);
	ФормаАвтозапроса.ОтчетСсылка = мСохраненныйДок.Ссылка;
	ФормаАвтозапроса.Открыть();
КонецПроцедуры

Процедура ОбновитьСогласноТекущейОтправки()
	// определение текущей отправки на сервер ФСС
	Если мСохраненныйДок <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтправкиФСС.Ссылка
		|ИЗ
		|	Справочник.ОтправкиФСС КАК ОтправкиФСС
		|ГДЕ
		|	ОтправкиФСС.ОтчетСсылка = &ЭтотОтчет
		|	И ОтправкиФСС.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтправкиФСС.ДатаОтправки УБЫВ";
		Запрос.Параметры.Вставить("ЭтотОтчет", мСохраненныйДок.Ссылка);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ТекущаяОтправка = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	ОбновитьСтатусОтправкиВРегламентированномОтчете();
	ОбновитьМенюОтправки();
КонецПроцедуры

Процедура ОбновитьМенюОтправки()
	Если ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Найти("ОтправкаФСС") = Неопределено Тогда
		//меню отсутствует полностью
		Возврат;
	КонецЕсли;
	
	КнопкиПодменюОтправкаФСС = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ОтправкаФСС.Кнопки;
	флЕстьКнопкаПолучитьРезультат = (КнопкиПодменюОтправкаФСС.Найти("ПолучитьРезультат") <> Неопределено);
	флЕстьКнопкаПоказатьРезультат = (КнопкиПодменюОтправкаФСС.Найти("ПоказатьРезультат") <> Неопределено);
	флТекущаяОтправкаОпределена = ЗначениеЗаполнено(ТекущаяОтправка);
	
	//кнопка получить результат
	Если флЕстьКнопкаПолучитьРезультат И 
		(НЕ флТекущаяОтправкаОпределена ИЛИ (флТекущаяОтправкаОпределена И ТекущаяОтправка.СтатусОтправки <> Перечисления.СтатусыОтправки.Отправлен)) Тогда
		//удаляем кнопку
		ИндексКнопки = КнопкиПодменюОтправкаФСС.Индекс(КнопкиПодменюОтправкаФСС.ПолучитьРезультат);
		КнопкиПодменюОтправкаФСС.Удалить(ИндексКнопки);
	ИначеЕсли НЕ флЕстьКнопкаПолучитьРезультат И флТекущаяОтправкаОпределена И ТекущаяОтправка.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен Тогда
		//добавляем кнопку
		КнопкиПодменюОтправкаФСС.Вставить(1, "ПолучитьРезультат", ТипКнопкиКоманднойПанели.Действие, 
														   "Получить результат отправки", Новый Действие("КоманднаяПанельФормыПолучитьРезультат"));
		// добавляем картинку
		КнопкиПодменюОтправкаФСС.ПолучитьРезультат.Картинка = БиблиотекаКартинок.Обновить;
	КонецЕсли;
	
	//кнопка показать результат
	Если флЕстьКнопкаПоказатьРезультат И 
		(НЕ флТекущаяОтправкаОпределена ИЛИ (флТекущаяОтправкаОпределена И ТекущаяОтправка.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен)) Тогда
		//удаляем кнопку
		ИндексКнопки = КнопкиПодменюОтправкаФСС.Индекс(КнопкиПодменюОтправкаФСС.ПоказатьРезультат);
		КнопкиПодменюОтправкаФСС.Удалить(ИндексКнопки);
	ИначеЕсли НЕ флЕстьКнопкаПоказатьРезультат И флТекущаяОтправкаОпределена И ТекущаяОтправка.СтатусОтправки <> Перечисления.СтатусыОтправки.Отправлен Тогда
		//добавляем кнопку
		КнопкиПодменюОтправкаФСС.Вставить(1, "ПоказатьРезультат", ТипКнопкиКоманднойПанели.Действие, 
														   "Показать результат отправки", Новый Действие("КоманднаяПанельФормыПоказатьРезультат"));
		// добавляем картинку
		Если ТекущаяОтправка.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
			КнопкиПодменюОтправкаФСС.ПоказатьРезультат.Картинка = БиблиотекаКартинок.РегламентированныйОтчетНеПринят;
		ИначеЕсли ТекущаяОтправка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
			КнопкиПодменюОтправкаФСС.ПоказатьРезультат.Картинка = БиблиотекаКартинок.РегламентированныйОтчетСдан;	
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСоставПоказателей = "СоставПоказателей2010Кв1";
мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме";

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

ОписаниеТиповЧисло  = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);
ОписаниеТиповЧисло5 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5);

ОписаниеТиповЧислоЧ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5, 0);

ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
//мИдГруппы1  = "П0000300140";
//мИдГруппы2  = "П0000600140";
//мИдГруппы3  = "П0001100080";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
//КолИсхСтрокИдГруппы1 = 1;
//КолИсхСтрокИдГруппы2 = 1;
//КолИсхСтрокИдГруппы3 = 1;

// структура строк многострочного раздела на странице
//СтруктураГруппы1 = Новый ТаблицаЗначений;
//СтруктураГруппы1.Колонки.Добавить("П000030014001", ОписаниеТиповСтрока254);
//СтруктураГруппы1.Колонки.Добавить("П000030014003", ОписаниеТиповЧислоЧ);
//СтруктураГруппы1.Колонки.Добавить("П000030014004", ОписаниеТиповЧисло);
//СтруктураГруппы1.Колонки.Добавить("П000030014005", ОписаниеТиповЧисло);

//СтруктураГруппы2 = Новый ТаблицаЗначений;
//СтруктураГруппы2.Колонки.Добавить("П000060014001", ОписаниеТиповСтрока254);
//СтруктураГруппы2.Колонки.Добавить("П000060014003", ОписаниеТиповЧислоЧ);
//СтруктураГруппы2.Колонки.Добавить("П000060014004", ОписаниеТиповЧисло);
//СтруктураГруппы2.Колонки.Добавить("П000060014005", ОписаниеТиповЧисло);

//СтруктураГруппы3 = Новый ТаблицаЗначений;
//СтруктураГруппы3.Колонки.Добавить("П000110008001", ОписаниеТиповСтрока254);
//СтруктураГруппы3.Колонки.Добавить("П000110008003", ОписаниеТиповЧислоЧ);
//СтруктураГруппы3.Колонки.Добавить("П000110008004", ОписаниеТиповЧисло);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
//мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
//мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
//мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
//мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);
//мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы3, КолИсхСтрокИдГруппы3);

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

ТаблицаСтраницыРаздел21 = ТаблицаСтраницыРаздела.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРаздел21.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

мСтруктураМногостраничныхРазделов.Вставить("Раздел2_1", ТаблицаСтраницыРаздел21);

ТаблицаСтраницыРаздел22 = ТаблицаСтраницыРаздела.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРаздел22.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

мСтруктураМногостраничныхРазделов.Вставить("Раздел2_2", ТаблицаСтраницыРаздел22);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "18/03/2010";

// Код отчета условный
мКодОтчета   = "1159999";

мПечатныеФормы = Новый СписокЗначений;

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 0.1", Истина);
