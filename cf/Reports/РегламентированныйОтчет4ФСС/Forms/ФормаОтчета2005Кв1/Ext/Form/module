////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мРаздел1_1;
Перем мРаздел1_2;
Перем мРаздел2_1;
Перем мРаздел2_2;
Перем мРаздел2_3;
Перем мРаздел2_4;
Перем мРаздел3_1;
Перем мРаздел3_2;

// Хранят сведения о должностных лицах
Перем мИННДиректор;
Перем мИННБухгалтер;
Перем мИННФизЛицо;
Перем мИННУпПредставитель;
Перем мОргИННУпПред;

// Хранят имена многострочных разделов
Перем мИдГруппы1;
Перем мИдГруппы2;
Перем мИдГруппы3;
//Перем мИдГруппы4;
//Перем мИдГруппы5;
//Перем мИдГруппы6;
//Перем мИдГруппы7;

Перем мВПрограммеИзмененаОрганизация;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит версию формы отчета
Перем мВерсияФормы Экспорт;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// Переменные хранят параметры дополнительных листов
Перем НомТекГруппы;

// Служебнны переменные, для хранения пределов ставок
Перем мСт_100000;
Перем мСт_300000;

Перем мИННЮЛ;
Перем мКППЮЛ;

Перем мПечатныеФормы Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;

Перем мДокументВосстановлен;

Перем мАдресвФорматеДляВыгрузки;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_4";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел3_1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел3_2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы)
	Перем ТекТабличноеПоле;

	Если ИдГруппы = мИдГруппы1 Тогда
	// ИЛИ ИдГруппы = мИдГруппы2 Тогда

		ТекТабличноеПоле = мРаздел1_2;
	ИначеЕсли ИдГруппы = мИдГруппы2 Тогда
		ТекТабличноеПоле = мРаздел2_2;

	ИначеЕсли ИдГруппы = мИдГруппы3 Тогда
		ТекТабличноеПоле = мРаздел3_2;

	КонецЕсли;

	//Иначе
	//Если ИдГруппы = мИдГруппы3
	//	  ИЛИ ИдГруппы = мИдГруппы4 Тогда

	//	ТекТабличноеПоле = мРаздел2_2;

	//КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()
	Перем ИмяГруппы;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если ИмяТекущейСтраницыПанели = "Раздел1_2" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел1_2.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_2" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_2.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_3" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_3.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_4" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_4.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3_2" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел3_2.ТекущаяОбласть);
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		//Если ТекущаяОбласть.Защита Тогда
		//	Если СписокПоказателейВнутрСвязи.НайтиПоЗначению(ТекущаяОбласть.Имя) = Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаТитульный" Тогда
		СтруктураДанныхПоля.Вставить("ОргЮрАдрес", мАдресвФорматеДляВыгрузки);
	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;
			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаСтраницРаздела) Тогда
				// Раздел является многостраничным. Определим активную страницу раздела:
				СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

				Если СтрТаблицаСтраницы <> Неопределено Тогда
					НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
				КонецЕсли;
			КонецЕсли;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2005Кв1");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2005Кв1");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		//Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
		//	Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
		//		мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
		//		ЕстьИзменения = Истина;
		//	КонецЕсли;

		//КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;
	Перем Комментарий;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = Ложь;
		
		Если ВариантЗаполнения = 4 Тогда

			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;

		Иначе

			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;

		КонецЕсли;

		// установим цвет ячейки
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);

		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			//ЗначениеВКвадратах = ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяПоказателя);
			ЗначениеВКвадратах = Ложь;

			Если ВариантЗаполнения = 4 Тогда
				//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

			Иначе

					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;

			КонецЕсли;

				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов() Экспорт
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];

			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки    = Колонка.Имя;
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейки.СодержитЗначение Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина");

	// Период на титульном листе
	мТитульный.Области.ПериодОтчета.Значение = СтрПериодОтчета;
	
	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

	Номер1МесяцаКвартала = НомерКвартала * 3 - 2;
	Номер2МесяцаКвартала = НомерКвартала * 3 - 1;
	Номер3МесяцаКвартала = НомерКвартала * 3;
	
	Название1МесяцаКвартала = Формат(Дата(НомерГода, Номер1МесяцаКвартала, 1), "ДФ=ММММ");
	Название2МесяцаКвартала = Формат(Дата(НомерГода, Номер2МесяцаКвартала, 1), "ДФ=ММММ");
	Название3МесяцаКвартала = Формат(Дата(НомерГода, Номер3МесяцаКвартала, 1), "ДФ=ММММ");
	
	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке3.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке3.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке3.Значение = Название3МесяцаКвартала;

	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке4.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке4.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке4.Значение = Название3МесяцаКвартала;

	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке5.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке5.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке5.Значение = Название3МесяцаКвартала;
	
	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке6.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке6.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке6.Значение = Название3МесяцаКвартала;
	
	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке7.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке7.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке7.Значение = Название3МесяцаКвартала;

	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке15.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке15.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке15.Значение = Название3МесяцаКвартала;

	мРаздел3_1.Области.Название1МесяцаКвартала.Значение = Название1МесяцаКвартала;
	мРаздел3_1.Области.Название2МесяцаКвартала.Значение = Название2МесяцаКвартала;
	мРаздел3_1.Области.Название3МесяцаКвартала.Значение = Название3МесяцаКвартала;
	
	мРаздел3_1.Области.Название1МесяцаКварталаВСтроке2.Значение = Название1МесяцаКвартала;
	мРаздел3_1.Области.Название2МесяцаКварталаВСтроке2.Значение = Название2МесяцаКвартала;
	мРаздел3_1.Области.Название3МесяцаКварталаВСтроке2.Значение = Название3МесяцаКвартала;

	мРаздел3_1.Области.Название1МесяцаКварталаВСтроке10.Значение = Название1МесяцаКвартала;
	мРаздел3_1.Области.Название2МесяцаКварталаВСтроке10.Значение = Название2МесяцаКвартала;
	мРаздел3_1.Области.Название3МесяцаКварталаВСтроке10.Значение = Название3МесяцаКвартала;
	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом даты представления отчета в соответствующие
// области табличного документа.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	мТитульный.Области.ДатаВысылкиОтчета.Значение = Формат(ДатаПодписи, "ДФ=дд.ММ.гггг");
	мРаздел3_2.области.ДатаОтчета.Значение = Формат(ДатаПодписи, "ДФ=дд.ММ.гггг");

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Получить ПолучитьРазмерСтраховогоТарифа
// Нельзя вызывать без проверки на пустую организацию
//
// возвращает размер страхового тарифа на дату конца отчетного периода
//
Функция ПолучитьРазмерСтраховогоТарифа()

	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "СтраховойТариф");
	СтраховойТариф = Неопределено;
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, Сведения);
	ОргСведения.Свойство("СтраховойТариф", СтраховойТариф);
	Возврат СтраховойТариф;

КонецФункции // ПолучитьРазмерСтраховогоТарифа

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Попытка
		
		Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
			Возврат
		КонецЕсли;
		
		ПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
		
		// Составляем список данных, необходимых для вывода в декларацию
		Сведения = Новый СписокЗначений;
		
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			Сведения.Добавить("", "ИННЮЛ"); // ИНН
			Сведения.Добавить("", "КППЮЛ"); // КПП
			
			Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 
			
			//Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
			//Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
			
			Сведения.Добавить("", "ОГРН"); // ОГРН
			Сведения.Добавить("", "ОКАТО"); // ОКАТО
			Сведения.Добавить("", "ОКПО");
			Сведения.Добавить("", "ОКВЭД");
			Сведения.Добавить("", "ОснВидДеят");
			Сведения.Добавить("", "ОКОПФ");
			Сведения.Добавить("", "ОКФС");
			Сведения.Добавить("", "ФормСобств");
			Сведения.Добавить("", "РегистрационныйНомерФСС");
			Сведения.Добавить("", "КодОКОНХ");
			//В поле "Адрес" указывается:
			//- для организации - место ее государственной регистрации (место нахождения);
			//- для обособленного подразделения - место его нахождения;
			//- для физического лица - полный адрес постоянного места жительства физического лица на основании документа, удостоверяющего его личность, либо иного документа, подтверждающего адрес постоянного места жительства.
			
			Если ПБОЮЛ Тогда
				Сведения.Добавить("", "АдрПрописки");
			Иначе
				Сведения.Добавить("", "АдрЮР");
			КонецЕсли;
			
		КонецЕсли;
		
		Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
		Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
		Сведения.Добавить("", "ФИО"); // ФИО предпринимателя
		Сведения.Добавить("", "ФИОИсп"); // ФИО исполнителя
		Сведения.Добавить("", "ТелИсп");
		Сведения.Добавить("", "ТелОрганизации");
		
		
		// Теперь получаем данные из глобальной общей функции
		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
		
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			// Инициализируем переменные
			ИННЮЛ = ""; // ИНН
			КППЮЛ = ""; // КПП
			
			НаимЮЛПол = ""; // Полное наименование 
			
			ОГРН = ""; // ОГРН
			ОКАТО = ""; // ОКАТО
			ОКПО = "";
			ОКВЭД = "";
			
			АдрЮР = "";
			
			ОснВидДеят = "";
			
			ФормСобств = "";
			
			ОКОПФ = "";
			
			ОКФС = "";
			
			РегистрационныйНомерФСС = "";
			КодОКОНХ = "";
		КонецЕсли;
		
		ФИОРук = ""; // ФИО руководителя
		ФИОБух = ""; // ФИО бухгалтера
		ФИО = "";
		ФИОИсп = "";
		ТелИсп = "";
		ТелОрганизации = "";
		
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			// Получаем данные
			ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
			ОргСведения.Свойство("КППЮЛ", КППЮЛ);
			ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
			ОргСведения.Свойство("ОГРН", ОГРН);
			ОргСведения.Свойство("ОКАТО", ОКАТО);
			ОргСведения.Свойство("ОКПО", ОКПО);
			ОргСведения.Свойство("ОКВЭД", ОКВЭД);
			ОргСведения.Свойство("ОКОПФ", ОКОПФ);
			ОргСведения.Свойство("ОКФС", ОКФС);
			ОргСведения.Свойство("ОснВидДеят", ОснВидДеят);
			// ОргСведения.Свойство("АдрЮР", АдрЮР);
			ОргСведения.Свойство("ФормСобств", ФормСобств);
			ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
			ОргСведения.Свойство("КодОКОНХ", КодОКОНХ);
			
			Если ПБОЮЛ Тогда
				ОргСведения.Свойство("АдрПрописки", АдрЮР);
			Иначе
				ОргСведения.Свойство("АдрЮР", АдрЮР);
			КонецЕсли;
			
		КонецЕсли;
		
		ОргСведения.Свойство("ФИОРук", ФИОРук);
		ОргСведения.Свойство("ФИОБух", ФИОБух);
		ОргСведения.Свойство("ФИО", ФИО);
		ОргСведения.Свойство("ФИОИсп", ФИОИсп);
		ОргСведения.Свойство("ТелИсп", ТелИсп);
		ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
		
		Если ПБОЮЛ Тогда
			НаимЮлПол = ФИО;
			ФИОРук = "";
			ФИОБух = "";
			ФИОИсп = "";
			ТелИсп = "";
		КонецЕсли;
		
		Если ВПрограммеИзмененаДатаПодписи Тогда
			
			Если НЕ ПБОЮЛ Тогда
				// Обновим только то, что зависит от даты подписи и выйдем
				мРаздел3_2.Области.ОргДиректор.Значение = ФИОРук;
				мРаздел3_2.Области.ОргБухгалтер.Значение = ФИОБух;
			Иначе
				мТитульный.Области.ОргНазв.Значение = ФИО;
			КонецЕсли;
			
			ФИОИсп = ?(ПустаяСтрока(ФИОИсп), ФИОБух, ФИОИсп);
			ТелИсп = ?(ПустаяСтрока(ТелИсп), ТелОрганизации, ТелИсп);
			ФИОИсп = ФИОИсп + ?(НЕ ПустаяСтрока(ФИОИсп), ?(НЕ ПустаяСтрока(ТелИсп), " " + ТелИсп, ""), "");
			мРаздел3_2.Области.ОргИсполнитель.Значение = ФИОИсп;
			
			Возврат;
			
		КонецЕсли;
		
		// Производим операции связанные с текущей формой отчетности
		
		// Заполняем ИНН на всех листах декларации
		Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
			ИННЮЛ = "";
		КонецЕсли;
		
		мИННЮЛ = ИННЮЛ;
		
		Если РегламентированнаяОтчетность.ПустоеЗначение(КППЮЛ) Тогда
			КППЮЛ = "";
		КонецЕсли;
		
		мКППЮЛ = КППЮЛ;
		мТитульный.Области.ИНН.Значение = мИННЮЛ;
		
		Если НЕ ПБОЮЛ Тогда
			мТитульный.Области.КПП.Значение = мКППЮЛ;
		Иначе
			мКППЮЛ = "";
			мТитульный.Области.КПП.Значение = мКППЮЛ;
		КонецЕсли;
		
		// Работаем с названием ЮЛ
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргНазв.Значение)) Тогда
			// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
			мТитульный.Области.ОргНазв.Значение = НаимЮЛПол;
		КонецЕсли;
		
		// Работаем с ФИО руководителя
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодОКПО.Значение)) Тогда
			Если ПБОЮЛ Тогда
				мТитульный.Области.ОргКодОКПО.Значение  = "";
			Иначе
				мТитульный.Области.ОргКодОКПО.Значение  = ОКПО;
			КонецЕсли;
		КонецЕсли;
		
		// Работаем с ИНН руководителя
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодОГРН.Значение)) Тогда
			мТитульный.Области.ОргКодОГРН.Значение = ОГРН;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодОКВЭД.Значение)) Тогда
			мТитульный.Области.ОргКодОКВЭД.Значение = ОКВЭД;
		КонецЕсли;
		
		// Работаем с ФИО Бухгалтера
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел3_2.Области.ОргБухгалтер.Значение)) Тогда
			мРаздел3_2.Области.ОргБухгалтер.Значение = ФИОБух;
		КонецЕсли;
		
		// Работаем с ФИО руководителя организации
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел3_2.Области.ОргДиректор.Значение)) Тогда
			мРаздел3_2.Области.ОргДиректор.Значение = ФИОРук;
		КонецЕсли;
		
		// Работаем с ФИО исполнителя
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел3_2.Области.ОргИсполнитель.Значение)) Тогда
			ФИОИсп = ?(ПустаяСтрока(ФИОИсп), ФИОБух, ФИОИсп);
			ТелИсп = ?(ПустаяСтрока(ТелИсп), ТелОрганизации, ТелИсп);
			ФИОИсп = ФИОИсп + ?(НЕ ПустаяСтрока(ФИОИсп), ?(НЕ ПустаяСтрока(ТелИсп), " " + ТелИсп, ""), "");
			мРаздел3_2.Области.ОргИсполнитель.Значение = ФИОИсп;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргОтрасль.Значение)) Тогда
			мТитульный.Области.ОргОтрасль.Значение = ОснВидДеят;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргЮрАдрес.Значение)) Тогда
			
			Если (НЕ РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(АдрЮР, ",", ""))) Тогда
				
				мТитульный.Области.ОргЮрАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(АдрЮР);
				мАдресвФорматеДляВыгрузки = АдрЮр;
			Иначе
				мТитульный.Области.ОргЮрАдрес.Значение = "";
				мАдресвФорматеДляВыгрузки = "";
			КонецЕсли;
			
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодКОПФ.Значение)) Тогда
			мТитульный.Области.ОргКодКОПФ.Значение = ОКОПФ;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодКФС.Значение)) Тогда
			мТитульный.Области.ОргКодКФС.Значение = ОКФС;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргФорма.Значение)) Тогда
			мТитульный.Области.ОргФорма.Значение = ФормСобств;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргФССКод.Значение)) Тогда
			мТитульный.Области.ОргФССКод.Значение = РегистрационныйНомерФСС;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодОКОНХ.Значение)) Тогда
			мТитульный.Области.ОргКодОКОНХ.Значение = КодОКОНХ;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (РегламентированнаяОтчетность.ПустоеЗначение(мРаздел3_1.Области.П000090001006.Значение)) Тогда
			мРаздел3_1.Области.П000090001006.Значение = ПолучитьРазмерСтраховогоТарифа();
			Расчет("Раздел3_1");
		КонецЕсли;
		
	Исключение
		
		Сообщить("У пользователя недостаточно прав для получения сведений, необходимых для заполнения титульного листа.", СтатусСообщения.ОченьВажное);
		
	КонецПопытки;
	
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	ИзменитьТаблицуВариантовЗаполнения (НЕ ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение);
	
КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

//Функция ПолучитьКоличествоСтраницРаздела(ИмяТекущейСтраницыПанели)
// Возвращает кол-во страниц для любых многостраничных разделов
// если лист без доп. страниц, Тогда 1
//
Функция ПолучитьКоличествоСтраницРаздела(ИмяТекущейСтраницыПанели)
Перем ТаблицаСтраницРаздела;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат 1;
	КонецЕсли;

	КоличествоСтраниц    = Макс(ТаблицаСтраницРаздела.Количество(), 1);
	Возврат КоличествоСтраниц;
КонецФункции //Функция ПолучитьКоличествоСтраницРаздела(ИмяТекущейСтраницыПанели)

//Процедура ИзменитьТаблицуВариантовЗаполнения
// Изменяет всем признак корректировки ячеей на 1
// если 1 - то вернем всё к ЭТАЛОНу
// если 0 - то вернем все ячейки к желтому цвету, доступных для редактирования
//
// Логика процедуры изменена: процедура работает только с показателями, с признаком
// автозаполнения равным 4.
// Для использования в декларациях необходимо соблюсти следующие требования:
// 1. Процедуры получения таблицы вариантов заполнения либо не должно быть либо она должна использовать
// только вызов роФУНКЦИИ получения таблицы, не более.
// 2. УстановитьЦветФона - должна быть объявленной как Экспортная.
// 3. Не должно быть процедуры ПолучитьКоличествоСтраницРаздела
//
Процедура ИзменитьТаблицуВариантовЗаполнения(ПолныйРучнойВвод = Ложь)

	ПереборЗнач = мДеревоСтраницОтчета.Строки.Количество();

	Пока ПереборЗнач > 0 цикл
			ИмяСтраницы = мДеревоСтраницОтчета.Строки[ПереборЗнач-1].ИмяСтраницы;
			ПереборЗнач = ПереборЗнач-1;
			// а если это многостраничный раздел?
			КолСтрВРазделе = ПолучитьКоличествоСтраницРаздела(ИмяСтраницы); // кол-во страниц в разделе
			// Всегда получим актуальную таблицу заполнения. Не эталонную.
			ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницы);

			Если ТаблицаВариантыЗаполнения = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ПолныйРучнойВвод Тогда
				// Если раздел многостраничный, то нужно насквозь все обнулять !!!

				Если КолСтрВРазделе = 1 Тогда

					Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
						Если Строка.ВариантЗаполнения = 4 Тогда
							Строка.ВариантЗаполнения = 0; // полный ручной ввод
						КонецЕсли;
					КонецЦикла; // Для Каждого Строка Из

					МассивВариантовЗаполненияСтраниц = Новый Массив;
					МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
					мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

					УстановитьЦветФонаЯчейки(,,ИмяСтраницы);
				КонецЕсли; // КолСтрВРазделе = 1 Иначе // если многостраничный раздел
			
				Если КолСтрВРазделе >= 2 Тогда

					Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
						Продолжить;
					КонецЕсли;

					Для Инд = 0 по МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
						Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд] Цикл
							Если Строка.ВариантЗаполнения = 4 Тогда
								Строка.ВариантЗаполнения = 0; // полный ручной ввод
							КонецЕсли; // ВариантЗаполнения <> 0 
						КонецЦикла; // Для каждого
					КонецЦикла; // Для
					УстановитьЦветФонаЯчейки(,,ИмяСтраницы); // текущую обновим
				КонецЕсли; // КолСтрВРазделе >= 2

			ИначеЕсли ПолныйРучнойВвод Тогда

				// Всё в эталонном виде
				Если КолСтрВРазделе = 1 Тогда
					Для Каждого Стр Из ТаблицаВариантыЗаполнения Цикл
						Если Стр.ВариантЗаполнения = 0 Тогда
							Стр.ВариантЗаполнения = 4
						КонецЕсли;
					КонецЦикла;

					МассивВариантовЗаполненияСтраниц = Новый Массив;
					МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
					мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

					УстановитьЦветФонаЯчейки(,,ИмяСтраницы);

				КонецЕсли; // если одна страница в разделе

				Если КолСтрВРазделе >= 2 Тогда
					Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
						Продолжить;
					КонецЕсли;

					Для Инд = 0 по МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
						// МассивВариантовЗаполненияСтраниц1[Инд].Добавить(ТаблицаВариантыЗаполнения);
						Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд] Цикл
							Если Строка.ВариантЗаполнения = 0 Тогда
								//НайденнаяСтрокаК = ТаблицаВариантыЗаполнения.Найти(Строка.КодПоказателя, "КодПоказателя");
								Строка.ВариантЗаполнения = 4; // полный автоматический ввод
							КонецЕсли; // ВариантЗаполнения <> 0 
						КонецЦикла; // Для каждого

					КонецЦикла; // Для

					// мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц1);
					УстановитьЦветФонаЯчейки(,,ИмяСтраницы); // текущую обновим

				КонецЕсли; // если более 1 страница в разделе

			КонецЕсли;

	КонецЦикла;

КонецПроцедуры // Процедура ИзменитьТаблицуВариантовЗаполнения(ПолныйРучнойВвод = 0)

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);

				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтр];
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
				Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
			Иначе
				Дельта = 0;
			КонецЕсли;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати

	Если СтруктураПараметровЛиста.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПараметровЛиста);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	ПечатнаяФорма = Новый ТабличныйДокумент();

	ТабличноеПоле = ЭлементыФормы[ИмяТабличногоПоля];

	Если ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть();
	Иначе
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть(ИмяОбластиТаблПоля);
	КонецЕсли;

	ПечатнаяФорма.Вывести(ОбластьПечати);

	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;

	//Если ВидПечати = "ПоказатьБланк" Тогда
	//	ПечатнаяФорма.Показать(СокрП(Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
	//ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
	//	ПечатнаяФорма.Напечатать();
	//КонецЕсли;
	мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);

КонецПроцедуры

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	Перем Комментарий;

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ТекущаяЯчейка) = Тип("РисунокТабличногоДокумента") Тогда
		// Пропускаем рисунки табличного документа
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.СодержитЗначение <> Истина Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	Если ВариантЗаполнения = 1 ИЛИ 
		ВариантЗаполнения = 2 ИЛИ
		ВариантЗаполнения = 3 Тогда

		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
		Дельта            = НайденнаяСтрока.Дельта;
		Комментарий       = НайденнаяСтрока.Комментарий;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;	
		ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

	ИначеЕсли ВариантЗаполнения = 0 Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
	КонецЕсли;

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий1;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	ОргИсполнитель = мРаздел3_2.Области.ОргИсполнитель.Значение;
	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		мРаздел3_2.Области.ОргИсполнитель.Значение = ОргИсполнитель;
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = СтрокаУровня2.ВыводНаПечать;

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = СтрокаУровня3.ВыводНаПечать;
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						//Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						//Иначе
						//	// выводим на печать все созданные страницы многостраничного раздела
						//	СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
						//	ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						//КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				//Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				//Иначе
				//	// выводим на печать все созданные страницы многостраничного раздела
				//	СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
				//	ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				//КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		//Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		//Иначе
		//	// выводим на печать все созданные страницы многостраничного раздела
		//	СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
		//	ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		//КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	
	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	КонецЕсли;

КонецПроцедуры // Печать()

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт 

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// обновляем структуру многостраничных разделов
	//ОбновитьСтруктуруМногостраничныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение = Автозаполнение;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	мАдресвФорматеДляВыгрузки = мТитульный.Области.ОргЮрАдрес.Значение;
	мТитульный.Области.ОргЮрАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузки);

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	УстановитьФорматВывода();
	//Расчет();

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;
	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт
	//Перем СтруктураГруппы1;
	//Перем СтруктураГруппы2;
	Перем СтруктураГруппы3;
	Перем СтруктураГруппы4;

	Если (ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1_1" Тогда
		// РАЗДЕЛ I

	ОП000020001003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020001003.Значение);
	ОП000020002003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020002003.Значение);
	ОП000020003401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020003401.Значение);
	ОП000020004401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020004401.Значение);
	ОП000020005401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020005401.Значение);
	ОП000020006401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020006401.Значение);
	ОП000020007401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020007401.Значение);
	ОП000020003501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020003501.Значение);
	ОП000020004501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020004501.Значение);
	ОП000020005501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020005501.Значение);
	ОП000020006501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020006501.Значение);
	ОП000020007501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020007501.Значение);
	ОП000020003601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020003601.Значение);
	ОП000020004601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020004601.Значение);
	ОП000020005601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020005601.Значение);
	ОП000020006601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020006601.Значение);
	ОП000020007601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020007601.Значение);

	ОП000020013003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020013003.Значение);
	ОП000020014003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020014003.Значение);

	ОП000020015401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020015401.Значение);
	ОП000020016403 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020016403.Значение);
	ОП000020015501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020015501.Значение);
	ОП000020016503 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020016503.Значение);
	ОП000020015601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020015601.Значение);
	ОП000020016603 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020016603.Значение);
	ОП000020015201 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020015201.Значение);
	ОП000020016203 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020016203.Значение);

	// ТАБЛИЦА 2. Расчеты по единому социальному налогу

	П000020003301 = ОП000020003401 + ОП000020003501 + ОП000020003601;
	П000020004301 = ОП000020004401 + ОП000020004501 + ОП000020004601;
	П000020005301 = ОП000020005401 + ОП000020005501 + ОП000020005601;
	П000020006301 = ОП000020006401 + ОП000020006501 + ОП000020006601;
	П000020007301 = ОП000020007401 + ОП000020007501 + ОП000020007601;

	// Запишем, что посчитали
	мРаздел1_1.Области.П000020003301.Значение = П000020003301;
	мРаздел1_1.Области.П000020004301.Значение = П000020004301;
	мРаздел1_1.Области.П000020005301.Значение = П000020005301;
	мРаздел1_1.Области.П000020006301.Значение = П000020006301;
	мРаздел1_1.Области.П000020007301.Значение = П000020007301;


	П000020003003 = мРаздел1_1.Области.П000020003201.Значение + мРаздел1_1.Области.П000020003301.Значение;
	П000020004003 = мРаздел1_1.Области.П000020004201.Значение + мРаздел1_1.Области.П000020004301.Значение;
	П000020005003 = мРаздел1_1.Области.П000020005201.Значение + мРаздел1_1.Области.П000020005301.Значение;
	П000020006003 = мРаздел1_1.Области.П000020006201.Значение + мРаздел1_1.Области.П000020006301.Значение;
	П000020007003 = мРаздел1_1.Области.П000020007201.Значение + мРаздел1_1.Области.П000020007301.Значение;

	// Запишем, что посчитали
	мРаздел1_1.Области.П000020003003.Значение = П000020003003;
	мРаздел1_1.Области.П000020004003.Значение = П000020004003;
	мРаздел1_1.Области.П000020005003.Значение = П000020005003;
	мРаздел1_1.Области.П000020006003.Значение = П000020006003;
	мРаздел1_1.Области.П000020007003.Значение = П000020007003;


	П000020008003 = ОП000020001003 + ОП000020002003 + П000020003003 + П000020004003 +
	                 П000020005003 +  П000020006003 + П000020007003;
	мРаздел1_1.Области.П000020008003.Значение = П000020008003;

	П000020012003 = ОП000020013003 + ОП000020014003;
	мРаздел1_1.Области.П000020012003.Значение = П000020012003;

	П000020015301 = ОП000020015401 + ОП000020015501 + ОП000020015601;
	П000020016303 = ОП000020016403 + ОП000020016503 + ОП000020016603;
	// Запишем, что посчитали
	мРаздел1_1.Области.П000020015301.Значение = П000020015301;
	мРаздел1_1.Области.П000020016303.Значение = П000020016303;

	П000020015003 = мРаздел1_1.Области.П000020015201.Значение + П000020015301;
	П000020016003 = мРаздел1_1.Области.П000020016203.Значение + П000020016303;
	П000020017003 =  П000020012003 +  П000020015003 + П000020016003;
	// Запишем, что посчиталось
	мРаздел1_1.Области.П000020015003.Значение = П000020015003;
	мРаздел1_1.Области.П000020016003.Значение = П000020016003;
	мРаздел1_1.Области.П000020017003.Значение = П000020017003;

	// строки 10 и 18

	Если П000020017003 > П000020008003 Тогда 
		ЗадолженностьЗаФондомВсего = П000020017003 - П000020008003;
		П000020018003 = 0;
		мРаздел1_1.Области.П000020018003.Значение = П000020018003;
	Иначе
		П000020018003 = П000020008003 - П000020017003;
		ЗадолженностьЗаФондомВсего = 0;
		мРаздел1_1.Области.П000020018003.Значение = П000020018003;
	КонецЕсли;
	
	ОП000020011003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020011003.Значение);
	
	П000020010003 = ЗадолженностьЗаФондомВсего - ОП000020011003;
	мРаздел1_1.Области.П000020010003.Значение = П000020010003;

	ОП000020010003 = ОкруглитьЧислоПоФормату(П000020010003);

	П000020009003 = ОП000020010003 + ОП000020011003;
	мРаздел1_1.Области.П000020009003.Значение = П000020009003;


	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_2" Тогда

		ОП000030001004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030001004.Значение);
		ОП000030002004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030002004.Значение);
		ОП000030003004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030003004.Значение);
		ОП000030004004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030004004.Значение);
		ОП000030005004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030005004.Значение);
		ОП000030006004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030006004.Значение);
		ОП000030007004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030007004.Значение);
		ОП000030008004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030008004.Значение);

		ОП000030001005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030001005.Значение);
		ОП000030002005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030002005.Значение);
		ОП000030003005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030003005.Значение);
		ОП000030005005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030005005.Значение);

		ОП000030010004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030010004.Значение);
		ОП000030011004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030011004.Значение);
		ОП000030012004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030012004.Значение);
		ОП000030013004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030013004.Значение);

		// графа 4
		П000030009004 = ОП000030001004 + ОП000030002004 + ОП000030003004 + ОП000030004004
					  + ОП000030005004 + ОП000030006004 + ОП000030007004 + ОП000030008004;

		//П000030015004 = ОП000030010004 + ОП000030011004 + ОП000030012004 + ОП000030013004 + РасчетСуммМнЧ("П000030014004",1);
		П000030015004 = ОП000030010004 + ОП000030011004 + ОП000030012004 + ОП000030013004;

		П000030016004 = П000030009004 + П000030015004;

		// графа 5
		П000030009005 = ОП000030001005 + ОП000030002005 + ОП000030003005 + ОП000030005005;

		П000030016005 = П000030009005;

	// Запишем, что посчитали
		мРаздел1_2.Области.П000030009004.Значение = П000030009004;
		мРаздел1_2.Области.П000030015004.Значение = П000030015004;
		мРаздел1_2.Области.П000030016004.Значение = П000030016004;
		мРаздел1_2.Области.П000030009005.Значение = П000030009005;
		мРаздел1_2.Области.П000030016005.Значение = П000030016005;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_1" Тогда

		// РАЗДЕЛ II

	ОП000050001003 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000050001003.Значение);
	ОП000050002003 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000050002003.Значение);
	ОП000050005003 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000050005003.Значение);
	ОП000050006003 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000050006003.Значение);
	ОП000050007003 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000050007003.Значение);

	// РАЗДЕЛ II

	// Табл.5 Расчеты по средствам Фонда социального страхования
	П000050003003 = ОП000050001003 + ОП000050002003;
	П000050008003 = ОП000050005003 + ОП000050006003 + ОП000050007003;

	// Запишем, что посчитали
	мРаздел2_1.Области.П000050003003.Значение = П000050003003;
	мРаздел2_1.Области.П000050008003.Значение = П000050008003;

	// строки 4 и 9
	мРаздел2_1.Области.П000050004003.Значение = ?(П000050008003 > П000050003003, П000050008003 - П000050003003, 0);
	мРаздел2_1.Области.П000050009003.Значение = ?(П000050003003 > П000050008003, П000050003003 - П000050008003, 0);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_2" Тогда

		ОП000060001004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060001004.Значение);
		ОП000060002004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060002004.Значение);
		ОП000060003004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060003004.Значение);
		ОП000060004004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060004004.Значение);
		ОП000060005004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060005004.Значение);
		ОП000060006004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060006004.Значение);
		ОП000060007004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060007004.Значение);
		ОП000060008004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060008004.Значение);
		ОП000060001005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060001005.Значение);
		ОП000060002005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060002005.Значение);
		ОП000060003005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060003005.Значение);
		ОП000060005005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060005005.Значение);
		ОП000060010004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060010004.Значение);
		ОП000060011004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060011004.Значение);
		ОП000060012004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060012004.Значение);
		ОП000060013004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060013004.Значение);

		// графа 4
		П000060009004 = ОП000060001004 + ОП000060002004 + ОП000060003004 + ОП000060004004
					  + ОП000060005004 + ОП000060006004 + ОП000060007004 + ОП000060008004;

		//П000060015004 = ОП000060010004 + ОП000060011004 + ОП000060013004 + РасчетСуммМнЧ("П000060013004",1);
		П000060015004 = ОП000060010004 + ОП000060011004 + ОП000060012004 + ОП000060013004;
		
		П000060016004 = П000060009004 + П000060015004;

		// графа 5
		П000060009005 = ОП000060001005 + ОП000060002005 + ОП000060003005 + ОП000060005005;

		П000060016005 = П000060009005;

	// Запишем, то, что посчитали
		мРаздел2_2.Области.П000060009004.Значение = П000060009004;
		мРаздел2_2.Области.П000060015004.Значение = П000060015004;
		мРаздел2_2.Области.П000060016004.Значение = П000060016004;
		мРаздел2_2.Области.П000060009005.Значение = П000060009005;
		мРаздел2_2.Области.П000060016005.Значение = П000060016005;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_3" Тогда

		ОП000070001004 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070001004.Значение);
		ОП000070002004 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070002004.Значение);
		ОП000070003004 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070003004.Значение);

		ОП000070001006 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070001006.Значение);
		ОП000070002006 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070002006.Значение);
		ОП000070003006 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070003006.Значение);

		ОП000070002008 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070002008.Значение);
		ОП000070003008 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070003008.Значение);

		ОП000070001010 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070001010.Значение);
		ОП000070002010 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070002010.Значение);
		ОП000070003010 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070003010.Значение);

		ОП000070001014 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070001014.Значение);
		ОП000070002014 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070002014.Значение);
		ОП000070003014 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070003014.Значение);

		П000070001003 = мРаздел2_3.Области.П000070001003.Значение;
		П000070001005 = мРаздел2_3.Области.П000070001005.Значение;
		П000070001009 = мРаздел2_3.Области.П000070001009.Значение;
		П000070001013 = мРаздел2_3.Области.П000070001013.Значение;

		П000070002003 = мРаздел2_3.Области.П000070002003.Значение;
		П000070002005 = мРаздел2_3.Области.П000070002005.Значение;
		П000070002007 = мРаздел2_3.Области.П000070002007.Значение;
		П000070003007 = мРаздел2_3.Области.П000070003007.Значение;
		П000070002009 = мРаздел2_3.Области.П000070002009.Значение;
		П000070002013 = мРаздел2_3.Области.П000070002013.Значение;

		П000070003003 = мРаздел2_3.Области.П000070003003.Значение;
		П000070003005 = мРаздел2_3.Области.П000070003005.Значение;
		П000070003009 = мРаздел2_3.Области.П000070003009.Значение;
		П000070003013 = мРаздел2_3.Области.П000070003013.Значение;

	    // графа 15 строки 1-6
		П000070001015 = П000070001003 + П000070001005 - П000070001009 - П000070001013;
		П000070002015 = П000070002003 + П000070002005 + П000070002007 - П000070002009 - П000070002013;
		П000070003015 = П000070003003 + П000070003005 + П000070003007 - П000070003009 - П000070003013;

		// Запишем, то, что посчитали
		мРаздел2_3.Области.П000070001015.Значение = П000070001015;
		мРаздел2_3.Области.П000070002015.Значение = П000070002015;
		мРаздел2_3.Области.П000070003015.Значение = П000070003015;


		// графа 16 строки 1-6
		П000070001016 = ОП000070001004 + ОП000070001006 - ОП000070001010 - ОП000070001014;
		П000070002016 = ОП000070002004 + ОП000070002006 + ОП000070002008 - ОП000070002010 - ОП000070002014;
		П000070003016 = ОП000070003004 + ОП000070003006 + ОП000070003008 - ОП000070003010 - ОП000070003014;
		// Запишем, то, что посчитали
		мРаздел2_3.Области.П000070001016.Значение = П000070001016;
		мРаздел2_3.Области.П000070002016.Значение = П000070002016;
		мРаздел2_3.Области.П000070003016.Значение = П000070003016;


		// строка 7 графы 3-16
		мРаздел2_3.Области.П000070004003.Значение =  П000070001003 +  П000070002003 +  П000070003003;
		мРаздел2_3.Области.П000070004004.Значение = ОП000070001004 + ОП000070002004 + ОП000070003004;
		мРаздел2_3.Области.П000070004005.Значение =  П000070001005 +  П000070002005 +  П000070003005;
		мРаздел2_3.Области.П000070004006.Значение = ОП000070001006 + ОП000070002006 + ОП000070003006;
		мРаздел2_3.Области.П000070004007.Значение =  П000070002007 + П000070003007;
		мРаздел2_3.Области.П000070004008.Значение = ОП000070002008 + ОП000070003008;
		мРаздел2_3.Области.П000070004009.Значение =  П000070001009 +  П000070002009 +  П000070003009;
		мРаздел2_3.Области.П000070004010.Значение = ОП000070001010 + ОП000070002010 + ОП000070003010;
		мРаздел2_3.Области.П000070004013.Значение =  П000070001013 +  П000070002013 +  П000070003013;
		мРаздел2_3.Области.П000070004014.Значение = ОП000070001014 + ОП000070002014 + ОП000070003014;
		мРаздел2_3.Области.П000070004015.Значение =  П000070001015 +  П000070002015 +  П000070003015;
		мРаздел2_3.Области.П000070004016.Значение =  П000070001016 +  П000070002016 +  П000070003016;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_4" Тогда

		ОП000080001006    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001006.Значение);
		ОП000080002006    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002006.Значение);
		ОП000080003006    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003006.Значение);
		ОП000080004006    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004006.Значение);
		ОП000080001008    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001008.Значение);
		ОП000080002008    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002008.Значение);
		ОП000080003008    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003008.Значение);
		ОП000080004008    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004008.Значение);
		ОП000080001010    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001010.Значение);
		ОП000080002010    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002010.Значение);
		ОП000080003010    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003010.Значение);
		ОП000080004010    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004010.Значение);
		ОП000080001012    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001012.Значение);
		ОП000080002012    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002012.Значение);
		ОП000080003012    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003012.Значение);
		ОП000080004012    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004012.Значение);
		ОП000080001014    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001014.Значение);
		ОП000080002014    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002014.Значение);
		ОП000080003014    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003014.Значение);
		ОП000080004014    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004014.Значение);

		// Табл.8
		П000080001005 = мРаздел2_4.Области.П000080001005.Значение;
		П000080001007 = мРаздел2_4.Области.П000080001007.Значение;
		П000080001009 = мРаздел2_4.Области.П000080001009.Значение;
		П000080001011 = мРаздел2_4.Области.П000080001011.Значение;
		П000080001013 = мРаздел2_4.Области.П000080001013.Значение;

		П000080002005 = мРаздел2_4.Области.П000080002005.Значение;
		П000080002007 = мРаздел2_4.Области.П000080002007.Значение;
		П000080002009 = мРаздел2_4.Области.П000080002009.Значение;
		П000080002011 = мРаздел2_4.Области.П000080002011.Значение;
		П000080002013 = мРаздел2_4.Области.П000080002013.Значение;

		П000080003005 = мРаздел2_4.Области.П000080003005.Значение;
		П000080003007 = мРаздел2_4.Области.П000080003007.Значение;
		П000080003009 = мРаздел2_4.Области.П000080003009.Значение;
		П000080003011 = мРаздел2_4.Области.П000080003011.Значение;
		П000080003013 = мРаздел2_4.Области.П000080003013.Значение;

		П000080004005 = мРаздел2_4.Области.П000080004005.Значение;
		П000080004007 = мРаздел2_4.Области.П000080004007.Значение;
		П000080004009 = мРаздел2_4.Области.П000080004009.Значение;
		П000080004011 = мРаздел2_4.Области.П000080004011.Значение;
		П000080004013 = мРаздел2_4.Области.П000080004013.Значение;

		// графа 3, строки 1-8
		П000080001003 = П000080001005 + П000080001007 + П000080001009 + П000080001011 + П000080001013;
		П000080002003 = П000080002005 + П000080002007 + П000080002009 + П000080002011 + П000080002013;
		П000080003003 = П000080003005 + П000080003007 + П000080003009 + П000080003011 + П000080003013;
		П000080004003 = П000080004005 + П000080004007 + П000080004009 + П000080004011 + П000080004013;

		// Запишем, что посчитали
		мРаздел2_4.Области.П000080001003.Значение = П000080001003;
		мРаздел2_4.Области.П000080002003.Значение = П000080002003;
		мРаздел2_4.Области.П000080003003.Значение = П000080003003;
		мРаздел2_4.Области.П000080004003.Значение = П000080004003;


		// графа 4, строки 1-8
		П000080001004 = ОП000080001006 + ОП000080001008 + ОП000080001010 + ОП000080001012 + ОП000080001014;
		П000080002004 = ОП000080002006 + ОП000080002008 + ОП000080002010 + ОП000080002012 + ОП000080002014;
		П000080003004 = ОП000080003006 + ОП000080003008 + ОП000080003010 + ОП000080003012 + ОП000080003014;
		П000080004004 = ОП000080004006 + ОП000080004008 + ОП000080004010 + ОП000080004012 + ОП000080004014;

		// Запишем, что посчитали
		мРаздел2_4.Области.П000080001004.Значение = П000080001004;
		мРаздел2_4.Области.П000080002004.Значение = П000080002004;
		мРаздел2_4.Области.П000080003004.Значение = П000080003004;
		мРаздел2_4.Области.П000080004004.Значение = П000080004004;

		// строка 9, графы 3-14
		мРаздел2_4.Области.П000080005003.Значение = П000080001003 + П000080002003 + П000080003003 + П000080004003;
		мРаздел2_4.Области.П000080005004.Значение = П000080001004 + П000080002004 + П000080003004 + П000080004004;
		мРаздел2_4.Области.П000080005005.Значение = П000080001005 + П000080002005 + П000080003005 + П000080004005;
		мРаздел2_4.Области.П000080005006.Значение = ОП000080001006 + ОП000080002006 + ОП000080003006 + ОП000080004006;
		мРаздел2_4.Области.П000080005007.Значение = П000080001007 + П000080002007 + П000080003007 + П000080004007;
		мРаздел2_4.Области.П000080005008.Значение = ОП000080001008 + ОП000080002008 + ОП000080003008 + ОП000080004008;
		мРаздел2_4.Области.П000080005009.Значение = П000080001009 + П000080002009 + П000080003009 + П000080004009;
		мРаздел2_4.Области.П000080005010.Значение = ОП000080001010 + ОП000080002010 + ОП000080003010 + ОП000080004010;
		мРаздел2_4.Области.П000080005011.Значение = П000080001011 + П000080002011 + П000080003011 + П000080004011;
		мРаздел2_4.Области.П000080005012.Значение = ОП000080001012 + ОП000080002012 + ОП000080003012 + ОП000080004012;
		мРаздел2_4.Области.П000080005013.Значение = П000080001013 + П000080002013 + П000080003013 + П000080004013;
		мРаздел2_4.Области.П000080005014.Значение = ОП000080001014 + ОП000080002014 + ОП000080003014 + ОП000080004014;


	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3_1" Тогда

		// Раздел III
		// Таблица 9

		ОП000090001203 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000090001203.Значение);
		ОП000090001303 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000090001303.Значение);
		ОП000090001403 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000090001403.Значение);

		ОП000090001204 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000090001204.Значение);
		ОП000090001304 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000090001304.Значение);
		ОП000090001404 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000090001404.Значение);
		
		ОП000100001003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100001003.Значение);
		//ОП000100002003 = ОкруглитьЧислоПоФормату(П000100002003);
		ОП000100002101 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100002101.Значение);
		ОП000100002401 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100002401.Значение);
		ОП000100002501 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100002501.Значение);
		ОП000100002601 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100002601.Значение);
		ОП000100003003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100003003.Значение);
		ОП000100004003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100004003.Значение);
		ОП000100005003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100005003.Значение);
		ОП000100006003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100006003.Значение);
		ОП000100009003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100009003.Значение);

		ОП000100010101 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100010101.Значение);
		ОП000100010401 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100010401.Значение);
		ОП000100010501 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100010501.Значение);
		ОП000100010601 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100010601.Значение);
		ОП000100011103 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100011103.Значение);
		ОП000100011403 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100011403.Значение);
		ОП000100011503 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100011503.Значение);
		ОП000100011603 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100011603.Значение);
		ОП000100012003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100012003.Значение);
		//ОП000100013003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100013003.Значение);

		П000090001006 = мРаздел3_1.Области.П000090001006.Значение;
		П000090001007 = мРаздел3_1.Области.П000090001007.Значение;
		П000090001009 = мРаздел3_1.Области.П000090001009.Значение;

		// РАЗДЕЛ III

		// Табл.9	 
		// размер страхового тарифа
		П000090001010 = П000090001006 * (1 - П000090001007 / 100 + П000090001009 / 100);
		П000090001103 = ОП000090001203 + ОП000090001303 + ОП000090001403;
		П000090001104 = ОП000090001204 + ОП000090001304 + ОП000090001404;

		// Запишем
		мРаздел3_1.Области.П000090001010.Значение = П000090001010;
		мРаздел3_1.Области.П000090001103.Значение = П000090001103;
		мРаздел3_1.Области.П000090001104.Значение = П000090001104;

		// Табл.10
		П000100002003 = ОП000100002101 + ОП000100002401 + ОП000100002501 + ОП000100002601;
		мРаздел3_1.Области.П000100002003.Значение = П000100002003;

		// строка 7
		П000100007003 = ОП000100001003 + П000100002003  + ОП000100003003 + ОП000100004003
		              + ОП000100005003 + ОП000100006003;
		мРаздел3_1.Области.П000100007003.Значение = П000100007003;

		П000100010003 = ОП000100010101 + ОП000100010401 + ОП000100010501 + ОП000100010601;
		мРаздел3_1.Области.П000100010003.Значение = П000100010003;

		П000100011003 = ОП000100011103 + ОП000100011403 + ОП000100011503 + ОП000100011603;
		мРаздел3_1.Области.П000100011003.Значение = П000100011003;

		// строка 13                                    
		П000100013003 = ОП000100009003 + П000100010003  + П000100011003  + ОП000100012003;
		мРаздел3_1.Области.П000100013003.Значение = П000100013003;

		// строки 8 и 14
		мРаздел3_1.Области.П000100008003.Значение = ?(П000100013003 > П000100007003, П000100013003 - П000100007003, 0);
		мРаздел3_1.Области.П000100014003.Значение = ?(П000100007003 > П000100013003, П000100007003 - П000100013003, 0);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3_2" Тогда

		ОП000110001004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110001004.Значение);
		ОП000110002004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110002004.Значение);
		ОП000110003004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110003004.Значение);
		ОП000110004004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110004004.Значение);
		ОП000110005004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110005004.Значение);
		ОП000110006004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110006004.Значение);
		ОП000110007004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110007004.Значение);

		// Табл.11 строка 10
		мРаздел3_2.Области.П000110009004.Значение = ОП000110001004 + ОП000110003004 + ОП000110005004 + ОП000110007004;

		// Табл.12 строка 4
		мРаздел3_2.Области.П000120004003.Значение = мРаздел3_2.Области.П000120001003.Значение + мРаздел3_2.Области.П000120003003.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		// ОБЩИЙ РАСЧЕТ ПОКАЗАТЕЛЕЙ ВСЕХ РАЗДЕЛОВ ДЕКЛАРАЦИИ

		// Используется, например, в случае изменения точности или единицы измерения
		// (так как разделы взаимосвязаны, порядок пересчета не важен).
		Расчет("Раздел1_1");
		Расчет("Раздел1_2");
		Расчет("Раздел2_1");
		Расчет("Раздел2_2");
		Расчет("Раздел2_3");
		Расчет("Раздел2_4");
		Расчет("Раздел3_1");
		Расчет("Раздел3_2");
		
	КонецЕсли;

КонецПроцедуры // Расчет()


////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

// Выполняет вывод полей запроса в табличный документ
Процедура ВывестиРезультатЗапросаВДокумент(РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого Колонка из РезультатЗапроса.Колонки Цикл
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвтоВнутренний() Экспорт 

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации(); РедакцияКонфигурации = РегламентированнаяОтчетность.РедакцияКонфигурации();
	
	// Если авторасчет не отключен, то заполним размер страхового тарифа.
	// Ранее этот параметр пользователь мог скорректировать в режиме "Без автоматического расчета".

	Если Не ФлажокОтклАвтоРасчет Тогда

		мРаздел3_1.Области.П000090001006.Значение = ПолучитьРазмерСтраховогоТарифа();

	КонецЕсли;

	// Данные берутся по обособленному подразделению (указанной организации)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамОрганизация",              Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация",      ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("парамВидСтавокЕСНиПФР",         Организация.ВидСтавокЕСНиПФР);
	Запрос.УстановитьПараметр("парамНачалоГода",               НачалоГода(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамГод",					   Год(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамКонецОтчетногоПериода",    КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Месяц1",                        Месяц(мДатаКонцаПериодаОтчета) - 2);
	Запрос.УстановитьПараметр("Месяц2",                        Месяц(мДатаКонцаПериодаОтчета) - 1);
	Запрос.УстановитьПараметр("Месяц3",                        Месяц(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КодДоходаПособияЗаСчетФСС",     Справочники.ДоходыЕСН.ПособияЗаСчетФСС);
	Запрос.УстановитьПараметр("Счет69_01",                     ПланыСчетов.Хозрасчетный.ФСС);
	Запрос.УстановитьПараметр("Облагается", 				   Перечисления.ДоходыФСС_НС.Облагается);
	
	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	// конец месяца налогового периода
	КонецМесяца = КонецМесяца(НачалоГода(мДатаКонцаПериодаОтчета));
	// первый месяц
	ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
	// прибавим остальные месяцы
	Для Сч = 2 По Месяц(мДатаКонцаПериодаОтчета) Цикл
		КонецМесяца = КонецМесяца(КонецМесяца+1);
    	ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	
    // УчетнаяПолитикаНалоговыйУчет
	// Таблица УчетнаяПолитикаНалоговыйУчет - это список периодов, когда организация переходила на УСН
	// поля:
	//		УСН, 
	//		Месяц - месяц налогового периода
	// Описание:	
	//	Выбираем Из Периоды (таблица - список периодов с начала года по текущий период)
	//	Внутреннее соединение с "псевдосрезом" последних регистра УчетнаяПолитикаНалоговыйУчет
	//	по равенству периодов
	//  условие: что организация использует УСН
	
	Если ИДКонфигурации <> "ЗУП" Тогда
	 	УчетнаяПолитикаНалоговыйУчетТекст = 
		"ВЫБРАТЬ
		|	МЕСЯЦ(Периоды.Период) КАК Месяц,
		|	ВЫБОР
		|		КОГДА УчетнаяПолитикаНалоговыйУчет.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УСН,
		|	УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС КАК УплачиватьДобровольныеВзносыВФСС
		|ПОМЕСТИТЬ ВТУчетнаяПолитикаНалоговыйУчет
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
		|	ИЗ
		|		("+ ПериодыТекст +") КАК Периоды
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|			ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период
		|				И (УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период
		|			И (УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Месяц";	

	Иначе
	 	УчетнаяПолитикаНалоговыйУчетТекст = 
		"ВЫБРАТЬ
		|	МЕСЯЦ(Периоды.Период) КАК Месяц,
		|	УчетнаяПолитикаНалоговыйУчет.УСН КАК УСН,
		|	УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС КАК УплачиватьДобровольныеВзносыВФСС
		|ПОМЕСТИТЬ ВТУчетнаяПолитикаНалоговыйУчет
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
		|	ИЗ
		|		("+ ПериодыТекст +") КАК Периоды
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|			ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период
		|				И (УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период
		|			И (УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация)	
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Месяц";	

	КонецЕсли;

	Запрос.Текст = УчетнаяПолитикаНалоговыйУчетТекст;
	Запрос.Выполнить();
 	УчетнаяПолитикаНалоговыйУчетТекст = "ВТУчетнаяПолитикаНалоговыйУчет";
	
	// ДоходыЕСН 
	//	ФизЛицо 	 	- физическое лицо 
	//	Месяц			- месяц налогового периода
	//	КодДоходаЕСН	- код дохода с точки зрения ЕСН
	//	Результат		- сумма дохода
	//	Скидка			- необлагаемая ЕСН сумма дохода
	// Описание:
	//  Выбираются зарегистрированные доходы ЕСН, относящиеся к видам деятельности 
	//  облагаемым налогом на прибыль, строго по заданной организации. 
	
	ДоходыЕСН = 
	"ВЫБРАТЬ
	|	ЕСНСведенияОДоходах.ФизЛицо,
	|	МЕСЯЦ(ЕСНСведенияОДоходах.Период) КАК Месяц,
	|	ЕСНСведенияОДоходах.КодДоходаЕСН КАК КодДоходаЕСН,
	|	ЕСНСведенияОДоходах.Результат КАК Результат,
	|	ЕСНСведенияОДоходах.Скидка КАК Скидка
	|ИЗ
	|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|
	|ГДЕ
	|	ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода И
	|	(НЕ(ЕСНСведенияОДоходах.ОблагаетсяЕНВД)) И
	|	ЕСНСведенияОДоходах.ОбособленноеПодразделение = &парамОрганизация";
	
	// НалоговыеБазыПоФизлицам 
	//	ФизЛицо 	 	- физическое лицо 
	//	БазаФедеральныйБюджет - налоговая база по ФБ
	//	БазаФСС - налоговая база по ФСС
	//	БазаФОМС - налоговая база по ФОМС
	// Описание:
	//  Выбираются зарегистрированные доходы ЕСН за вычетом скидок строго по заданной организации. 
	//	Данные нужны для раздела 2.1.
	
	НалоговыеБазыПоФизлицам = 
	"ВЫБРАТЬ
	|	ЕСННачисления.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВЫБОР КОГДА ЕСННачисления.КодДоходаЕСН.ВходитВБазуФСС И НЕ УчетнаяПолитикаНалоговыйУчет.УСН ТОГДА ЕСННачисления.Результат - ЕСННачисления.Скидка ИНАЧЕ 0 КОНЕЦ) КАК БазаФСС,
	|	СУММА(ВЫБОР КОГДА ЕСННачисления.КодДоходаЕСН.ВходитВБазуФСС И НЕ УчетнаяПолитикаНалоговыйУчет.УСН ТОГДА ЕСННачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК НалоговаяБазаФСС
	|ИЗ
	|	(" + ДоходыЕСН + " ) КАК ЕСННачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + УчетнаяПолитикаНалоговыйУчетТекст + " КАК УчетнаяПолитикаНалоговыйУчет
	|		ПО ЕСННачисления.Месяц = УчетнаяПолитикаНалоговыйУчет.Месяц
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСННачисления.ФизЛицо";
							  
	// Регрессивная шкала применяется всегда
	
	Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
		
		НалоговаяБазаПоФизлицамПределам = "
		|Выбрать 
		|	Сумма(ДоходыПоФЛ.БазаФСС)		КАК П000010003003, 
		|	Сумма(ЕСНИсчисленныйОбороты.ПримененнаяЛьготаФССОборот) КАК П000010004003 
		|ИЗ 
		|	(" + НалоговыеБазыПоФизлицам + ") КАК ДоходыПоФЛ 
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЕСНИсчисленный.Обороты(&ДатаНачала, &ДатаОкончания, , Организация = &парамОрганизация) КАК ЕСНИсчисленныйОбороты
		|	ПО ДоходыПоФЛ.ФизЛицо = ЕСНИсчисленныйОбороты.ФизЛицо
		|";
	Иначе
		НалоговаяБазаПоФизлицамПределам = "
		|Выбрать 
		|	Сумма(ВЫБОР КОГДА ДоходыПоФЛ.НалоговаяБазаФСС <> 0 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000010001003,
		|	Сумма(ВЫБОР КОГДА ДоходыПоФЛ.НалоговаяБазаФСС <> 0 И ДоходыПоФЛ.Физлицо.Пол = &ПолЖенский ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000010002003,
		|	Сумма(ДоходыПоФЛ.БазаФСС) КАК П000010003003, 
		|	Сумма(ЕСНИсчисленныйОбороты.ПримененнаяЛьготаФССОборот) КАК П000010004003 
		|ИЗ 
		|	(" + НалоговыеБазыПоФизлицам + ") КАК ДоходыПоФЛ 
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЕСНИсчисленный.Обороты(&ДатаНачала, &ДатаОкончания, , Организация = &парамОрганизация) КАК ЕСНИсчисленныйОбороты
		|	ПО ДоходыПоФЛ.ФизЛицо = ЕСНИсчисленныйОбороты.ФизЛицо
		|";
	КонецЕсли;
	
	// ДанныеОбИнвалидности
	//	Поля:
	//		Период
	//		Физлицо
	//
	//	Описание:
	// 	таблица списка периодов-физлиц которые являются инвалидами
	//
	ДанныеОбИнвалидностиТекст = 
	"ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(Периоды.Период,МЕСЯЦ) КАК Период,
	|		СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Периоды.Период КАК Период,
	|			СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо,
	|			МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК ПериодРегистра
	|		ИЗ
	|			("+ ПериодыТекст +") КАК Периоды
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|				ПО Периоды.Период >= СведенияОбИнвалидностиФизлиц.Период
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОбИнвалидностиФизлиц.Физлицо,
	|			Периоды.Период) КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|			ПО СведенияОбИнвалидностиФизлиц.Период = Периоды.ПериодРегистра И СведенияОбИнвалидностиФизлиц.Физлицо = Периоды.Физлицо
	|
	|	ГДЕ
	|		(СведенияОбИнвалидностиФизлиц.Инвалидность)";
	
	Если ИДКонфигурации = "ЗУП" ИЛИ ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
		ТекстДоходовФСС_НСТекст =
		"ВЫБРАТЬ
		|	ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо КАК ФизЛицо,
		|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаФСС_НС КАК КодДоходаФСС_НС,
		|	ОсновныеНачисленияРаботниковОрганизаций.Результат КАК Результат,
		|	МЕСЯЦ(ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации) КАК МесяцДохода,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации КАК ПериодРегистрации
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
		|	И ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение = &парамОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо,
		|	ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаФСС_НС,
		|	ДополнительныеНачисленияРаботниковОрганизаций.Результат,
		|	МЕСЯЦ(ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации),
		|	НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации, МЕСЯЦ)
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
		|ГДЕ
		|	ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
		|	И ДополнительныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение = &парамОрганизация";
	ИначеЕсли (ИДКонфигурации = "БП" И РедакцияКонфигурации > "1.1") ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		ТекстДоходовФСС_НСТекст =
		"ВЫБРАТЬ
		|		НачисленияРаботниковОрганизаций.ФизЛицо КАК ФизЛицо,
		|		НачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаФСС_НС КАК КодДоходаФСС_НС,
		|		НачисленияРаботниковОрганизаций.Результат КАК Результат,
		|		МЕСЯЦ(НачисленияРаботниковОрганизаций.Ссылка.ПериодРегистрации) КАК МесяцДохода,
		|		НачисленияРаботниковОрганизаций.Ссылка.ПериодРегистрации КАК ПериодРегистрации
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачисленияРаботниковОрганизаций
		|	ГДЕ
		|		НачисленияРаботниковОрганизаций.Ссылка.ПериодРегистрации МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
		|		И НачисленияРаботниковОрганизаций.Ссылка.Проведен
		|		И НачисленияРаботниковОрганизаций.Ссылка.Организация = &парамОрганизация";
	Иначе	
		ТекстДоходовФСС_НСТекст = ""; // не поддерживается
	КонецЕсли;
	
	ДоходыДляФСС_НСТекст = "
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС = &Облагается
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001003,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС = &Облагается
	|					И Доходы.МесяцДохода = &Месяц1
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001203,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС = &Облагается
	|					И Доходы.МесяцДохода = &Месяц2
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001303,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС = &Облагается
	|					И Доходы.МесяцДохода = &Месяц3
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001403,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС = &Облагается
	|					И СведенияИнвалидность.Физлицо ЕСТЬ НЕ NULL
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001004,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС = &Облагается
	|					И СведенияИнвалидность.Физлицо ЕСТЬ НЕ NULL
	|					И Доходы.МесяцДохода = &Месяц1
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001204,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС = &Облагается
	|					И СведенияИнвалидность.Физлицо ЕСТЬ НЕ NULL
	|					И Доходы.МесяцДохода = &Месяц2
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001304,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС = &Облагается
	|					И СведенияИнвалидность.Физлицо ЕСТЬ НЕ NULL
	|					И Доходы.МесяцДохода = &Месяц3
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001404,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС <> &Облагается
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001005
	|ИЗ
	|	(" + ТекстДоходовФСС_НСТекст + ") КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДанныеОбИнвалидностиТекст + ") КАК СведенияИнвалидность
	|		ПО Доходы.ФизЛицо = СведенияИнвалидность.Физлицо И  Доходы.ПериодРегистрации = СведенияИнвалидность.Период";
	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	// Налоговые или облагаемые базы по ЕСН и страховым взносам
	
	// Раздел I (табл. 1)
	
	Запрос.УстановитьПараметр("ПолЖенский", 	Перечисления.ПолФизическихЛиц.Женский);
	Запрос.УстановитьПараметр("ДатаНачала", 	мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", 	мДатаКонцаПериодаОтчета);
	
	Запрос.Текст = НалоговаяБазаПоФизлицамПределам;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	// Раздел III (табл. 9)
	
	ЧисленностьРаботниковНаУСН = 0;
	ЧисленностьРаботниковНаЕНВД = 0;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Месяц
	|ИЗ
	|  " + УчетнаяПолитикаНалоговыйУчетТекст + " КАК УчетнаяПолитикаНалоговыйУчет
	|ГДЕ
	|	УчетнаяПолитикаНалоговыйУчет.УСН";	
	
	СписокМесяцевУСН = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Месяц");

	Если (ИДКонфигурации = "БП" И РедакцияКонфигурации > "1.1") ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизЛицо) КАК П000090001001,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СведенияИнвалидность.Физлицо) КАК П000090001002," + ДоходыДляФСС_НСТекст;
		ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	ИначеЕсли (ИДКонфигурации = "ЗУП" И РедакцияКонфигурации = "2.1") Тогда
		Запрос.Текст = "ВЫБРАТЬ " + ДоходыДляФСС_НСТекст;
		ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
		
		// расчет среднесписочной численности
		ЧисленностьРаботниковНаУСН = 0;
		ЧисленностьРаботниковНаЕНВД = 0;
		ЧисленностьЖенщинНаУСН = 0;
		ЧисленностьЖенщинНаЕНВД = 0;
		ЧисленностьРаботниковНаОбщемрежиме = 0;
		ЧисленностьЖенщинНаОбщемрежиме = 0;
		ЧисленностьРаботников = 0;
		ЧисленностьИнвалидов = 0;
		КоличествоМесяцевРаботы = 0;
		Запрос.Текст = УчетнаяПолитикаНалоговыйУчетТекст;
		Отчет = Отчеты.СредняяЧисленностьРаботниковОрганизаций.Создать();
		Отчет.РазворачиватьЧисленностьПоМесяцам = Истина;
		Отчет.ЗаполнитьНачальныеНастройки();
		Отчет.ОбщийОтчет.ДатаНач = мДатаНачалаПериодаОтчета;
		Отчет.ОбщийОтчет.ДатаКон = мДатаКонцаПериодаОтчета;
		Отчет.ОбщийОтчет.ПостроительОтчета.Отбор.Организация.Установить(Организация);
		РезультатЗапроса = Отчет.ВыполнитьЗапросОтчета();
		
		Если РезультатЗапроса <> Неопределено и Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			КоличествоМесяцевРаботы = Выборка.Количество();
			Пока Выборка.Следующий() Цикл
				ЭтоМесяцУСН = СписокМесяцевУСН.Найти(Месяц(Выборка.МесяцОтчета)) <> Неопределено;
				ЧисленностьРаботниковНаУСН = ЧисленностьРаботниковНаУСН + ?(ЭтоМесяцУСН,Окр(Выборка.СредняяЧисленностьВМесяцеНеЕНВД),0);
				ЧисленностьЖенщинНаУСН = ЧисленностьЖенщинНаУСН + ?(ЭтоМесяцУСН,Окр(Выборка.СредняяЧисленностьЖенщинВМесяцеНеЕНВД),0);
				ЧисленностьРаботниковНаЕНВД = ЧисленностьРаботниковНаЕНВД + Окр(Выборка.СредняяЧисленностьВМесяцеЕНВД);
				ЧисленностьЖенщинНаЕНВД = ЧисленностьЖенщинНаЕНВД + Окр(Выборка.СредняяЧисленностьЖенщинВМесяцеЕНВД);
				ЧисленностьРаботниковНаОбщемрежиме = ЧисленностьРаботниковНаОбщемрежиме + ?(ЭтоМесяцУСН, 0, Окр(Выборка.СредняяЧисленностьВМесяцеНеЕНВД));
				ЧисленностьЖенщинНаОбщемрежиме = ЧисленностьЖенщинНаОбщемрежиме + ?(ЭтоМесяцУСН, 0, Окр(Выборка.СредняяЧисленностьЖенщинВМесяцеНеЕНВД));
				ЧисленностьРаботников = ЧисленностьРаботников + Окр(Выборка.СредняяЧисленностьВМесяце);
				ЧисленностьИнвалидов = ЧисленностьИнвалидов + Окр(Выборка.СредняяЧисленностьИнвалидовВМесяце);
			КонецЦикла;
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000010001003", Окр(ЧисленностьРаботниковНаОбщемрежиме / КоличествоМесяцевРаботы));
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000010002003", Окр(ЧисленностьЖенщинНаОбщемрежиме / КоличествоМесяцевРаботы)); // в т.ч. женщин
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000090001001", Окр(ЧисленностьРаботников / КоличествоМесяцевРаботы));
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000090001002", Окр(ЧисленностьИнвалидов / КоличествоМесяцевРаботы)); // в т.ч. инвалидов
			
		КонецЕсли;
	Иначе
		Запрос.Текст = "ВЫБРАТЬ " + ДоходыДляФСС_НСТекст;
		ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
		
		// расчет среднесписочной численности
		ЧисленностьРаботниковНаУСН = 0;
		ЧисленностьРаботниковНаЕНВД = 0;
		ЧисленностьЖенщинНаУСН = 0;
		ЧисленностьЖенщинНаЕНВД = 0;
		ЧисленностьРаботниковНаОбщемрежиме = 0;
		ЧисленностьЖенщинНаОбщемрежиме = 0;
		ЧисленностьРаботников = 0;
		ЧисленностьИнвалидов = 0;
		КоличествоМесяцевРаботы = 0;
		Отчет = Отчеты.СредняяЧисленностьРаботниковОрганизаций.Создать();
		ТаблицаСреднихЧисленостей = Отчет.ПолучитьТаблицуЧисленностей(Организация, мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета);
		Если ТаблицаСреднихЧисленостей.Количество() > 0 Тогда
			КоличествоМесяцевРаботы = ТаблицаСреднихЧисленостей.Количество();
			Для каждого Выборка из ТаблицаСреднихЧисленостей Цикл
				ЭтоМесяцУСН = СписокМесяцевУСН.Найти(Месяц(Выборка.МесяцОтчета)) <> Неопределено;
				ЧисленностьРаботниковНаУСН = ЧисленностьРаботниковНаУСН + ?(ЭтоМесяцУСН,Окр(Выборка.СредняяЧисленностьНеЕНВД),0);
				ЧисленностьЖенщинНаУСН = ЧисленностьЖенщинНаУСН + ?(ЭтоМесяцУСН,Окр(Выборка.СредняяЧисленностьЖенщинНеЕНВД),0);
				ЧисленностьРаботниковНаЕНВД = ЧисленностьРаботниковНаЕНВД + Окр(Выборка.СредняяЧисленностьЕНВД);
				ЧисленностьЖенщинНаЕНВД = ЧисленностьЖенщинНаЕНВД + Окр(Выборка.СредняяЧисленностьЖенщинЕНВД);
				ЧисленностьРаботниковНаОбщемрежиме = ЧисленностьРаботниковНаОбщемрежиме + ?(ЭтоМесяцУСН, 0, Окр(Выборка.СредняяЧисленностьНеЕНВД));
				ЧисленностьЖенщинНаОбщемрежиме = ЧисленностьЖенщинНаОбщемрежиме + ?(ЭтоМесяцУСН, 0, Окр(Выборка.СредняяЧисленностьЖенщинНеЕНВД));
				ЧисленностьРаботников = ЧисленностьРаботников + Окр(Выборка.СредняяЧисленность);
				ЧисленностьИнвалидов = ЧисленностьИнвалидов + Окр(Выборка.СредняяЧисленностьИнвалидов);
			КонецЦикла;
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000010001003", Окр(ЧисленностьРаботниковНаОбщемрежиме / КоличествоМесяцевРаботы));
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000010002003", Окр(ЧисленностьЖенщинНаОбщемрежиме / КоличествоМесяцевРаботы)); // в т.ч. женщин
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000090001001", Окр(ЧисленностьРаботников / КоличествоМесяцевРаботы));
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000090001002", Окр(ЧисленностьИнвалидов / КоличествоМесяцевРаботы)); // в т.ч. инвалидов
			
		КонецЕсли;
		
	КонецЕсли;
	
	// РАСХОДЫ НА ЦЕЛИ ОБЯЗАТЕЛЬНОГО СОЦИАЛЬНОГО СТРАХОВАНИЯ С НАЧАЛА ГОДА
	
	// Раздел I (табл 3), Раздел II (табл 6) и Раздел III (табл 11)
	
	Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
		
		СписокОплатыБЛ = Новый СписокЗначений();
		СписокОплатыБЛ.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ);
		СписокОплатыБЛ.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам);
		СписокОплатыБЛ.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет);
		СписокОплатыБЛ.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами);
		СписокОплатыБЛ.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве);
		СписокПособий = Новый СписокЗначений();
		СписокПособий.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВСвязиСоСмертью);
		СписокПособий.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриПостановкеНаУчетВРанниеСрокиБеременности);
		СписокПособий.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриРожденииРебенка);
		СписокПособий.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриУсыновленииРебенка);
		СписокПричинНетрудоспособности = Новый СписокЗначений();
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание);
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ТравмаВБыту);
		Запрос.УстановитьПараметр("СписокПричинНетрудоспособности",		СписокПричинНетрудоспособности);
		Запрос.УстановитьПараметр("ПричинаПоУмолчанию",  			Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание);
		Запрос.УстановитьПараметр("СписокОплатыБЛ", 					СписокОплатыБЛ);
		Запрос.УстановитьПараметр("СписокПособий", 						СписокПособий);
		Запрос.УстановитьПараметр("ОплатаБЛПоТравмеНаПроизводстве", 	ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве);
		Запрос.УстановитьПараметр("ОплатаПоСреднемуБЛ", 				ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ);
		Запрос.УстановитьПараметр("ОтпускПоБеременностиИРодам", 		ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам);
		Запрос.УстановитьПараметр("ПособиеПоУходуЗаРебенкомДо1_5Лет", 	ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет);
		Запрос.УстановитьПараметр("ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами);
		Запрос.УстановитьПараметр("ВСвязиСоСмертью",					ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВСвязиСоСмертью);
		Запрос.УстановитьПараметр("ПриПостановкеНаУчетВРанниеСрокиБеременности",ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриПостановкеНаУчетВРанниеСрокиБеременности);
		Запрос.УстановитьПараметр("ПриРожденииРебенка",					ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриРожденииРебенка);
		Запрос.УстановитьПараметр("ПриУсыновленииРебенка",				ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриУсыновленииРебенка);
		Запрос.УстановитьПараметр("КодДоходаПособияЗаСчетФСС",   		Справочники.ДоходыЕСН.ПособияЗаСчетФСС);
		Запрос.УстановитьПараметр("ПоДням",								Перечисления.ВидыУчетаВремени.ПоДням);
		Запрос.УстановитьПараметр("ДатаЗакона202ФЗ", '20050101');
		
		Если ИДКонфигурации = "ЗУП" ИЛИ ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
			РасходыНаЦелиОбязательногоСС = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС И НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030001004,
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС И НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030002004,
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС И НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ПособиеПоУходуЗаРебенкомДо1_5Лет ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030003004,
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС И НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030006004,
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС И НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ПособиеПоУходуЗаРебенкомДо1_5Лет ТОГДА РАЗНОСТЬДАТ(ЕСНОсновныеНачисления.ПериодДействияНачало, ЕСНОсновныеНачисления.ПериодДействияКонец, ДЕНЬ) ИНАЧЕ 0 КОНЕЦ) КАК П000030003003,
			|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН)И НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС И ЕСНОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060001004,
			|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060002004,
			|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ПособиеПоУходуЗаРебенкомДо1_5Лет ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060003004,
			|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060006004,
			|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ПособиеПоУходуЗаРебенкомДо1_5Лет ТОГДА РАЗНОСТЬДАТ(ЕСНОсновныеНачисления.ПериодДействияНачало, ЕСНОсновныеНачисления.ПериодДействияКонец, ДЕНЬ) ИНАЧЕ 0 КОНЕЦ) КАК П000060003003,
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.ВидРасчета = &ОплатаБЛПоТравмеНаПроизводстве ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000110001004
			|ИЗ
			|	РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + УчетнаяПолитикаНалоговыйУчетТекст + " КАК УчетнаяПолитикаНалоговыйУчет
			|		ПО МЕСЯЦ(ЕСНОсновныеНачисления.ПериодРегистрации) = УчетнаяПолитикаНалоговыйУчет.Месяц
			|
			|ГДЕ
			|	ЕСНОсновныеНачисления.ПериодРегистрации >= &ДатаНачала И
			|	ЕСНОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания И
			|	ЕСНОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация И
			|	ЕСНОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ)";
			
			Запрос.Текст = РасходыНаЦелиОбязательногоСС;
			ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
			
			РасходыНаЦелиОбязательногоСС = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И Не(УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ И ОсновныеНачисления.ПериодДействияНачало = ОсновныеНачисления.ДатаНачалаСобытия ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000030001001,
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И Не(УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ОсновныеНачисления.НормаДней - ЕСТЬNULL(ДанныеУчетаБЛ.ДниЗаСчетРаботодателя, 0) ИНАЧЕ 0 КОНЕЦ) КАК П000030001003,
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И Не(УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000030002003,
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И Не(УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000030006003,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ И ОсновныеНачисления.ПериодДействияНачало = ОсновныеНачисления.ДатаНачалаСобытия ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000060001001,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000060001003,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000060002003,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000060006003,
			|	СУММА(ВЫБОР
			|			КОГДА ОсновныеНачисления.ВидРасчета = &ОплатаБЛПоТравмеНаПроизводстве
			|				ТОГДА ОсновныеНачисления.НормаДней
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК П000110001003
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + УчетнаяПолитикаНалоговыйУчетТекст + " КАК УчетнаяПолитикаНалоговыйУчет
			|		ПО МЕСЯЦ(ОсновныеНачисления.ПериодРегистрации) = УчетнаяПолитикаНалоговыйУчет.Месяц
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СУММА(ВЫБОР
			|					КОГДА НЕ ЕСНОсновныеНачисления.ОблагаетсяЕНВД
			|						ТОГДА ЕСНОсновныеНачисления.Результат
			|					ИНАЧЕ 0
			|				КОНЕЦ) КАК НеЕНВД,
			|			СУММА(ВЫБОР
			|					КОГДА ЕСНОсновныеНачисления.ОблагаетсяЕНВД
			|						ТОГДА ЕСНОсновныеНачисления.Результат
			|					ИНАЧЕ 0
			|				КОНЕЦ) КАК ЕНВД,
			|			ЕСНОсновныеНачисления.ПериодДействияНачало КАК ДатаНачала,
			|			ЕСНОсновныеНачисления.ПериодДействияКонец КАК ДатаОкончания,
			|			ЕСНОсновныеНачисления.Сотрудник КАК Сотрудник,
			|			ЕСНОсновныеНачисления.ВидРасчета КАК ВидРасчета,
			|			ЕСНОсновныеНачисления.ПериодРегистрации КАК ПериодРегистрации
			|		ИЗ
			|			РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
			|		ГДЕ
			|			ЕСНОсновныеНачисления.ПериодРегистрации >= &ДатаНачала
			|			И ЕСНОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания
			|			И ЕСНОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ)
			|			И ЕСНОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ЕСНОсновныеНачисления.Сотрудник,
			|			ЕСНОсновныеНачисления.ВидРасчета,
			|			ЕСНОсновныеНачисления.ПериодДействияНачало,
			|			ЕСНОсновныеНачисления.ПериодДействияКонец,
			|			ЕСНОсновныеНачисления.ПериодРегистрации) КАК РаспределениеПоВидамДеятельности
			|		ПО ОсновныеНачисления.Сотрудник = РаспределениеПоВидамДеятельности.Сотрудник
			|			И ОсновныеНачисления.ВидРасчета = РаспределениеПоВидамДеятельности.ВидРасчета
			|			И ОсновныеНачисления.ПериодРегистрации = РаспределениеПоВидамДеятельности.ПериодРегистрации
			|			И ОсновныеНачисления.ПериодДействияНачало <= РаспределениеПоВидамДеятельности.ДатаНачала
			|			И ОсновныеНачисления.ПериодДействияКонец >= РаспределениеПоВидамДеятельности.ДатаОкончания
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ОсновныеНачисления.Регистратор КАК Регистратор,
			|			ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|			ВЫБОР
			|				КОГДА ОсновныеНачисления.ВидУчетаВремени = &ПоДням
			|					ТОГДА СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение)
			|				ИНАЧЕ СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение)
			|			КОНЕЦ КАК ДниЗаСчетРаботодателя
			|		ИЗ
			|			(ВЫБРАТЬ
			|				ОсновныеНачисления.Регистратор КАК Регистратор,
			|				ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|				ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
			|				ОсновныеНачисления.ГрафикРаботы КАК ГрафикРаботы,
			|				ОсновныеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
			|				ОсновныеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
			|				ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец
			|			ИЗ
			|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|			ГДЕ
			|				ОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация
			|				И ОсновныеНачисления.ПериодРегистрации >= &ДатаНачала
			|				И ОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания
			|				И ОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ)
			|				И ОсновныеНачисления.ДатаНачалаСобытия >= &ДатаЗакона202ФЗ
			|				И ВЫБОР
			|						КОГДА ОсновныеНачисления.Регистратор ССЫЛКА Документ.НачислениеПоБольничномуЛисту
			|							ТОГДА ОсновныеНачисления.Регистратор.ПричинаНетрудоспособности
			|						ИНАЧЕ &ПричинаПоУмолчанию
			|				  КОНЕЦ В (&СписокПричинНетрудоспособности)
			|				И РАЗНОСТЬДАТ(ОсновныеНачисления.ДатаНачалаСобытия, ОсновныеНачисления.ПериодДействияНачало, ДЕНЬ) < 2) КАК ОсновныеНачисления
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
			|				ПО ОсновныеНачисления.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
			|					И ОсновныеНачисления.ВидУчетаВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
			|					И ОсновныеНачисления.ПериодДействияНачало <= ГрафикиРаботыПоВидамВремени.Дата
			|					И (ДОБАВИТЬКДАТЕ(ОсновныеНачисления.ДатаНачалаСобытия, ДЕНЬ, 1) >= ГрафикиРаботыПоВидамВремени.Дата)
			|					И ОсновныеНачисления.ПериодДействияКонец >= ГрафикиРаботыПоВидамВремени.Дата
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ОсновныеНачисления.Регистратор,
			|			ОсновныеНачисления.ВидУчетаВремени,
			|			ОсновныеНачисления.НомерСтроки) КАК ДанныеУчетаБЛ
			|		ПО ОсновныеНачисления.Регистратор = ДанныеУчетаБЛ.Регистратор
			|			И ОсновныеНачисления.НомерСтроки = ДанныеУчетаБЛ.НомерСтроки
			|ГДЕ
			|	ОсновныеНачисления.ПериодРегистрации >= &ДатаНачала
			|	И ОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания
			|	И ОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ)
			|	И ОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация";
			
			Запрос.Текст = РасходыНаЦелиОбязательногоСС;
			ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
			
		ИначеЕсли ИДКонфигурации = "ЗУП" ИЛИ ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
			
			РасходыНаЦелиОбязательногоСС = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС И НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030001004,
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС И НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030002004,
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС И НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ПособиеПоУходуЗаРебенкомДо1_5Лет ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030003004,
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС И НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030006004,
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС И НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ПособиеПоУходуЗаРебенкомДо1_5Лет ТОГДА РАЗНОСТЬДАТ(ЕСНОсновныеНачисления.ПериодДействияНачало, ЕСНОсновныеНачисления.ПериодДействияКонец, ДЕНЬ) ИНАЧЕ 0 КОНЕЦ) КАК П000030003003,
			|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН)И НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС И ЕСНОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060001004,
			|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060002004,
			|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ПособиеПоУходуЗаРебенкомДо1_5Лет ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060003004,
			|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060006004,
			|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ПособиеПоУходуЗаРебенкомДо1_5Лет ТОГДА РАЗНОСТЬДАТ(ЕСНОсновныеНачисления.ПериодДействияНачало, ЕСНОсновныеНачисления.ПериодДействияКонец, ДЕНЬ) ИНАЧЕ 0 КОНЕЦ) КАК П000060003003,
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.ВидРасчета = &ОплатаБЛПоТравмеНаПроизводстве ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000110001004
			|ИЗ
			|	РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + УчетнаяПолитикаНалоговыйУчетТекст + " КАК УчетнаяПолитикаНалоговыйУчет
			|		ПО МЕСЯЦ(ЕСНОсновныеНачисления.ПериодРегистрации) = УчетнаяПолитикаНалоговыйУчет.Месяц
			|
			|ГДЕ
			|	ЕСНОсновныеНачисления.ПериодРегистрации >= &ДатаНачала И
			|	ЕСНОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания И
			|	ЕСНОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация И
			|	ЕСНОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ)";
			
			Запрос.Текст = РасходыНаЦелиОбязательногоСС;
			ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
			
			РасходыНаЦелиОбязательногоСС = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И Не(УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ И ОсновныеНачисления.ПериодДействияНачало = ОсновныеНачисления.ДатаНачалаСобытия ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000030001001,
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И Не(УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ОсновныеНачисления.НормаДней - ЕСТЬNULL(ДанныеУчетаБЛ.ДниЗаСчетРаботодателя, 0) ИНАЧЕ 0 КОНЕЦ) КАК П000030001003,
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И Не(УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000030002003,
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И Не(УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000030006003,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ И ОсновныеНачисления.ПериодДействияНачало = ОсновныеНачисления.ДатаНачалаСобытия ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000060001001,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000060001003,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000060002003,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000060006003,
			|	СУММА(ВЫБОР
			|			КОГДА ОсновныеНачисления.ВидРасчета = &ОплатаБЛПоТравмеНаПроизводстве
			|				ТОГДА ОсновныеНачисления.НормаДней
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК П000110001003
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + УчетнаяПолитикаНалоговыйУчетТекст + " КАК УчетнаяПолитикаНалоговыйУчет
			|		ПО МЕСЯЦ(ОсновныеНачисления.ПериодРегистрации) = УчетнаяПолитикаНалоговыйУчет.Месяц
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СУММА(ВЫБОР
			|					КОГДА НЕ ЕСНОсновныеНачисления.ОблагаетсяЕНВД
			|						ТОГДА ЕСНОсновныеНачисления.Результат
			|					ИНАЧЕ 0
			|				КОНЕЦ) КАК НеЕНВД,
			|			СУММА(ВЫБОР
			|					КОГДА ЕСНОсновныеНачисления.ОблагаетсяЕНВД
			|						ТОГДА ЕСНОсновныеНачисления.Результат
			|					ИНАЧЕ 0
			|				КОНЕЦ) КАК ЕНВД,
			|			ЕСНОсновныеНачисления.ПериодДействияНачало КАК ДатаНачала,
			|			ЕСНОсновныеНачисления.ПериодДействияКонец КАК ДатаОкончания,
			|			ЕСНОсновныеНачисления.ФизЛицо КАК ФизЛицо,
			|			ЕСНОсновныеНачисления.Приказ КАК Приказ,
			|			ЕСНОсновныеНачисления.ВидРасчета КАК ВидРасчета,
			|			ЕСНОсновныеНачисления.ПериодРегистрации КАК ПериодРегистрации
			|		ИЗ
			|			РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
			|		ГДЕ
			|			ЕСНОсновныеНачисления.ПериодРегистрации >= &ДатаНачала
			|			И ЕСНОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания
			|			И ЕСНОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ)
			|			И ЕСНОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ЕСНОсновныеНачисления.ФизЛицо,
			|			ЕСНОсновныеНачисления.Приказ,
			|			ЕСНОсновныеНачисления.ВидРасчета,
			|			ЕСНОсновныеНачисления.ПериодДействияНачало,
			|			ЕСНОсновныеНачисления.ПериодДействияКонец,
			|			ЕСНОсновныеНачисления.ПериодРегистрации) КАК РаспределениеПоВидамДеятельности
			|		ПО ОсновныеНачисления.ФизЛицо = РаспределениеПоВидамДеятельности.ФизЛицо
			|			И ОсновныеНачисления.Приказ = РаспределениеПоВидамДеятельности.Приказ
			|			И ОсновныеНачисления.ВидРасчета = РаспределениеПоВидамДеятельности.ВидРасчета
			|			И ОсновныеНачисления.ПериодРегистрации = РаспределениеПоВидамДеятельности.ПериодРегистрации
			|			И ОсновныеНачисления.ПериодДействияНачало <= РаспределениеПоВидамДеятельности.ДатаНачала
			|			И ОсновныеНачисления.ПериодДействияКонец >= РаспределениеПоВидамДеятельности.ДатаОкончания
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ОсновныеНачисления.Регистратор КАК Регистратор,
			|			ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|			ВЫБОР
			|				КОГДА ОсновныеНачисления.ВидУчетаВремени = &ПоДням
			|					ТОГДА СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение)
			|				ИНАЧЕ СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение)
			|			КОНЕЦ КАК ДниЗаСчетРаботодателя
			|		ИЗ
			|			(ВЫБРАТЬ
			|				ОсновныеНачисления.Регистратор КАК Регистратор,
			|				ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|				ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
			|				ОсновныеНачисления.ГрафикРаботы КАК ГрафикРаботы,
			|				ОсновныеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
			|				ОсновныеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
			|				ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец
			|			ИЗ
			|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|			ГДЕ
			|				ОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация
			|				И ОсновныеНачисления.ПериодРегистрации >= &ДатаНачала
			|				И ОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания
			|				И ОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ)
			|				И ОсновныеНачисления.ДатаНачалаСобытия >= &ДатаЗакона202ФЗ
			|				И ВЫБОР
			|						КОГДА ОсновныеНачисления.Регистратор ССЫЛКА Документ.НачислениеПоБольничномуЛисту
			|							ТОГДА ОсновныеНачисления.Регистратор.ПричинаНетрудоспособности
			|						ИНАЧЕ &ПричинаПоУмолчанию
			|				  КОНЕЦ В (&СписокПричинНетрудоспособности)
			|				И РАЗНОСТЬДАТ(ОсновныеНачисления.ДатаНачалаСобытия, ОсновныеНачисления.ПериодДействияНачало, ДЕНЬ) < 2) КАК ОсновныеНачисления
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
			|				ПО ОсновныеНачисления.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
			|					И ОсновныеНачисления.ВидУчетаВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
			|					И ОсновныеНачисления.ПериодДействияНачало <= ГрафикиРаботыПоВидамВремени.Дата
			|					И (ДОБАВИТЬКДАТЕ(ОсновныеНачисления.ДатаНачалаСобытия, ДЕНЬ, 1) >= ГрафикиРаботыПоВидамВремени.Дата)
			|					И ОсновныеНачисления.ПериодДействияКонец >= ГрафикиРаботыПоВидамВремени.Дата
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ОсновныеНачисления.Регистратор,
			|			ОсновныеНачисления.ВидУчетаВремени,
			|			ОсновныеНачисления.НомерСтроки) КАК ДанныеУчетаБЛ
			|		ПО ОсновныеНачисления.Регистратор = ДанныеУчетаБЛ.Регистратор
			|			И ОсновныеНачисления.НомерСтроки = ДанныеУчетаБЛ.НомерСтроки
			|ГДЕ
			|	ОсновныеНачисления.ПериодРегистрации >= &ДатаНачала
			|	И ОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания
			|	И ОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ)
			|	И ОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация";
			
			Запрос.Текст = РасходыНаЦелиОбязательногоСС;
			ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
			
		Иначе
			
			РасходыНаЦелиОбязательногоСС = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС И НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030001004,
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС И НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030002004,
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС И НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ПособиеПоУходуЗаРебенкомДо1_5Лет ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030003004,
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС И НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030006004,
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.КодДоходаЕСН = &КодДоходаПособияЗаСчетФСС И НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ПособиеПоУходуЗаРебенкомДо1_5Лет ТОГДА РАЗНОСТЬДАТ(ЕСНОсновныеНачисления.ПериодДействияНачало, ЕСНОсновныеНачисления.ПериодДействияКонец, ДЕНЬ) ИНАЧЕ 0 КОНЕЦ) КАК П000030003003,
			|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060001004,
			|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060002004,
			|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ПособиеПоУходуЗаРебенкомДо1_5Лет ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060003004,
			|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060006004,
			|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНОсновныеНачисления.ВидРасчета = &ПособиеПоУходуЗаРебенкомДо1_5Лет ТОГДА РАЗНОСТЬДАТ(ЕСНОсновныеНачисления.ПериодДействияНачало, ЕСНОсновныеНачисления.ПериодДействияКонец, ДЕНЬ) ИНАЧЕ 0 КОНЕЦ) КАК П000060003003,
			|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.ВидРасчета = &ОплатаБЛПоТравмеНаПроизводстве ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000110001004
			|ИЗ
			|	РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + УчетнаяПолитикаНалоговыйУчетТекст + " КАК УчетнаяПолитикаНалоговыйУчет
			|		ПО МЕСЯЦ(ЕСНОсновныеНачисления.ПериодРегистрации) = УчетнаяПолитикаНалоговыйУчет.Месяц
			|
			|ГДЕ
			|	ЕСНОсновныеНачисления.ПериодРегистрации >= &ДатаНачала И
			|	ЕСНОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания И
			|	ЕСНОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация И
			|	ЕСНОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ)";
			
			Запрос.Текст = РасходыНаЦелиОбязательногоСС;
			ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
			
			РасходыНаЦелиОбязательногоСС = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И Не(УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ И ОсновныеНачисления.ПериодДействияНачало = ОсновныеНачисления.ДатаНачалаСобытия ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000030001001,
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И Не(УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ОсновныеНачисления.НормаДней - ВЫБОР КОГДА (ДанныеУчетаБЛ.ДниЗаСчетРаботодателя) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ДанныеУчетаБЛ.ДниЗаСчетРаботодателя КОНЕЦ ИНАЧЕ 0 КОНЕЦ) КАК П000030001003,
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И Не(УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000030002003,
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И Не(УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000030006003,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ И ОсновныеНачисления.ПериодДействияНачало = ОсновныеНачисления.ДатаНачалаСобытия ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000060001001,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000060001003,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000060002003,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000060006003,
			|	СУММА(ВЫБОР
			|			КОГДА ОсновныеНачисления.ВидРасчета = &ОплатаБЛПоТравмеНаПроизводстве
			|				ТОГДА ОсновныеНачисления.НормаДней
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК П000110001003
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + УчетнаяПолитикаНалоговыйУчетТекст + " КАК УчетнаяПолитикаНалоговыйУчет
			|		ПО МЕСЯЦ(ОсновныеНачисления.ПериодРегистрации) = УчетнаяПолитикаНалоговыйУчет.Месяц
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СУММА(ВЫБОР
			|					КОГДА НЕ ЕСНОсновныеНачисления.ОблагаетсяЕНВД
			|						ТОГДА ЕСНОсновныеНачисления.Результат
			|					ИНАЧЕ 0
			|				КОНЕЦ) КАК НеЕНВД,
			|			СУММА(ВЫБОР
			|					КОГДА ЕСНОсновныеНачисления.ОблагаетсяЕНВД
			|						ТОГДА ЕСНОсновныеНачисления.Результат
			|					ИНАЧЕ 0
			|				КОНЕЦ) КАК ЕНВД,
			|			ЕСНОсновныеНачисления.ФизЛицо КАК ФизЛицо,
			|			ЕСНОсновныеНачисления.Приказ КАК Приказ,
			|			ЕСНОсновныеНачисления.ВидРасчета КАК ВидРасчета,
			|			ЕСНОсновныеНачисления.ПериодРегистрации КАК ПериодРегистрации
			|		ИЗ
			|			РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
			|		ГДЕ
			|			ЕСНОсновныеНачисления.ПериодРегистрации >= &ДатаНачала
			|			И ЕСНОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания
			|			И ЕСНОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ)
			|			И ЕСНОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ЕСНОсновныеНачисления.ФизЛицо,
			|			ЕСНОсновныеНачисления.Приказ,
			|			ЕСНОсновныеНачисления.ВидРасчета,
			|			ЕСНОсновныеНачисления.ПериодРегистрации) КАК РаспределениеПоВидамДеятельности
			|		ПО ОсновныеНачисления.ФизЛицо = РаспределениеПоВидамДеятельности.ФизЛицо
			|			И ОсновныеНачисления.Приказ = РаспределениеПоВидамДеятельности.Приказ
			|			И ОсновныеНачисления.ВидРасчета = РаспределениеПоВидамДеятельности.ВидРасчета
			|			И ОсновныеНачисления.ПериодРегистрации = РаспределениеПоВидамДеятельности.ПериодРегистрации
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ОсновныеНачисления.Регистратор КАК Регистратор,
			|			ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|			ВЫБОР
			|				КОГДА ОсновныеНачисления.ВидУчетаВремени = &ПоДням
			|					ТОГДА СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение)
			|				ИНАЧЕ СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение)
			|			КОНЕЦ КАК ДниЗаСчетРаботодателя
			|		ИЗ
			|			(ВЫБРАТЬ
			|				ОсновныеНачисления.Регистратор КАК Регистратор,
			|				ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|				ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
			|				ОсновныеНачисления.ГрафикРаботы КАК ГрафикРаботы,
			|				ОсновныеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
			|				ОсновныеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
			|				ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец
			|			ИЗ
			|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|			ГДЕ
			|				ВЫБОР
			|					КОГДА ОсновныеНачисления.ПодразделениеОрганизации.Владелец ЕСТЬ NULL 
			|						ТОГДА ОсновныеНачисления.Организация
			|					ИНАЧЕ ОсновныеНачисления.ПодразделениеОрганизации.Владелец
			|				КОНЕЦ = &парамОрганизация
			|				И ОсновныеНачисления.ПериодРегистрации >= &ДатаНачала
			|				И ОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания
			|				И ОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ)
			|				И ОсновныеНачисления.ДатаНачалаСобытия >= &ДатаЗакона202ФЗ
			|				И ВЫБОР
			|						КОГДА ОсновныеНачисления.Регистратор ССЫЛКА Документ.НачислениеПоБольничномуЛисту
			|							ТОГДА ОсновныеНачисления.Регистратор.ПричинаНетрудоспособности
			|						ИНАЧЕ &ПричинаПоУмолчанию
			|				  КОНЕЦ В (&СписокПричинНетрудоспособности)
			|				И РАЗНОСТЬДАТ(ОсновныеНачисления.ДатаНачалаСобытия, ОсновныеНачисления.ПериодДействияНачало, ДЕНЬ) < 2) КАК ОсновныеНачисления
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
			|				ПО ОсновныеНачисления.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
			|					И ОсновныеНачисления.ВидУчетаВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
			|					И ОсновныеНачисления.ПериодДействияНачало <= ГрафикиРаботыПоВидамВремени.Дата
			|					И (ДОБАВИТЬКДАТЕ(ОсновныеНачисления.ДатаНачалаСобытия, ДЕНЬ, 1) >= ГрафикиРаботыПоВидамВремени.Дата)
			|					И ОсновныеНачисления.ПериодДействияКонец >= ГрафикиРаботыПоВидамВремени.Дата
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ОсновныеНачисления.Регистратор,
			|			ОсновныеНачисления.ВидУчетаВремени,
			|			ОсновныеНачисления.НомерСтроки) КАК ДанныеУчетаБЛ
			|		ПО ОсновныеНачисления.Регистратор = ДанныеУчетаБЛ.Регистратор
			|			И ОсновныеНачисления.НомерСтроки = ДанныеУчетаБЛ.НомерСтроки
			|ГДЕ
			|	ОсновныеНачисления.ПериодРегистрации >= &ДатаНачала
			|	И ОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания
			|	И ОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ)
			|	И ОсновныеНачисления.ПодразделениеОрганизации.Владелец = &парамОрганизация";
			
			Запрос.Текст = РасходыНаЦелиОбязательногоСС;
			ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
			
		КонецЕсли;
			
		РасходыНаЦелиОбязательногоСС = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНДополнительныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриРожденииРебенка ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000030004003,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНДополнительныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриРожденииРебенка ТОГДА ЕСНДополнительныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030004004,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНДополнительныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНДополнительныеНачисления.ВидРасчета = &ВСвязиСоСмертью ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000030005003,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНДополнительныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНДополнительныеНачисления.ВидРасчета = &ВСвязиСоСмертью ТОГДА ЕСНДополнительныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030005004,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНДополнительныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриПостановкеНаУчетВРанниеСрокиБеременности ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000030007003,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНДополнительныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриПостановкеНаУчетВРанниеСрокиБеременности ТОГДА ЕСНДополнительныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030007004,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНДополнительныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриУсыновленииРебенка ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000030008003,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНДополнительныеНачисления.ОблагаетсяЕНВД) И НЕ(УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриУсыновленииРебенка ТОГДА ЕСНДополнительныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030008004,
		|	СУММА(ВЫБОР КОГДА (ЕСНДополнительныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриРожденииРебенка ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000060004003,
		|	СУММА(ВЫБОР КОГДА (ЕСНДополнительныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриРожденииРебенка ТОГДА ЕСНДополнительныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060004004,
		|	СУММА(ВЫБОР КОГДА (ЕСНДополнительныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНДополнительныеНачисления.ВидРасчета = &ВСвязиСоСмертью ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000060005003,
		|	СУММА(ВЫБОР КОГДА (ЕСНДополнительныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНДополнительныеНачисления.ВидРасчета = &ВСвязиСоСмертью ТОГДА ЕСНДополнительныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060005004,
		|	СУММА(ВЫБОР КОГДА (ЕСНДополнительныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриПостановкеНаУчетВРанниеСрокиБеременности ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000060007003,
		|	СУММА(ВЫБОР КОГДА (ЕСНДополнительныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриПостановкеНаУчетВРанниеСрокиБеременности ТОГДА ЕСНДополнительныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060007004,
		|	СУММА(ВЫБОР КОГДА (ЕСНДополнительныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриУсыновленииРебенка ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000060008003,
		|	СУММА(ВЫБОР КОГДА (ЕСНДополнительныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчет.УСН) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриУсыновленииРебенка ТОГДА ЕСНДополнительныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060008004
		|ИЗ
		|	РегистрРасчета.ЕСНДополнительныеНачисления КАК ЕСНДополнительныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ " + УчетнаяПолитикаНалоговыйУчетТекст + " КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО МЕСЯЦ(ЕСНДополнительныеНачисления.ПериодРегистрации) = УчетнаяПолитикаНалоговыйУчет.Месяц
		|
		|ГДЕ
		|	ЕСНДополнительныеНачисления.ПериодРегистрации >= &ДатаНачала И
		|	ЕСНДополнительныеНачисления.ПериодРегистрации <= &ДатаОкончания И
		|	ЕСНДополнительныеНачисления.ВидРасчета В(&СписокПособий) И
		|	ЕСНДополнительныеНачисления.ОбособленноеПодразделение = &парамОрганизация";
		
		Запрос.Текст = РасходыНаЦелиОбязательногоСС;
		ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
		
	КонецЕсли;
	
	// РАСЧЕТЫ ПО СРЕДСТВАМ ОБЯЗАТЕЛЬНОГО СОЦИАЛЬНОГО СТРАХОВАНИЯ 
	
	// Раздел I (табл. 2), Раздел II (табл 5) и Раздел III (табл 10)
	// Заполняем по данным бухгалтерского учета.
	
	Если ИДКонфигурации <> "ЗУП" Тогда
		
		// Инициализация
		ПС = ПланыСчетов["Хозрасчетный"];
		Счет51    = ПС.РасчетныеСчета;
		Счет69_01 = ПС.ФСС;
		Счет69_11 = ПС.ФСС_НСиПЗ;
		Счет69_13 = ПС.ФСС_СПЕЦ;
		Счет70    = ПС.РасчетыСПерсоналомПоОплатеТруда;
		Счет91    = ПС.ПрочиеДоходыИРасходы;

		// Бухгалтерский итоги по счетам
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();

		// Бухгалтерские итоги по аналитике
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();

		НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
		Если НомерМесяца = "12" Тогда
			НомерМесяца = "0";
		КонецЕсли;

		НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
		НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");
		
		Номер1МесяцаКвартала = НомерКвартала * 3 - 2;
		Номер2МесяцаКвартала = НомерКвартала * 3 - 1;
		Номер3МесяцаКвартала = НомерКвартала * 3;
		
		ДатаВ1МесяцеКвартала = Дата(НомерГода, Номер1МесяцаКвартала, 1);
		
		ДатаНачала1МесяцаКвартала = НачалоМесяца(ДатаВ1МесяцеКвартала);
		ДатаКонца1МесяцаКвартала  = КонецМесяца(ДатаВ1МесяцеКвартала);
		
		ДатаВо2МесяцеКвартала = Дата(НомерГода, Номер2МесяцаКвартала, 1);
		
		ДатаНачала2МесяцаКвартала = НачалоМесяца(ДатаВо2МесяцеКвартала);
		ДатаКонца2МесяцаКвартала  = КонецМесяца(ДатаВо2МесяцеКвартала);

		ДатаВ3МесяцеКвартала = Дата(НомерГода, Номер3МесяцаКвартала, 1);
		
		ДатаНачала3МесяцаКвартала = НачалоМесяца(ДатаВ3МесяцеКвартала);
		ДатаКонца3МесяцаКвартала  = КонецМесяца(ДатаВ3МесяцеКвартала);

		//**********************************************************************
		// Извлекаем данные за 1 месяц квартала
		
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 3 "Начислен единый социальный налог"
		ВзносыМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020003401", ВзносыМ1КВ);

		// строка 4 "Начислено по актам налоговых органов"
		ДоплатаВзносыАктМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		
		// строка 5 "Не принято к зачету расходов"
		НеПринятоМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020005401", НеПринятоМ1КВ);


		//****************
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "91", , "Организация", Организация);

		// строка 4 "Начислено по актам налоговых органов"
		УменьшениеВзносыАктМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет91);

		// строка 4 "Начислено по актам налоговых органов"
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020004401", ДоплатаВзносыАктМ1КВ - УменьшениеВзносыАктМ1КВ);


		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		// строка 6 "Получено от исполнительного органа Фонда"
		ПолученоИзФондаМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020006401", ПолученоИзФондаМ1КВ);

		// строка 16 "Перечислен единый социальный налог"
		ПеречисленоВзносовМ1КВ    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		ПеречисленоВзносовСамМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		ПеречисленоВзносовАктМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		ВозвратРасходовМ1КВ       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020016403", ПеречисленоВзносовМ1КВ + ПеречисленоВзносовСамМ1КВ + ПеречисленоВзносовАктМ1КВ + ВозвратРасходовМ1КВ);

		// строка 15 "Расходы на цели обязательного социального страхования"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);

		РасходыПоСтрахованиюМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);
		
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020015401", РасходыПоСтрахованиюМ1КВ);

		//************************************************************************
		// Извлекаем данные за 2 месяц квартала
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 3 "Начислен единый социальный налог"
		ВзносыМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020003501", ВзносыМ2КВ);

		// строка 4 "Начислено по актам налоговых органов"
		ДоплатаВзносыАктМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);

		// строка 5 "Не принято к зачету расходов"
		НеПринятоМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020005501", НеПринятоМ2КВ);

		//****************
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "91", , "Организация", Организация);

		// строка 4 "Начислено по актам налоговых органов"
		УменьшениеВзносыАктМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет91);

		// строка 4 "Начислено по актам налоговых органов"
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020004501", ДоплатаВзносыАктМ2КВ - УменьшениеВзносыАктМ2КВ);

		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		// строка 6 "Получено от исполнительного органа Фонда"
		ПолученоИзФондаМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020006501", ПолученоИзФондаМ2КВ);
		
		// строка 16 "Перечислен единый социальный налог"
		ПеречисленоВзносовМ2КВ    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		ПеречисленоВзносовСамМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		ПеречисленоВзносовАктМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		ВозвратРасходовМ2КВ       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020016503", ПеречисленоВзносовМ2КВ + ПеречисленоВзносовСамМ2КВ + ПеречисленоВзносовАктМ2КВ + ВозвратРасходовМ2КВ);

		// строка 15 "Расходы на цели обязательного социального страхования"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);

		РасходыПоСтрахованиюМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);
		
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020015501", РасходыПоСтрахованиюМ2КВ);

		//****************************************************************************
		// Извлекаем данные за 3 месяц квартала
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 3 "Начислено ЕСН, зачисляемого в ФСС РФ"
		ВзносыМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020003601", ВзносыМ3КВ);

		// строка 4 "Начислено по актам налоговых органов"
		ДоплатаВзносыАктМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		
		// строка 5 "Не принято к зачету расходов"
		НеПринятоМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020005601", НеПринятоМ3КВ);


		//****************
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "91", , "Организация", Организация);

		// строка 4 "Начислено по актам налоговых органов"
		УменьшениеВзносыАктМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет91);

		// строка 4 "Начислено по актам налоговых органов"
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020004601", ДоплатаВзносыАктМ3КВ - УменьшениеВзносыАктМ3КВ);

		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		// строка 6 "Получено от исполнительного органа Фонда"
		ПолученоИзФондаМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020006601", ПолученоИзФондаМ3КВ);

		// строка 16 "Перечислен единый социальный налог"
		ПеречисленоВзносовМ3КВ    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		ПеречисленоВзносовСамМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		ПеречисленоВзносовАктМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		ВозвратРасходовМ3КВ       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020016603", ПеречисленоВзносовМ3КВ + ПеречисленоВзносовСамМ3КВ + ПеречисленоВзносовАктМ3КВ + ВозвратРасходовМ3КВ);
		
		// строка 15 "Расходы на цели обязательного социального страхования"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);

		РасходыПоСтрахованиюМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020015601", РасходыПоСтрахованиюМ3КВ);
		
		//****************************************************************************
		// В целом за квартал

		// Бухгалтерские итоги по счетам и аналитике
		ИтогиРС = "НачальныйОстатокДт, НачальныйОстатокКт, КонечныйОстатокДт, КонечныйОстатокКт, ОборотДт, ОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);

		СНК_Взносы = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		СНД_Взносы = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		СКД_Взносы = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт",  "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		КО_Взносы  = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		СНК_ВзносыСам = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		СНД_ВзносыСам = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		КО_ВзносыСам  = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогСам);

		СНК_ВзносыАкт = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		СНД_ВзносыАкт = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		КО_ВзносыАкт  = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);

		СНК_РасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		СНД_РасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		СКД_РасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт",  "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);

		СНК_ПолученоИзФонда = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда);
		СНД_ПолученоИзФонда = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда);
		
		КО_НеПринято = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		
		Задолж =  СНК_Взносы + СНК_ВзносыСам + СНК_ВзносыАкт + СНК_РасходыПоСтрахованию + СНК_ПолученоИзфонда
		       - (СНД_Взносы + СНД_ВзносыСам + СНД_ВзносыАкт + СНД_РасходыПоСтрахованию + СНД_ПолученоИзфонда);

		Если Задолж > 0 Тогда 

			// строка 1 "Задолженность за страхователем на начало года"
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020001003", Задолж);

		Иначе 
			// строка 12 "Задолженность за исполнительным органом Фонда на начало года"
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020012003", -Задолж);

			// строка 13 "Задолженность за исполнительным органом Фонда на начало года за счет превышения расходов"
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020013003", СНД_РасходыПоСтрахованию);

			// строка 14 "Задолженность за исполнительным органом Фонда на начало года за счет переплаты по единому социальному налогу"
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020014003", СНД_Взносы);
			
		КонецЕсли;

		//****************
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "91", , "Организация", Организация);

		// строка 2 "Изменения начисленного единого социального налога в соответствии 
		// с налоговой декларацией за прошлые годы"
		ДоплатаВзносыСам = КО_ВзносыСам;
		
		УменьшениеВзносыСам = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет91);
		
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020002003", ДоплатаВзносыСам - УменьшениеВзносыСам);

		// строка 10 "Задолженность за исполнительным органом Фонда на конец 
		// отчетного периода за счет за счет превышения расходов"
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020010003", СКД_РасходыПоСтрахованию);

		
		// строка 11 "Задолженность за исполнительным органом Фонда на конец 
		// отчетного периода за счет переплаты по единому социальному налогу"
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020011003", СКД_Взносы);
		
		// строка 3 "Начислен единый социальный налог"
		ВзносыКВН = КО_Взносы;
		
		// на начало квартала
		ВзносыНачКВ = ВзносыКВН - (ВзносыМ1КВ + ВзносыМ2КВ + ВзносыМ3КВ);
		
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020003201", ВзносыНачКВ);
		
		// строка 4 "Начислено по актам налоговых органов"
		ДоплатаВзносыАктКВН = КО_ВзносыАкт;
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "91", , "Организация", Организация);

		// строка 4 "Начислено по актам налоговых органов"
		УменьшениеВзносыАктКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет91);

		// на начало квартала
		ДоплатаВзносыАктНачКВ    = ДоплатаВзносыАктКВН - (ДоплатаВзносыАктМ1КВ + ДоплатаВзносыАктМ2КВ + ДоплатаВзносыАктМ3КВ);
		УменьшениеВзносыАктНачКВ = УменьшениеВзносыАктКВН - (УменьшениеВзносыАктМ1КВ + УменьшениеВзносыАктМ2КВ + УменьшениеВзносыАктМ3КВ);

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020004201", ДоплатаВзносыАктНачКВ - УменьшениеВзносыАктНачКВ);

		// строка 5 "Не принято к зачету расходов исполнительным органом Фонда"
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020005003", КО_НеПринято);
		
		// на начало квартала
		НеПринятоНачКВ = КО_НеПринято - (НеПринятоМ1КВ + НеПринятоМ2КВ + НеПринятоМ3КВ);

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020005201", НеПринятоНачКВ);
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		// строка 6 "Получено от исполнительного органа Фонда на банковский счет в возмещение произведенных расходов"
		ПолученоИзФондаКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		
		ПолученоИзФондаНачКВ = ПолученоИзФондаКВН - (ПолученоИзФондаМ1КВ + ПолученоИзФондаМ2КВ + ПолученоИзФондаМ3КВ);

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020006201", ПолученоИзФондаНачКВ);
		
		// строка 16 "Перечислен единый социальный налог"
		ПеречисленоВзносовКВН    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		ПеречисленоВзносовСамКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		ПеречисленоВзносовАктКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		ВозвратРасходовКВН       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		
		// на начало квартала 
		ПеречисленоВзносовНачКВ    = ПеречисленоВзносовКВН - (ПеречисленоВзносовМ1КВ + ПеречисленоВзносовМ2КВ + ПеречисленоВзносовМ3КВ);
		ПеречисленоВзносовСамНачКВ = ПеречисленоВзносовСамКВН - (ПеречисленоВзносовСамМ1КВ + ПеречисленоВзносовСамМ2КВ + ПеречисленоВзносовСамМ3КВ);
		ПеречисленоВзносовАктНачКВ = ПеречисленоВзносовАктКВН - (ПеречисленоВзносовАктМ1КВ + ПеречисленоВзносовАктМ2КВ + ПеречисленоВзносовАктМ3КВ);
		ВозвратРасходовНачКВ       = ВозвратРасходовКВН - (ВозвратРасходовМ1КВ + ВозвратРасходовМ2КВ + ВозвратРасходовМ3КВ);
		
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020016203", ПеречисленоВзносовНачКВ + ПеречисленоВзносовСамНачКВ + ПеречисленоВзносовАктНачКВ + ВозвратРасходовНачКВ);
		
		// строка 15 "Расходы на цели обязательного социального страхования"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);

		РасходыПоСтрахованиюКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);

		РасходыПоСтрахованиюНачКВ = РасходыПоСтрахованиюКВН - (РасходыПоСтрахованиюМ1КВ + РасходыПоСтрахованиюМ2КВ + РасходыПоСтрахованиюМ3КВ);

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000020015201", РасходыПоСтрахованиюНачКВ);
		
		// Таблица 5

		// В целом за квартал

		// Бухгалтерские итоги по счету, без аналитики
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", "НачальныйОстатокДт, НачальныйОстатокКт", "Сумма", "Счет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , , , , , "Организация", Организация);

		// строка 1 "Задолженность за страхователем на начало года"
		СНК_Расходы = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет69_13);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000050001003", СНК_Расходы);

		// строка 5 " Задолженность за исполнительным органом Фонда на начало года"
		СНД_Расходы = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет69_13);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000050005003", СНД_Расходы);

		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.13", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыРасчетовПоСредствамФСС, "51", , "Организация", Организация);
		
		// строка 2 "Получено от исполнительного органа Фонда на банковский счет для обеспечения выплат на цели социального страхования"
		ПолученоИзФонда = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Субконто1, КорСчет", Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию, Счет51);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000050002003", ПолученоИзФонда);

		// строка 7 "Перечислено страхователем"
		ПеречисленоСтрахователем = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыРасчетовПоСредствамФСС.ПеречисленоСтрахователем, Счет51);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000050007003", ПеречисленоСтрахователем);

		// строка 6 "Расходы на цели обязательного социального страхования"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.13", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыРасчетовПоСредствамФСС, "70", , "Организация", Организация);

		РасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию, Счет70);
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000050006003", РасходыПоСтрахованию);

		// Таблица 10

		//**********************************************************************
		// Извлекаем данные за 1 месяц квартала
		
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 2 "Начислено страховых взносов"
		НСиПЗВзносыМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100002401", НСиПЗВзносыМ1КВ);

		//****************
		// строка 10 "Расходы по обязательному социальному страхованию"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);

		НСиПЗРасходыПоСтрахованиюМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);
		
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100010401", НСиПЗРасходыПоСтрахованиюМ1КВ);
		
		// строка 11 "Перечислено страхователем"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		НСиПЗПеречисленоВзносовМ1КВ    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		НСиПЗПеречисленоВзносовСамМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		НСиПЗПеречисленоВзносовАктМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		НСиПЗВозвратРасходовМ1КВ       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100011403", НСиПЗПеречисленоВзносовМ1КВ + НСиПЗПеречисленоВзносовСамМ1КВ + НСиПЗПеречисленоВзносовАктМ1КВ + НСиПЗВозвратРасходовМ1КВ);

		//**********************************************************************
		// Извлекаем данные за 2 месяц квартала
		
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 2 "Начислено страховых взносов"
		НСиПЗВзносыМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100002501", НСиПЗВзносыМ2КВ);

		//****************
		// строка 10 "Расходы по обязательному социальному страхованию"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);

		НСиПЗРасходыПоСтрахованиюМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);
		
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100010501", НСиПЗРасходыПоСтрахованиюМ2КВ);
		
		// строка 11 "Перечислено страхователем"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		НСиПЗПеречисленоВзносовМ2КВ    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		НСиПЗПеречисленоВзносовСамМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		НСиПЗПеречисленоВзносовАктМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		НСиПЗВозвратРасходовМ2КВ       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100011503", НСиПЗПеречисленоВзносовМ2КВ + НСиПЗПеречисленоВзносовСамМ2КВ + НСиПЗПеречисленоВзносовАктМ2КВ + НСиПЗВозвратРасходовМ2КВ);

		//**********************************************************************
		// Извлекаем данные за 3 месяц квартала
		
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 2 "Начислено страховых взносов"
		НСиПЗВзносыМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100002601", НСиПЗВзносыМ3КВ);

		//****************
		// строка 10 "Расходы по обязательному социальному страхованию"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);

		НСиПЗРасходыПоСтрахованиюМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);
		
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100010601", НСиПЗРасходыПоСтрахованиюМ3КВ);
		
		// строка 11 "Перечислено страхователем"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		НСиПЗПеречисленоВзносовМ3КВ    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		НСиПЗПеречисленоВзносовСамМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		НСиПЗПеречисленоВзносовАктМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		НСиПЗВозвратРасходовМ3КВ       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100011603", НСиПЗПеречисленоВзносовМ3КВ + НСиПЗПеречисленоВзносовСамМ3КВ + НСиПЗПеречисленоВзносовАктМ3КВ + НСиПЗВозвратРасходовМ3КВ);

		//****************************************************************************
		// В целом за квартал

		// Бухгалтерские итоги по счетам и аналитике
		ИтогиРС = "НачальныйОстатокДт, НачальныйОстатокКт, КонечныйОстатокДт, КонечныйОстатокКт, ОборотДт, ОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);

		СНК_НСиПЗВзносы = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		СНД_НСиПЗВзносы = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		СКД_НСиПЗВзносы = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт",  "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		КО_НСиПЗВзносы  = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		СНК_НСиПЗВзносыСам = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		СНД_НСиПЗВзносыСам = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		КО_НСиПЗВзносыСам  = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогСам);

		СНК_НСиПЗВзносыАкт = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		СНД_НСиПЗВзносыАкт = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		КО_НСиПЗВзносыАкт  = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);

		СНК_НСиПЗРасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		СНД_НСиПЗРасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		СКД_НСиПЗРасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт",  "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);

		СНК_НСиПЗПолученоИзФонда = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда);
		СНД_НСиПЗПолученоИзФонда = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда);
		
		КО_НСиПЗНеПринято = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		
		Задолж =  СНК_НСиПЗВзносы + СНК_НСиПЗВзносыСам + СНК_НСиПЗВзносыАкт + СНК_НСиПЗРасходыПоСтрахованию + СНК_НСиПЗПолученоИзфонда
		       - (СНД_НСиПЗВзносы + СНД_НСиПЗВзносыСам + СНД_НСиПЗВзносыАкт + СНД_НСиПЗРасходыПоСтрахованию + СНД_НСиПЗПолученоИзфонда);

		Если Задолж > 0 Тогда 

			// строка 1 "Задолженность за страхователем на начало года"
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100001003", Задолж);

		Иначе 
			// строка 9 "Задолженность за исполнительным органом Фонда на начало года"
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100009003", -Задолж);

		КонецЕсли;

		//****************
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "91", , "Организация", Организация);

		// строка 5 "Начислено взносов страхователем за прошлые годы"
		НСиПЗДоплатаВзносыСам = КО_НСиПЗВзносыСам;
		
		НСиПЗУменьшениеВзносыСам = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет91);
		
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100005003", НСиПЗДоплатаВзносыСам - НСиПЗУменьшениеВзносыСам);

		// строка 2 "Начислено страховых взносов"
		НСиПЗВзносыКВН = КО_НСиПЗВзносы;
		
		// на начало квартала
		НСиПЗВзносыНачКВ = НСиПЗВзносыКВН - (НСиПЗВзносыМ1КВ + НСиПЗВзносыМ2КВ + НСиПЗВзносыМ3КВ);
		
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100002101", НСиПЗВзносыНачКВ);
		
		// строка 3 "Начислено взносов по результатам проверок"
		НСиПЗДоплатаВзносыАктКВН = КО_НСиПЗВзносыАкт;
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "91", , "Организация", Организация);

		// строка 3 "Начислено взносов по результатам проверок"
		НСиПЗУменьшениеВзносыАктКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет91);

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100003003", НСиПЗДоплатаВзносыАктКВН - НСиПЗУменьшениеВзносыАктКВН);

		// строка 4 "Не принято к зачету расходов исполнительным органом Фонда"
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100004003", КО_НСиПЗНеПринято);
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		// строка 6 "Получено от исполнительного органа Фонда на банковский счет"
		НСиПЗПолученоИзФондаКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100006003", НСиПЗПолученоИзФондаКВН);
		
		// строка 11 "Перечислено страхователем"
		НСиПЗПеречисленоВзносовКВН    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		НСиПЗПеречисленоВзносовСамКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		НСиПЗПеречисленоВзносовАктКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		НСиПЗВозвратРасходовКВН       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		
		// на начало квартала 
		НСиПЗПеречисленоВзносовНачКВ    = НСиПЗПеречисленоВзносовКВН - (НСиПЗПеречисленоВзносовМ1КВ + НСиПЗПеречисленоВзносовМ2КВ + НСиПЗПеречисленоВзносовМ3КВ);
		НСиПЗПеречисленоВзносовСамНачКВ = НСиПЗПеречисленоВзносовСамКВН - (НСиПЗПеречисленоВзносовСамМ1КВ + НСиПЗПеречисленоВзносовСамМ2КВ + НСиПЗПеречисленоВзносовСамМ3КВ);
		НСиПЗПеречисленоВзносовАктНачКВ = НСиПЗПеречисленоВзносовАктКВН - (НСиПЗПеречисленоВзносовАктМ1КВ + НСиПЗПеречисленоВзносовАктМ2КВ + НСиПЗПеречисленоВзносовАктМ3КВ);
		НСиПЗВозвратРасходовНачКВ       = НСиПЗВозвратРасходовКВН - (НСиПЗВозвратРасходовМ1КВ + НСиПЗВозвратРасходовМ2КВ + НСиПЗВозвратРасходовМ3КВ);
		
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100011103", НСиПЗПеречисленоВзносовНачКВ + НСиПЗПеречисленоВзносовСамНачКВ + НСиПЗПеречисленоВзносовАктНачКВ + НСиПЗВозвратРасходовНачКВ);
		
		// строка 10 "Расходы по обязательному социальному страхованию"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);

		НСиПЗРасходыПоСтрахованиюКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);

		НСиПЗРасходыПоСтрахованиюНачКВ = НСиПЗРасходыПоСтрахованиюКВН - (НСиПЗРасходыПоСтрахованиюМ1КВ + НСиПЗРасходыПоСтрахованиюМ2КВ + НСиПЗРасходыПоСтрахованиюМ3КВ);

		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, "П000100010101", НСиПЗРасходыПоСтрахованиюНачКВ);
		
	КонецЕсли;

	// -------------------------------------------------------------------------------
	// Расчет автовычисляемых полей
	Расчет();
	
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьАвто()

Процедура ЗаполнитьАвтоВнешний()  Экспорт

Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		Предупреждение("Заполнение по данным информационной базы не предусмотрено!");
		Возврат;
	КонецЕсли;
	
	// запрашиваем подтверждение у пользователя и очищаем отчет
	ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма);
	Если ПрерватьАвтоЗаполнение Тогда
		Возврат;
	КонецЕсли;

	// заполняем содержательную часть
	Если ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		ПараметрыОтчета = РегламентированнаяОтчетность.СформироватьСтруктуруПараметровОтчетаДляЗаполнения(ЭтаФорма);
		ПараметрыОтчета.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		ПараметрыОтчета.Вставить("ТочностьЕдиницыИзмерения", ТочностьЕдиницыИзмерения);
		ДанныеЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьДанныеЗаполненияОтчета(ЭтаФорма, , мВыбраннаяФорма, , ПараметрыОтчета);
		Если ТипЗнч(ДанныеЗаполненияОтчета) = Тип("ДеревоЗначений") Тогда
			Для Каждого СтрУровня1 Из ДанныеЗаполненияОтчета.Строки Цикл
				Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
					РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, СтрУровня2.Имя, СтрУровня2.Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Расчет();
	
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);


КонецПроцедуры   //ЗаполнитьАвтоВнешний

Процедура НачальнаяПодготовкаФормы() Экспорт 

	Перем ИсходноеКоличествоСтрокГруппы;

	мВПрограммеИзмененаОрганизация = Ложь;

	мВПрограммеИзмененаОрганизация = Ложь;

	мДокументВосстановлен = Ложь;

	мАдресвФорматеДляВыгрузки = "";

	мАвтоВыборКодов = Ложь;
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();


	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);
	мТитульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_1;
	мРаздел1_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_2;
	мРаздел2_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_1;
	мРаздел2_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_2;
	мРаздел2_3 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_3;
	мРаздел2_4 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_4;
	мРаздел3_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел3_1;
	мРаздел3_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел3_2;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;

					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			УстановитьФорматВывода();
			мРаздел1_2.Области.УтвАссигнований.Значение = "Утверждено ассигнований на " + Формат(мДатаНачалаПериодаОтчета, "ДФ=гггг") + " год (сумма";
			мРаздел2_2.Области.УтвАссигнований.Значение = "Утверждено ассигнований на " + Формат(мДатаНачалаПериодаОтчета, "ДФ=гггг") + " год (сумма";
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	// ИНИЦИАЛИЗАЦИЯ ЗАПОЛНЕНИЯ СОДЕРЖАТЕЛЬНОЙ ЧАСТИ ПО УЧЕТНЫМ ДАННЫМ
	
	СвойстваЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьСвойстваЗаполненияОтчета(ЭтотОбъект, мВыбраннаяФорма);
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда 	
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета);
	КонецЕсли;
	Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ") Тогда
		//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
		ИзМакета = Истина;
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);		
	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	
	ПоказатьПериод();

	// В случае, если по F9 поменяли организацию при копировании, тогда в переменную
	// мВПрограммеИзмененаОрганизация будет записано значение Истина;
	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда

		ЗаполнитьДатуВЯчейках();
		ЗаполнитьСведенияОбОрганизации();

	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

КонецПроцедуры

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	ФормироватьСтруктуруСвойствСтраниц();

	НачальнаяПодготовкаФормы();
	
	ДоступностьКнопокДобавитьУдалить();

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью кнопок "Добавить" и "Удалить" формы.
// 
Процедура ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть = Неопределено)

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не ТекущаяОбласть = Неопределено Тогда
		КнопкаДобавитьУдалить = ЭлементыФормы.Найти("КнопкаУдалитьДопСтроки" + ИмяТекущейСтраницыПанели);

		Если КнопкаДобавитьУдалить <> Неопределено Тогда
			Если РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть ) = Неопределено Тогда
				КнопкаДобавитьУдалить.Доступность = Ложь;
			Иначе
				КнопкаДобавитьУдалить.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДоступностьКнопокДобавитьУдалить()

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	// сделано, для того, чтобы не переделывать процедуры и функции где есть имя Лист02
	//ИмяТекущейСтраницыПанели = "Лист02";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";

		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = "Значение вычисляется автоматически";
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = "Значение вводится вручную";
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 240, 200) Тогда
			ОписаниеЯчейки    = "Либо вручную, либо автоматически";

		КонецЕсли;
	Попытка
	// попытки сделаны для того, чтобы если автозапол только 4
	// на всем листе, то не пытаться выводить в комбобоксы
	// т.к. их может в этом случае не быть просто на форме
	// сделано для универсальности, пример есть в Имуществе
		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;
	Исключение
		// в случае, если на листе не предусмотре автоматическое заполнение, кроме признака 4
	КонецПопытки;

	КонецЕсли;

	
	Попытка
	// попытки сделаны для того, чтобы если автозапол только 4
	// на всем листе, то не пытаться выводить в комбобоксы
	// т.к. их может в этом случае не быть просто на форме
	// сделано для универсальности, пример есть в Имуществе
	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;
	Исключение
		// в случае, если на листе не предусмотре автоматическое заполнение, кроме признака 4
	КонецПопытки;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	Если СвойстваЗаполненияОтчета = Неопределено Тогда 
		ЗаполнитьАвтоВнутренний();
	Иначе
		ЗаполнитьАвтоВнешний();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИдГруппы <> Неопределено Тогда
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
		ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	КонецЕсли;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	// управляем доступностью кнопок "Добавить" и "Удалить"
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);

	// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Переформируем листы ФЛ
	//ЗаполнитьСведенияОбФЛ(Истина);

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Истина;

	// Заполним дату на листах
	ЗаполнитьДатуВЯчейках();

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Ложь;

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел I (табл. 1, 2)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел I (табл. 3)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел1_2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел II (табл. 4, 5)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел2_1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел II (табл. 6)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел2_2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел III (таблицы 9, 10)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел3_1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел3_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел III (таблицы 11, 12)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел3_2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел3_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел I (табл. 1, 2)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел I (табл. 3)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел1_2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел II (табл. 4, 5)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2_1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел II (табл. 6)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2_2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел 2.1" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел3_1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел3_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел III (таблицы 11, 12)"
// панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел3_2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел3_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел I (табл. 1, 2)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел1_1ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментария на странице "Раздел I (табл.3)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел1_2ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел II (табл. 4, 5)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2_1ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел II (табл. 6)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2_2ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел III (таблицы 9, 10)" по ячейке, 
// для которой установлен/ алгоритм автозаполнения [автоматически 
// с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел3_1ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел3_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел III (таблицы 11, 12)" по ячейке, 
// для которой установлен/ алгоритм автозаполнения [автоматически 
// с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел3_2ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел3_2ПриИзменении()


// Процедура вызывается при активизации поля табличного документа на странице 
// "Раздел I (табл. 1, 2)" основной панели формы. Определяет текущую область 
// табличного документа и вызывает процедуру управления доступностью 
// полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел1_1ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_1ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел1_2ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел2_2ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_2ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице 
// "Раздел III (табл. 9, 10)" основной панели формы. Определяет текущую область 
// табличного документа и вызывает процедуру управления доступностью 
// полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел3_1ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел3_1ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел3_2ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел3_2ПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел I (табл. 1, 2)" основной 
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает 
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел1_1ПриИзменении(Элемент)

	Расчет("Раздел1_1");
	//ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_1ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел I (табл. 3)" основной панели 
// формы. Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел1_2ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	Расчет("Раздел1_2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел II (табл. 4, 5)" основной панели 
// формы. Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_1ПриИзменении(Элемент)

	Расчет("Раздел2_1");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел II (табл. 6)" основной панели 
// формы. Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_2ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	Расчет("Раздел2_2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_2ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел II (табл. 7)" основной панели 
// формы. Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_3ПриИзменении(Элемент)

	Расчет("Раздел2_3");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_3ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел II (табл. 8)" основной панели 
// формы. Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_4ПриИзменении(Элемент)

	Расчет("Раздел2_4");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_4ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел III (табл. 9, 10)" основной 
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает 
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел3_1ПриИзменении(Элемент)

	Расчет("Раздел3_1");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел3_1ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел III (табл. 11, 12)" основной 
// панели формы.Вызывает пересчет связанных показателей отчета и устанавливает 
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел3_2ПриИзменении(Элемент)

	Расчет("Раздел3_2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел3_2ПриИзменении()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	//мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_1";
	СтрокаУровня1.Представление            = "Раздел I (таблицы 1, 2)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_2";
	СтрокаУровня1.Представление            = "Раздел I (таблица 3)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_1";
	СтрокаУровня1.Представление            = "Раздел II (таблицы 4, 5)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_2";
	СтрокаУровня1.Представление            = "Раздел II (таблица 6)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_3";
	СтрокаУровня1.Представление            = "Раздел II (таблица 7)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_4";
	СтрокаУровня1.Представление            = "Раздел II (таблица 8)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_1";
	СтрокаУровня1.Представление            = "Раздел III (таблицы 9, 10)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_2";
	СтрокаУровня1.Представление            = "Раздел III (таблицы 11, 12)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2005Кв1");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ОбновитьПараметрыАвтозаполненияЯчейки();
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

Процедура ПолеТабличногоДокументаТитульныйАдресПриИзменении(Элемент)

	Модифицированность = Истина;
	мАдресвФорматеДляВыгрузки = Элемент.Значение;

КонецПроцедуры

Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	Если (Область.Имя = "ОргЮрАдрес") И (НЕ мАвтоВыборКодов) Тогда

		СтандартнаяОбработка = Ложь;

		ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", мАдресвФорматеДляВыгрузки);

		Если ВводАдреса.ОткрытьМодально() Тогда

			Если Область.Имя = "ОргЮрАдрес" Тогда
				мАдресвФорматеДляВыгрузки = ВводАдреса.НачальноеЗначениеВыбора.Представление;
				Если мАдресвФорматеДляВыгрузки = ",,,,,,,,," Тогда
					мАдресвФорматеДляВыгрузки = "";
				КонецЕсли;

				Область.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузки);

			КонецЕсли;

			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// 
Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

ОписаниеТиповЧисло  = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);
ОписаниеТиповЧисло5 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5);

ОписаниеТиповЧислоЧ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5, 0);

ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1  = "П0000300140"; // Раздел1, табл. 3
мИдГруппы2  = "П0000600140";
мИдГруппы3  = "П0001100080";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 1;
КолИсхСтрокИдГруппы2 = 1;
КолИсхСтрокИдГруппы3 = 1;

// структура строк многострочного раздела на странице
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000030014001", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П000030014003", ОписаниеТиповЧислоЧ);
СтруктураГруппы1.Колонки.Добавить("П000030014004", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000030014005", ОписаниеТиповЧисло);

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000060014001", ОписаниеТиповСтрока254);
СтруктураГруппы2.Колонки.Добавить("П000060014003", ОписаниеТиповЧислоЧ);
СтруктураГруппы2.Колонки.Добавить("П000060014004", ОписаниеТиповЧисло);
СтруктураГруппы2.Колонки.Добавить("П000060014005", ОписаниеТиповЧисло);

СтруктураГруппы3 = Новый ТаблицаЗначений;
СтруктураГруппы3.Колонки.Добавить("П000110008001", ОписаниеТиповСтрока254);
СтруктураГруппы3.Колонки.Добавить("П000110008003", ОписаниеТиповЧислоЧ);
СтруктураГруппы3.Колонки.Добавить("П000110008004", ОписаниеТиповЧисло);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы3, СтруктураГруппы3);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы3, КолИсхСтрокИдГруппы3);

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;


//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "01/03/2005";

// Код отчета условный
мКодОтчета   = 1159999;

мПечатныеФормы = Новый СписокЗначений;