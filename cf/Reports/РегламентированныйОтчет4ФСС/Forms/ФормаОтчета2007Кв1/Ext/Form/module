////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мРаздел1_1;
Перем мРаздел1_2;
Перем мРаздел2_1;
Перем мРаздел2_2;
Перем мРаздел2_3;
Перем мРаздел2_4;
Перем мРаздел3_1;
Перем мРаздел3_2;

Перем мОписаниеТиповБулево;

Перем мСоставПоказателей Экспорт;

// Хранят имена многострочных разделов
Перем мИдГруппы1;
Перем мИдГруппы2;
// Перем мИдГруппы3;
//Перем мИдГруппы4;
//Перем мИдГруппы5;
//Перем мИдГруппы6;
//Перем мИдГруппы7;

Перем мВПрограммеИзмененаОрганизация;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель Экспорт;

// Хранит код отчета по КНД
Перем мКодОтчета Экспорт;

// Хранит версию формы отчета
Перем мВерсияФормы Экспорт;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// Переменные хранят параметры дополнительных листов
Перем НомТекГруппы;

// Служебнны переменные, для хранения пределов ставок
Перем мСт_100000;
Перем мСт_300000;

Перем мИННЮЛ;
Перем мКППЮЛ;

Перем мПечатныеФормы Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;
Перем мОписаниеТиповЧислоЕ Экспорт;

Перем мДокументВосстановлен;

Перем мАдресвФорматеДляВыгрузки;

Перем мПоляПоискаПоказателяВТСП Экспорт;

Перем мСтруктураДанныхОтчетаXMLКонтейнер Экспорт;
Перем ИДКонфигурации;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_4";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел3_1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел3_2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы)
	Перем ТекТабличноеПоле;

	Если ИдГруппы = мИдГруппы1 Тогда
	// ИЛИ ИдГруппы = мИдГруппы2 Тогда

		ТекТабличноеПоле = мРаздел1_2;
	ИначеЕсли ИдГруппы = мИдГруппы2 Тогда
		ТекТабличноеПоле = мРаздел2_2;

	//ИначеЕсли ИдГруппы = мИдГруппы3 Тогда
	//	ТекТабличноеПоле = мРаздел3_2;

	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()
	Перем ИмяГруппы;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если ИмяТекущейСтраницыПанели = "Раздел1_2" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел1_2.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_2" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_2.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_3" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_3.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_4" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_4.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3_2" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел3_2.ТекущаяОбласть);
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаТитульный" Тогда
		СтруктураДанныхПоля.Вставить("ОргЮрАдрес", мАдресвФорматеДляВыгрузки);
	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		//Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
		//	Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
		//		мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
		//		ЕстьИзменения = Истина;
		//	КонецЕсли;

		//КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = Ложь;
		
		Если ВариантЗаполнения = 4 Тогда

			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;

		Иначе

			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;

		КонецЕсли;

		// установим цвет ячейки
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);

		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			//ЗначениеВКвадратах = ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяПоказателя);
			ЗначениеВКвадратах = Ложь;

			Если ВариантЗаполнения = 4 Тогда
				//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

			Иначе

					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;

			КонецЕсли;

				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов() Экспорт
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];

			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки    = Колонка.Имя;
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейки.СодержитЗначение Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина");

	// Период на титульном листе
	мТитульный.Области.ПериодОтчета.Значение = "за " + СтрПериодОтчета;
	
	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

	Номер1МесяцаКвартала = НомерКвартала * 3 - 2;
	Номер2МесяцаКвартала = НомерКвартала * 3 - 1;
	Номер3МесяцаКвартала = НомерКвартала * 3;
	
	Название1МесяцаКвартала = Формат(Дата(НомерГода, Номер1МесяцаКвартала, 1), "ДФ=ММММ");
	Название2МесяцаКвартала = Формат(Дата(НомерГода, Номер2МесяцаКвартала, 1), "ДФ=ММММ");
	Название3МесяцаКвартала = Формат(Дата(НомерГода, Номер3МесяцаКвартала, 1), "ДФ=ММММ");
	
	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке3.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке3.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке3.Значение = Название3МесяцаКвартала;

	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке4.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке4.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке4.Значение = Название3МесяцаКвартала;

	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке5.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке5.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке5.Значение = Название3МесяцаКвартала;
	
	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке6.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке6.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке6.Значение = Название3МесяцаКвартала;
	
	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке7.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке7.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке7.Значение = Название3МесяцаКвартала;

	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке15.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке15.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке15.Значение = Название3МесяцаКвартала;

	//мРаздел3_1.Области.Название1МесяцаКвартала.Значение = Название1МесяцаКвартала;
	//мРаздел3_1.Области.Название2МесяцаКвартала.Значение = Название2МесяцаКвартала;
	//мРаздел3_1.Области.Название3МесяцаКвартала.Значение = Название3МесяцаКвартала;
	
	мРаздел3_1.Области.Название1МесяцаКварталаВСтроке2.Значение = Название1МесяцаКвартала;
	мРаздел3_1.Области.Название2МесяцаКварталаВСтроке2.Значение = Название2МесяцаКвартала;
	мРаздел3_1.Области.Название3МесяцаКварталаВСтроке2.Значение = Название3МесяцаКвартала;

	мРаздел3_1.Области.Название1МесяцаКварталаВСтроке10.Значение = Название1МесяцаКвартала;
	мРаздел3_1.Области.Название2МесяцаКварталаВСтроке10.Значение = Название2МесяцаКвартала;
	мРаздел3_1.Области.Название3МесяцаКварталаВСтроке10.Значение = Название3МесяцаКвартала;
	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом даты представления отчета в соответствующие
// области табличного документа.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	мТитульный.Области.ДатаВысылкиОтчета.Значение = Формат(ДатаПодписи, "ДФ=""д ММММ гггг 'г.' """);
	мРаздел3_2.области.ДатаОтчета.Значение = Формат(ДатаПодписи, "ДФ=""д ММММ гггг 'г.' """);

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Получить ПолучитьРазмерСтраховогоТарифа
// Нельзя вызывать без проверки на пустую организацию
//
// возвращает размер страхового тарифа на дату конца отчетного периода
//
Функция ПолучитьРазмерСтраховогоТарифа()

	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "СтраховойТариф");
	СтраховойТариф = Неопределено;
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, Сведения);
	ОргСведения.Свойство("СтраховойТариф", СтраховойТариф);
	Возврат СтраховойТариф;

КонецФункции // ПолучитьРазмерСтраховогоТарифа

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Попытка
		
		Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
			Возврат
		КонецЕсли;
		
		ПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
		
		// Составляем список данных, необходимых для вывода в декларацию
		Сведения = Новый СписокЗначений;
		
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			Сведения.Добавить("", "ИННЮЛ"); // ИНН
			Сведения.Добавить("", "КППЮЛ"); // КПП
			
			Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 
			
			//Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
			//Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
			
			Сведения.Добавить("", "ОГРН"); // ОГРН
			Сведения.Добавить("", "ОКАТО"); // ОКАТО
			Сведения.Добавить("", "ОКПО");
			Сведения.Добавить("", "ОКВЭД");
			Сведения.Добавить("", "ОснВидДеят");
			Сведения.Добавить("", "ОКОПФ");
			Сведения.Добавить("", "ОКФС");
			Сведения.Добавить("", "ФормСобств");
			Сведения.Добавить("", "РегистрационныйНомерФСС");
			//В поле "Адрес" указывается:
			//- для организации - место ее государственной регистрации (место нахождения);
			//- для обособленного подразделения - место его нахождения;
			//- для физического лица - полный адрес постоянного места жительства физического лица на основании документа, удостоверяющего его личность, либо иного документа, подтверждающего адрес постоянного места жительства.
			
			Если ПБОЮЛ Тогда
				Сведения.Добавить("", "АдрПрописки");
			Иначе
				Сведения.Добавить("", "АдрЮР");
			КонецЕсли;
			
		КонецЕсли;
		
		Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
		Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
		Сведения.Добавить("", "ФИО"); // ФИО предпринимателя
		Сведения.Добавить("", "ФИОИсп"); // ФИО исполнителя
		Сведения.Добавить("", "ТелИсп");
		Сведения.Добавить("", "ТелОрганизации");
		
		
		// Теперь получаем данные из глобальной общей функции
		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
		
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			// Инициализируем переменные
			ИННЮЛ = ""; // ИНН
			КППЮЛ = ""; // КПП
			
			НаимЮЛПол = ""; // Полное наименование 
			
			ОГРН = ""; // ОГРН
			ОКАТО = ""; // ОКАТО
			ОКПО = "";
			ОКВЭД = "";
			
			АдрЮР = "";
			
			ОснВидДеят = "";
			
			ФормСобств = "";
			
			ОКОПФ = "";
			
			ОКФС = "";
			
			РегистрационныйНомерФСС = "";
			
		КонецЕсли;
		
		ФИОРук = ""; // ФИО руководителя
		ФИОБух = ""; // ФИО бухгалтера
		ФИО = "";
		ФИОИсп = "";
		ТелИсп = "";
		ТелОрганизации = "";
		
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			// Получаем данные
			ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
			ОргСведения.Свойство("КППЮЛ", КППЮЛ);
			ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
			ОргСведения.Свойство("ОГРН", ОГРН);
			ОргСведения.Свойство("ОКАТО", ОКАТО);
			ОргСведения.Свойство("ОКПО", ОКПО);
			ОргСведения.Свойство("ОКВЭД", ОКВЭД);
			ОргСведения.Свойство("ОКОПФ", ОКОПФ);
			ОргСведения.Свойство("ОКФС", ОКФС);
			ОргСведения.Свойство("ОснВидДеят", ОснВидДеят);
			// ОргСведения.Свойство("АдрЮР", АдрЮР);
			ОргСведения.Свойство("ФормСобств", ФормСобств);
			ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
			
			Если ПБОЮЛ Тогда
				ОргСведения.Свойство("АдрПрописки", АдрЮР);
			Иначе
				ОргСведения.Свойство("АдрЮР", АдрЮР);
			КонецЕсли;
			
		КонецЕсли;
		
		ОргСведения.Свойство("ФИОРук", ФИОРук);
		ОргСведения.Свойство("ФИОБух", ФИОБух);
		ОргСведения.Свойство("ФИО", ФИО);
		ОргСведения.Свойство("ФИОИсп", ФИОИсп);
		ОргСведения.Свойство("ТелИсп", ТелИсп);
		ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
		
		Если ПБОЮЛ Тогда
			НаимЮлПол = ФИО;
			ФИОРук = "";
			ФИОБух = "";
			ФИОИсп = "";
			ТелИсп = "";
		КонецЕсли;
		
		Если ВПрограммеИзмененаДатаПодписи Тогда
			
			Если НЕ ПБОЮЛ Тогда
				// Обновим только то, что зависит от даты подписи и выйдем
				мРаздел3_2.Области.ОргДиректор.Значение = ФИОРук;
				мРаздел3_2.Области.ОргБухгалтер.Значение = ФИОБух;
			Иначе
				мТитульный.Области.ОргНазв.Значение = ФИО;
			КонецЕсли;
			
			ФИОИсп = ?(ПустаяСтрока(ФИОИсп), ФИОБух, ФИОИсп);
			ТелИсп = ?(ПустаяСтрока(ТелИсп), ТелОрганизации, ТелИсп);
			ФИОИсп = ФИОИсп + ?(НЕ ПустаяСтрока(ФИОИсп), ?(НЕ ПустаяСтрока(ТелИсп), " " + ТелИсп, ""), "");
			мРаздел3_2.Области.ОргИсполнитель.Значение = ФИОИсп;
			
			Возврат;
			
		КонецЕсли;
		
		// Производим операции связанные с текущей формой отчетности
		
		// Заполняем ИНН на всех листах декларации
		Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
			ИННЮЛ = "";
		КонецЕсли;
		
		мИННЮЛ = ИННЮЛ;
		
		Если РегламентированнаяОтчетность.ПустоеЗначение(КППЮЛ) Тогда
			КППЮЛ = "";
		КонецЕсли;
		
		мКППЮЛ = КППЮЛ;
		мТитульный.Области.ИНН.Значение = мИННЮЛ;
		
		Если НЕ ПБОЮЛ Тогда
			мТитульный.Области.КПП.Значение = мКППЮЛ;
		Иначе
			мКППЮЛ = "";
			мТитульный.Области.КПП.Значение = мКППЮЛ;
		КонецЕсли;
		
		// Работаем с названием ЮЛ
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргНазв.Значение)) Тогда
			// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
			мТитульный.Области.ОргНазв.Значение = НаимЮЛПол;
		КонецЕсли;
		
		// Работаем с ФИО руководителя
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодОКПО.Значение)) Тогда
			Если ПБОЮЛ Тогда
				мТитульный.Области.ОргКодОКПО.Значение  = "";
			Иначе
				мТитульный.Области.ОргКодОКПО.Значение  = ОКПО;
			КонецЕсли;
		КонецЕсли;
		
		// Работаем с ИНН руководителя
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодОГРН.Значение)) Тогда
			мТитульный.Области.ОргКодОГРН.Значение = ОГРН;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодОКВЭД.Значение)) Тогда
			мТитульный.Области.ОргКодОКВЭД.Значение = ОКВЭД;
		КонецЕсли;
		
		// Работаем с ФИО Бухгалтера
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел3_2.Области.ОргБухгалтер.Значение)) Тогда
			мРаздел3_2.Области.ОргБухгалтер.Значение = ФИОБух;
		КонецЕсли;
		
		// Работаем с ФИО руководителя организации
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел3_2.Области.ОргДиректор.Значение)) Тогда
			мРаздел3_2.Области.ОргДиректор.Значение = ФИОРук;
		КонецЕсли;
		
		// Работаем с ФИО исполнителя
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел3_2.Области.ОргИсполнитель.Значение)) Тогда
			ФИОИсп = ?(ПустаяСтрока(ФИОИсп), ФИОБух, ФИОИсп);
			ТелИсп = ?(ПустаяСтрока(ТелИсп), ТелОрганизации, ТелИсп);
			ФИОИсп = ФИОИсп + ?(НЕ ПустаяСтрока(ФИОИсп), ?(НЕ ПустаяСтрока(ТелИсп), " " + ТелИсп, ""), "");
			мРаздел3_2.Области.ОргИсполнитель.Значение = ФИОИсп;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргОтрасль.Значение)) Тогда
			мТитульный.Области.ОргОтрасль.Значение = ОснВидДеят;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргЮрАдрес.Значение)) Тогда
			
			Если (НЕ РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(АдрЮР, ",", ""))) Тогда
				
				мТитульный.Области.ОргЮрАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(АдрЮР);
				мАдресвФорматеДляВыгрузки = АдрЮр;
			Иначе
				мТитульный.Области.ОргЮрАдрес.Значение = "";
				мАдресвФорматеДляВыгрузки = "";
			КонецЕсли;
			
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодКОПФ.Значение)) Тогда
			мТитульный.Области.ОргКодКОПФ.Значение = ОКОПФ;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодКФС.Значение)) Тогда
			мТитульный.Области.ОргКодКФС.Значение = ОКФС;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргФорма.Значение)) Тогда
			мТитульный.Области.ОргФорма.Значение = ФормСобств;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргФССКод.Значение)) Тогда
			мТитульный.Области.ОргФССКод.Значение = РегистрационныйНомерФСС;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (РегламентированнаяОтчетность.ПустоеЗначение(мРаздел3_1.Области.П000090001007.Значение)) Тогда
			мРаздел3_1.Области.П000090001007.Значение = ПолучитьРазмерСтраховогоТарифа();
			Расчет("Раздел3_1");
		КонецЕсли;
		
	Исключение
		
		Сообщить("У пользователя недостаточно прав для получения сведений, необходимых для заполнения титульного листа.", СтатусСообщения.ОченьВажное);
		
	КонецПопытки;
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);
	
КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
// Лист - имя листа, необходимо для интерактивного добавления
// если Лист - неопределно, то текущий берется, равносильно нажатию на кнопку Добавить или Удалить
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Лист = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
				Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
			Иначе
				Дельта = 0;
			КонецЕсли;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати

	Если СтруктураПараметровЛиста.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПараметровЛиста);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	ПечатнаяФорма = Новый ТабличныйДокумент();

	ТабличноеПоле = ЭлементыФормы[ИмяТабличногоПоля];

	Если ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть();
	Иначе
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть(ИмяОбластиТаблПоля);
	КонецЕсли;

	ПечатнаяФорма.Вывести(ОбластьПечати);

	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;

	//Если ВидПечати = "ПоказатьБланк" Тогда
	//	ПечатнаяФорма.Показать(СокрП(Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
	//ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
	//	ПечатнаяФорма.Напечатать();
	//КонецЕсли;
	мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);

КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)
	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяЯчейка);
КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий1;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт
	РегламентированнаяОтчетность.роОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПоле);
КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	ОргИсполнитель = мРаздел3_2.Области.ОргИсполнитель.Значение;
	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);

		мРаздел3_2.Области.ОргИсполнитель.Значение = ОргИсполнитель;
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = СтрокаУровня2.ВыводНаПечать;

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = СтрокаУровня3.ВыводНаПечать;
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	
	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	КонецЕсли;

КонецПроцедуры // Печать()

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт 

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	// обновляем структуру многостраничных разделов
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// обновляем структуру многостраничных разделов
	//ОбновитьСтруктуруМногостраничныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	СписокСохранения.Вставить("ФлажокВнешДанные", ФлажокВнешДанные);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);

			РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);

		КонецЦикла;

	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Если СписокСохранения.Свойство("ФлажокВнешДанные") Тогда
		ФлажокВнешДанные = СписокСохранения.ФлажокВнешДанные;
	Иначе
		ФлажокВнешДанные = Ложь;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	мАдресвФорматеДляВыгрузки = мТитульный.Области.ОргЮрАдрес.Значение;
	мТитульный.Области.ОргЮрАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузки);

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);
	//Расчет();

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;
	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт
	//Перем СтруктураГруппы1;
	//Перем СтруктураГруппы2;
	Перем СтруктураГруппы4;

	Если ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1_1" Тогда
		// РАЗДЕЛ I

	ОП000020001003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020001003.Значение);
	ОП000020002003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020002003.Значение);
	ОП000020003401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020003401.Значение);
	ОП000020004401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020004401.Значение);
	ОП000020005401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020005401.Значение);
	ОП000020006401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020006401.Значение);
	ОП000020007401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020007401.Значение);
	ОП000020003501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020003501.Значение);
	ОП000020004501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020004501.Значение);
	ОП000020005501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020005501.Значение);
	ОП000020006501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020006501.Значение);
	ОП000020007501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020007501.Значение);
	ОП000020003601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020003601.Значение);
	ОП000020004601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020004601.Значение);
	ОП000020005601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020005601.Значение);
	ОП000020006601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020006601.Значение);
	ОП000020007601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020007601.Значение);

	ОП000020013003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020013003.Значение);
	ОП000020014003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020014003.Значение);

	ОП000020015401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020015401.Значение);
	ОП000020016403 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020016403.Значение);
	ОП000020015501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020015501.Значение);
	ОП000020016503 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020016503.Значение);
	ОП000020015601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020015601.Значение);
	ОП000020016603 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020016603.Значение);
	ОП000020015201 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020015201.Значение);
	ОП000020016203 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020016203.Значение);

	// ТАБЛИЦА 2. Расчеты по единому социальному налогу

	П000020003301 = ОП000020003401 + ОП000020003501 + ОП000020003601;
	П000020004301 = ОП000020004401 + ОП000020004501 + ОП000020004601;
	П000020005301 = ОП000020005401 + ОП000020005501 + ОП000020005601;
	П000020006301 = ОП000020006401 + ОП000020006501 + ОП000020006601;
	П000020007301 = ОП000020007401 + ОП000020007501 + ОП000020007601;

	// Запишем, что посчитали
	мРаздел1_1.Области.П000020003301.Значение = П000020003301;
	мРаздел1_1.Области.П000020004301.Значение = П000020004301;
	мРаздел1_1.Области.П000020005301.Значение = П000020005301;
	мРаздел1_1.Области.П000020006301.Значение = П000020006301;
	мРаздел1_1.Области.П000020007301.Значение = П000020007301;


	П000020003003 = мРаздел1_1.Области.П000020003201.Значение + мРаздел1_1.Области.П000020003301.Значение;
	П000020004003 = мРаздел1_1.Области.П000020004201.Значение + мРаздел1_1.Области.П000020004301.Значение;
	П000020005003 = мРаздел1_1.Области.П000020005201.Значение + мРаздел1_1.Области.П000020005301.Значение;
	П000020006003 = мРаздел1_1.Области.П000020006201.Значение + мРаздел1_1.Области.П000020006301.Значение;
	П000020007003 = мРаздел1_1.Области.П000020007201.Значение + мРаздел1_1.Области.П000020007301.Значение;

	// Запишем, что посчитали
	мРаздел1_1.Области.П000020003003.Значение = П000020003003;
	мРаздел1_1.Области.П000020004003.Значение = П000020004003;
	мРаздел1_1.Области.П000020005003.Значение = П000020005003;
	мРаздел1_1.Области.П000020006003.Значение = П000020006003;
	мРаздел1_1.Области.П000020007003.Значение = П000020007003;


	П000020008003 = ОП000020001003 + ОП000020002003 + П000020003003 + П000020004003 +
	                 П000020005003 +  П000020006003 + П000020007003;
	мРаздел1_1.Области.П000020008003.Значение = П000020008003;

	П000020012003 = ОП000020013003 + ОП000020014003;
	мРаздел1_1.Области.П000020012003.Значение = П000020012003;

	П000020015301 = ОП000020015401 + ОП000020015501 + ОП000020015601;
	П000020016303 = ОП000020016403 + ОП000020016503 + ОП000020016603;
	// Запишем, что посчитали
	мРаздел1_1.Области.П000020015301.Значение = П000020015301;
	мРаздел1_1.Области.П000020016303.Значение = П000020016303;

	П000020015003 = мРаздел1_1.Области.П000020015201.Значение + П000020015301;
	П000020016003 = мРаздел1_1.Области.П000020016203.Значение + П000020016303;
	П000020017003 =  П000020012003 +  П000020015003 + П000020016003;
	// Запишем, что посчиталось
	мРаздел1_1.Области.П000020015003.Значение = П000020015003;
	мРаздел1_1.Области.П000020016003.Значение = П000020016003;
	мРаздел1_1.Области.П000020017003.Значение = П000020017003;

	// строки 10 и 18

	Если П000020017003 > П000020008003 Тогда 
		ЗадолженностьЗаФондомВсего = П000020017003 - П000020008003;
		П000020018003 = 0;
		мРаздел1_1.Области.П000020018003.Значение = П000020018003;
	Иначе
		П000020018003 = П000020008003 - П000020017003;
		ЗадолженностьЗаФондомВсего = 0;
		мРаздел1_1.Области.П000020018003.Значение = П000020018003;
	КонецЕсли;
	
	ОП000020011003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020011003.Значение);
	
	П000020010003 = ЗадолженностьЗаФондомВсего - ОП000020011003;
	мРаздел1_1.Области.П000020010003.Значение = П000020010003;

	ОП000020010003 = ОкруглитьЧислоПоФормату(П000020010003);

	П000020009003 = ОП000020010003 + ОП000020011003;
	мРаздел1_1.Области.П000020009003.Значение = П000020009003;


	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_2" Тогда

		ОП000030007003 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030007003.Значение);
		ОП000030008003 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030008003.Значение);
		мРаздел1_2.Области.П000030006003.Значение = ОП000030007003 + ОП000030008003;

		ОП000030010003 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030010003.Значение);
		ОП000030011003 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030011003.Значение);
		мРаздел1_2.Области.П000030009003.Значение = ОП000030010003 + ОП000030011003;
		мРаздел1_2.Области.П000030005003.Значение = ОП000030007003 + ОП000030008003 + ОП000030010003 + ОП000030011003;

		ОП000030001004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030001004.Значение);
		ОП000030003004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030003004.Значение);
		
		ОП000030007004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030007004.Значение);
		ОП000030008004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030008004.Значение);
		мРаздел1_2.Области.П000030006004.Значение = ОП000030007004 + ОП000030008004;

		ОП000030010004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030010004.Значение);
		ОП000030011004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030011004.Значение);
		мРаздел1_2.Области.П000030009004.Значение = ОП000030010004 + ОП000030011004;
		мРаздел1_2.Области.П000030005004.Значение = ОП000030007004 + ОП000030008004 + ОП000030010004 + ОП000030011004;

		ОП000030012004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030012004.Значение);
		ОП000030013004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030013004.Значение);
		ОП000030014004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030014004.Значение);
		ОП000030015004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030015004.Значение);
		ОП000030016004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030016004.Значение);

		ОП000030001005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030001005.Значение);
		ОП000030003005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030003005.Значение);
		
		ОП000030007005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030007005.Значение);
		ОП000030008005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030008005.Значение);
		ОП000030010005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030010005.Значение);
		ОП000030011005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030011005.Значение);
		мРаздел1_2.Области.П000030006005.Значение = ОП000030007005 + ОП000030008005;
		мРаздел1_2.Области.П000030009005.Значение = ОП000030010005 + ОП000030011005;
		мРаздел1_2.Области.П000030005005.Значение = ОП000030007005 + ОП000030008005 + ОП000030010005 + ОП000030011005;

		//ОП000030012005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030012005.Значение);
		ОП000030013005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030013005.Значение);

		мРаздел1_2.Области.П000030017004.Значение = ОП000030001004 + ОП000030003004 
												  + ОП000030007004 + ОП000030008004 + ОП000030010004 + ОП000030011004
		                                          + ОП000030012004 + ОП000030013004 + ОП000030014004
		                                          + ОП000030015004 + ОП000030016004;

		мРаздел1_2.Области.П000030017005.Значение = ОП000030001005 + ОП000030003005 
												  + ОП000030007005 + ОП000030008005 + ОП000030010005 + ОП000030011005
		                                          + ОП000030013005;

		// 18 - 22
		ОП000030018004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030018004.Значение);
		ОП000030019004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030019004.Значение);
		ОП000030020004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030020004.Значение);
		ОП000030021004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030021004.Значение);
		// ОП000030022004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030022004.Значение);

		мРаздел1_2.Области.П000030023004.Значение = ОП000030018004 + ОП000030019004
		                                          + ОП000030020004 + ОП000030021004;

		ОП000030017004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030017004.Значение);
		ОП000030023004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030023004.Значение);

		мРаздел1_2.Области.П000030024004.Значение = ОП000030017004 + ОП000030023004;

		ОП000030017005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030017005.Значение);
		// ОП000030023005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030023005.Значение);
		мРаздел1_2.Области.П000030024005.Значение = ОП000030017005;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_1" Тогда

		// РАЗДЕЛ II

		ОП000050001003 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000050001003.Значение);
		ОП000050002003 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000050002003.Значение);
		ОП000050005003 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000050005003.Значение);
		ОП000050006003 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000050006003.Значение);
		ОП000050007003 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000050007003.Значение);

		// РАЗДЕЛ II

		// Табл.5 Расчеты по средствам Фонда социального страхования
		П000050003003 = ОП000050001003 + ОП000050002003;
		П000050008003 = ОП000050005003 + ОП000050006003 + ОП000050007003;

		// Запишем, что посчитали
		мРаздел2_1.Области.П000050003003.Значение = П000050003003;
		мРаздел2_1.Области.П000050008003.Значение = П000050008003;

		// строки 4 и 9
		мРаздел2_1.Области.П000050004003.Значение = ?(П000050008003 > П000050003003, П000050008003 - П000050003003, 0);
		мРаздел2_1.Области.П000050009003.Значение = ?(П000050003003 > П000050008003, П000050003003 - П000050008003, 0);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_2" Тогда

		ОП000060006003 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060006003.Значение);
		ОП000060007003 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060007003.Значение);
		мРаздел2_2.Области.П000060005003.Значение = ОП000060006003 + ОП000060007003;

		ОП000060001004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060001004.Значение);
		ОП000060003004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060003004.Значение);
		
		ОП000060006004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060006004.Значение);
		ОП000060007004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060007004.Значение);
		мРаздел2_2.Области.П000060005004.Значение = ОП000060006004 + ОП000060007004;

		ОП000060008004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060008004.Значение);
		ОП000060009004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060009004.Значение);
		ОП000060010004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060010004.Значение);
		ОП000060011004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060011004.Значение);
		ОП000060012004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060012004.Значение);

		ОП000060001005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060001005.Значение);
		ОП000060003005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060003005.Значение);

		ОП000060006005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060006005.Значение);
		ОП000060007005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060007005.Значение);
		мРаздел2_2.Области.П000060005005.Значение = ОП000060006005 + ОП000060007005;

		//ОП000060008005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060008005.Значение);
		ОП000060009005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060009005.Значение);
		//ОП000060010005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060010005.Значение);
		//ОП000060011005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060011005.Значение);
		//ОП000060012005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060012005.Значение);
		мРаздел2_2.Области.П000060013004.Значение = ОП000060001004 + ОП000060003004
		                                          + ОП000060006004 + ОП000060007004 
												  + ОП000060008004
		                                          + ОП000060009004 + ОП000060010004
		                                          + ОП000060011004 + ОП000060012004;

		мРаздел2_2.Области.П000060013005.Значение = ОП000060001005 + ОП000060003005
		                                          + ОП000060006005 + ОП000060007005 
												  + ОП000060009005;

		ОП000060014004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060014004.Значение);
		ОП000060015004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060015004.Значение);
		ОП000060016004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060016004.Значение);
		ОП000060017004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060017004.Значение);

		мРаздел2_2.Области.П000060019004.Значение = ОП000060014004 + ОП000060015004
		                                          + ОП000060016004 + ОП000060017004;

		мРаздел2_2.Области.П000060020004.Значение = мРаздел2_2.Области.П000060013004.Значение
		                                          + мРаздел2_2.Области.П000060019004.Значение;

		мРаздел2_2.Области.П000060020005.Значение = мРаздел2_2.Области.П000060013005.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_3" Тогда

		ОП000070001004 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070001004.Значение);
		ОП000070002004 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070002004.Значение);
		ОП000070003004 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070003004.Значение);

		ОП000070001006 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070001006.Значение);
		ОП000070002006 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070002006.Значение);
		ОП000070003006 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070003006.Значение);

		ОП000070002008 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070002008.Значение);
		ОП000070003008 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070003008.Значение);

		ОП000070001010 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070001010.Значение);
		ОП000070002010 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070002010.Значение);
		ОП000070003010 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070003010.Значение);

		ОП000070001014 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070001014.Значение);
		ОП000070002014 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070002014.Значение);
		ОП000070003014 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070003014.Значение);

		П000070001003 = мРаздел2_3.Области.П000070001003.Значение;
		П000070001005 = мРаздел2_3.Области.П000070001005.Значение;
		П000070001009 = мРаздел2_3.Области.П000070001009.Значение;
		П000070001013 = мРаздел2_3.Области.П000070001013.Значение;

		П000070002003 = мРаздел2_3.Области.П000070002003.Значение;
		П000070002005 = мРаздел2_3.Области.П000070002005.Значение;
		П000070002007 = мРаздел2_3.Области.П000070002007.Значение;
		П000070003007 = мРаздел2_3.Области.П000070003007.Значение;
		П000070002009 = мРаздел2_3.Области.П000070002009.Значение;
		П000070002013 = мРаздел2_3.Области.П000070002013.Значение;

		П000070003003 = мРаздел2_3.Области.П000070003003.Значение;
		П000070003005 = мРаздел2_3.Области.П000070003005.Значение;
		П000070003009 = мРаздел2_3.Области.П000070003009.Значение;
		П000070003013 = мРаздел2_3.Области.П000070003013.Значение;

	    // графа 15 строки 1-6
		П000070001015 = П000070001003 + П000070001005 - П000070001009 - П000070001013;
		П000070002015 = П000070002003 + П000070002005 + П000070002007 - П000070002009 - П000070002013;
		П000070003015 = П000070003003 + П000070003005 + П000070003007 - П000070003009 - П000070003013;

		// Запишем, то, что посчитали
		мРаздел2_3.Области.П000070001015.Значение = П000070001015;
		мРаздел2_3.Области.П000070002015.Значение = П000070002015;
		мРаздел2_3.Области.П000070003015.Значение = П000070003015;


		// графа 16 строки 1-6
		П000070001016 = ОП000070001004 + ОП000070001006 - ОП000070001010 - ОП000070001014;
		П000070002016 = ОП000070002004 + ОП000070002006 + ОП000070002008 - ОП000070002010 - ОП000070002014;
		П000070003016 = ОП000070003004 + ОП000070003006 + ОП000070003008 - ОП000070003010 - ОП000070003014;
		// Запишем, то, что посчитали
		мРаздел2_3.Области.П000070001016.Значение = П000070001016;
		мРаздел2_3.Области.П000070002016.Значение = П000070002016;
		мРаздел2_3.Области.П000070003016.Значение = П000070003016;


		// строка 7 графы 3-16
		мРаздел2_3.Области.П000070004003.Значение =  П000070001003 +  П000070002003 +  П000070003003;
		мРаздел2_3.Области.П000070004004.Значение = ОП000070001004 + ОП000070002004 + ОП000070003004;
		мРаздел2_3.Области.П000070004005.Значение =  П000070001005 +  П000070002005 +  П000070003005;
		мРаздел2_3.Области.П000070004006.Значение = ОП000070001006 + ОП000070002006 + ОП000070003006;
		мРаздел2_3.Области.П000070004007.Значение =  П000070002007 + П000070003007;
		мРаздел2_3.Области.П000070004008.Значение = ОП000070002008 + ОП000070003008;
		мРаздел2_3.Области.П000070004009.Значение =  П000070001009 +  П000070002009 +  П000070003009;
		мРаздел2_3.Области.П000070004010.Значение = ОП000070001010 + ОП000070002010 + ОП000070003010;
		мРаздел2_3.Области.П000070004013.Значение =  П000070001013 +  П000070002013 +  П000070003013;
		мРаздел2_3.Области.П000070004014.Значение = ОП000070001014 + ОП000070002014 + ОП000070003014;
		мРаздел2_3.Области.П000070004015.Значение =  П000070001015 +  П000070002015 +  П000070003015;
		мРаздел2_3.Области.П000070004016.Значение =  П000070001016 +  П000070002016 +  П000070003016;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_4" Тогда

		// Количество, колонка 6.
		П000080001006    = мРаздел2_4.Области.П000080001006.Значение;
		П000080002006    = мРаздел2_4.Области.П000080002006.Значение;
		П000080003006    = мРаздел2_4.Области.П000080003006.Значение;
		П000080004006    = мРаздел2_4.Области.П000080004006.Значение;
		П000080005006    = мРаздел2_4.Области.П000080005006.Значение;
		П000080006006    = мРаздел2_4.Области.П000080006006.Значение;
		П000080007006    = мРаздел2_4.Области.П000080007006.Значение;
		П000080008006    = мРаздел2_4.Области.П000080008006.Значение;
		П000080009006    = мРаздел2_4.Области.П000080009006.Значение;
		П000080010006    = мРаздел2_4.Области.П000080010006.Значение;

		// Расходы, колонка 7.
		ОП000080001007    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001007.Значение);
		ОП000080002007    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002007.Значение);
		ОП000080003007    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003007.Значение);
		ОП000080004007    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004007.Значение);
		ОП000080005007    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005007.Значение);
		ОП000080006007    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006007.Значение);
		ОП000080007007    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080007007.Значение);
		ОП000080008007    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080008007.Значение);
		ОП000080009007    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080009007.Значение);
		ОП000080010007    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080010007.Значение);

		// Количество, колонка 8.
		П000080001008    = мРаздел2_4.Области.П000080001008.Значение;
		П000080002008    = мРаздел2_4.Области.П000080002008.Значение;
		П000080003008    = мРаздел2_4.Области.П000080003008.Значение;
		П000080004008    = мРаздел2_4.Области.П000080004008.Значение;
		П000080005008    = мРаздел2_4.Области.П000080005008.Значение;
		П000080006008    = мРаздел2_4.Области.П000080006008.Значение;
		П000080007008    = мРаздел2_4.Области.П000080007008.Значение;
		П000080008008    = мРаздел2_4.Области.П000080008008.Значение;
		П000080009008    = мРаздел2_4.Области.П000080009008.Значение;
		П000080010008    = мРаздел2_4.Области.П000080010008.Значение;

		// Расходы, колонка 9.
		ОП000080001009    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001009.Значение);
		ОП000080002009    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002009.Значение);
		ОП000080003009    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003009.Значение);
		ОП000080004009    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004009.Значение);
		ОП000080005009    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005009.Значение);
		ОП000080006009    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006009.Значение);
		ОП000080007009    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080007009.Значение);
		ОП000080008009    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080008009.Значение);
		ОП000080009009    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080009009.Значение);
		ОП000080010009    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080010009.Значение);

		// Количество, колонка 10
		П000080001010    = мРаздел2_4.Области.П000080001010.Значение;
		П000080002010    = мРаздел2_4.Области.П000080002010.Значение;
		П000080003010    = мРаздел2_4.Области.П000080003010.Значение;
		П000080004010    = мРаздел2_4.Области.П000080004010.Значение;
		П000080005010    = мРаздел2_4.Области.П000080005010.Значение;
		П000080006010    = мРаздел2_4.Области.П000080006010.Значение;
		П000080007010    = мРаздел2_4.Области.П000080007010.Значение;
		П000080008010    = мРаздел2_4.Области.П000080008010.Значение;
		П000080009010    = мРаздел2_4.Области.П000080009010.Значение;
		П000080010010    = мРаздел2_4.Области.П000080010010.Значение;

		// Расходы, колонка 11.
		ОП000080001011    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001011.Значение);
		ОП000080002011    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002011.Значение);
		ОП000080003011    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003011.Значение);
		ОП000080004011    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004011.Значение);
		ОП000080005011    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005011.Значение);
		ОП000080006011    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006011.Значение);
		ОП000080007011    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080007011.Значение);
		ОП000080008011    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080008011.Значение);
		ОП000080009011    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080009011.Значение);
		ОП000080010011    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080010011.Значение);

		// Количество, колонка 12
		П000080001012    = мРаздел2_4.Области.П000080001012.Значение;
		П000080002012    = мРаздел2_4.Области.П000080002012.Значение;
		П000080003012    = мРаздел2_4.Области.П000080003012.Значение;
		П000080004012    = мРаздел2_4.Области.П000080004012.Значение;
		П000080005012    = мРаздел2_4.Области.П000080005012.Значение;
		П000080006012    = мРаздел2_4.Области.П000080006012.Значение;
		П000080007012    = мРаздел2_4.Области.П000080007012.Значение;
		П000080008012    = мРаздел2_4.Области.П000080008012.Значение;
		П000080009012    = мРаздел2_4.Области.П000080009012.Значение;
		П000080010012    = мРаздел2_4.Области.П000080010012.Значение;

		// Расходы, колонка 13.
		ОП000080001013    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001013.Значение);
		ОП000080002013    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002013.Значение);
		ОП000080003013    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003013.Значение);
		ОП000080004013    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004013.Значение);
		ОП000080005013    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005013.Значение);
		ОП000080006013    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006013.Значение);
		ОП000080007013    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080007013.Значение);
		ОП000080008013    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080008013.Значение);
		ОП000080009013    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080009013.Значение);
		ОП000080010013    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080010013.Значение);

		// Количество, колонка 14
		П000080001014    = мРаздел2_4.Области.П000080001014.Значение;
		П000080002014    = мРаздел2_4.Области.П000080002014.Значение;
		П000080003014    = мРаздел2_4.Области.П000080003014.Значение;
		П000080004014    = мРаздел2_4.Области.П000080004014.Значение;
		П000080005014    = мРаздел2_4.Области.П000080005014.Значение;
		П000080006014    = мРаздел2_4.Области.П000080006014.Значение;
		П000080007014    = мРаздел2_4.Области.П000080007014.Значение;
		П000080008014    = мРаздел2_4.Области.П000080008014.Значение;
		П000080009014    = мРаздел2_4.Области.П000080009014.Значение;
		П000080010014    = мРаздел2_4.Области.П000080010014.Значение;

		// Количество, колонка 15
		ОП000080001015    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001015.Значение);
		ОП000080002015    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002015.Значение);
		ОП000080003015    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003015.Значение);
		ОП000080004015    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004015.Значение);
		ОП000080005015    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005015.Значение);
		ОП000080006015    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006015.Значение);
		ОП000080007015    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080007015.Значение);
		ОП000080008015    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080008015.Значение);
		ОП000080009015    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080009015.Значение);
		ОП000080010015    = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080010015.Значение);

		// Результат. Количество. Колонка 4.
		мРаздел2_4.Области.П000080001003.Значение = П000080001006 + П000080001008 + П000080001010 + П000080001012 + П000080001014;
		мРаздел2_4.Области.П000080002003.Значение = П000080002006 + П000080002008 + П000080002010 + П000080002012 + П000080002014;
		мРаздел2_4.Области.П000080003003.Значение = П000080003006 + П000080003008 + П000080003010 + П000080003012 + П000080003014;
		мРаздел2_4.Области.П000080004003.Значение = П000080004006 + П000080004008 + П000080004010 + П000080004012 + П000080004014;
		мРаздел2_4.Области.П000080005003.Значение = П000080005006 + П000080005008 + П000080005010 + П000080005012 + П000080005014;
		мРаздел2_4.Области.П000080006003.Значение = П000080006006 + П000080006008 + П000080006010 + П000080006012 + П000080006014;
		мРаздел2_4.Области.П000080007003.Значение = П000080007006 + П000080007008 + П000080007010 + П000080007012 + П000080007014;
		мРаздел2_4.Области.П000080008003.Значение = П000080008006 + П000080008008 + П000080008010 + П000080008012 + П000080008014;
		мРаздел2_4.Области.П000080009003.Значение = П000080009006 + П000080009008 + П000080009010 + П000080009012 + П000080009014;
		мРаздел2_4.Области.П000080010003.Значение = П000080010006 + П000080010008 + П000080010010 + П000080010012 + П000080010014;

		// Результат. Количество. Колонка 5
		мРаздел2_4.Области.П000080001005.Значение = ОП000080001007 + ОП000080001009 + ОП000080001011 + ОП000080001013 + ОП000080001015;
		мРаздел2_4.Области.П000080002005.Значение = ОП000080002007 + ОП000080002009 + ОП000080002011 + ОП000080002013 + ОП000080002015;
		мРаздел2_4.Области.П000080003005.Значение = ОП000080003007 + ОП000080003009 + ОП000080003011 + ОП000080003013 + ОП000080003015;
		мРаздел2_4.Области.П000080004005.Значение = ОП000080004007 + ОП000080004009 + ОП000080004011 + ОП000080004013 + ОП000080004015;
		мРаздел2_4.Области.П000080005005.Значение = ОП000080005007 + ОП000080005009 + ОП000080005011 + ОП000080005013 + ОП000080005015;
		мРаздел2_4.Области.П000080006005.Значение = ОП000080006007 + ОП000080006009 + ОП000080006011 + ОП000080006013 + ОП000080006015;
		мРаздел2_4.Области.П000080007005.Значение = ОП000080007007 + ОП000080007009 + ОП000080007011 + ОП000080007013 + ОП000080007015;
		мРаздел2_4.Области.П000080008005.Значение = ОП000080008007 + ОП000080008009 + ОП000080008011 + ОП000080008013 + ОП000080008015;
		мРаздел2_4.Области.П000080009005.Значение = ОП000080009007 + ОП000080009009 + ОП000080009011 + ОП000080009013 + ОП000080009015;
		мРаздел2_4.Области.П000080010005.Значение = ОП000080010007 + ОП000080010009 + ОП000080010011 + ОП000080010013 + ОП000080010015;

		// Общие итоги
		мРаздел2_4.Области.П000080011003.Значение = мРаздел2_4.Области.П000080001003.Значение
		                                          + мРаздел2_4.Области.П000080002003.Значение
		                                          + мРаздел2_4.Области.П000080003003.Значение
		                                          + мРаздел2_4.Области.П000080010003.Значение;

		мРаздел2_4.Области.П000080011006.Значение = мРаздел2_4.Области.П000080001006.Значение
		                                          + мРаздел2_4.Области.П000080002006.Значение
		                                          + мРаздел2_4.Области.П000080003006.Значение
		                                          + мРаздел2_4.Области.П000080010006.Значение;

		мРаздел2_4.Области.П000080011008.Значение = мРаздел2_4.Области.П000080001008.Значение
		                                          + мРаздел2_4.Области.П000080002008.Значение
		                                          + мРаздел2_4.Области.П000080003008.Значение
		                                          + мРаздел2_4.Области.П000080010008.Значение;

		мРаздел2_4.Области.П000080011010.Значение = мРаздел2_4.Области.П000080001010.Значение
		                                          + мРаздел2_4.Области.П000080002010.Значение
		                                          + мРаздел2_4.Области.П000080003010.Значение
		                                          + мРаздел2_4.Области.П000080010010.Значение;

		мРаздел2_4.Области.П000080011012.Значение = мРаздел2_4.Области.П000080001012.Значение
		                                          + мРаздел2_4.Области.П000080002012.Значение
		                                          + мРаздел2_4.Области.П000080003012.Значение
		                                          + мРаздел2_4.Области.П000080010012.Значение;

		мРаздел2_4.Области.П000080011014.Значение = мРаздел2_4.Области.П000080001014.Значение
		                                          + мРаздел2_4.Области.П000080002014.Значение
		                                          + мРаздел2_4.Области.П000080003014.Значение
		                                          + мРаздел2_4.Области.П000080010014.Значение;

		мРаздел2_4.Области.П000080011005.Значение = мРаздел2_4.Области.П000080001005.Значение
		                                          + мРаздел2_4.Области.П000080002005.Значение
		                                          + мРаздел2_4.Области.П000080003005.Значение
		                                          + мРаздел2_4.Области.П000080010005.Значение;

		мРаздел2_4.Области.П000080011007.Значение = мРаздел2_4.Области.П000080001007.Значение
		                                          + мРаздел2_4.Области.П000080002007.Значение
		                                          + мРаздел2_4.Области.П000080003007.Значение
		                                          + мРаздел2_4.Области.П000080010007.Значение;

		мРаздел2_4.Области.П000080011009.Значение = мРаздел2_4.Области.П000080001009.Значение
		                                          + мРаздел2_4.Области.П000080002009.Значение
		                                          + мРаздел2_4.Области.П000080003009.Значение
		                                          + мРаздел2_4.Области.П000080010009.Значение;

		мРаздел2_4.Области.П000080011011.Значение = мРаздел2_4.Области.П000080001011.Значение
		                                          + мРаздел2_4.Области.П000080002011.Значение
		                                          + мРаздел2_4.Области.П000080003011.Значение
		                                          + мРаздел2_4.Области.П000080010011.Значение;

		мРаздел2_4.Области.П000080011013.Значение = мРаздел2_4.Области.П000080001013.Значение
		                                          + мРаздел2_4.Области.П000080002013.Значение
		                                          + мРаздел2_4.Области.П000080003013.Значение
		                                          + мРаздел2_4.Области.П000080010013.Значение;

		мРаздел2_4.Области.П000080011015.Значение = мРаздел2_4.Области.П000080001015.Значение
		                                          + мРаздел2_4.Области.П000080002015.Значение
		                                          + мРаздел2_4.Области.П000080003015.Значение
		                                          + мРаздел2_4.Области.П000080010015.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3_1" Тогда

		// Раздел III
		// Таблица 9

		ОП000100001003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100001003.Значение);
		ОП000100002101 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100002101.Значение);
		ОП000100002401 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100002401.Значение);
		ОП000100002501 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100002501.Значение);
		ОП000100002601 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100002601.Значение);
		ОП000100003003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100003003.Значение);
		ОП000100004003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100004003.Значение);
		ОП000100005003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100005003.Значение);
		ОП000100006003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100006003.Значение);
		ОП000100009003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100009003.Значение);

		ОП000100010101 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100010101.Значение);
		ОП000100010401 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100010401.Значение);
		ОП000100010501 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100010501.Значение);
		ОП000100010601 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100010601.Значение);
		ОП000100011103 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100011103.Значение);
		ОП000100011403 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100011403.Значение);
		ОП000100011503 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100011503.Значение);
		ОП000100011603 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100011603.Значение);
		ОП000100012003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100012003.Значение);

		П000090001007 = мРаздел3_1.Области.П000090001007.Значение;
		П000090001008 = мРаздел3_1.Области.П000090001008.Значение;
		П000090001010 = мРаздел3_1.Области.П000090001010.Значение;

		// РАЗДЕЛ III

		// Табл.9	 
		// размер страхового тарифа
		П000090001011 = П000090001007 * (1 - П000090001008 / 100 + П000090001010 / 100);

		// Запишем
		мРаздел3_1.Области.П000090001011.Значение = П000090001011;

		// Табл.10
		П000100002003 = ОП000100002101 + ОП000100002401 + ОП000100002501 + ОП000100002601;
		мРаздел3_1.Области.П000100002003.Значение = П000100002003;

		// строка 7
		П000100007003 = ОП000100001003 + П000100002003  + ОП000100003003 + ОП000100004003
		              + ОП000100005003 + ОП000100006003;
		мРаздел3_1.Области.П000100007003.Значение = П000100007003;

		П000100010003 = ОП000100010101 + ОП000100010401 + ОП000100010501 + ОП000100010601;
		мРаздел3_1.Области.П000100010003.Значение = П000100010003;

		П000100011003 = ОП000100011103 + ОП000100011403 + ОП000100011503 + ОП000100011603;
		мРаздел3_1.Области.П000100011003.Значение = П000100011003;

		// строка 13                                    
		П000100013003 = ОП000100009003 + П000100010003  + П000100011003  + ОП000100012003;
		мРаздел3_1.Области.П000100013003.Значение = П000100013003;

		// строки 8 и 14
		мРаздел3_1.Области.П000100008003.Значение = ?(П000100013003 > П000100007003, П000100013003 - П000100007003, 0);
		мРаздел3_1.Области.П000100014003.Значение = ?(П000100007003 > П000100013003, П000100007003 - П000100013003, 0);

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3_2" Тогда

		ОП000110001004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110001004.Значение);
		ОП000110002004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110002004.Значение);
		ОП000110003004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110003004.Значение);
		ОП000110004004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110004004.Значение);
		ОП000110005004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110005004.Значение);
		ОП000110006004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110006004.Значение);
		ОП000110007004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110007004.Значение);
		ОП000110009004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110009004.Значение);
		ОП000110010004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110010004.Значение);

		// Табл.11 строка 10
		мРаздел3_2.Области.П000110011004.Значение = ОП000110001004 + ОП000110004004
		                                          + ОП000110007004 + ОП000110009004
		                                          + ОП000110010004;

		// Табл.12 строка 4
		мРаздел3_2.Области.П000120004003.Значение = мРаздел3_2.Области.П000120001003.Значение + мРаздел3_2.Области.П000120003003.Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		// ОБЩИЙ РАСЧЕТ ПОКАЗАТЕЛЕЙ ВСЕХ РАЗДЕЛОВ ДЕКЛАРАЦИИ

		// Используется, например, в случае изменения точности или единицы измерения
		// (так как разделы взаимосвязаны, порядок пересчета не важен).
		Расчет("Раздел1_1");
		Расчет("Раздел1_2");
		Расчет("Раздел2_1");
		Расчет("Раздел2_2");
		Расчет("Раздел2_3");
		Расчет("Раздел2_4");
		Расчет("Раздел3_1");
		Расчет("Раздел3_2");
		
	КонецЕсли;

КонецПроцедуры // Расчет()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

// Выполняет вывод полей запроса в табличный документ
Процедура ВывестиРезультатЗапросаВДокумент(РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого Колонка из РезультатЗапроса.Колонки Цикл
			УстановитьЗначениеПоказателя(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

// ЗавершитьИмпортXMLфайлаВОтчет
//
Процедура ЗавершитьИмпортXMLфайлаВОтчет(СтруктураДанныхОтчетаXMLКонтейнер)
	Если СтруктураДанныхОтчетаXMLКонтейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Перебор по страницам.
	Инд = 0;
	Для каждого Экз Из СтруктураДанныхОтчетаXMLКонтейнер.ДанныеРазделовОтчета Цикл

		ИмяРаздела = ОпределитьИмяРазделаПриИмпорте(Экз.Данные[0].СтруктураДанных);
		Если ИмяРаздела = Неопределено Тогда
			// Не удалось по показателю определить имя раздела декларации.
			Продолжить;
		КонецЕсли;

		МногостраничностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяРаздела, "МногостраничностьВРазделе", Ложь);

		Если МногостраничностьВРазделе Тогда
			Если мСтруктураМногостраничныхРазделов[ИмяРаздела].Количество() <> Экз.Данные.Количество() Тогда
				// Вставим нужные экземпляры.
				Для Инд1 = 1 По Экз.Данные.Количество() - 1 Цикл
					ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяРаздела);
					РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяРаздела);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		Для каждого Экз2 Из Экз.Данные Цикл
			Если МногостраничностьВРазделе Тогда
				ПоказатьСтраницуМногостраничногоРаздела(Инд, ИмяРаздела, Истина);
				Инд = Инд + 1;
			КонецЕсли;

			Для каждого Экз3 Из Экз2.СтруктураДанных Цикл
				Показатель = Экз3.Ключ;
				Значение = СокрЛП(Экз3.Значение);

				НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(Показатель, "КодПоказателяПоСоставу");

				Если НайденнаяСтрока = Неопределено Тогда
					// Либо показателя нет, или он в квадратах
					Если (Показатель = "Шифр1" Или Показатель = "Шифр2" Или Показатель = "Шифр3")
					  И (ИмяРаздела = "Раздел2_1") Тогда
						мРаздел2_1.Области[Показатель].Значение = Значение;
						Продолжить;
					Иначе
						Продолжить;
					КонецЕсли;

				Иначе
					ТипДанных = НайденнаяСтрока.ТипДанныхПоказателя;
				КонецЕсли;

				Если ТипДанных = "Е" Или ТипДанных = "E" Или ТипДанных = "Ч" Тогда
					Значение = ?(РегламентированнаяОтчетность.роЯвляетсяЧислом(Значение), Число(Значение), 0);
				ИначеЕсли ТипДанных = "Д" Тогда
					Если РегламентированнаяОтчетность.ПустоеЗначение(Значение) Тогда
						Значение = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
					Иначе
						Год = Прав(Значение, 4);
						Мес = Сред(Значение, 4, 2);
						День = Лев(Значение, 2);
						Значение = Год + Мес + День;
						Значение = ?(РегламентированнаяОтчетность.роЯвляетсяДатой(Значение), Дата(Значение), ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")));
					КонецЕсли;
				КонецЕсли;
				РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, Показатель, Значение);

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ЗавершитьИмпортXMLфайлаВОтчет

// ОпределитьИмяРазделаПриИмпорте
//
Функция ОпределитьИмяРазделаПриИмпорте(СтруктураДанных)
	Перем Результат;

	Для каждого Зап Из СтруктураДанных Цикл
		ИмяСтраницы = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, Зап.Ключ);
		Если ИмяСтраницы <> Неопределено Тогда
			Результат = ИмяСтраницы;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ОпределитьИмяРазделаПриИмпорте

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвтоВнутренний() Экспорт 

	Если НЕ ФлажокВнешДанные Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма, "Раздел2_1, Раздел2_2");

	Если ПрерватьАвтоЗаполнение Тогда
		// Пользователь нажал кнопку "Нет".
		Возврат;
	КонецЕсли;

	мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено;
	Если ФлажокВнешДанные Тогда
		мСтруктураДанныхОтчетаXMLКонтейнер = РегламентированнаяОтчетность.ИмпортироватьДанныеКонтейнераXML(ЭтаФорма);
		Если мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено Тогда
			Сообщить("Данные из XML файла не подходят для текущего отчета.", СтатусСообщения.Важное);
			Сообщить("Необходимо проверить период отчета и организацию (ИНН/КПП).", СтатусСообщения.Важное);
		КонецЕсли;
		
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	ОргИсполнитель = мРаздел3_2.Области.ОргИсполнитель.Значение;
	мРаздел3_2.Области.ОргИсполнитель.Значение = ОргИсполнитель;

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации(); РедакцияКонфигурации = РегламентированнаяОтчетность.РедакцияКонфигурации();
	
	// Если авторасчет не отключен, то заполним размер страхового тарифа.
	// Ранее этот параметр пользователь мог скорректировать в режиме "Без автоматического расчета".

	Если Не ФлажокОтклАвтоРасчет Тогда
		мРаздел3_1.Области.П000090001007.Значение = ПолучитьРазмерСтраховогоТарифа();
	КонецЕсли;

	// Данные берутся по обособленному подразделению (указанной организации)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамОрганизация",              Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация",      ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("парамНачалоГода",               НачалоГода(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамГод",					   Год(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамКонецОтчетногоПериода",    КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Месяц1",                        Месяц(мДатаКонцаПериодаОтчета) - 2);
	Запрос.УстановитьПараметр("Месяц2",                        Месяц(мДатаКонцаПериодаОтчета) - 1);
	Запрос.УстановитьПараметр("Месяц3",                        Месяц(мДатаКонцаПериодаОтчета));
	
	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	// конец месяца налогового периода
	КонецМесяца = КонецМесяца(НачалоГода(мДатаКонцаПериодаОтчета));
	// первый месяц
	ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
	// прибавим остальные месяцы
	Для Сч = 2 По Месяц(мДатаКонцаПериодаОтчета) Цикл
		КонецМесяца = КонецМесяца(КонецМесяца+1);
    	ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	
    // УчетнаяПолитикаНалоговыйУчет
	// Таблица УчетнаяПолитикаНалоговыйУчет - это список периодов, когда организация переходила на УСН
	// поля:
	//		УСН, 
	//		Месяц - месяц налогового периода
	// Описание:	
	//	Выбираем Из Периоды (таблица - список периодов с начала года по текущий период)
	//	Внутреннее соединение с "псевдосрезом" последних регистра УчетнаяПолитикаНалоговыйУчет
	//	по равенству периодов
	//  условие: что организация использует УСН
	
	Если ИДКонфигурации = "ЗУП" Тогда
		УчетнаяПолитикаНалоговыйУчетТекст = 
		"ВЫБРАТЬ
		|	МЕСЯЦ(Периоды.Период) КАК Месяц,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.УСН, ЛОЖЬ) КАК УСН,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС, ЛОЖЬ) КАК УплачиватьДобровольныеВзносыВФСС
		|ПОМЕСТИТЬ ВТУчетнаяПолитикаНалоговыйУчет
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
		|	ИЗ
		|		("+ ПериодыТекст +") КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|			ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период
		|				И (УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период) КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период
		|			И (УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация)	
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Месяц";	
	Иначе
		УчетнаяПолитикаНалоговыйУчетТекст = 
		"ВЫБРАТЬ
		|	МЕСЯЦ(Периоды.Период) КАК Месяц,
		|	ВЫБОР
		|		КОГДА УчетнаяПолитикаНалоговыйУчет.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УСН,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС, ЛОЖЬ) КАК УплачиватьДобровольныеВзносыВФСС
		|ПОМЕСТИТЬ ВТУчетнаяПолитикаНалоговыйУчет
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
		|	ИЗ
		|		("+ ПериодыТекст +") КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|			ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период
		|				И (УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период) КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период
		|			И (УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Месяц";	
	КонецЕсли;

	Запрос.Текст = УчетнаяПолитикаНалоговыйУчетТекст;
	Запрос.Выполнить();
 	УчетнаяПолитикаНалоговыйУчетТекст = "ВТУчетнаяПолитикаНалоговыйУчет";
	
	Если ИДКонфигурации = "БП" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		
		НалоговыеБазыПоФизлицамТекст =
		"ВЫБРАТЬ
		|	ЕСННачисления.ФизЛицо КАК ФизЛицо,
		|	ВЫБОР 
		|		КОГДА ЕСННачисления.ФизЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|   КОНЕЦ КАК ЭтоЖенщина,
		|	СУММА(ВЫБОР КОГДА НЕ УчетнаяПолитикаНалоговыйУчет.УСН И (НЕ ЕСННачисления.ОблагаетсяЕНВД) ТОГДА ЕСННачисления.БазаФСС ИНАЧЕ 0 КОНЕЦ) КАК БазаФСС,
		|	СУММА(ВЫБОР КОГДА НЕ УчетнаяПолитикаНалоговыйУчет.УСН И (НЕ ЕСННачисления.ОблагаетсяЕНВД) ТОГДА ЕСННачисления.НалоговаяБазаФСС ИНАЧЕ 0 КОНЕЦ) КАК НалоговаяБазаФСС,
		|	СУММА(ВЫБОР КОГДА ЕСННачисления.ОблагаетсяЕНВД ТОГДА ЕСННачисления.НалоговаяБазаФСС ИНАЧЕ 0 КОНЕЦ) КАК НалоговаяБазаФССЕНВД,
		|	СУММА(ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчет.УСН И (НЕ ЕСННачисления.ОблагаетсяЕНВД) ТОГДА ЕСННачисления.НалоговаяБазаФСС ИНАЧЕ 0 КОНЕЦ) КАК НалоговаяБазаФССУСН
		|ПОМЕСТИТЬ ВТНалоговыеБазыПоФизлицам
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕСНСведенияОДоходах.ФизЛицо,
		|		МЕСЯЦ(ЕСНСведенияОДоходах.Период) КАК Месяц,
		|		ЕСНСведенияОДоходах.Результат КАК НалоговаяБазаФСС,
		|		ЕСНСведенияОДоходах.Результат - ЕСНСведенияОДоходах.Скидка КАК БазаФСС,
		|		ЕСНСведенияОДоходах.ОблагаетсяЕНВД
		|	ИЗ
		|		РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
		|	ГДЕ
		|		ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
		|		И ЕСНСведенияОДоходах.ОбособленноеПодразделение = &парамОрганизация
		|		И ЕСНСведенияОДоходах.КодДоходаЕСН.ВходитВБазуФСС ) КАК ЕСННачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ " + УчетнаяПолитикаНалоговыйУчетТекст + " КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО ЕСННачисления.Месяц = УчетнаяПолитикаНалоговыйУчет.Месяц
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСННачисления.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо";	
		
		Запрос.Текст = НалоговыеБазыПоФизлицамТекст;
		Запрос.Выполнить();
		НалоговыеБазыПоФизлицамТекст = "ВТНалоговыеБазыПоФизлицам";
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ДоходыПоФЛ.НалоговаяБазаФССЕНВД <> 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЧисленностьРаботниковНаЕНВД,
		|	СУММА(ВЫБОР
		|			КОГДА ДоходыПоФЛ.НалоговаяБазаФССЕНВД <> 0
		|					И ДоходыПоФЛ.ЭтоЖенщина
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЧисленностьЖенщинНаЕНВД,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ДоходыПоФЛ.НалоговаяБазаФССУСН <> 0
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЧисленностьРаботниковНаУСН,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ДоходыПоФЛ.НалоговаяБазаФССУСН <> 0
		|						И ДоходыПоФЛ.ЭтоЖенщина
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЧисленностьЖенщинНаУСН
		|ИЗ
		|	" + НалоговыеБазыПоФизлицамТекст + " КАК ДоходыПоФЛ";
		
		ЧисленностьРаботниковНаУСН = 0;
		ЧисленностьРаботниковНаЕНВД = 0;
 		ЧисленностьЖенщинНаУСН = 0;
		ЧисленностьЖенщинНаЕНВД = 0;
 		КоличествоМесяцевРаботы = 1;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЧисленностьРаботниковНаУСН = Выборка.ЧисленностьРаботниковНаУСН;
			ЧисленностьРаботниковНаЕНВД = Выборка.ЧисленностьРаботниковНаЕНВД;
	 		ЧисленностьЖенщинНаУСН = Выборка.ЧисленностьЖенщинНаУСН;
			ЧисленностьЖенщинНаЕНВД = Выборка.ЧисленностьЖенщинНаЕНВД;
		КонецЕсли;
		
		НалоговаяБазаТекст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ДоходыПоФЛ.НалоговаяБазаФСС <> 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000010001003,
		|	СУММА(ВЫБОР
		|			КОГДА ДоходыПоФЛ.НалоговаяБазаФСС <> 0
		|					И ДоходыПоФЛ.ЭтоЖенщина
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000010002003,
		|	СУММА(ДоходыПоФЛ.БазаФСС) КАК П000010003003,
		|	СУММА(ЕСНИсчисленныйОбороты.ПримененнаяЛьготаФССОборот) КАК П000010004003
		|ИЗ
		|	ВТНалоговыеБазыПоФизлицам КАК ДоходыПоФЛ
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФСС) КАК ПримененнаяЛьготаФССОборот,
		|			ЕСНИсчисленный.ФизЛицо КАК ФизЛицо
		|		ИЗ
		|			РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
		|		ГДЕ
		|			ЕСНИсчисленный.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
		|			И ЕСНИсчисленный.ОбособленноеПодразделение = &парамОрганизация
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЕСНИсчисленный.ФизЛицо) КАК ЕСНИсчисленныйОбороты
		|		ПО ДоходыПоФЛ.ФизЛицо = ЕСНИсчисленныйОбороты.ФизЛицо";
		
	Иначе
		НалоговаяБазаТекст = 
		"ВЫБРАТЬ
		|	ДоходыПоФЛ.БазаФСС КАК П000010003003,
		|	ЕСТЬNULL(ЕСНИсчисленныйОбороты.ПримененнаяЛьготаФСС,0) КАК П000010004003
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА(ВЫБОР
		|				КОГДА (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
		|					ТОГДА ЕСННачисления.БазаФСС
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК БазаФСС
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ЕСНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|			МЕСЯЦ(ЕСНСведенияОДоходах.Период) КАК Месяц,
		|			ЕСНСведенияОДоходах.Результат КАК НалоговаяБазаФСС,
		|			ЕСНСведенияОДоходах.Результат - ЕСНСведенияОДоходах.Скидка КАК БазаФСС
		|		ИЗ
		|			РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
		|		ГДЕ
		|			ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
		|			И (НЕ ЕСНСведенияОДоходах.ОблагаетсяЕНВД)
		|			И ЕСНСведенияОДоходах.ОбособленноеПодразделение = &парамОрганизация
		|			И ЕСНСведенияОДоходах.КодДоходаЕСН.ВходитВБазуФСС) КАК ЕСННачисления
		|			ЛЕВОЕ СОЕДИНЕНИЕ " + УчетнаяПолитикаНалоговыйУчетТекст + " КАК УчетнаяПолитикаНалоговыйУчет
		|			ПО ЕСННачисления.Месяц = УчетнаяПолитикаНалоговыйУчет.Месяц) КАК ДоходыПоФЛ
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФСС) КАК ПримененнаяЛьготаФСС
		|		ИЗ
		|			РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
		|		ГДЕ
		|			ЕСНИсчисленный.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
		|			И ЕСНИсчисленный.ОбособленноеПодразделение = &парамОрганизация) КАК ЕСНИсчисленныйОбороты
		|		ПО (ИСТИНА)";
		
	КонецЕсли;
		
							  
	// ДанныеОбИнвалидности
	//	Поля:
	//		Период
	//		Физлицо
	//
	//	Описание:
	// 	таблица списка периодов-физлиц которые являются инвалидами
	//
	ДанныеОбИнвалидностиТекст = 
	"ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(Периоды.Период,МЕСЯЦ) КАК Период,
	|		СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Периоды.Период КАК Период,
	|			СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо,
	|			МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК ПериодРегистра
	|		ИЗ
	|			("+ ПериодыТекст +") КАК Периоды
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|				ПО Периоды.Период >= СведенияОбИнвалидностиФизлиц.Период
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОбИнвалидностиФизлиц.Физлицо,
	|			Периоды.Период) КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|			ПО СведенияОбИнвалидностиФизлиц.Период = Периоды.ПериодРегистра И СведенияОбИнвалидностиФизлиц.Физлицо = Периоды.Физлицо
	|
	|	ГДЕ
	|		(СведенияОбИнвалидностиФизлиц.Инвалидность)";
	
	Если ИДКонфигурации = "БП" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		ТекстДоходовФСС_НСТекст =
		"ВЫБРАТЬ
		|		НачисленияРаботниковОрганизаций.ФизЛицо КАК ФизЛицо,
		|		НачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаФСС_НС КАК КодДоходаФСС_НС,
		|		НачисленияРаботниковОрганизаций.Результат КАК Результат,
		|		МЕСЯЦ(НачисленияРаботниковОрганизаций.Ссылка.ПериодРегистрации) КАК МесяцДохода,
		|		НачисленияРаботниковОрганизаций.Ссылка.ПериодРегистрации КАК ПериодРегистрации
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачисленияРаботниковОрганизаций
		|	ГДЕ
		|		НачисленияРаботниковОрганизаций.Ссылка.ПериодРегистрации МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
		|		И НачисленияРаботниковОрганизаций.Ссылка.Проведен
		|		И НачисленияРаботниковОрганизаций.Ссылка.Организация = &парамОрганизация";
	Иначе
		ТекстДоходовФСС_НСТекст =
		"ВЫБРАТЬ
		|	ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо КАК ФизЛицо,
		|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаФСС_НС КАК КодДоходаФСС_НС,
		|	ОсновныеНачисленияРаботниковОрганизаций.Результат КАК Результат,
		|	МЕСЯЦ(ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации) КАК МесяцДохода,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации КАК ПериодРегистрации
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
		|	И ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение = &парамОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо,
		|	ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаФСС_НС,
		|	ДополнительныеНачисленияРаботниковОрганизаций.Результат,
		|	МЕСЯЦ(ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации),
		|	НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации, МЕСЯЦ)
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
		|ГДЕ
		|	ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
		|	И ДополнительныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение = &парамОрганизация";
	КонецЕсли;
	
	ДоходыДляФСС_НСТекст = "
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС = ЗНАЧЕНИЕ(Перечисление.ДоходыФСС_НС.Облагается)
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001004,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС = ЗНАЧЕНИЕ(Перечисление.ДоходыФСС_НС.Облагается)
	|					И Доходы.МесяцДохода = &Месяц1
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001104,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС = ЗНАЧЕНИЕ(Перечисление.ДоходыФСС_НС.Облагается)
	|					И Доходы.МесяцДохода = &Месяц2
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001204,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС = ЗНАЧЕНИЕ(Перечисление.ДоходыФСС_НС.Облагается)
	|					И Доходы.МесяцДохода = &Месяц3
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001304,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС = ЗНАЧЕНИЕ(Перечисление.ДоходыФСС_НС.Облагается)
	|					И СведенияИнвалидность.Физлицо ЕСТЬ НЕ NULL
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001005,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС = ЗНАЧЕНИЕ(Перечисление.ДоходыФСС_НС.Облагается)
	|					И СведенияИнвалидность.Физлицо ЕСТЬ НЕ NULL
	|					И Доходы.МесяцДохода = &Месяц1
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001105,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС = ЗНАЧЕНИЕ(Перечисление.ДоходыФСС_НС.Облагается)
	|					И СведенияИнвалидность.Физлицо ЕСТЬ НЕ NULL
	|					И Доходы.МесяцДохода = &Месяц2
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001205,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС = ЗНАЧЕНИЕ(Перечисление.ДоходыФСС_НС.Облагается)
	|					И СведенияИнвалидность.Физлицо ЕСТЬ НЕ NULL
	|					И Доходы.МесяцДохода = &Месяц3
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001305,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодДоходаФСС_НС <> ЗНАЧЕНИЕ(Перечисление.ДоходыФСС_НС.Облагается)
	|				ТОГДА Доходы.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000090001006
	|ИЗ
	|	(" + ТекстДоходовФСС_НСТекст + ") КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДанныеОбИнвалидностиТекст + ") КАК СведенияИнвалидность
	|		ПО Доходы.ФизЛицо = СведенияИнвалидность.Физлицо И  Доходы.ПериодРегистрации = СведенияИнвалидность.Период";
	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	ОчиститьТабличноеПоле(мРаздел2_1);

	ТаблицаСтраницРаздела2_1 = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел2_1", ТаблицаСтраницРаздела2_1);
	ИндексСтраницы = 0;
	Пока Не (ИндексСтраницы > (ТаблицаСтраницРаздела2_1.Количество()-1)) Цикл
		// Пропускаем активную страницу по той причине,
		// что данные активной страницы былы очищены ранее.
		СтрокаТаблицы = ТаблицаСтраницРаздела2_1[ИндексСтраницы];
		Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
			// удаляем дополнительную страницу
			ТаблицаСтраницРаздела2_1.Удалить(СтрокаТаблицы);
			ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел2_1");
			Продолжить;
		КонецЕсли;

		ИндексСтраницы = ИндексСтраницы + 1;
	КонецЦикла;
	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, "Раздел2_1");
	
	ОчиститьТабличноеПоле(мРаздел2_2);

	ТаблицаСтраницРаздела2_2 = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел2_2", ТаблицаСтраницРаздела2_2);
	ИндексСтраницы = 0;
	Пока Не (ИндексСтраницы > (ТаблицаСтраницРаздела2_2.Количество()-1)) Цикл
		// Пропускаем активную страницу по той причине,
		// что данные активной страницы былы очищены ранее.
		СтрокаТаблицы = ТаблицаСтраницРаздела2_2[ИндексСтраницы];
		Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
			// удаляем дополнительную страницу
			ТаблицаСтраницРаздела2_2.Удалить(СтрокаТаблицы);
			ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел2_2");
			Продолжить;
		КонецЕсли;

		ИндексСтраницы = ИндексСтраницы + 1;
	КонецЦикла;
	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, "Раздел2_2");
	
	// Налоговые или облагаемые базы по ЕСН и страховым взносам
	
	// Раздел I (табл. 1)
	
	Запрос.Текст = НалоговаяБазаТекст;
	
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	// Раздел III (табл. 9)

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Месяц
	|ИЗ
	|  " + УчетнаяПолитикаНалоговыйУчетТекст + " КАК УчетнаяПолитикаНалоговыйУчет
	|ГДЕ
	|	УчетнаяПолитикаНалоговыйУчет.УСН";	
	
	СписокМесяцевУСН = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Месяц");
    ЕстьУСН = СписокМесяцевУСН.Количество() > 0;
	
	Если ИДКонфигурации = "БП" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизЛицо) КАК П000090001001,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СведенияИнвалидность.Физлицо) КАК П000090001002," + ДоходыДляФСС_НСТекст;
		ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ " + ДоходыДляФСС_НСТекст;
		ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
		
		// расчет среднесписочной численности
		ЧисленностьРаботниковНаУСН = 0;
		ЧисленностьРаботниковНаЕНВД = 0;
		ЧисленностьЖенщинНаУСН = 0;
		ЧисленностьЖенщинНаЕНВД = 0;
		ЧисленностьРаботниковНаОбщемрежиме = 0;
		ЧисленностьЖенщинНаОбщемрежиме = 0;
		ЧисленностьРаботников = 0;
		ЧисленностьИнвалидов = 0;
		КоличествоМесяцевРаботы = 0;
		Отчет = Отчеты.СредняяЧисленностьРаботниковОрганизаций.Создать();
		ТаблицаСреднихЧисленостей = Отчет.ПолучитьТаблицуЧисленностей(Организация, мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета);
		Если ТаблицаСреднихЧисленостей.Количество() > 0 Тогда
			КоличествоМесяцевРаботы = ТаблицаСреднихЧисленостей.Количество();
			Для каждого СтрокаМесяца из ТаблицаСреднихЧисленостей Цикл
				ЭтоМесяцУСН = СписокМесяцевУСН.Найти(Месяц(СтрокаМесяца.МесяцОтчета)) <> Неопределено;
				ЧисленностьРаботниковНаУСН = ЧисленностьРаботниковНаУСН + ?(ЭтоМесяцУСН,Окр(СтрокаМесяца.СредняяЧисленностьНеЕНВД),0);
				ЧисленностьЖенщинНаУСН = ЧисленностьЖенщинНаУСН + ?(ЭтоМесяцУСН,Окр(СтрокаМесяца.СредняяЧисленностьЖенщинНеЕНВД),0);
				ЧисленностьРаботниковНаЕНВД = ЧисленностьРаботниковНаЕНВД + Окр(СтрокаМесяца.СредняяЧисленностьЕНВД);
				ЧисленностьЖенщинНаЕНВД = ЧисленностьЖенщинНаЕНВД + Окр(СтрокаМесяца.СредняяЧисленностьЖенщинЕНВД);
				ЧисленностьРаботниковНаОбщемрежиме = ЧисленностьРаботниковНаОбщемрежиме + ?(ЭтоМесяцУСН, 0, Окр(СтрокаМесяца.СредняяЧисленностьНеЕНВД));
				ЧисленностьЖенщинНаОбщемрежиме = ЧисленностьЖенщинНаОбщемрежиме + ?(ЭтоМесяцУСН, 0, Окр(СтрокаМесяца.СредняяЧисленностьЖенщинНеЕНВД));
				ЧисленностьРаботников = ЧисленностьРаботников + Окр(СтрокаМесяца.СредняяЧисленность);
				ЧисленностьИнвалидов = ЧисленностьИнвалидов + Окр(СтрокаМесяца.СредняяЧисленностьИнвалидов);
			КонецЦикла;
			УстановитьЗначениеПоказателя("П000010001003", Окр(ЧисленностьРаботниковНаОбщемрежиме / КоличествоМесяцевРаботы));
			УстановитьЗначениеПоказателя("П000010002003", Окр(ЧисленностьЖенщинНаОбщемрежиме / КоличествоМесяцевРаботы)); // в т.ч. женщин
			УстановитьЗначениеПоказателя("П000090001001", Окр(ЧисленностьРаботников / КоличествоМесяцевРаботы));
			УстановитьЗначениеПоказателя("П000090001002", Окр(ЧисленностьИнвалидов / КоличествоМесяцевРаботы)); // в т.ч. инвалидов
			
		КонецЕсли;
	КонецЕсли;
	ЕстьЕНВД = ЗначениеЗаполнено(ЧисленностьРаботниковНаЕНВД);
	
	// РАСХОДЫ НА ЦЕЛИ ОБЯЗАТЕЛЬНОГО СОЦИАЛЬНОГО СТРАХОВАНИЯ С НАЧАЛА ГОДА
	
	// Раздел I (табл 3), Раздел II (табл 6) и Раздел III (табл 11)
	
	ДанныеОРасходах = Новый Структура;
	
	РасходыНаЦелиОбязательногоССТекст =
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030001001,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030001003,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030001004,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030001005,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030002001,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030002003,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030002004,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030002005,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030003003,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030003004,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030003005,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030004003,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030004004,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030004005,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриРожденииРебенка)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030012003,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриРожденииРебенка)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030012004,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030013003,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030013004,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030013005,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030014003,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030014004,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030015003,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030015004,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриУсыновленииРебенка)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030016003,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриУсыновленииРебенка)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030016004,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060001001_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060001003_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060001004_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060001005_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060002001_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060002003_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060002004_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060002005_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060003003_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060003004_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060003005_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060004003_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060004004_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060004005_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриРожденииРебенка)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060008003_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриРожденииРебенка)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060008004_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060009003_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060009004_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060009005_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060010003_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060010004_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060011003_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060011004_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриУсыновленииРебенка)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060012003_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриУсыновленииРебенка)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060012004_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060001001_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060001003_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060001004_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060001005_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060002001_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060002003_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060002004_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060002005_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060003003_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060003004_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060003005_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060004003_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060004004_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060004005_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриРожденииРебенка)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060008003_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриРожденииРебенка)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060008004_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060009003_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060009004_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060009005_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060010003_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060010004_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060011003_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060011004_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриУсыновленииРебенка)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060012003_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПриУсыновленииРебенка)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060012004_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000110001003,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000110001004,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000110002003,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000110002004,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000110004003,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000110004004,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000110005003,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание)
	|					И ПособияСоциальномуСтрахованиюОбороты.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000110005004,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.ОплаченныеДниОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000110007003,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000110007004
	|ИЗ
	|	РегистрНакопления.ПособияСоциальномуСтрахованию.Обороты(&парамНачалоГода, &парамКонецОтчетногоПериода, Месяц, Организация = &парамОрганизация) КАК ПособияСоциальномуСтрахованиюОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + УчетнаяПолитикаНалоговыйУчетТекст + " КАК УчетнаяПолитикаНалоговыйУчет
	|		ПО (МЕСЯЦ(ПособияСоциальномуСтрахованиюОбороты.Период) = УчетнаяПолитикаНалоговыйУчет.Месяц)";
	
	РасходыНаПособияПоУходуТекст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030007003,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030007004,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030007005,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И (НЕ ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030008003,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И (НЕ ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030008004,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И (НЕ УчетнаяПолитикаНалоговыйУчет.УСН)
	|					И (НЕ ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком)
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030008005,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060006003_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060006004_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060006005_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И НЕ ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060007003_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И НЕ ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060007004_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
	|					И НЕ ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060007005_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060006003_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060006004_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060006005_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И НЕ ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060007003_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И НЕ ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060007004_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
	|					И УчетнаяПолитикаНалоговыйУчет.УСН
	|					И НЕ ПособияСоциальномуСтрахованиюОбороты.УходЗаПервымРебенком
	|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060007005_УСН
	|ИЗ
	|	РегистрНакопления.ПособияПоУходуЗаРебенкомДоПолутораЛет.Обороты(&парамНачалоГода, &парамКонецОтчетногоПериода, Месяц, Организация = &парамОрганизация) КАК ПособияСоциальномуСтрахованиюОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + УчетнаяПолитикаНалоговыйУчетТекст + " КАК УчетнаяПолитикаНалоговыйУчет
	|		ПО (МЕСЯЦ(ПособияСоциальномуСтрахованиюОбороты.Период) = УчетнаяПолитикаНалоговыйУчет.Месяц)";
	
	РаспределениеЗаработкаПолучателейПособийТекст =
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ЗаработокФизлиц.ОблагаетсяЕНВД)
	|					И (НЕ ЗаработокФизлиц.УСН)
	|					И ЗаработокФизлиц.Заработок < 3751
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030000103,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ЗаработокФизлиц.ОблагаетсяЕНВД)
	|					И (НЕ ЗаработокФизлиц.УСН)
	|					И ЗаработокФизлиц.Заработок >= 3751
	|					И ЗаработокФизлиц.Заработок < 7501
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030000203,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ЗаработокФизлиц.ОблагаетсяЕНВД)
	|					И (НЕ ЗаработокФизлиц.УСН)
	|					И ЗаработокФизлиц.Заработок >= 7501
	|					И ЗаработокФизлиц.Заработок < 11251
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030000303,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ЗаработокФизлиц.ОблагаетсяЕНВД)
	|					И (НЕ ЗаработокФизлиц.УСН)
	|					И ЗаработокФизлиц.Заработок >= 11251
	|					И ЗаработокФизлиц.Заработок < 15001
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030000403,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ЗаработокФизлиц.ОблагаетсяЕНВД)
	|					И (НЕ ЗаработокФизлиц.УСН)
	|					И ЗаработокФизлиц.Заработок >= 15001
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000030000503,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаработокФизлиц.ОблагаетсяЕНВД
	|					И ЗаработокФизлиц.Заработок < 3751
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060000103_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаработокФизлиц.ОблагаетсяЕНВД
	|					И ЗаработокФизлиц.Заработок >= 3751
	|					И ЗаработокФизлиц.Заработок < 7501
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060000203_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаработокФизлиц.ОблагаетсяЕНВД
	|					И ЗаработокФизлиц.Заработок >= 7501
	|					И ЗаработокФизлиц.Заработок < 11251
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060000303_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаработокФизлиц.ОблагаетсяЕНВД
	|					И ЗаработокФизлиц.Заработок >= 11251
	|					И ЗаработокФизлиц.Заработок < 15001
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060000403_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаработокФизлиц.ОблагаетсяЕНВД
	|					И ЗаработокФизлиц.Заработок >= 15001
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060000503_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ЗаработокФизлиц.ОблагаетсяЕНВД)
	|					И ЗаработокФизлиц.УСН
	|					И ЗаработокФизлиц.Заработок < 3751
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060000103_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ЗаработокФизлиц.ОблагаетсяЕНВД)
	|					И ЗаработокФизлиц.УСН
	|					И ЗаработокФизлиц.Заработок >= 3751
	|					И ЗаработокФизлиц.Заработок < 7501
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060000203_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ЗаработокФизлиц.ОблагаетсяЕНВД)
	|					И ЗаработокФизлиц.УСН
	|					И ЗаработокФизлиц.Заработок >= 7501
	|					И ЗаработокФизлиц.Заработок < 11251
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060000303_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ЗаработокФизлиц.ОблагаетсяЕНВД)
	|					И ЗаработокФизлиц.УСН
	|					И ЗаработокФизлиц.Заработок >= 11251
	|					И ЗаработокФизлиц.Заработок < 15001
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060000403_УСН,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ЗаработокФизлиц.ОблагаетсяЕНВД)
	|					И ЗаработокФизлиц.УСН
	|					И ЗаработокФизлиц.Заработок >= 15001
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000060000503_УСН
	|ИЗ
	|	(ВЫБРАТЬ
	|		Заработки.ФизЛицо КАК ФизЛицо,
	|		Заработки.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|		МАКСИМУМ(Заработки.РазмерСреднегоЗаработка) * 365 / 12 КАК Заработок,
	|		УчетнаяПолитикаНалоговыйУчет.УСН КАК УСН
	|	ИЗ
	|		РегистрСведений.ЗаработкиПолучателейПособияПоУходуЗаРебенкомДоПолутораЛет КАК Заработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + УчетнаяПолитикаНалоговыйУчетТекст + " КАК УчетнаяПолитикаНалоговыйУчет
	|			ПО (МЕСЯЦ(Заработки.Период) = УчетнаяПолитикаНалоговыйУчет.Месяц)
	|	ГДЕ
	|		Заработки.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
	|		И Заработки.Организация = &парамОрганизация
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Заработки.ФизЛицо,
	|		Заработки.ОблагаетсяЕНВД,
	|		УчетнаяПолитикаНалоговыйУчет.УСН) КАК ЗаработокФизлиц";
	
	Запрос.Текст = РасходыНаЦелиОбязательногоССТекст;
	ТаблицаРезультатовБЛ = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРезультатовБЛ.Количество() > 0 Тогда
		Для каждого Колонка Из ТаблицаРезультатовБЛ.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			ДанныеОРасходах.Вставить(ИмяКолонки,ТаблицаРезультатовБЛ[0][ИмяКолонки])
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = РасходыНаПособияПоУходуТекст;
	ТаблицаРезультатовБЛ = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРезультатовБЛ.Количество() > 0 Тогда
		Для каждого Колонка Из ТаблицаРезультатовБЛ.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			ДанныеОРасходах.Вставить(ИмяКолонки,ТаблицаРезультатовБЛ[0][ИмяКолонки])
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = РаспределениеЗаработкаПолучателейПособийТекст;
	ТаблицаРезультатовБЛ = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРезультатовБЛ.Количество() > 0 Тогда
		Для каждого Колонка Из ТаблицаРезультатовБЛ.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			ДанныеОРасходах.Вставить(ИмяКолонки,ТаблицаРезультатовБЛ[0][ИмяКолонки])
		КонецЦикла;
	КонецЕсли;
	
	// данные по общему налоговому режиму
	Для каждого КлючИЗначение Из ДанныеОРасходах Цикл
		ИмяКолонки = КлючИЗначение.Ключ;
		Если Найти(ИмяКолонки,"_") = 0 Тогда
			УстановитьЗначениеПоказателя(ИмяКолонки, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// данные по специальным налоговым режимам
	Если ЧисленностьРаботниковНаУСН > 0 Тогда
		Для каждого КлючИЗначение Из ДанныеОРасходах Цикл
			ИмяКолонки = КлючИЗначение.Ключ;
			ПозицияРазделителя = Найти(ИмяКолонки,"_");
			Если ПозицияРазделителя > 0 Тогда
				СпецРежим = Сред(ИмяКолонки,ПозицияРазделителя + 1);
				ИмяПоказателя = Лев(ИмяКолонки,13);
				Если СпецРежим = "УСН" Тогда
					УстановитьЗначениеПоказателя(ИмяПоказателя, КлючИЗначение.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ЧисленностьРаботниковНаУСН > 0 И ЧисленностьРаботниковНаЕНВД > 0 Тогда
		Расчет("Раздел2_2");
		ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2_2");
		РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2_2");
	КонецЕсли;
	Если ЧисленностьРаботниковНаЕНВД > 0 Тогда
		Для каждого КлючИЗначение Из ДанныеОРасходах Цикл
			ИмяКолонки = КлючИЗначение.Ключ;
			ПозицияРазделителя = Найти(ИмяКолонки,"_");
			Если ПозицияРазделителя > 0 Тогда
				СпецРежим = Сред(ИмяКолонки,ПозицияРазделителя + 1);
				ИмяПоказателя = Лев(ИмяКолонки,13);
				Если СпецРежим = "ЕНВД" Тогда
					УстановитьЗначениеПоказателя(ИмяПоказателя, КлючИЗначение.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	// РАСЧЕТЫ ПО СРЕДСТВАМ ОБЯЗАТЕЛЬНОГО СОЦИАЛЬНОГО СТРАХОВАНИЯ 
	
	// Раздел I (табл. 2) и Раздел III (табл 10)
	// Заполняем по данным бухгалтерского учета.
	
	Если ИДКонфигурации <> "ЗУП" Тогда
		
		// Инициализация
		ПС = ПланыСчетов["Хозрасчетный"];
		Счет51    = ПС.РасчетныеСчета;
		Счет70    = ПС.РасчетыСПерсоналомПоОплатеТруда;
		Счет91    = ПС.ПрочиеДоходыИРасходы;

		// Бухгалтерский итоги по счетам
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();

		// Бухгалтерские итоги по аналитике
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();

		НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
		Если НомерМесяца = "12" Тогда
			НомерМесяца = "0";
		КонецЕсли;

		НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
		НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");
		
		Номер1МесяцаКвартала = НомерКвартала * 3 - 2;
		Номер2МесяцаКвартала = НомерКвартала * 3 - 1;
		Номер3МесяцаКвартала = НомерКвартала * 3;
		
		ДатаВ1МесяцеКвартала = Дата(НомерГода, Номер1МесяцаКвартала, 1);
		
		ДатаНачала1МесяцаКвартала = НачалоМесяца(ДатаВ1МесяцеКвартала);
		ДатаКонца1МесяцаКвартала  = КонецМесяца(ДатаВ1МесяцеКвартала);
		
		ДатаВо2МесяцеКвартала = Дата(НомерГода, Номер2МесяцаКвартала, 1);
		
		ДатаНачала2МесяцаКвартала = НачалоМесяца(ДатаВо2МесяцеКвартала);
		ДатаКонца2МесяцаКвартала  = КонецМесяца(ДатаВо2МесяцеКвартала);

		ДатаВ3МесяцеКвартала = Дата(НомерГода, Номер3МесяцаКвартала, 1);
		
		ДатаНачала3МесяцаКвартала = НачалоМесяца(ДатаВ3МесяцеКвартала);
		ДатаКонца3МесяцаКвартала  = КонецМесяца(ДатаВ3МесяцеКвартала);

		//**********************************************************************
		// Извлекаем данные за 1 месяц квартала
		
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 3 "Начислен единый социальный налог"
		ВзносыМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		УстановитьЗначениеПоказателя("П000020003401", ВзносыМ1КВ);

		// строка 4 "Начислено по актам налоговых органов"
		ДоплатаВзносыАктМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		
		// строка 5 "Не принято к зачету расходов"
		НеПринятоМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		УстановитьЗначениеПоказателя("П000020005401", НеПринятоМ1КВ);


		//****************
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "91", , "Организация", Организация);

		// строка 4 "Начислено по актам налоговых органов"
		УменьшениеВзносыАктМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет91);

		// строка 4 "Начислено по актам налоговых органов"
		УстановитьЗначениеПоказателя("П000020004401", ДоплатаВзносыАктМ1КВ - УменьшениеВзносыАктМ1КВ);


		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		// строка 6 "Получено от исполнительного органа Фонда"
		ПолученоИзФондаМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);

		УстановитьЗначениеПоказателя("П000020006401", ПолученоИзФондаМ1КВ);

		// строка 16 "Перечислен единый социальный налог"
		ПеречисленоВзносовМ1КВ    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		ПеречисленоВзносовСамМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		ПеречисленоВзносовАктМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		ВозвратРасходовМ1КВ       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);

		УстановитьЗначениеПоказателя("П000020016403", ПеречисленоВзносовМ1КВ + ПеречисленоВзносовСамМ1КВ + ПеречисленоВзносовАктМ1КВ + ВозвратРасходовМ1КВ);

		// строка 15 "Расходы на цели обязательного социального страхования"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);

		РасходыПоСтрахованиюМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);
		
		УстановитьЗначениеПоказателя("П000020015401", РасходыПоСтрахованиюМ1КВ);

		//************************************************************************
		// Извлекаем данные за 2 месяц квартала
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 3 "Начислен единый социальный налог"
		ВзносыМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		УстановитьЗначениеПоказателя("П000020003501", ВзносыМ2КВ);

		// строка 4 "Начислено по актам налоговых органов"
		ДоплатаВзносыАктМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);

		// строка 5 "Не принято к зачету расходов"
		НеПринятоМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		УстановитьЗначениеПоказателя("П000020005501", НеПринятоМ2КВ);

		//****************
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "91", , "Организация", Организация);

		// строка 4 "Начислено по актам налоговых органов"
		УменьшениеВзносыАктМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет91);

		// строка 4 "Начислено по актам налоговых органов"
		УстановитьЗначениеПоказателя("П000020004501", ДоплатаВзносыАктМ2КВ - УменьшениеВзносыАктМ2КВ);

		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		// строка 6 "Получено от исполнительного органа Фонда"
		ПолученоИзФондаМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		УстановитьЗначениеПоказателя("П000020006501", ПолученоИзФондаМ2КВ);
		
		// строка 16 "Перечислен единый социальный налог"
		ПеречисленоВзносовМ2КВ    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		ПеречисленоВзносовСамМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		ПеречисленоВзносовАктМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		ВозвратРасходовМ2КВ       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		
		УстановитьЗначениеПоказателя("П000020016503", ПеречисленоВзносовМ2КВ + ПеречисленоВзносовСамМ2КВ + ПеречисленоВзносовАктМ2КВ + ВозвратРасходовМ2КВ);

		// строка 15 "Расходы на цели обязательного социального страхования"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);

		РасходыПоСтрахованиюМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);
		
		УстановитьЗначениеПоказателя("П000020015501", РасходыПоСтрахованиюМ2КВ);

		//****************************************************************************
		// Извлекаем данные за 3 месяц квартала
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 3 "Начислено ЕСН, зачисляемого в ФСС РФ"
		ВзносыМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		УстановитьЗначениеПоказателя("П000020003601", ВзносыМ3КВ);

		// строка 4 "Начислено по актам налоговых органов"
		ДоплатаВзносыАктМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		
		// строка 5 "Не принято к зачету расходов"
		НеПринятоМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		УстановитьЗначениеПоказателя("П000020005601", НеПринятоМ3КВ);


		//****************
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "91", , "Организация", Организация);

		// строка 4 "Начислено по актам налоговых органов"
		УменьшениеВзносыАктМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет91);

		// строка 4 "Начислено по актам налоговых органов"
		УстановитьЗначениеПоказателя("П000020004601", ДоплатаВзносыАктМ3КВ - УменьшениеВзносыАктМ3КВ);

		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		// строка 6 "Получено от исполнительного органа Фонда"
		ПолученоИзФондаМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		УстановитьЗначениеПоказателя("П000020006601", ПолученоИзФондаМ3КВ);

		// строка 16 "Перечислен единый социальный налог"
		ПеречисленоВзносовМ3КВ    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		ПеречисленоВзносовСамМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		ПеречисленоВзносовАктМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		ВозвратРасходовМ3КВ       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		
		УстановитьЗначениеПоказателя("П000020016603", ПеречисленоВзносовМ3КВ + ПеречисленоВзносовСамМ3КВ + ПеречисленоВзносовАктМ3КВ + ВозвратРасходовМ3КВ);
		
		// строка 15 "Расходы на цели обязательного социального страхования"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);

		РасходыПоСтрахованиюМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);

		УстановитьЗначениеПоказателя("П000020015601", РасходыПоСтрахованиюМ3КВ);
		
		//****************************************************************************
		// В целом за квартал

		// Бухгалтерские итоги по счетам и аналитике
		ИтогиРС = "НачальныйОстатокДт, НачальныйОстатокКт, КонечныйОстатокДт, КонечныйОстатокКт, ОборотДт, ОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);

		СНК_Взносы = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		СНД_Взносы = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		СКД_Взносы = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт",  "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		КО_Взносы  = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		СНК_ВзносыСам = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		СНД_ВзносыСам = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		КО_ВзносыСам  = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогСам);

		СНК_ВзносыАкт = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		СНД_ВзносыАкт = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		КО_ВзносыАкт  = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);

		СНК_РасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		СНД_РасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		СКД_РасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт",  "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);

		СНК_ПолученоИзФонда = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда);
		СНД_ПолученоИзФонда = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда);
		
		КО_НеПринято = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		
		Задолж =  СНК_Взносы + СНК_ВзносыСам + СНК_ВзносыАкт + СНК_РасходыПоСтрахованию + СНК_ПолученоИзфонда
		       - (СНД_Взносы + СНД_ВзносыСам + СНД_ВзносыАкт + СНД_РасходыПоСтрахованию + СНД_ПолученоИзфонда);

		Если Задолж > 0 Тогда 

			// строка 1 "Задолженность за страхователем на начало года"
			УстановитьЗначениеПоказателя("П000020001003", Задолж);

		Иначе 
			// строка 12 "Задолженность за исполнительным органом Фонда на начало года"
			УстановитьЗначениеПоказателя("П000020012003", -Задолж);

			// строка 13 "Задолженность за исполнительным органом Фонда на начало года за счет превышения расходов"
			УстановитьЗначениеПоказателя("П000020013003", СНД_РасходыПоСтрахованию);

			// строка 14 "Задолженность за исполнительным органом Фонда на начало года за счет переплаты по единому социальному налогу"
			УстановитьЗначениеПоказателя("П000020014003", СНД_Взносы);
			
		КонецЕсли;

		//****************
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "91", , "Организация", Организация);

		// строка 2 "Изменения начисленного единого социального налога в соответствии 
		// с налоговой декларацией за прошлые годы"
		ДоплатаВзносыСам = КО_ВзносыСам;
		
		УменьшениеВзносыСам = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет91);
		
		УстановитьЗначениеПоказателя("П000020002003", ДоплатаВзносыСам - УменьшениеВзносыСам);

		// строка 10 "Задолженность за исполнительным органом Фонда на конец 
		// отчетного периода за счет за счет превышения расходов"
		УстановитьЗначениеПоказателя("П000020010003", СКД_РасходыПоСтрахованию);

		
		// строка 11 "Задолженность за исполнительным органом Фонда на конец 
		// отчетного периода за счет переплаты по единому социальному налогу"
		УстановитьЗначениеПоказателя("П000020011003", СКД_Взносы);
		
		// строка 3 "Начислен единый социальный налог"
		ВзносыКВН = КО_Взносы;
		
		// на начало квартала
		ВзносыНачКВ = ВзносыКВН - (ВзносыМ1КВ + ВзносыМ2КВ + ВзносыМ3КВ);
		
		УстановитьЗначениеПоказателя("П000020003201", ВзносыНачКВ);
		
		// строка 4 "Начислено по актам налоговых органов"
		ДоплатаВзносыАктКВН = КО_ВзносыАкт;
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "91", , "Организация", Организация);

		// строка 4 "Начислено по актам налоговых органов"
		УменьшениеВзносыАктКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет91);

		// на начало квартала
		ДоплатаВзносыАктНачКВ    = ДоплатаВзносыАктКВН - (ДоплатаВзносыАктМ1КВ + ДоплатаВзносыАктМ2КВ + ДоплатаВзносыАктМ3КВ);
		УменьшениеВзносыАктНачКВ = УменьшениеВзносыАктКВН - (УменьшениеВзносыАктМ1КВ + УменьшениеВзносыАктМ2КВ + УменьшениеВзносыАктМ3КВ);

		УстановитьЗначениеПоказателя("П000020004201", ДоплатаВзносыАктНачКВ - УменьшениеВзносыАктНачКВ);

		// строка 5 "Не принято к зачету расходов исполнительным органом Фонда"
		УстановитьЗначениеПоказателя("П000020005003", КО_НеПринято);
		
		// на начало квартала
		НеПринятоНачКВ = КО_НеПринято - (НеПринятоМ1КВ + НеПринятоМ2КВ + НеПринятоМ3КВ);

		УстановитьЗначениеПоказателя("П000020005201", НеПринятоНачКВ);
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		// строка 6 "Получено от исполнительного органа Фонда на банковский счет в возмещение произведенных расходов"
		ПолученоИзФондаКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		
		ПолученоИзФондаНачКВ = ПолученоИзФондаКВН - (ПолученоИзФондаМ1КВ + ПолученоИзФондаМ2КВ + ПолученоИзФондаМ3КВ);

		УстановитьЗначениеПоказателя("П000020006201", ПолученоИзФондаНачКВ);
		
		// строка 16 "Перечислен единый социальный налог"
		ПеречисленоВзносовКВН    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		ПеречисленоВзносовСамКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		ПеречисленоВзносовАктКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		ВозвратРасходовКВН       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		
		// на начало квартала 
		ПеречисленоВзносовНачКВ    = ПеречисленоВзносовКВН - (ПеречисленоВзносовМ1КВ + ПеречисленоВзносовМ2КВ + ПеречисленоВзносовМ3КВ);
		ПеречисленоВзносовСамНачКВ = ПеречисленоВзносовСамКВН - (ПеречисленоВзносовСамМ1КВ + ПеречисленоВзносовСамМ2КВ + ПеречисленоВзносовСамМ3КВ);
		ПеречисленоВзносовАктНачКВ = ПеречисленоВзносовАктКВН - (ПеречисленоВзносовАктМ1КВ + ПеречисленоВзносовАктМ2КВ + ПеречисленоВзносовАктМ3КВ);
		ВозвратРасходовНачКВ       = ВозвратРасходовКВН - (ВозвратРасходовМ1КВ + ВозвратРасходовМ2КВ + ВозвратРасходовМ3КВ);
		
		УстановитьЗначениеПоказателя("П000020016203", ПеречисленоВзносовНачКВ + ПеречисленоВзносовСамНачКВ + ПеречисленоВзносовАктНачКВ + ВозвратРасходовНачКВ);
		
		// строка 15 "Расходы на цели обязательного социального страхования"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);

		РасходыПоСтрахованиюКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);

		РасходыПоСтрахованиюНачКВ = РасходыПоСтрахованиюКВН - (РасходыПоСтрахованиюМ1КВ + РасходыПоСтрахованиюМ2КВ + РасходыПоСтрахованиюМ3КВ);

		УстановитьЗначениеПоказателя("П000020015201", РасходыПоСтрахованиюНачКВ);
		
		// Таблица 10
		
		//**********************************************************************
		// Извлекаем данные за 1 месяц квартала
		
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 2 "Начислено страховых взносов"
		НСиПЗВзносыМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		УстановитьЗначениеПоказателя("П000100002401", НСиПЗВзносыМ1КВ);

		//****************
		// строка 10 "Расходы по обязательному социальному страхованию"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);

		НСиПЗРасходыПоСтрахованиюМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);
		
		УстановитьЗначениеПоказателя("П000100010401", НСиПЗРасходыПоСтрахованиюМ1КВ);
		
		// строка 11 "Перечислено страхователем"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		НСиПЗПеречисленоВзносовМ1КВ    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		НСиПЗПеречисленоВзносовСамМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		НСиПЗПеречисленоВзносовАктМ1КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		НСиПЗВозвратРасходовМ1КВ       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);

		УстановитьЗначениеПоказателя("П000100011403", НСиПЗПеречисленоВзносовМ1КВ + НСиПЗПеречисленоВзносовСамМ1КВ + НСиПЗПеречисленоВзносовАктМ1КВ + НСиПЗВозвратРасходовМ1КВ);

		//**********************************************************************
		// Извлекаем данные за 2 месяц квартала
		
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 2 "Начислено страховых взносов"
		НСиПЗВзносыМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		УстановитьЗначениеПоказателя("П000100002501", НСиПЗВзносыМ2КВ);

		//****************
		// строка 10 "Расходы по обязательному социальному страхованию"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);

		НСиПЗРасходыПоСтрахованиюМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);
		
		УстановитьЗначениеПоказателя("П000100010501", НСиПЗРасходыПоСтрахованиюМ2КВ);
		
		// строка 11 "Перечислено страхователем"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		НСиПЗПеречисленоВзносовМ2КВ    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		НСиПЗПеречисленоВзносовСамМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		НСиПЗПеречисленоВзносовАктМ2КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		НСиПЗВозвратРасходовМ2КВ       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);

		УстановитьЗначениеПоказателя("П000100011503", НСиПЗПеречисленоВзносовМ2КВ + НСиПЗПеречисленоВзносовСамМ2КВ + НСиПЗПеречисленоВзносовАктМ2КВ + НСиПЗВозвратРасходовМ2КВ);

		//**********************************************************************
		// Извлекаем данные за 3 месяц квартала
		
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 2 "Начислено страховых взносов"
		НСиПЗВзносыМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		УстановитьЗначениеПоказателя("П000100002601", НСиПЗВзносыМ3КВ);

		//****************
		// строка 10 "Расходы по обязательному социальному страхованию"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);

		НСиПЗРасходыПоСтрахованиюМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);
		
		УстановитьЗначениеПоказателя("П000100010601", НСиПЗРасходыПоСтрахованиюМ3КВ);
		
		// строка 11 "Перечислено страхователем"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);

		НСиПЗПеречисленоВзносовМ3КВ    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		НСиПЗПеречисленоВзносовСамМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		НСиПЗПеречисленоВзносовАктМ3КВ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		НСиПЗВозвратРасходовМ3КВ       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);

		УстановитьЗначениеПоказателя("П000100011603", НСиПЗПеречисленоВзносовМ3КВ + НСиПЗПеречисленоВзносовСамМ3КВ + НСиПЗПеречисленоВзносовАктМ3КВ + НСиПЗВозвратРасходовМ3КВ);

		//****************************************************************************
		// В целом за квартал

		// Бухгалтерские итоги по счетам и аналитике
		ИтогиРС = "НачальныйОстатокДт, НачальныйОстатокКт, КонечныйОстатокДт, КонечныйОстатокКт, ОборотДт, ОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);

		СНК_НСиПЗВзносы = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		СНД_НСиПЗВзносы = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		СКД_НСиПЗВзносы = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт",  "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		КО_НСиПЗВзносы  = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		СНК_НСиПЗВзносыСам = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		СНД_НСиПЗВзносыСам = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		КО_НСиПЗВзносыСам  = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогСам);

		СНК_НСиПЗВзносыАкт = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		СНД_НСиПЗВзносыАкт = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		КО_НСиПЗВзносыАкт  = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);

		СНК_НСиПЗРасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		СНД_НСиПЗРасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		СКД_НСиПЗРасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт",  "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);

		СНК_НСиПЗПолученоИзФонда = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда);
		СНД_НСиПЗПолученоИзФонда = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда);
		
		КО_НСиПЗНеПринято = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		
		Задолж =  СНК_НСиПЗВзносы + СНК_НСиПЗВзносыСам + СНК_НСиПЗВзносыАкт + СНК_НСиПЗРасходыПоСтрахованию + СНК_НСиПЗПолученоИзфонда
		       - (СНД_НСиПЗВзносы + СНД_НСиПЗВзносыСам + СНД_НСиПЗВзносыАкт + СНД_НСиПЗРасходыПоСтрахованию + СНД_НСиПЗПолученоИзфонда);

		Если Задолж > 0 Тогда 

			// строка 1 "Задолженность за страхователем на начало года"
			УстановитьЗначениеПоказателя("П000100001003", Задолж);

		Иначе 
			// строка 9 "Задолженность за исполнительным органом Фонда на начало года"
			УстановитьЗначениеПоказателя("П000100009003", -Задолж);

		КонецЕсли;

		//****************
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "91", , "Организация", Организация);

		// строка 5 "Начислено взносов страхователем за прошлые годы"
		НСиПЗДоплатаВзносыСам = КО_НСиПЗВзносыСам;
		
		НСиПЗУменьшениеВзносыСам = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет91);
		
		УстановитьЗначениеПоказателя("П000100005003", НСиПЗДоплатаВзносыСам - НСиПЗУменьшениеВзносыСам);

		// строка 2 "Начислено страховых взносов"
		НСиПЗВзносыКВН = КО_НСиПЗВзносы;
		
		// на начало квартала
		НСиПЗВзносыНачКВ = НСиПЗВзносыКВН - (НСиПЗВзносыМ1КВ + НСиПЗВзносыМ2КВ + НСиПЗВзносыМ3КВ);
		
		УстановитьЗначениеПоказателя("П000100002101", НСиПЗВзносыНачКВ);
		
		// строка 3 "Начислено взносов по результатам проверок"
		НСиПЗДоплатаВзносыАктКВН = КО_НСиПЗВзносыАкт;
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "91", , "Организация", Организация);

		// строка 3 "Начислено взносов по результатам проверок"
		НСиПЗУменьшениеВзносыАктКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет91);

		УстановитьЗначениеПоказателя("П000100003003", НСиПЗДоплатаВзносыАктКВН - НСиПЗУменьшениеВзносыАктКВН);

		// строка 4 "Не принято к зачету расходов исполнительным органом Фонда"
		УстановитьЗначениеПоказателя("П000100004003", КО_НСиПЗНеПринято);
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		// строка 6 "Получено от исполнительного органа Фонда на банковский счет"
		НСиПЗПолученоИзФондаКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		
		УстановитьЗначениеПоказателя("П000100006003", НСиПЗПолученоИзФондаКВН);
		
		// строка 11 "Перечислено страхователем"
		НСиПЗПеречисленоВзносовКВН    = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51); 
		НСиПЗПеречисленоВзносовСамКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогСам, Счет51); 
		НСиПЗПеречисленоВзносовАктКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51); 
		НСиПЗВозвратРасходовКВН       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		
		// на начало квартала 
		НСиПЗПеречисленоВзносовНачКВ    = НСиПЗПеречисленоВзносовКВН - (НСиПЗПеречисленоВзносовМ1КВ + НСиПЗПеречисленоВзносовМ2КВ + НСиПЗПеречисленоВзносовМ3КВ);
		НСиПЗПеречисленоВзносовСамНачКВ = НСиПЗПеречисленоВзносовСамКВН - (НСиПЗПеречисленоВзносовСамМ1КВ + НСиПЗПеречисленоВзносовСамМ2КВ + НСиПЗПеречисленоВзносовСамМ3КВ);
		НСиПЗПеречисленоВзносовАктНачКВ = НСиПЗПеречисленоВзносовАктКВН - (НСиПЗПеречисленоВзносовАктМ1КВ + НСиПЗПеречисленоВзносовАктМ2КВ + НСиПЗПеречисленоВзносовАктМ3КВ);
		НСиПЗВозвратРасходовНачКВ       = НСиПЗВозвратРасходовКВН - (НСиПЗВозвратРасходовМ1КВ + НСиПЗВозвратРасходовМ2КВ + НСиПЗВозвратРасходовМ3КВ);
		
		УстановитьЗначениеПоказателя("П000100011103", НСиПЗПеречисленоВзносовНачКВ + НСиПЗПеречисленоВзносовСамНачКВ + НСиПЗПеречисленоВзносовАктНачКВ + НСиПЗВозвратРасходовНачКВ);
		
		// строка 10 "Расходы по обязательному социальному страхованию"
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "70", , "Организация", Организация);

		НСиПЗРасходыПоСтрахованиюКВН = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Счет70);

		НСиПЗРасходыПоСтрахованиюНачКВ = НСиПЗРасходыПоСтрахованиюКВН - (НСиПЗРасходыПоСтрахованиюМ1КВ + НСиПЗРасходыПоСтрахованиюМ2КВ + НСиПЗРасходыПоСтрахованиюМ3КВ);

		УстановитьЗначениеПоказателя("П000100010101", НСиПЗРасходыПоСтрахованиюНачКВ);
		
	Иначе
		
		// первый месяц
		ПериодыТекст = "ВЫБРАТЬ 1 КАК Месяц";
		// прибавим остальные месяцы
		Для Сч = 2 По Месяц(мДатаКонцаПериодаОтчета) Цикл
	    	ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ " + Сч;
		КонецЦикла;
		
		НачисленоИзрасходованоВзносовТекст =
		"ВЫБРАТЬ
		|	МЕСЯЦ(ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.ПериодРегистрации) КАК Месяц,
		|	СУММА(ВЫБОР
		|			КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС)
		|				ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоЗаМесяц,
		|	СУММА(ВЫБОР
		|			КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС)
		|				ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РасходовЗаМесяц,
		|	СУММА(ВЫБОР
		|			КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_НСиПЗ)
		|				ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РасходовНСиПЗ_ЗаМесяц,
		|	СУММА(ВЫБОР
		|			КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_НСиПЗ)
		|				ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоНСиПЗ_ЗаМесяц
		|ПОМЕСТИТЬ ВТОтражениеЗарплатыВРеглУчетеПоМесяцам
		|ИЗ
		|	Документ.ОтражениеЗарплатыВРеглУчете.ОтражениеВУчете КАК ОтражениеЗарплатыВРеглУчетеОтражениеВУчете
		|ГДЕ
		|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.ПериодРегистрации МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
		|	И ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.Организация = &парамОрганизация
		|	И (ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_НСиПЗ))
		|			ИЛИ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_НСиПЗ)))
		|	И ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	МЕСЯЦ(ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка.ПериодРегистрации)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Месяц";
		Запрос.Текст = НачисленоИзрасходованоВзносовТекст;
		Запрос.Выполнить();
		
		РасходыНаЦелиОбязательногоССТекст = 
		"ВЫБРАТЬ
		|	Расходы.Месяц КАК Месяц,
		|	СУММА(ВЫБОР
		|			КОГДА Расходы.ВидПособияСоциальногоСтрахования В (ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай), ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание), ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев))
		|				ТОГДА Расходы.СуммаВсегоОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РасходовНСиПЗ_ЗаМесяц,
		|	СУММА(ВЫБОР
		|			КОГДА УчетнаяПолитикаНалоговыйУчет.УСН ИЛИ Расходы.ВидПособияСоциальногоСтрахования В (ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай), ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание), ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев))
		|				ТОГДА 0
		|			ИНАЧЕ Расходы.СуммаВсегоОборот
		|		КОНЕЦ) КАК РасходовЗаМесяц
		|ПОМЕСТИТЬ ВТРасходыПоМесяцам
		|ИЗ
		|	(ВЫБРАТЬ
		|		МЕСЯЦ(ПособияСоциальномуСтрахованиюОбороты.Период) КАК Месяц,
		|		ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот КАК СуммаВсегоОборот,
		|		ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования КАК ВидПособияСоциальногоСтрахования
		|	ИЗ
		|		РегистрНакопления.ПособияСоциальномуСтрахованию.Обороты(
		|				&парамНачалоГода,
		|				&парамКонецОтчетногоПериода,
		|				Месяц,
		|				Организация = &парамОрганизация
		|					И (НЕ ОблагаетсяЕНВД)) КАК ПособияСоциальномуСтрахованиюОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		МЕСЯЦ(ПособияПоУходуЗаРебенкомДоПолутораЛетОбороты.Период),
		|		ПособияПоУходуЗаРебенкомДоПолутораЛетОбороты.СуммаВсегоОборот,
		|		ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет)
		|	ИЗ
		|		РегистрНакопления.ПособияПоУходуЗаРебенкомДоПолутораЛет.Обороты(
		|				&парамНачалоГода,
		|				&парамКонецОтчетногоПериода,
		|				Месяц,
		|				Организация = &парамОрганизация
		|					И (НЕ ОблагаетсяЕНВД)) КАК ПособияПоУходуЗаРебенкомДоПолутораЛетОбороты) КАК Расходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ " + УчетнаяПолитикаНалоговыйУчетТекст + " КАК УчетнаяПолитикаНалоговыйУчет
		|			ПО Расходы.Месяц = УчетнаяПолитикаНалоговыйУчет.Месяц
		|
		|СГРУППИРОВАТЬ ПО
		|	Расходы.Месяц
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Месяц";
		Запрос.Текст = РасходыНаЦелиОбязательногоССТекст;
		Запрос.Выполнить();
		
		ИсчисленныйНалогПоМесяцам = 
		"ВЫБРАТЬ
		|	НалогПоФизлицам.Месяц КАК Месяц,
		|	СУММА(НалогПоФизлицам.ФСС) КАК НачисленоЗаМесяц
		|ПОМЕСТИТЬ ВТНалогПоМесяцам
		|ИЗ
		|	(ВЫБРАТЬ
		|		МЕСЯЦ(ЕСНИсчисленный.Период) КАК Месяц,
		|		ЕСНИсчисленный.ФизЛицо КАК ФизЛицо,
		|		СУММА(ЕСНИсчисленный.ФСС) - (ВЫРАЗИТЬ(СУММА(ЕСНИсчисленный.ПримененнаяЛьготаФСС) * МаксСтавкиЕСН.ФССвПроцентах / 100 КАК ЧИСЛО(18, 5))) КАК ФСС
		|	ИЗ
		|		РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленный
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахЕСНиПФР КАК МаксСтавкиЕСН
		|			ПО (МаксСтавкиЕСН.НомерСтрокиСтавок = 1)
		|				И (МаксСтавкиЕСН.ВидСтавокЕСНиПФР = ЕСНИсчисленный.Организация.ВидСтавокЕСНиПФР)
		|				И (МаксСтавкиЕСН.Год = ГОД(ЕСНИсчисленный.Период))
		|	ГДЕ
		|		ЕСНИсчисленный.ОбособленноеПодразделение = &парамОрганизация
		|		И ЕСНИсчисленный.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода
		|	
		|	СГРУППИРОВАТЬ ПО
		|		МЕСЯЦ(ЕСНИсчисленный.Период),
		|		МаксСтавкиЕСН.ФССвПроцентах,
		|		ЕСНИсчисленный.ФизЛицо) КАК НалогПоФизлицам
		|
		|СГРУППИРОВАТЬ ПО
		|	НалогПоФизлицам.Месяц
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Месяц";
		Запрос.Текст = ИсчисленныйНалогПоМесяцам;
		Запрос.Выполнить();
		
		НачисленоВзносовТекст =
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА (НЕ Периоды.Месяц В (&Месяц1, &Месяц2, &Месяц3))
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.НачисленоЗаМесяц, 0) = 0
		|							ТОГДА ЕСТЬNULL(НалогПоМесяцам.НачисленоЗаМесяц, 0)
		|						ИНАЧЕ ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.НачисленоЗаМесяц, 0)
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000020003201,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Месяц = &Месяц1
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.НачисленоЗаМесяц, 0) = 0
		|							ТОГДА ЕСТЬNULL(НалогПоМесяцам.НачисленоЗаМесяц, 0)
		|						ИНАЧЕ ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.НачисленоЗаМесяц, 0)
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000020003401,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Месяц = &Месяц2
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.НачисленоЗаМесяц, 0) = 0
		|							ТОГДА ЕСТЬNULL(НалогПоМесяцам.НачисленоЗаМесяц, 0)
		|						ИНАЧЕ ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.НачисленоЗаМесяц, 0)
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000020003501,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Месяц = &Месяц3
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.НачисленоЗаМесяц, 0) = 0
		|							ТОГДА ЕСТЬNULL(НалогПоМесяцам.НачисленоЗаМесяц, 0)
		|						ИНАЧЕ ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.НачисленоЗаМесяц, 0)
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000020003601,
		|	СУММА(ВЫБОР
		|			КОГДА (НЕ Периоды.Месяц В (&Месяц1, &Месяц2, &Месяц3))
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.РасходовЗаМесяц, 0) = 0
		|							ТОГДА ЕСТЬNULL(РасходыПоМесяцам.РасходовЗаМесяц, 0)
		|						ИНАЧЕ ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.РасходовЗаМесяц, 0)
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000020015201,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Месяц = &Месяц1
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.РасходовЗаМесяц, 0) = 0
		|							ТОГДА ЕСТЬNULL(РасходыПоМесяцам.РасходовЗаМесяц, 0)
		|						ИНАЧЕ ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.РасходовЗаМесяц, 0)
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000020015401,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Месяц = &Месяц2
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.РасходовЗаМесяц, 0) = 0
		|							ТОГДА ЕСТЬNULL(РасходыПоМесяцам.РасходовЗаМесяц, 0)
		|						ИНАЧЕ ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.РасходовЗаМесяц, 0)
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000020015501,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Месяц = &Месяц3
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.РасходовЗаМесяц, 0) = 0
		|							ТОГДА ЕСТЬNULL(РасходыПоМесяцам.РасходовЗаМесяц, 0)
		|						ИНАЧЕ ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.РасходовЗаМесяц, 0)
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000020015601,
		|	СУММА(ВЫБОР
		|			КОГДА (НЕ Периоды.Месяц В (&Месяц1, &Месяц2, &Месяц3))
		|				ТОГДА ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.НачисленоНСиПЗ_ЗаМесяц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000100002101,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Месяц = &Месяц1
		|				ТОГДА ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.НачисленоНСиПЗ_ЗаМесяц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000100002401,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Месяц = &Месяц2
		|				ТОГДА ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.НачисленоНСиПЗ_ЗаМесяц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000100002501,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Месяц = &Месяц3
		|				ТОГДА ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.НачисленоНСиПЗ_ЗаМесяц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000100002601,
		|	СУММА(ВЫБОР
		|			КОГДА (НЕ Периоды.Месяц В (&Месяц1, &Месяц2, &Месяц3))
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.РасходовНСиПЗ_ЗаМесяц, 0) = 0
		|							ТОГДА ЕСТЬNULL(РасходыПоМесяцам.РасходовНСиПЗ_ЗаМесяц, 0)
		|						ИНАЧЕ ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.РасходовНСиПЗ_ЗаМесяц, 0)
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000100010101,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Месяц = &Месяц1
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.РасходовНСиПЗ_ЗаМесяц, 0) = 0
		|							ТОГДА ЕСТЬNULL(РасходыПоМесяцам.РасходовНСиПЗ_ЗаМесяц, 0)
		|						ИНАЧЕ ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.РасходовНСиПЗ_ЗаМесяц, 0)
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000100010401,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Месяц = &Месяц2
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.РасходовНСиПЗ_ЗаМесяц, 0) = 0
		|							ТОГДА ЕСТЬNULL(РасходыПоМесяцам.РасходовНСиПЗ_ЗаМесяц, 0)
		|						ИНАЧЕ ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.РасходовНСиПЗ_ЗаМесяц, 0)
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000100010501,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Месяц = &Месяц3
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.РасходовНСиПЗ_ЗаМесяц, 0) = 0
		|							ТОГДА ЕСТЬNULL(РасходыПоМесяцам.РасходовНСиПЗ_ЗаМесяц, 0)
		|						ИНАЧЕ ЕСТЬNULL(ОтражениеЗарплатыВРеглУчетеПоМесяцам.РасходовНСиПЗ_ЗаМесяц, 0)
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000100010601
		|ИЗ
		|	("+ ПериодыТекст +") КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтражениеЗарплатыВРеглУчетеПоМесяцам КАК ОтражениеЗарплатыВРеглУчетеПоМесяцам
		|		ПО Периоды.Месяц = ОтражениеЗарплатыВРеглУчетеПоМесяцам.Месяц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасходыПоМесяцам КАК РасходыПоМесяцам
		|		ПО Периоды.Месяц = РасходыПоМесяцам.Месяц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНалогПоМесяцам КАК НалогПоМесяцам
		|		ПО Периоды.Месяц = НалогПоМесяцам.Месяц";
		
		Запрос.Текст = НачисленоВзносовТекст;
		ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	КонецЕсли;

	// Раздел II (табл 4, 5)
	
	РасходыПоСтрахованию_УСН = 0;
	РасходыПоСтрахованию_ЕНВД = 0;
	Если ИДКонфигурации = "ЗУП" Тогда	
		РасходыНаЦелиОбязательногоССТекст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД
		|					И (НЕ(УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС
		|							И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)))
		|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РасходыПоСтрахованию_ЕНВД,
		|	СУММА(ВЫБОР
		|			КОГДА (НЕ ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД)
		|					И УчетнаяПолитикаНалоговыйУчет.УСН
		|					И (НЕ(УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС
		|							И ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)))
		|				ТОГДА ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РасходыПоСтрахованию_УСН
		|ИЗ
		|	(ВЫБРАТЬ
		|		МЕСЯЦ(ПособияСоциальномуСтрахованиюОбороты.Период) КАК Месяц,
		|		ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоОборот КАК СуммаВсегоОборот,
		|		ПособияСоциальномуСтрахованиюОбороты.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|		ПособияСоциальномуСтрахованиюОбороты.ВидПособияСоциальногоСтрахования КАК ВидПособияСоциальногоСтрахования
		|	ИЗ
		|		РегистрНакопления.ПособияСоциальномуСтрахованию.Обороты(
		|				&парамНачалоГода,
		|				&парамКонецОтчетногоПериода,
		|				Месяц,
		|				Организация = &парамОрганизация
		|					И (НЕ ВидПособияСоциальногоСтрахования В (ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай), ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание), ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев)))) КАК ПособияСоциальномуСтрахованиюОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		МЕСЯЦ(ПособияПоУходуЗаРебенкомДоПолутораЛетОбороты.Период),
		|		ПособияПоУходуЗаРебенкомДоПолутораЛетОбороты.СуммаВсегоОборот,
		|		ПособияПоУходуЗаРебенкомДоПолутораЛетОбороты.ОблагаетсяЕНВД,
		|		ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет)
		|	ИЗ
		|		РегистрНакопления.ПособияПоУходуЗаРебенкомДоПолутораЛет.Обороты(&парамНачалоГода, &парамКонецОтчетногоПериода, Месяц, Организация = &парамОрганизация) КАК ПособияПоУходуЗаРебенкомДоПолутораЛетОбороты) КАК ПособияСоциальномуСтрахованиюОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ " + УчетнаяПолитикаНалоговыйУчетТекст + " КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО ПособияСоциальномуСтрахованиюОбороты.Месяц = УчетнаяПолитикаНалоговыйУчет.Месяц";
		
		Запрос.Текст = РасходыНаЦелиОбязательногоССТекст;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РасходыПоСтрахованию_УСН = Выборка.РасходыПоСтрахованию_УСН;
			РасходыПоСтрахованию_ЕНВД = Выборка.РасходыПоСтрахованию_ЕНВД;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьУСН Тогда
		
		// Таблица 4
		мРаздел2_1.Области.Шифр1.Значение = "0";
		мРаздел2_1.Области.Шифр2.Значение = "1";
		мРаздел2_1.Области.Шифр3.Значение = "1";
		
		УстановитьЗначениеПоказателя("П000040001003", Окр(ЧисленностьРаботниковНаУСН / КоличествоМесяцевРаботы));
		УстановитьЗначениеПоказателя("П000040002003", Окр(ЧисленностьЖенщинНаУСН / КоличествоМесяцевРаботы)); // в т.ч. женщин
		
		Если ИДКонфигурации <> "ЗУП" Тогда
			// Инициализация
			ПС = ПланыСчетов["Хозрасчетный"];
			Счет69_13 = ПС.ФСС_СПЕЦ_УСН;
			
			// Таблица 5
			
			// В целом за квартал
			
			// Бухгалтерские итоги по счету, без аналитики
			мБухИтоги.РассчитатьИтоги("Хозрасчетный", "НачальныйОстатокДт, НачальныйОстатокКт", "Сумма", "Счет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , , , , , "Организация", Организация);
			
			// строка 1 "Задолженность за страхователем на начало года"
			СНК_Расходы = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет69_13);
			УстановитьЗначениеПоказателя("П000050001003", СНК_Расходы);
			
			// строка 5 " Задолженность за исполнительным органом Фонда на начало года"
			СНД_Расходы = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет69_13);
			УстановитьЗначениеПоказателя("П000050005003", СНД_Расходы);
			
			// Бухгалтерские итоги по счету, корсчету и аналитике
			мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.13.2", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыРасчетовПоСредствамФСС, "51", , "Организация", Организация);
			
			// строка 2 "Получено от исполнительного органа Фонда на банковский счет для обеспечения выплат на цели социального страхования"
			ПолученоИзФонда = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Субконто1, КорСчет", Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию, Счет51);
			УстановитьЗначениеПоказателя("П000050002003", ПолученоИзФонда);
			
			// строка 7 "Перечислено страхователем"
			ПеречисленоСтрахователем = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыРасчетовПоСредствамФСС.ПеречисленоСтрахователем, Счет51);
			УстановитьЗначениеПоказателя("П000050007003", ПеречисленоСтрахователем);
			
			// строка 6 "Расходы на цели обязательного социального страхования"
			мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.13.2", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыРасчетовПоСредствамФСС, "70", , "Организация", Организация);
			
			РасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию, Счет70);
			УстановитьЗначениеПоказателя("П000050006003", РасходыПоСтрахованию);
			
		Иначе
			
			УстановитьЗначениеПоказателя("П000050006003", РасходыПоСтрахованию_УСН);
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЕстьУСН И ЕстьЕНВД Тогда
		Расчет("Раздел2_1");
		ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2_1");
		РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2_1");
	КонецЕсли;
		
	Если ЕстьЕНВД Тогда
		
		// Таблица 4
		мРаздел2_1.Области.Шифр1.Значение = "0";
		мРаздел2_1.Области.Шифр2.Значение = "2";
		мРаздел2_1.Области.Шифр3.Значение = "1";
		
		УстановитьЗначениеПоказателя("П000040001003", Окр(ЧисленностьРаботниковНаЕНВД / КоличествоМесяцевРаботы));
		УстановитьЗначениеПоказателя("П000040002003", Окр(ЧисленностьЖенщинНаЕНВД / КоличествоМесяцевРаботы)); // в т.ч. женщин
		
		Если ИДКонфигурации <> "ЗУП" Тогда
			// Инициализация
			ПС = ПланыСчетов["Хозрасчетный"];
			Счет69_13 = ПС.ФСС_СПЕЦ_ЕНВД;
			
			// Таблица 5
			
			// В целом за квартал
			
			// Бухгалтерские итоги по счету, без аналитики
			мБухИтоги.РассчитатьИтоги("Хозрасчетный", "НачальныйОстатокДт, НачальныйОстатокКт", "Сумма", "Счет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , , , , , "Организация", Организация);
			
			// строка 1 "Задолженность за страхователем на начало года"
			СНК_Расходы = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет69_13);
			УстановитьЗначениеПоказателя("П000050001003", СНК_Расходы);
			
			// строка 5 " Задолженность за исполнительным органом Фонда на начало года"
			СНД_Расходы = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет69_13);
			УстановитьЗначениеПоказателя("П000050005003", СНД_Расходы);
			
			// Бухгалтерские итоги по счету, корсчету и аналитике
			мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.13.1", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыРасчетовПоСредствамФСС, "51", , "Организация", Организация);
			
			// строка 2 "Получено от исполнительного органа Фонда на банковский счет для обеспечения выплат на цели социального страхования"
			ПолученоИзФонда = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Субконто1, КорСчет", Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию, Счет51);
			УстановитьЗначениеПоказателя("П000050002003", ПолученоИзФонда);
			
			// строка 7 "Перечислено страхователем"
			ПеречисленоСтрахователем = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыРасчетовПоСредствамФСС.ПеречисленоСтрахователем, Счет51);
			УстановитьЗначениеПоказателя("П000050007003", ПеречисленоСтрахователем);
			
			// строка 6 "Расходы на цели обязательного социального страхования"
			мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.13.1", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыРасчетовПоСредствамФСС, "70", , "Организация", Организация);
			
			РасходыПоСтрахованию = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Субконто1, КорСчет", Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию, Счет70);
			УстановитьЗначениеПоказателя("П000050006003", РасходыПоСтрахованию);
			
		Иначе 
			УстановитьЗначениеПоказателя("П000050006003", РасходыПоСтрахованию_ЕНВД);
		КонецЕсли;
		
	КонецЕсли;

	// Добавляем показатели в отчет из xml файла.
	ЗавершитьИмпортXMLФайлаВОтчет(мСтруктураДанныхОтчетаXMLКонтейнер );
	// -------------------------------------------------------------------------------
	// Расчет автовычисляемых полей
	Расчет();
	
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);


	Если ИДКонфигурации = "ЗУП" Тогда
		Предупреждение("Таблицы всех разделов, отражающие расчеты по единому социальному налогу и (или) по средствам ФСС, заполнены только в части начисленных сумм и сумм произведенных расходов!" + Символы.ПС 
		+ "Показатели начисленных сумм, сумм произведенных расходов следует уточнить, а остальные показатели - заполнить по данным бухгалтерского учета.");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвто()

Процедура ЗаполнитьАвтоВнешний() Экспорт 

Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		Предупреждение("Заполнение по данным информационной базы не предусмотрено!");
		Возврат;
	КонецЕсли;
	
	// запрашиваем подтверждение у пользователя и очищаем отчет
	ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма, "Раздел2_1, Раздел2_2");
	Если ПрерватьАвтоЗаполнение Тогда
		Возврат;
	КонецЕсли;
	
	// заполняем содержательную часть
	СчетчикиЛистовМногостраничныхРазделов = Новый Соответствие;
	Для Каждого Стр Из мСтруктураМногостраничныхРазделов Цикл
		СчетчикиЛистовМногостраничныхРазделов.Вставить(Стр.Ключ, 0);
	КонецЦикла;
	Если ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		ПараметрыОтчета = РегламентированнаяОтчетность.СформироватьСтруктуруПараметровОтчетаДляЗаполнения(ЭтаФорма);
		ПараметрыОтчета.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		ПараметрыОтчета.Вставить("ТочностьЕдиницыИзмерения", ТочностьЕдиницыИзмерения);
		ДанныеЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьДанныеЗаполненияОтчета(ЭтаФорма, , мВыбраннаяФорма, , ПараметрыОтчета);
		Если ТипЗнч(ДанныеЗаполненияОтчета) = Тип("ДеревоЗначений") Тогда
			Для Каждого СтрУровня1 Из ДанныеЗаполненияОтчета.Строки Цикл
				СчетчикЛистовРаздела = СчетчикиЛистовМногостраничныхРазделов[СтрУровня1.Имя];
				Если СчетчикЛистовРаздела = Неопределено Тогда // раздел не многостраничный
					Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
						РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, СтрУровня2.Имя, СтрУровня2.Значение);
					КонецЦикла;
				Иначе // раздел многостраничный
					СчетчикиЛистовМногостраничныхРазделов.Вставить(СтрУровня1.Имя, СчетчикЛистовРаздела + 1);
					Если СчетчикЛистовРаздела > 0 Тогда // если это не первый лист раздела, то добавим еще один
						Расчет(СтрУровня1.Имя);
						ИзменитьТаблицуПараметровАвтозаполнения(1, СтрУровня1.Имя);
						РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, СтрУровня1.Имя);
					КонецЕсли;
					Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
						РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, СтрУровня2.Имя, СтрУровня2.Значение);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Расчет();
	
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры  // ЗаполнитьАвтоВнешний();


// УстановитьЗначениеПоказателя
// Процедура "прослойка". Она обрабатывает показатель с учетом источника данных ИБ и XML контейнера.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя)
	// Вызываем процедуру, которая обработает показатель на предмет присутствия в XML контейнере.
	// Если в xml нет такого показателя, то установится из ИБ. Если есть, то из XML.
	РегламентированнаяОтчетность.УстановитьПоказательСУчетомXML(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
КонецПроцедуры // УстановитьЗначениеПоказателя

Процедура НачальнаяПодготовкаФормы() Экспорт 

	Перем ИсходноеКоличествоСтрокГруппы;

	мВПрограммеИзмененаОрганизация = Ложь;

	мВПрограммеИзмененаОрганизация = Ложь;

	мДокументВосстановлен = Ложь;

	мАдресвФорматеДляВыгрузки = "";

	мАвтоВыборКодов = Ложь;

	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);
	мТитульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_1;
	мРаздел1_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_2;
	мРаздел2_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_1;
	мРаздел2_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_2;
	мРаздел2_3 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_3;
	мРаздел2_4 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_4;
	мРаздел3_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел3_1;
	мРаздел3_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел3_2;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;

					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 2;

			РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);
			мРаздел1_2.Области.УтвАссигнований.Значение = "Утверждено ассигнований на " + Формат(мДатаНачалаПериодаОтчета, "ДФ=гггг") + " год";
			мРаздел2_2.Области.УтвАссигнований.Значение = "Утверждено ассигнований на " + Формат(мДатаНачалаПериодаОтчета, "ДФ=гггг") + " год";
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	// ИНИЦИАЛИЗАЦИЯ ЗАПОЛНЕНИЯ СОДЕРЖАТЕЛЬНОЙ ЧАСТИ ПО УЧЕТНЫМ ДАННЫМ
	
	СвойстваЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьСвойстваЗаполненияОтчета(ЭтотОбъект, мВыбраннаяФорма);
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда 	
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета);
	КонецЕсли;      	
	Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ") Тогда
		//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
		ИзМакета = Истина;
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);		
	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	
	ПоказатьПериод();

	// В случае, если по F9 поменяли организацию при копировании, тогда в переменную
	// мВПрограммеИзмененаОрганизация будет записано значение Истина;
	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда

		ЗаполнитьДатуВЯчейках();
		ЗаполнитьСведенияОбОрганизации();

	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

КонецПроцедуры

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();

	ФормироватьСтруктуруСвойствСтраниц();

	Если НЕ БезОткрытияФормы Тогда
		Если ИДКонфигурации = "ЗУП" ИЛИ ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" ИЛИ ИДКонфигурации = "ЗБУ" Тогда
			ЭлементыФормы.ФлажокВнешДанные.Видимость = Ложь;
			ФлажокВнешДанные = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	КонецЕсли;

	НачальнаяПодготовкаФормы();
	
	РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма);

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура КнопкаПерейтиНаСтраницуРаздел2_1Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел2_1");
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел2_1Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел2_1");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2_1");
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел2_1Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2_1");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2_1");
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел2_1Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел2_1");
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел2_1Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел2_1");
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел2_2Нажатие(Элемент)
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел2_2");
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел2_2Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел2_2");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2_2");
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел2_2Нажатие(Элемент)
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2_2");
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2_2");
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел2_2Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел2_2");
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел2_2Нажатие(Элемент)
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел2_2");
КонецПроцедуры

// ПолеТабличногоДокументаРаздел1_1Выбор
//
Процедура ПолеТабличногоДокументаРаздел1_1Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел1_1Выбор

// ПолеТабличногоДокументаРаздел1_2Выбор
//
Процедура ПолеТабличногоДокументаРаздел1_2Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2Выбор

// ПолеТабличногоДокументаРаздел2_1Выбор
//
Процедура ПолеТабличногоДокументаРаздел2_1Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	ОбластьИмя = Область.Имя;
	Если Найти(ОбластьИмя, "Шифр") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		Табл = Новый ТаблицаЗначений;
		Табл.Колонки.Добавить("Код",,,5);
		Табл.Колонки.Добавить("Название",,,55);

		НовСтр = Табл.Добавить();
		НовСтр.Код = "";
		НовСтр.Название = "Пустое значение";

		НовСтр = Табл.Добавить();
		НовСтр.Код = "011";
		НовСтр.Название = "Единый налог, взимаемый в связи с применением упрощенной системы налогообложения";

		НовСтр = Табл.Добавить();
		НовСтр.Код = "021";
		НовСтр.Название = "Единый налог на вмененный доход для отдельных видов деятельности";

		НовСтр = Табл.Добавить();
		НовСтр.Код = "032";
		НовСтр.Название = "Единый сельскохозяйственный налог";
		Шифр = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Раздел2_1", "Шифр"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Раздел2_1"                   // Название раздела.
										   , "Шифр"                 // Имя ячейки для записи.
										   , Шифр // Первоначальное значение.
										   , 3              // РазмерностьЦ - возможная длинна ИННа.
										   , 0                          // РазмерностьД - требуемый тип ввода ИНН.
										   , Ложь                       // Это сумма?
										   , "Введите шифр"                 // Текст ввода.
										   , "Выбор шифра"                         // Текст выбора из таблицы значений.
										   , Табл               // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   , 3    // Кол-во квадратиков, если в квадратах
										   );


	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1Выбор

// ПолеТабличногоДокументаРаздел2_2Выбор
//
Процедура ПолеТабличногоДокументаРаздел2_2Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел2_2Выбор

// ПолеТабличногоДокументаРаздел2_3Выбор
//
Процедура ПолеТабличногоДокументаРаздел2_3Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел2_3Выбор

// ПолеТабличногоДокументаРаздел2_4Выбор
//
Процедура ПолеТабличногоДокументаРаздел2_4Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел2_4Выбор

// ПолеТабличногоДокументаРаздел3_1Выбор
//
Процедура ПолеТабличногоДокументаРаздел3_1Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел3_1Выбор

// ПолеТабличногоДокументаРаздел3_2Выбор
//
Процедура ПолеТабличногоДокументаРаздел3_2Выбор(Элемент, Область, СтандартнаяОбработка)
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПолеТабличногоДокументаРаздел3_2Выбор

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	
	Если СвойстваЗаполненияОтчета = Неопределено Тогда 
		ЗаполнитьАвтоВнутренний();
	Иначе
		ЗаполнитьАвтоВнешний();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

// Процедура расшифровки отчета показателей отчета 
Процедура КоманднаяПанельФормыРасшифровать(Кнопка)
	
	Если СвойстваЗаполненияОтчета = Неопределено Тогда 
		РасшифроватьВнутренний();
	Иначе
		РасшифроватьВнешний();
	КонецЕсли;

КонецПроцедуры

Процедура РасшифроватьВнутренний()
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	НомерАктивнойСтраницы = -1;
	
	СтраницыРаздела = Неопределено;
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Раздел1_1" тогда
		ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_1.ТекущаяОбласть;
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Раздел1_2" тогда
		ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_2.ТекущаяОбласть;
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Раздел2_1" тогда
		ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_1.ТекущаяОбласть;
		Если мСтруктураМногостраничныхРазделов.Свойство("Раздел2_1", СтраницыРаздела) тогда
			СтрокаАктивнойСтраницы = СтраницыРаздела.Найти(истина, "АктивнаяСтраница");
			Если СтрокаАктивнойСтраницы <> Неопределено тогда
				НомерАктивнойСтраницы = СтраницыРаздела.Индекс(СтрокаАктивнойСтраницы);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Раздел2_2" тогда
		ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_2.ТекущаяОбласть;
		Если мСтруктураМногостраничныхРазделов.Свойство("Раздел2_2", СтраницыРаздела) тогда
			СтрокаАктивнойСтраницы = СтраницыРаздела.Найти(истина, "АктивнаяСтраница");
			Если СтрокаАктивнойСтраницы <> Неопределено тогда
				НомерАктивнойСтраницы = СтраницыРаздела.Индекс(СтрокаАктивнойСтраницы);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Раздел2_3" тогда
		ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_3.ТекущаяОбласть;
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Раздел2_4" тогда
		ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_4.ТекущаяОбласть;
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Раздел3_1" тогда
		ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаРаздел3_1.ТекущаяОбласть;
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Раздел3_2" тогда
		ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаРаздел3_2.ТекущаяОбласть;
	КонецЕсли;
	Если ТекущаяОбласть <> Неопределено тогда
		ИмяЯчейки = ТекущаяОбласть.Имя;
	Иначе
		Предупреждение("Не выбрана ячейка для расшифровки!");
		Возврат;
	КонецЕсли;
	
	
	// Проверим какой режим налогового учета установлен
	Если ИДКонфигурации = "БП" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
		
		ТЗ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетнаяПолитикаНалоговыйУчет.Организация
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|ГДЕ
		|	УчетнаяПолитикаНалоговыйУчет.Организация = &Организация
		|	И ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчет.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная) ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ 
		|	И УчетнаяПолитикаНалоговыйУчет.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&НачалоПериода, ) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
		|ГДЕ
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация = &Организация
		|	И ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчетСрезПоследних.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная) ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ";
		
		Запрос = Новый Запрос(ТЗ);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		Запрос.УстановитьПараметр("КонецПериода", мДатаКонцаПериодаОтчета);
		РежимУСН = НЕ Запрос.Выполнить().Пустой();
		
		ТЗ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетнаяПолитикаНалоговыйУчет.Организация
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|ГДЕ
		|	УчетнаяПолитикаНалоговыйУчет.Организация = &Организация
		|	И УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомЕНВД
		|	И УчетнаяПолитикаНалоговыйУчет.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&НачалоПериода, ) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
		|ГДЕ
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация = &Организация
		|	И УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияЯвляетсяПлательщикомЕНВД";
		
		Запрос = Новый Запрос(ТЗ);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		Запрос.УстановитьПараметр("КонецПериода", мДатаКонцаПериодаОтчета);
		РежимЕНВД = НЕ Запрос.Выполнить().Пустой();
		
		
	ИначеЕСЛИ ИДКонфигурации = "ЗУП" тогда
		
		// Проверим какой режим налогового учета установлен
		
		ТЗ = "ВЫБРАТЬ
		|	УчетнаяПолитикаНалоговыйУчет.Организация
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|ГДЕ
		|	УчетнаяПолитикаНалоговыйУчет.Организация = &Организация
		|	И УчетнаяПолитикаНалоговыйУчет.УСН
		|	И УчетнаяПолитикаНалоговыйУчет.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&НачалоПериода, ) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
		|ГДЕ
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация = &Организация
		|	И УчетнаяПолитикаНалоговыйУчетСрезПоследних.УСН";
		
		Запрос = Новый Запрос(ТЗ);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		Запрос.УстановитьПараметр("КонецПериода", мДатаКонцаПериодаОтчета);
		РежимУСН = НЕ Запрос.Выполнить().Пустой();
		
		ТЗ = "ВЫБРАТЬ
		|	ЕСНОсновныеНачисления.ОбособленноеПодразделение
		|ИЗ
		|	РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
		|ГДЕ
		|	ЕСНОсновныеНачисления.ОбособленноеПодразделение = &Организация
		|	И ЕСНОсновныеНачисления.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ЕСНОсновныеНачисления.ОблагаетсяЕНВД
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЕСНДополнительныеНачисления.ОбособленноеПодразделение
		|ИЗ
		|	РегистрРасчета.ЕСНДополнительныеНачисления КАК ЕСНДополнительныеНачисления
		|ГДЕ
		|	ЕСНДополнительныеНачисления.ОбособленноеПодразделение = &Организация
		|	И ЕСНДополнительныеНачисления.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ЕСНДополнительныеНачисления.ОблагаетсяЕНВД";
		
		Запрос = Новый Запрос(ТЗ);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		Запрос.УстановитьПараметр("КонецПериода", мДатаКонцаПериодаОтчета);
		РежимЕНВД = НЕ Запрос.Выполнить().Пустой();
	ИначеЕСЛИ ИДКонфигурации = "ЗБУ" тогда
		
		// Проверим какой режим налогового учета установлен
		
		РежимУСН = ложь;
		
		ТЗ = "ВЫБРАТЬ
		|	ЕСНОсновныеНачисления.ОбособленноеПодразделение
		|ИЗ
		|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНОсновныеНачисления
		|ГДЕ
		|	ЕСНОсновныеНачисления.ОбособленноеПодразделение = &Организация
		|	И ЕСНОсновныеНачисления.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ЕСНОсновныеНачисления.ОблагаетсяЕНВД";
		
		Запрос = Новый Запрос(ТЗ);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		Запрос.УстановитьПараметр("КонецПериода", мДатаКонцаПериодаОтчета);
		РежимЕНВД = НЕ Запрос.Выполнить().Пустой();
	Иначе
		// Проверим какой режим налогового учета установлен
		РежимУСН = Ложь;
		
		ТЗ = "ВЫБРАТЬ
		|	ЕСНОсновныеНачисления.ОбособленноеПодразделение
		|ИЗ
		|	РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
		|ГДЕ
		|	ЕСНОсновныеНачисления.ОбособленноеПодразделение = &Организация
		|	И ЕСНОсновныеНачисления.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ЕСНОсновныеНачисления.ОблагаетсяЕНВД
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЕСНДополнительныеНачисления.ОбособленноеПодразделение
		|ИЗ
		|	РегистрРасчета.ЕСНДополнительныеНачисления КАК ЕСНДополнительныеНачисления
		|ГДЕ
		|	ЕСНДополнительныеНачисления.ОбособленноеПодразделение = &Организация
		|	И ЕСНДополнительныеНачисления.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ЕСНДополнительныеНачисления.ОблагаетсяЕНВД";
		
		Запрос = Новый Запрос(ТЗ);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		Запрос.УстановитьПараметр("КонецПериода", мДатаКонцаПериодаОтчета);
		РежимЕНВД = НЕ Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	// расшифровка таблицы 1
	Если Найти(ИмяЯчейки, "П0") = 0 тогда
		Предупреждение("Расшифровка данной ячейки не поддерживается.");
		Возврат;
	КонецЕсли;
	
	НомерТаблицы        = Число(Сред(ИмяЯчейки,2,5));
	НомерСтроки         = Число(Сред(ИмяЯчейки,7,4));
	НомерКолонки        = Число(Сред(ИмяЯчейки,12,2));
	НомерСтрокиВКолонке = Число(Сред(ИмяЯчейки,11,1));

	
	Если ИмяЯчейки = "П000010001003" И ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" тогда // Расшифровка средней числености
		ОтчетОбъект = Отчеты.СредняяЧисленностьРаботниковОрганизаций.Создать();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно);
		//ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода", КонецДня(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "МесяцОтчета");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Дата");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "СредняяЧисленностьНеЕНВД");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000010002003" И ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" ИЛИ ИДКонфигурации <> "БАУКОРП" ИЛИ ИДКонфигурации <> "БАУ" Тогда
		ОтчетОбъект = Отчеты.СредняяЧисленностьРаботниковОрганизаций.Создать();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно);
		//ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода", КонецДня(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "МесяцОтчета");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Дата");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "СредняяЧисленностьЖенщинНеЕНВД");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000010003003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "База ФСС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода",        НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",         КонецКвартала(мДатаКонцаПериодаОтчета));
		ФормаОтчета.ОбновитьОтчет();
	ИначеЕсли ИмяЯчейки = "П000010004003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "Льгота ФСС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода",        НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",         КонецКвартала(мДатаКонцаПериодаОтчета));
		ФормаОтчета.ОбновитьОтчет();
		
	// расшифровка таблицы 2
	ИначеЕсли ИмяЯчейки = "П000020003201" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "Налог ФСС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  НачалоКвартала(мДатаКонцаПериодаОтчета)-1);
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000020003301"тогда
		ДатаМесяца  = ДобавитьМесяц(мДатаКонцаПериодаОтчета,-2);
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,   ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "Налог ФСС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода",         НачалоКвартала(ДатаМесяца));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",          КонецКвартала(ДатаМесяца));
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000020003501" тогда
		ДатаМесяца  = ДобавитьМесяц(мДатаКонцаПериодаОтчета,-1);
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,   ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "Налог ФСС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода",         НачалоМесяца(ДатаМесяца));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",          КонецМесяца(ДатаМесяца));
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000020003601" тогда
		ДатаМесяца  = мДатаКонцаПериодаОтчета;
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,   ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "Налог ФСС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода",         НачалоМесяца(ДатаМесяца));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",          КонецМесяца(ДатаМесяца));
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000020003401" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,   ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "Налог ФСС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода",         НачалоКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",          КонецМесяца(НачалоКвартала(мДатаКонцаПериодаОтчета)));
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000020003003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "Налог ФСС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
		//ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ДобровольныеВзносыВФСС", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000020015201" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		СписокЗначение = Новый СписокЗначений;
		СписокЗначение.Добавить("Всего сумма пособия (раздел 1)");
		СписокЗначение.Добавить("Всего сумма пособия");
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", СписокЗначение, ВидСравненияКомпоновкиДанных.ВСписке);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ДобровольныеВзносыВФСС", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  НачалоКвартала(мДатаКонцаПериодаОтчета)-1);
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000020015301" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		СписокЗначение = Новый СписокЗначений;
		СписокЗначение.Добавить("Всего сумма пособия (раздел 1)");
		СписокЗначение.Добавить("Всего сумма пособия");
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", СписокЗначение, ВидСравненияКомпоновкиДанных.ВСписке);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ДобровольныеВзносыВФСС", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000020015401" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		СписокЗначение = Новый СписокЗначений;
		СписокЗначение.Добавить("Всего сумма пособия (раздел 1)");
		СписокЗначение.Добавить("Всего сумма пособия");
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", СписокЗначение, ВидСравненияКомпоновкиДанных.ВСписке);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ДобровольныеВзносыВФСС", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецМесяца(НачалоКвартала(мДатаКонцаПериодаОтчета)));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000020015501" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		СписокЗначение = Новый СписокЗначений;
		СписокЗначение.Добавить("Всего сумма пособия (раздел 1)");
		СписокЗначение.Добавить("Всего сумма пособия");
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", СписокЗначение, ВидСравненияКомпоновкиДанных.ВСписке);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ДобровольныеВзносыВФСС", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", КонецМесяца(НачалоКвартала(мДатаКонцаПериодаОтчета))+1);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  НачалоМесяца(мДатаКонцаПериодаОтчета)-1);
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000020015601" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		СписокЗначение = Новый СписокЗначений;
		СписокЗначение.Добавить("Всего сумма пособия (раздел 1)");
		СписокЗначение.Добавить("Всего сумма пособия");
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", СписокЗначение, ВидСравненияКомпоновкиДанных.ВСписке);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ДобровольныеВзносыВФСС", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоМесяца(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецМесяца(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000020015003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		СписокЗначение = Новый СписокЗначений;
		СписокЗначение.Добавить("Всего сумма пособия (раздел 1)");
		СписокЗначение.Добавить("Всего сумма пособия");
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", СписокЗначение, ВидСравненияКомпоновкиДанных.ВСписке);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ДобровольныеВзносыВФСС", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	//расшифровка таблицы 3
		
	// Пособия по социальному страхованию раздел 1 таблица 3,6
	// Расшифровка колонки: Количество страховых случаев 1
	
	ИначеЕсли ИмяЯчейки = "П000030001001" или ИмяЯчейки = "П000060001001" тогда
	
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ДобровольныеВзносыВФСС", ложь, ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего страховых случаев", ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего страховых случаев (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Страховых случаев");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030002001" или ИмяЯчейки = "П000060002001" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.Совместительство, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего страховых случаев", ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ДобровольныеВзносыВФСС", ложь, ВидСравненияКомпоновкиДанных.Равно);
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего страховых случаев (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Страховых случаев");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030003001" или ИмяЯчейки = "П000060003001" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды, ВидСравненияКомпоновкиДанных.Равно);
		//ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.Совместительство, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего страховых случаев", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего страховых случаев (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Страховых случаев");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030004001" или ИмяЯчейки = "П000060004001" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.Совместительство, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего страховых случаев", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего страховых случаев (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Страховых случаев");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030005001" или ИмяЯчейки = "П000060005001" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
//		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.Совместительство, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество получателей", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество получателей (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		//ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Количество получателей");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030006001" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество получателей", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество получателей (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		//ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Количество получателей");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030007001" или ИмяЯчейки = "П000060006001" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УходЗаПервымРебенком", истина, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество получателей", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество получателей (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		//ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Количество получателей");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030008001" или ИмяЯчейки = "П000060007001" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УходЗаПервымРебенком", ложь, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество получателей", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество получателей (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		//ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Количество получателей");
		ФормаОтчета.ОбновитьОтчет();
		
	// Расшифровка колонки: "Количество дней, выплат пособий, путевок" (3)
	//	
	ИначеЕсли ИмяЯчейки = "П000030001003" или ИмяЯчейки = "П000060001003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия", ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ДобровольныеВзносыВФСС", ложь, ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030002003" или ИмяЯчейки = "П000060002003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.Совместительство, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия", ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ДобровольныеВзносыВФСС", ложь, ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030003003" или ИмяЯчейки = "П000060003003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды, ВидСравненияКомпоновкиДанных.Равно);
		//ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.Совместительство, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия", ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030004003" или ИмяЯчейки = "П000060004003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.Совместительство, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030005003" или ИмяЯчейки = "П000060005003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030006003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		//ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УходЗаПервымРебенком", истина, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030007003" или ИмяЯчейки = "П000060006003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УходЗаПервымРебенком", истина, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий", ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030008003" или ИмяЯчейки = "П000060007003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УходЗаПервымРебенком", ложь, ВидСравненияКомпоновкиДанных.Равно);
		
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий", ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000060009003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000060010003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000060011003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000060012003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПриУсыновленииРебенка, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
	ИначеЕсли ИмяЯчейки = "П000030012003" или  ИмяЯчейки = "П000060008003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПриРожденииРебенка, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030013003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030014003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030015003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030016003"тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПриУсыновленииРебенка, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий", ВидСравненияКомпоновкиДанных.Равно);
			 
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Количество выплат пособий (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
	
	ИначеЕсли ИмяЯчейки = "П000030001004" или ИмяЯчейки = "П000060001004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();                   
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ДобровольныеВзносыВФСС", ложь, ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030002004" или  ИмяЯчейки = "П000060002004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.Совместительство, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ДобровольныеВзносыВФСС", ложь, ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030003004" или ИмяЯчейки = "П000060003004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
				ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030004004" или ИмяЯчейки = "П000060004004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.Совместительство, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			Иначе
				Если РежимУСН тогда
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030005004" или ИмяЯчейки = "П000060005004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030006004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		//ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УходЗаПервымРебенком", истина, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030007004" или ИмяЯчейки = "П000060006004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",          Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",        Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УходЗаПервымРебенком", истина, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
				Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030008004" или ИмяЯчейки = "П000060007004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",          Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УходЗаПервымРебенком", ложь, ВидСравненияКомпоновкиДанных.Равно);
		
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек,      "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000060009004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",          Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",        Перечисления.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
			
	ИначеЕсли ИмяЯчейки = "П000060010004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",          Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",        Перечисления.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
			
	ИначеЕсли ИмяЯчейки = "П000060011004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",          Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",        Перечисления.ВидыПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			 
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000060012004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",          Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",        Перечисления.ВидыПособийСоциальногоСтрахования.ПриУсыновленииРебенка, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			 
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030012004" или ИмяЯчейки = "П000060008004" тогда 
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",          Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",        Перечисления.ВидыПособийСоциальногоСтрахования.ПриРожденииРебенка, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			 
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
			
	ИначеЕсли ИмяЯчейки = "П000030013004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",          Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",        Перечисления.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			 
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
			
	ИначеЕсли ИмяЯчейки = "П000030014004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",          Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",        Перечисления.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			 
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
			
	ИначеЕсли ИмяЯчейки = "П000030015004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",          Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",        Перечисления.ВидыПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			 
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030016004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",   Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПриУсыновленииРебенка, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			 
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	//Расшифровка колонки: "в т.ч. выплаты сверх установленных норм лицам, пострадавшим от радиационных воздействий в случаях, установленных законодательством"	
	//
	ИначеЕсли ИмяЯчейки = "П000030001005" или ИмяЯчейки = "П000060001005" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",   Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы", ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ДобровольныеВзносыВФСС", ложь, ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				 
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030002005" или ИмяЯчейки = "П000060002005" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",   Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидЗанятости",  Перечисления.ВидыЗанятостиВОрганизации.Совместительство, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы", ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ДобровольныеВзносыВФСС", ложь, ВидСравненияКомпоновкиДанных.Равно);
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
		
	ИначеЕсли ИмяЯчейки = "П000030003005" или ИмяЯчейки = "П000060003005" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",            Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",          Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы", ВидСравненияКомпоновкиДанных.Равно);
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030004005" или ИмяЯчейки = "П000060004005" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",            Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",          Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.Совместительство, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030005005" или ИмяЯчейки = "П000060005005" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",            Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",          Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы", ВидСравненияКомпоновкиДанных.Равно);
			 
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030006005" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",          Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",        Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		//ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УходЗаПервымРебенком", истина, ВидСравненияКомпоновкиДанных.Равно);
		
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы", ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030007005" или ИмяЯчейки = "П000060006005" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",          Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",        Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УходЗаПервымРебенком", истина, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы", ВидСравненияКомпоновкиДанных.Равно);
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000060009005" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",          Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",        Перечисления.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы", ВидСравненияКомпоновкиДанных.Равно);
		Если РежимЕНВД И РежимУСН тогда
			Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			Иначе
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		ИначеЕсли РежимУСН тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
		ИначеЕсли РежимЕНВД тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030008005" или ИмяЯчейки = "П000060007005" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",          Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",        Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УходЗаПервымРебенком", ложь, ВидСравненияКомпоновкиДанных.Равно);
		
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы", ВидСравненияКомпоновкиДанных.Равно);
			
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000060009003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",          Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",        Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УходЗаПервымРебенком", ложь, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы", ВидСравненияКомпоновкиДанных.Равно);
		 
		Если РежимЕНВД И РежимУСН тогда
			Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			Иначе
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		ИначеЕсли РежимУСН тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
		ИначеЕсли РежимЕНВД тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030013005" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",          Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя",        Перечисления.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы", ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "в т.ч. сумма сверх нормы (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ДокументОснование");
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	//Расшифровка числености средней заработной палаты работников
	//
  
	ИначеЕсли ИмяЯчейки = "П000030000103" или  ИмяЯчейки = "П000060000103" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",             Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ГруппаСреднегоЗаработка", "до 3750", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			Иначе
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", "Нет", ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН",            ложь, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ЧисленостьРаботников", "Численость работников");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "РазмерСреднегоЗаработка", );
		
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030000203" или  ИмяЯчейки = "П000060000203" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",             Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ГруппаСреднегоЗаработка", "3751 - 7500", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			Иначе
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", "Нет", ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН",            ложь, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ЧисленостьРаботников", "Численость работников");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "РазмерСреднегоЗаработка", );
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030000303" или  ИмяЯчейки = "П000060000303" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",             Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ГруппаСреднегоЗаработка", "7501 - 11250", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			Иначе
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", "Нет", ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН",            ложь, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ЧисленостьРаботников", "Численость работников");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "РазмерСреднегоЗаработка", );
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030000403" или ИмяЯчейки = "П000060000403" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",             Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ГруппаСреднегоЗаработка", "11251 - 15000", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			Иначе
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", "Нет", ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН",            ложь, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ЧисленостьРаботников", "Численость работников");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "РазмерСреднегоЗаработка", );
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000030000503" или ИмяЯчейки = "П000060000503" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",             Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ГруппаСреднегоЗаработка", "свыше 15000", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет, ВидСравненияКомпоновкиДанных.Равно);
		Если Найти(ИмяЯчейки, "П00003") = 0 тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия", ВидСравненияКомпоновкиДанных.Равно);
			Если РежимЕНВД И РежимУСН тогда
				Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
				Иначе
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
			ИначеЕсли РежимУСН тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ИначеЕсли РежимЕНВД тогда
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			Иначе
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", "Нет", ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (раздел 1)", ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН",            ложь, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек,   "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ЧисленостьРаботников", "Численость работников");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "РазмерСреднегоЗаработка", );
		ФормаОтчета.ОбновитьОтчет();
		
	// расшифровка таблицы 4

	ИначеЕсли ИмяЯчейки = "П000040002003" И ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
		ОтчетОбъект = Отчеты.СредняяЧисленностьРаботниковОрганизаций.Создать();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.НачалоПериода = НачалоГода(мДатаКонцаПериодаОтчета);
		ФормаОтчета.КонецПериода = КонецДня(мДатаКонцаПериодаОтчета);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецДня(мДатаКонцаПериодаОтчета));
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "МесяцОтчета");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Дата");
		Если РежимЕНВД И РежимУСН тогда
			Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "СредняяЧисленностьЖенщинЕНВД");
			Иначе
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "СредняяЧисленностьЖенщинНеЕНВД");
			КонецЕсли;
		ИначеЕсли РежимУСН тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "СредняяЧисленностьЖенщинНеЕНВД");
		ИначеЕсли РежимЕНВД тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "СредняяЧисленностьЖенщинЕНВД");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000040001003" И ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
		ОтчетОбъект = Отчеты.СредняяЧисленностьРаботниковОрганизаций.Создать();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.НачалоПериода = НачалоГода(мДатаКонцаПериодаОтчета);
		ФормаОтчета.КонецПериода = КонецДня(мДатаКонцаПериодаОтчета);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецДня(мДатаКонцаПериодаОтчета));
		ФормаОтчета.НачалоПериода = НачалоГода(мДатаКонцаПериодаОтчета);
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "МесяцОтчета");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Дата");
		Если РежимЕНВД И РежимУСН тогда
			Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "СредняяЧисленностьЕНВД");
			Иначе
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "СредняяЧисленностьНеЕНВД");
			КонецЕсли;
		ИначеЕсли РежимУСН тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "СредняяЧисленностьНеЕНВД");
		ИначеЕсли РежимЕНВД тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "СредняяЧисленностьЕНВД");
		КонецЕсли;
		ФормаОтчета.ОбновитьОтчет();

		
	// расшифровка таблицы 9
	
	ИначеЕсли ИмяЯчейки = "П000090001001" и ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
		ОтчетОбъект = Отчеты.СредняяЧисленностьРаботниковОрганизаций.Создать();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецДня(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "МесяцОтчета");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Дата");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "СредняяЧисленность");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000090001002" и ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
		ОтчетОбъект = Отчеты.СредняяЧисленностьРаботниковОрганизаций.Создать();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецДня(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "МесяцОтчета");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Дата");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "СредняяЧисленностьИнвалидов");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000090001004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "База ФСС НС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "КодДоходаФСС_НС", Перечисления.ДоходыФСС_НС.Облагается, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000090001104" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "База ФСС НС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "КодДоходаФСС_НС", Перечисления.ДоходыФСС_НС.Облагается, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета,-2)));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета,-2)));
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000090001204" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "База ФСС НС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "КодДоходаФСС_НС", Перечисления.ДоходыФСС_НС.Облагается, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета,-1)));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета,-1)));
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000090001304" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "База ФСС НС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "КодДоходаФСС_НС", Перечисления.ДоходыФСС_НС.Облагается, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоМесяца(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецМесяца(мДатаКонцаПериодаОтчета));
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000090001005" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "База ФСС НС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "КодДоходаФСС_НС", Перечисления.ДоходыФСС_НС.Облагается, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Инвалидность", истина, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000090001105" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "База ФСС НС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Инвалидность", истина, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета,-2)));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета,-2)));
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000090001205" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "База ФСС НС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Инвалидность", истина, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета,-1)));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета,-1)));
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000090001305" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "База ФСС НС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Инвалидность", истина, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоМесяца(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецМесяца(мДатаКонцаПериодаОтчета));
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000090001006" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "База ФСС НС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "КодДоходаФСС_НС", Перечисления.ДоходыФСС_НС.Облагается, ВидСравненияКомпоновкиДанных.НеРавно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ФормаОтчета.ОбновитьОтчет();
		
	// расшифровка таблицы 10
	
	ИначеЕсли ИмяЯчейки = "П000100002101" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,   ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "Налог ФСС НС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода",         НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",          НачалоКвартала(мДатаКонцаПериодаОтчета)-1);
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000100002401" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,   ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "Налог ФСС НС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецМесяца(НачалоКвартала(мДатаКонцаПериодаОтчета)));
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000100002501" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,   ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "Налог ФСС НС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", КонецМесяца(НачалоКвартала(мДатаКонцаПериодаОтчета)+1));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  НачалоМесяца(мДатаКонцаПериодаОтчета)-1);
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000100002601" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,   ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "Налог ФСС НС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоМесяца(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000100002003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,   ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", "Налог ФСС НС", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ФормаОтчета.ОбновитьОтчет();
		
	// расшифровка таблицы 11
		
	ИначеЕсли ИмяЯчейки = "П000110001003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия (ФСС НС)", ВидСравненияКомпоновкиДанных.Равно);

		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		ФормаОтчета.ОбновитьОтчет();
	
	ИначеЕсли ИмяЯчейки = "П000110002003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.Совместительство, ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия (ФСС НС)", ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000110004003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия (ФСС НС)", ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000110005003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",             Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.Совместительство, ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия (ФСС НС)", ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		ФормаОтчета.ОбновитьОтчет();

	ИначеЕсли ИмяЯчейки = "П000110007003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",  Организация,  ВидСравненияКомпоновкиДанных.Равно);
		//ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.Совместительство, ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Оплачено дней пособия (ФСС НС)", ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Кол-во дней");
		ФормаОтчета.ОбновитьОтчет();

	ИначеЕсли ИмяЯчейки = "П000110001004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",             Организация,  ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (ФСС НС)", ВидСравненияКомпоновкиДанных.Равно);

		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
	
	ИначеЕсли ИмяЯчейки = "П000110002004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",             Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.Совместительство, ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (ФСС НС)", ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000110004004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",             Организация,  ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (ФСС НС)", ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000110005004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",  Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.Совместительство, ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (ФСС НС)", ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();

	ИначеЕсли ИмяЯчейки = "П000110007004" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация",  Организация,  ВидСравненияКомпоновкиДанных.Равно);
	//	ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.Совместительство, ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев, ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (ФСС НС)", ВидСравненияКомпоновкиДанных.Равно);
		
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "ПериодРегистрации");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "ФизЛицо");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, "Результат", "Сумма");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000100010101" тогда 
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (ФСС НС)", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  НачалоКвартала(мДатаКонцаПериодаОтчета)-1);
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000100010401" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (ФСС НС)", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоКвартала(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецМесяца(НачалоКвартала(мДатаКонцаПериодаОтчета)));
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000100010501" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (ФСС НС)", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", КонецМесяца(НачалоКвартала(мДатаКонцаПериодаОтчета)+1));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  НачалоМесяца(мДатаКонцаПериодаОтчета)-1);
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
	ИначеЕсли ИмяЯчейки = "П000100010601" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,   ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (ФСС НС)", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоМесяца(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
	ИначеЕсли ИмяЯчейки = "П000100010003" тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,   ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", "Всего сумма пособия (ФСС НС)", ВидСравненияКомпоновкиДанных.Равно);
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	ИначеЕсли ИмяЯчейки = "П000050006003"тогда
		ОтчетОбъект = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
		ФормаОтчета = ОтчетОбъект.ПолучитьФорму("ФормаОтчета");
		ФормаОтчета.ЭтоОтработкаРасшифровки = истина;
		ФормаОтчета.Открыть();
		ПараметрВывода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
		ЗаголовокОтчета = ПараметрВывода.Значение;
 		ЗаголовокОтчета = ЗаголовокОтчета + " таблица " + НомерТаблицы + " строка " + НомерСтроки + " колонка " + НомерКолонки 
		                        + ?(НомерСтрокиВКолонке <> 0, " (строка в колонке " + НомерСтрокиВКолонке + ")", "");
		ПараметрВывода.Значение = ЗаголовокОтчета;
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", Организация,  ВидСравненияКомпоновкиДанных.Равно);
		ВидыПособийЗаСчетСобственныхСредств = Новый СписокЗначений;
		ВидыПособийЗаСчетСобственныхСредств.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.ПустаяСсылка());
		ВидыПособийЗаСчетСобственныхСредств.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай);
		ВидыПособийЗаСчетСобственныхСредств.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание);
		ВидыПособийЗаСчетСобственныхСредств.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев);
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ВидПоказателя", ВидыПособийЗаСчетСобственныхСредств,  ВидСравненияКомпоновкиДанных.НеВСписке);
		СписокЗначение = Новый СписокЗначений;
		СписокЗначение.Добавить("Всего сумма пособия (раздел 1)");
		СписокЗначение.Добавить("Всего сумма пособия");
		ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Группа", СписокЗначение, ВидСравненияКомпоновкиДанных.ВСписке);
		Если РежимЕНВД И РежимУСН тогда
			Если НомерАктивнойСтраницы = 1 тогда // если расшифровывают вторую страницу , то это страница ЕНВД.
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			Иначе
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
				ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		ИначеЕсли РежимУСН тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", ложь, ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", истина, ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "БЛ", ЛОЖЬ, ВидСравненияКомпоновкиДанных.Равно);
		ИначеЕсли РежимЕНВД тогда
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ОблагаетсяЕНВД", истина, ВидСравненияКомпоновкиДанных.Равно);
			//ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "ДобровольныеВзносыВФСС", ложь, ВидСравненияКомпоновкиДанных.Равно);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "БЛ", ЛОЖЬ, ВидСравненияКомпоновкиДанных.Равно);
		Иначе
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "УСН", "Нет", ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "НачалоПериода", НачалоГода(мДатаКонцаПериодаОтчета));
		ТиповыеОтчеты.УстановитьПараметр(ОтчетОбъект.КомпоновщикНастроек, "КонецПериода",  КонецКвартала(мДатаКонцаПериодаОтчета));
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Пояснение");
		ТиповыеОтчеты.ДобавитьГруппировку(ОтчетОбъект.КомпоновщикНастроек, "Физлицо");
		ФормаОтчета.ОбновитьОтчет();
		
	Иначе
		Предупреждение("Расшифровка данной ячейки не поддерживается.");
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьВнешний()

	Если СвойстваЗаполненияОтчета <> Неопределено Тогда
		СвойстваЗаполненияОтчета.ИсточникЗаполнения.ВывестиОтчетРасшифровку("РегламентированныйОтчет4ФСС_2007_2009", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры


Процедура КоманднаяПанельФормыВывестиРеестрПособий(Кнопка)
	
	Если СвойстваЗаполненияОтчета = Неопределено Тогда 
		ВывестиРеестрПособийВнутренний();
	Иначе
		ВывестиРеестрПособийВнешний();
	КонецЕсли;
	
 КонецПроцедуры

Процедура ВывестиРеестрПособийВнутренний()
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	Отчет = Отчеты.РасшифровкаОтчетов4ФСС.Создать();
	
	ПараметрВыводаИтогов = Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("VerticalOverallPlacement"));
	ПараметрВыводаИтогов.Использование = Истина;
	
	Отчет.КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	ЭлементСтруктуры = Отчет.КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	ТиповыеОтчеты.ДобавитьГруппировку(Отчет.КомпоновщикНастроек, "ВидПоказателя");
	ГруппировкаСКД = ТиповыеОтчеты.ДобавитьГруппировку(Отчет.КомпоновщикНастроек, "ФизЛицо");
	Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" тогда
		СтрокаГруппировки = ГруппировкаСКД.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		СтрокаГруппировки.Поле = Новый ПолеКомпоновкиДанных("ДокументОснование");
	КонецЕсли;
	
	ГруппировкаКолонокОбщая = ТиповыеОтчеты.ДобавитьГруппировку(Отчет.КомпоновщикНастроек, "ОбщаяГруппа", ложь);
	ГруппировкаКолонокРежимы = ТиповыеОтчеты.ДобавитьГруппировку(Отчет.КомпоновщикНастроек, "Режим", ложь);
	ГруппировкаКолонокОбщая.Выбор.Элементы.Очистить();
	СтрокаВыбора = ГруппировкаКолонокОбщая.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	СтрокаВыбора.Поле = Новый ПолеКомпоновкиДанных("ОбщаяГруппа");
	СтрокаВыбора = ГруппировкаКолонокОбщая.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	СтрокаВыбора.Поле = Новый ПолеКомпоновкиДанных("ОбщийРезультат");
	СтрокаВыбора.Заголовок = "Результат";
	ГруппировкаКолонокРежимы.Выбор.Элементы.Очистить();
	СтрокаВыбора = ГруппировкаКолонокРежимы.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	СтрокаВыбора.Поле = Новый ПолеКомпоновкиДанных("Режим");
	СтрокаВыбора = ГруппировкаКолонокРежимы.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	СтрокаВыбора.Поле = Новый ПолеКомпоновкиДанных("Результат");

	СтрокаВыбора.Использование = истина;
	ТиповыеОтчеты.ДобавитьОтбор(ГруппировкаКолонокОбщая.Отбор, "Результат", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	ТиповыеОтчеты.ДобавитьОтбор(ГруппировкаКолонокРежимы.Отбор, "Результат", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	ТиповыеОтчеты.УстановитьПараметр(Отчет.КомпоновщикНастроек, "НачалоПериода", мДатаНачалаПериодаОтчета);
	ТиповыеОтчеты.УстановитьПараметр(Отчет.КомпоновщикНастроек, "КонецПериода",  мДатаКонцаПериодаОтчета);
	ТиповыеОтчеты.ДобавитьОтбор(Отчет.КомпоновщикНастроек,      "ВидПоказателя", "Скорректирована общая сумма", ВидСравненияКомпоновкиДанных.НеРавно);
	ТиповыеОтчеты.ДобавитьОтбор(Отчет.КомпоновщикНастроек,      "ВидПоказателя", Перечисления.ВидыПособийСоциальногоСтрахования.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
	ТиповыеОтчеты.ДобавитьОтбор(Отчет.КомпоновщикНастроек,      "Организация",   Организация, ВидСравненияКомпоновкиДанных.Равно);
	СписокЗначенийГрупп = Новый СписокЗначений;
	СписокЗначенийГрупп.Добавить("Всего сумма пособия");
	СписокЗначенийГрупп.Добавить("Оплачено дней пособия");
	СписокЗначенийГрупп.Добавить("Всего страховых случаев");
	СписокЗначенийГрупп.Добавить("в т.ч. сумма сверх нормы");
	СписокЗначенийГрупп.Добавить("Количество выплат пособий");
	ТиповыеОтчеты.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "ОбщаяГруппа",   СписокЗначенийГрупп, ВидСравненияКомпоновкиДанных.ВСписке);
	ТиповыеОтчеты.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "ОбщаяГруппа",   "", ВидСравненияКомпоновкиДанных.НеРавно);
	ЗнПараметрЗаголовок               = Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
	ЗнПараметрЗаголовок.Значение      = "Реестр пособий ФСС";
	ЗнПараметрЗаголовок.Использование = Истина;
	ЗнПараметрЗаголовок               = Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput"));
	ЗнПараметрЗаголовок.Значение      = ТипВыводаТекстаКомпоновкиДанных.Выводить;
	ЗнПараметрЗаголовок.Использование = Истина;
	Форма = Отчет.ПолучитьФорму("ФормаОтчета");
	Форма.ОбновитьОтчет();
	Форма.Открыть();
КонецПроцедуры

Процедура ВывестиРеестрПособийВнешний()

	Если СвойстваЗаполненияОтчета <> Неопределено Тогда
		СвойстваЗаполненияОтчета.ИсточникЗаполнения.ВывестиВедомостьПоПособиям(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;

 КонецПроцедуры

                                             
//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИдГруппы <> Неопределено Тогда
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
		ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	КонецЕсли;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Переформируем листы ФЛ
	//ЗаполнитьСведенияОбФЛ(Истина);

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Истина;

	// Заполним дату на листах
	ЗаполнитьДатуВЯчейках();

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Ложь;

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел I (табл. 1, 2)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел I (табл. 3)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел1_2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел II (табл. 4, 5)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел2_1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел II (табл. 6)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел2_2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел III (таблицы 9, 10)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел3_1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел3_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел III (таблицы 11, 12)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел3_2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел3_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел I (табл. 1, 2)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел I (табл. 3)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел1_2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел II (табл. 4, 5)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2_1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел II (табл. 6)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2_2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел 2.1" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел3_1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел3_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел III (таблицы 11, 12)"
// панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел3_2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел3_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел I (табл. 1, 2)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел1_1ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментария на странице "Раздел I (табл.3)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел1_2ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел II (табл. 4, 5)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2_1ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел II (табл. 6)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2_2ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел III (таблицы 9, 10)" по ячейке, 
// для которой установлен/ алгоритм автозаполнения [автоматически 
// с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел3_1ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел3_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел III (таблицы 11, 12)" по ячейке, 
// для которой установлен/ алгоритм автозаполнения [автоматически 
// с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел3_2ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел3_2ПриИзменении()

// Процедура вызывается при активизации поля табличного документа на странице 
// "Раздел I (табл. 1, 2)" основной панели формы. Определяет текущую область 
// табличного документа и вызывает процедуру управления доступностью 
// полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел1_1ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_1ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел1_2ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел2_2ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_2ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице 
// "Раздел III (табл. 9, 10)" основной панели формы. Определяет текущую область 
// табличного документа и вызывает процедуру управления доступностью 
// полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел3_1ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел3_1ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел3_2ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел3_2ПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел I (табл. 1, 2)" основной 
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает 
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел1_1ПриИзменении(Элемент)

	Расчет("Раздел1_1");
	//ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_1ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел II (табл. 4, 5)" основной панели 
// формы. Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_1ПриИзменении(Элемент)

	Расчет("Раздел2_1");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел III (табл. 9, 10)" основной 
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает 
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел3_1ПриИзменении(Элемент)

	Расчет("Раздел3_1");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел3_1ПриИзменении()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	//мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_1";
	СтрокаУровня1.Представление            = "Раздел I (таблицы 1, 2)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_2";
	СтрокаУровня1.Представление            = "Раздел I (таблица 3)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_1";
	СтрокаУровня1.Представление            = "Раздел II (таблицы 4, 5)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_2";
	СтрокаУровня1.Представление            = "Раздел II (таблица 6)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_3";
	СтрокаУровня1.Представление            = "Раздел II (таблица 7)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_4";
	СтрокаУровня1.Представление            = "Раздел II (таблица 8)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_1";
	СтрокаУровня1.Представление            = "Раздел III (таблицы 9, 10)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_2";
	СтрокаУровня1.Представление            = "Раздел III (таблицы 11, 12)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;

	Расчет(ИмяТекущейСтраницыПанели);
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ОбновитьПараметрыАвтозаполненияЯчейки();
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

Процедура ПолеТабличногоДокументаТитульныйАдресПриИзменении(Элемент)

	Модифицированность = Истина;
	мАдресвФорматеДляВыгрузки = Элемент.Значение;

КонецПроцедуры

Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если (Область.Имя = "ОргЮрАдрес") И (НЕ мАвтоВыборКодов) Тогда

		СтандартнаяОбработка = Ложь;

		ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", мАдресвФорматеДляВыгрузки);

		Если ВводАдреса.ОткрытьМодально() Тогда

			Если Область.Имя = "ОргЮрАдрес" Тогда
				мАдресвФорматеДляВыгрузки = ВводАдреса.НачальноеЗначениеВыбора.Представление;
				Если мАдресвФорматеДляВыгрузки = ",,,,,,,,," Тогда
					мАдресвФорматеДляВыгрузки = "";
				КонецЕсли;

				Область.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузки);

			КонецЕсли;

			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры
// 
Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСоставПоказателей = "СоставПоказателей2007Кв1";
мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме";

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

ОписаниеТиповЧисло  = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);
ОписаниеТиповЧисло5 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5);

ОписаниеТиповЧислоЧ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5, 0);

ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1  = "П0000300140"; // Раздел1, табл. 3
мИдГруппы2  = "П0000600140";
//мИдГруппы3  = "П0001100080";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 1;
КолИсхСтрокИдГруппы2 = 1;
КолИсхСтрокИдГруппы3 = 1;

// структура строк многострочного раздела на странице
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000030014001", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П000030014003", ОписаниеТиповЧислоЧ);
СтруктураГруппы1.Колонки.Добавить("П000030014004", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000030014005", ОписаниеТиповЧисло);

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000060014001", ОписаниеТиповСтрока254);
СтруктураГруппы2.Колонки.Добавить("П000060014003", ОписаниеТиповЧислоЧ);
СтруктураГруппы2.Колонки.Добавить("П000060014004", ОписаниеТиповЧисло);
СтруктураГруппы2.Колонки.Добавить("П000060014005", ОписаниеТиповЧисло);

//СтруктураГруппы3 = Новый ТаблицаЗначений;
//СтруктураГруппы3.Колонки.Добавить("П000110008001", ОписаниеТиповСтрока254);
//СтруктураГруппы3.Колонки.Добавить("П000110008003", ОписаниеТиповЧислоЧ);
//СтруктураГруппы3.Колонки.Добавить("П000110008004", ОписаниеТиповЧисло);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);
//мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы3, КолИсхСтрокИдГруппы3);

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

ТаблицаСтраницыРаздел21 = ТаблицаСтраницыРаздела.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРаздел21.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

мСтруктураМногостраничныхРазделов.Вставить("Раздел2_1", ТаблицаСтраницыРаздел21);

ТаблицаСтраницыРаздел22 = ТаблицаСтраницыРаздела.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРаздел22.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

мСтруктураМногостраничныхРазделов.Вставить("Раздел2_2", ТаблицаСтраницыРаздел22);

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "01/01/2007";

// Код отчета условный
мКодОтчета   = "1169999";

мПечатныеФормы = Новый СписокЗначений;