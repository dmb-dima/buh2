////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мТитульный;
Перем мРаздел1_1;
Перем мРаздел1_2;
Перем мРаздел2_1;
Перем мРаздел2_2;
Перем мРаздел2_3;
Перем мРаздел2_4;
Перем мРаздел3_1;
Перем мРаздел3_2;

// Хранят сведения о должностных лицах
Перем мИННДиректор;
Перем мИННБухгалтер;
Перем мИННФизЛицо;
Перем мИННУпПредставитель;
Перем мОргИННУпПред;

// Хранят имена многострочных разделов
Перем мИдГруппы1;
Перем мИдГруппы2;
Перем мИдГруппы3;
Перем мИдГруппы4;
Перем мИдГруппы5;
Перем мИдГруппы6;
Перем мИдГруппы7;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// Хранит код отчета по КНД
Перем мКодОтчета;

// Хранит версию формы отчета
Перем мВерсияФормы Экспорт;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// Переменные хранят параметры дополнительных листов
Перем НомТекГруппы;

// Служебнны переменные, для хранения пределов ставок
Перем мСт_100000;
Перем мСт_300000;

Перем мПечатныеФормы Экспорт;
Перем мВПрограммеИзмененаОрганизация;

Перем мАдресвФорматеДляВыгрузки;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

Процедура УстановитьСтавкиЕСН()

	мРаздел1_1.Области.П000010004004.Значение = 4.0;
	мРаздел1_1.Области.П000010006004.Значение = 2.2;
	мРаздел1_1.Области.П000010008004.Значение = 1.1;

	мСт_100000 = 4000;
	мСт_300000 = 8400;

	Если ЭлементыФормы.ПолеВыбораКатегорияНалогоплательщика.Значение = 2 Тогда

		// сельскохозяйственные товаропроизводители и родовые, семейные общины
		мРаздел1_1.Области.П000010004004.Значение = 2.9;
		мРаздел1_1.Области.П000010006004.Значение = 2.2;
		мРаздел1_1.Области.П000010008004.Значение = 1.1;
		
		мСт_100000 = 2900;
		мСт_300000 = 7300;

	КонецЕсли;
	
КонецПроцедуры

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы)
	Перем ТекТабличноеПоле;

	Если ИдГруппы = мИдГруппы1 
	 ИЛИ ИдГруппы = мИдГруппы2 Тогда

		ТекТабличноеПоле = мРаздел1_2;

	ИначеЕсли ИдГруппы = мИдГруппы3
	      ИЛИ ИдГруппы = мИдГруппы4 Тогда

		ТекТабличноеПоле = мРаздел2_2;

	ИначеЕсли ИдГруппы = мИдГруппы5 Тогда

		ТекТабличноеПоле = мРаздел2_3;

	ИначеЕсли ИдГруппы = мИдГруппы6 Тогда

		ТекТабличноеПоле = мРаздел2_4;

	ИначеЕсли ИдГруппы = мИдГруппы7 Тогда

		ТекТабличноеПоле = мРаздел3_2;

	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()
	Перем ИмяГруппы;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если ИмяТекущейСтраницыПанели = "Раздел1_2" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел1_2.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_2" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_2.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_3" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_3.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_4" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел2_4.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3_2" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, мРаздел3_2.ТекущаяОбласть);
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	//
	//СписокПоказателейВнутрСвязи = Новый СписокЗначений;
	//СписокПоказателейВнутрСвязи.Добавить("П000220003000"); // номер страницы раздела 2.2
	//СписокПоказателейВнутрСвязи.Добавить("П000220017006");

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		//Если ТекущаяОбласть.Защита Тогда
		//	Если СписокПоказателейВнутрСвязи.НайтиПоЗначению(ТекущаяОбласть.Имя) = Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Если ТабличноеПоле.Имя = "ПолеТабличногоДокументаТитульный" Тогда
		СтруктураДанныхПоля.Вставить("ОргЮрАдрес", мАдресвФорматеДляВыгрузки);
	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;
			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаСтраницРаздела) Тогда
				// Раздел является многостраничным. Определим активную страницу раздела:
				СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

				Если СтрТаблицаСтраницы <> Неопределено Тогда
					НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
				КонецЕсли;
			КонецЕсли;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		//Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
		//	Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
		//		мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
		//		ЕстьИзменения = Истина;
		//	КонецЕсли;

		//КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];

			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки    = Колонка.Имя;
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейки.СодержитЗначение Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина");

	// Период на титульном листе
	мТитульный.Области.ПериодОтчета.Значение = СтрПериодОтчета;
	
	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

	Номер1МесяцаКвартала = НомерКвартала * 3 - 2;
	Номер2МесяцаКвартала = НомерКвартала * 3 - 1;
	Номер3МесяцаКвартала = НомерКвартала * 3;
	
	Название1МесяцаКвартала = Формат(Дата(НомерГода, Номер1МесяцаКвартала, 1), "ДФ=ММММ");
	Название2МесяцаКвартала = Формат(Дата(НомерГода, Номер2МесяцаКвартала, 1), "ДФ=ММММ");
	Название3МесяцаКвартала = Формат(Дата(НомерГода, Номер3МесяцаКвартала, 1), "ДФ=ММММ");
	
	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке3.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке3.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке3.Значение = Название3МесяцаКвартала;

	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке4.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке4.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке4.Значение = Название3МесяцаКвартала;

	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке5.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке5.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке5.Значение = Название3МесяцаКвартала;
	
	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке6.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке6.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке6.Значение = Название3МесяцаКвартала;
	
	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке7.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке7.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке7.Значение = Название3МесяцаКвартала;
	
	мРаздел1_1.Области.Название1МесяцаКварталаВСтроке15.Значение = Название1МесяцаКвартала;
	мРаздел1_1.Области.Название2МесяцаКварталаВСтроке15.Значение = Название2МесяцаКвартала;
	мРаздел1_1.Области.Название3МесяцаКварталаВСтроке15.Значение = Название3МесяцаКвартала;
	
	мРаздел3_1.Области.Название1МесяцаКвартала.Значение = Название1МесяцаКвартала;
	мРаздел3_1.Области.Название2МесяцаКвартала.Значение = Название2МесяцаКвартала;
	мРаздел3_1.Области.Название3МесяцаКвартала.Значение = Название3МесяцаКвартала;
	
	мРаздел3_1.Области.Название1МесяцаКварталаВСтроке2.Значение = Название1МесяцаКвартала;
	мРаздел3_1.Области.Название2МесяцаКварталаВСтроке2.Значение = Название2МесяцаКвартала;
	мРаздел3_1.Области.Название3МесяцаКварталаВСтроке2.Значение = Название3МесяцаКвартала;

	мРаздел3_1.Области.Название1МесяцаКварталаВСтроке10.Значение = Название1МесяцаКвартала;
	мРаздел3_1.Области.Название2МесяцаКварталаВСтроке10.Значение = Название2МесяцаКвартала;
	мРаздел3_1.Области.Название3МесяцаКварталаВСтроке10.Значение = Название3МесяцаКвартала;
	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом даты представления отчета в соответствующие
// области табличного документа.
//
Процедура ЗаполнитьДаты()

	мТитульный.Области.ДатаВысылкиОтчета.Значение = Формат(ДатаПодписи, "ДФ=дд.ММММ.гггг");
	мРаздел3_2.области.ДатаОтчета.Значение = Формат(ДатаПодписи, "ДФ=дд.ММ.гггг");

КонецПроцедуры // ЗаполнитьДаты()

// Получить ПолучитьРазмерСтраховогоТарифа
// Нельзя вызывать без проверки на пустую организацию
//
// возвращает размер страхового тарифа на дату конца отчетного периода
//
Функция ПолучитьРазмерСтраховогоТарифа()

	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "СтраховойТариф");
	СтраховойТариф = Неопределено;
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, Сведения);
	ОргСведения.Свойство("СтраховойТариф", СтраховойТариф);
	Возврат СтраховойТариф;

КонецФункции // ПолучитьРазмерСтраховогоТарифа

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Попытка
		
		Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
			Возврат
		КонецЕсли;
		
		// ТаблИсключений = роПолучитьТаблицуПараметровЗаполнения();
		
		ПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
		
		// Составляем список данных, необходимых для вывода в декларацию
		Сведения = Новый СписокЗначений;
		
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			Сведения.Добавить("", "ИННЮЛ"); // ИНН
			Сведения.Добавить("", "КППЮЛ"); // КПП
			
			Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 
			
			Сведения.Добавить("", "ОГРН"); // ОГРН
			Сведения.Добавить("", "ОКАТО"); // ОКАТО
			Сведения.Добавить("", "ОКПО");
			Сведения.Добавить("", "ОКВЭД");
			Сведения.Добавить("", "ОснВидДеят");
			Сведения.Добавить("", "ОКОПФ");
			Сведения.Добавить("", "ОКФС");
			Сведения.Добавить("", "ФормСобств");
			Сведения.Добавить("", "РегистрационныйНомерФСС");
			Сведения.Добавить("", "КодОКОНХ");
			
			Если ПБОЮЛ Тогда
				Сведения.Добавить("", "АдрПрописки");
			Иначе
				Сведения.Добавить("", "АдрЮР");
			КонецЕсли;
			
		КонецЕсли;
		
		Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
		Сведения.Добавить("", "ИННРук"); // ИНН руководителя
		
		Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
		Сведения.Добавить("", "ИННБух"); // ИНН бухгалтера
		
		Сведения.Добавить("", "ФИО"); // ФИО предпринимателя
		
		Сведения.Добавить("", "ФИОИсп");
		Сведения.Добавить("", "ТелИсп");
		
		// Теперь получаем данные из глобальной общей функции
		ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
		
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			// Инициализируем переменные
			ИННЮЛ = ""; // ИНН
			КППЮЛ = ""; // КПП
			
			НаимЮЛПол = ""; // Полное наименование 
			
			ОГРН = ""; // ОГРН
			ОКАТО = ""; // ОКАТО
			ОКПО = "";
			ОКВЭД = "";
			
			АдрЮР = "";
			
			ОснВидДеят = "";
			
			ФормСобств = "";
			
			ОКОПФ = "";
			
			ОКФС = "";
			
			РегистрационныйНомерФСС = "";
			КодОКОНХ = "";
			
		КонецЕсли;
		
		ФИОРук = ""; // ФИО руководителя
		ИННРук = ""; // ИНН руководителя
		
		ФИОБух = ""; // ФИО бухгалтера
		ИННБух = ""; // ИНН бухгалтера
		
		ФИО = ""; // ФИО
		ФИОИсп = "";
		ТелИсп = "";
		
		Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
			// Получаем данные
			ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
			ОргСведения.Свойство("КППЮЛ", КППЮЛ);
			ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
			ОргСведения.Свойство("ОГРН", ОГРН);
			ОргСведения.Свойство("ОКАТО", ОКАТО);
			ОргСведения.Свойство("ОКПО", ОКПО);
			ОргСведения.Свойство("ОКВЭД", ОКВЭД);
			ОргСведения.Свойство("ОКОПФ", ОКОПФ);
			ОргСведения.Свойство("ОКФС", ОКФС);
			ОргСведения.Свойство("ОснВидДеят", ОснВидДеят);
			// ОргСведения.Свойство("АдрЮР", АдрЮР);
			ОргСведения.Свойство("ФормСобств", ФормСобств);
			ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
			ОргСведения.Свойство("КодОКОНХ", КодОКОНХ);
			
			Если ПБОЮЛ Тогда
				ОргСведения.Свойство("АдрПрописки", АдрЮР);
			Иначе
				ОргСведения.Свойство("АдрЮР", АдрЮР);
			КонецЕсли;
			
		КонецЕсли;
		
		ОргСведения.Свойство("ФИОРук", ФИОРук);
		ОргСведения.Свойство("ИННРук", ИННРук);
		ОргСведения.Свойство("ФИОБух", ФИОБух);
		ОргСведения.Свойство("ИННБух", ИННБух);
		ОргСведения.Свойство("ФИО", ФИО);
		ОргСведения.Свойство("ФИОИсп", ФИОИсп);
		ОргСведения.Свойство("ТелИсп", ТелИсп);
		
		Если ПБОЮЛ Тогда
			НаимЮлПол = ФИО;
			ФИОБух = "";
			ФИОРук = "";
			ФИОИсп = "";
			ТелИсп = "";
		КонецЕсли;
		
		Если ВПрограммеИзмененаДатаПодписи Тогда
			
			// Обновим только то, что зависит от даты подписи и выйдем
			Если Не ПБОЮЛ Тогда
				мРаздел3_2.Области.ОргДиректор.Значение = ФИОРук;
				мРаздел3_2.Области.ОргБухгалтер.Значение = ФИОБух;
			Иначе
				мТитульный.Области.ОргНазв.Значение = ФИО;
			КонецЕсли;
			
			мРаздел3_2.Области.ОргИсполнитель.Значение = ФИОИсп + ?(ЗначениеЗаполнено(ТелИсп), " " + ТелИсп, "");
			Возврат;
		КонецЕсли;
		
		// Заполняем ИНН на всех листах декларации
		Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
			ИННЮЛ = "";
		КонецЕсли;
		
		мИННЮЛ = ИННЮЛ;
		
		Если РегламентированнаяОтчетность.ПустоеЗначение(КППЮЛ) Тогда
			КППЮЛ = "";
		КонецЕсли;
		
		мКППЮЛ = КППЮЛ;
		мТитульный.Области.ИНН.Значение = мИННЮЛ;
		
		Если НЕ ПБОЮЛ Тогда
			мТитульный.Области.КПП.Значение = мКППЮЛ;
		Иначе
			мКППЮЛ = "";
			мТитульный.Области.КПП.Значение = мКППЮЛ;
		КонецЕсли;
		
		// Работаем с названием ЮЛ
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргНазв.Значение)) Тогда
			// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
			мТитульный.Области.ОргНазв.Значение = НаимЮЛПол;
		КонецЕсли;
		
		// Работаем с ФИО руководителя
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодОКПО.Значение)) Тогда
			Если ПБОЮЛ Тогда
				мТитульный.Области.ОргКодОКПО.Значение  = "";
			Иначе
				мТитульный.Области.ОргКодОКПО.Значение  = ОКПО;
			КонецЕсли;
		КонецЕсли;
		
		// Работаем с ИНН руководителя
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодОГРН.Значение)) Тогда
			мТитульный.Области.ОргКодОГРН.Значение = ОГРН;
		КонецЕсли;
		
		// Работаем с данными по исполнителю
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел3_2.Области.ОргИсполнитель.Значение)) Тогда
			мРаздел3_2.Области.ОргИсполнитель.Значение = ФИОИсп + ?(ЗначениеЗаполнено(ТелИсп), " " + ТелИсп, "");
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодОКВЭД.Значение)) Тогда
			мТитульный.Области.ОргКодОКВЭД.Значение = ОКВЭД;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргОтрасль.Значение)) Тогда
			мТитульный.Области.ОргОтрасль.Значение = ОснВидДеят;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргЮрАдрес.Значение)) Тогда
			
			Если (НЕ РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(АдрЮР, ",", ""))) Тогда
				
				мТитульный.Области.ОргЮрАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(АдрЮР);
				мАдресвФорматеДляВыгрузки = АдрЮр;
			Иначе
				мТитульный.Области.ОргЮрАдрес.Значение = "";
				мАдресвФорматеДляВыгрузки = "";
			КонецЕсли;
			
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодКОПФ.Значение)) Тогда
			мТитульный.Области.ОргКодКОПФ.Значение = ОКОПФ;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодКФС.Значение)) Тогда
			мТитульный.Области.ОргКодКФС.Значение = ОКФС;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргФорма.Значение)) Тогда
			мТитульный.Области.ОргФорма.Значение = ФормСобств;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргФССКод.Значение)) Тогда
			мТитульный.Области.ОргФССКод.Значение = РегистрационныйНомерФСС;
		КонецЕсли;
		
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мТитульный.Области.ОргКодОКОНХ.Значение)) Тогда
			мТитульный.Области.ОргКодОКОНХ.Значение = КодОКОНХ;
		КонецЕсли;
		
		Если КатегорияНалогоплательщика = 0 Тогда
			КатегорияНалогоплательщика = 1;
			ЭлементыФормы.ПолеВыбораКатегорияНалогоплательщика.Значение = ЭлементыФормы.ПолеВыбораКатегорияНалогоплательщика.СписокВыбора.Получить(0).Значение;
		Иначе
			ЭлементыФормы.ПолеВыбораКатегорияНалогоплательщика.Значение = ЭлементыФормы.ПолеВыбораКатегорияНалогоплательщика.СписокВыбора.Получить(КатегорияНалогоплательщика - 1).Значение;
		КонецЕсли;
		
		// Работаем с ФИО Бухгалтера
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел3_2.Области.ОргБухгалтер.Значение)) Тогда
			мРаздел3_2.Области.ОргБухгалтер.Значение = ФИОБух;
		КонецЕсли;
		
		// Работаем с ФИО руководителя организации
		Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мРаздел3_2.Области.ОргДиректор.Значение)) Тогда
			мРаздел3_2.Области.ОргДиректор.Значение = ФИОРук;
		КонецЕсли;
		
		УстановитьСтавкиЕСН();
		
		Если (мВПрограммеИзмененаОрганизация) Или (РегламентированнаяОтчетность.ПустоеЗначение(мРаздел3_1.Области.П000090001006.Значение)) Тогда
			мРаздел3_1.Области.П000090001006.Значение = ПолучитьРазмерСтраховогоТарифа();
			Расчет("");
		КонецЕсли;
		
	Исключение
		
		Сообщить("У пользователя недостаточно прав для получения сведений, необходимых для заполнения титульного листа.", СтатусСообщения.ОченьВажное);
		
	КонецПопытки;
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации2

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);

				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтр];
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку()
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрок;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрок;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + (КолСтрок + 1);

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");

		КонецЕсли;
	КонецЦикла;

	//// Назначаем новый номер добавленной строке
	//// (данный фрагмент используется в отдельных формах).
	//
	//НомерСтрокиОбласть       = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,     2, НомерНижнЯчейкиОбласти,     2);
	//НомераСтрокиНоваяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти,2, НомерНижнЯчейкиНовойОбласти,2);
	//ПоследнийНомер           = НомерСтрокиОбласть.Текст;

	//Если Не ПустаяСтрока(ПоследнийНомер) Тогда
	//	ИсходныйНомер = Число(ПоследнийНомер);
	//Иначе
	//	ИсходныйНомер = МаксимальноеКоличествоСтрокГруппы;
	//КонецЕсли;

	//НовыйПорядковыйНомер = ИсходныйНомер + 1;

	//НомераСтрокиНоваяОбласть.Текст = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
	//
	//// Назначаем новый номер добавленной строке

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + (КолСтрок + 1);

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	ИмяГруппы      = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомУдаляемойСтроки;

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		// Определим область удаляемой строки
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// непосредственно удаляем область строки табличного документа
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + НСтр;
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + (НСтр - 1);

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если НЕ(ОбластьСдвинутойЯчейки.СодержитЗначение) Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;

				//// Назначаем новый номер сдвигаемой строке
				//// (данный фрагмент используется в отдельных формах).
				//
				//Шаг   = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
				//Сдвиг = (НСтр - НомУдаляемойСтроки - 1) * Шаг;
				//
				//НомерСтрокиСдвигОбласть  = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг, 2, НомерНижнЯчейкиОбласти + Сдвиг, 2);

				//ПоследнийНомер           = НомерСтрокиСдвигОбласть.Текст;
				//НовыйПорядковыйНомер     = "";
				//
				//Если Не ПустаяСтрока(ПоследнийНомер) Тогда
				//	НовыйПорядковыйНомер = Число(ПоследнийНомер) - 1;
				//Иначе
				//	Если Не (НСтр - 1) > ИсходноеКоличествоСтрокГруппы Тогда
				//		ОбластьПредыдущийНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти + Сдвиг - Шаг, 2, НомерНижнЯчейкиОбласти + Сдвиг - Шаг, 2);
				//		НовыйПорядковыйНомер   = Число(ОбластьПредыдущийНомер.Текст) + 1;
				//	КонецЕсли;
				//КонецЕсли;

				//НомерСтрокиСдвигОбласть.Текст = НовыйПорядковыйНомер;
				//
				//// Назначаем новый номер сдвигаемой строке

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + НомТекущейСтроки;

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати

	Если СтруктураПараметровЛиста.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПараметровЛиста);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	ПечатнаяФорма = Новый ТабличныйДокумент();

	ТабличноеПоле = ЭлементыФормы[ИмяТабличногоПоля];

	Если ИмяЛиста = "Раздел I (таблицы 1, 2)" Тогда
		ПечатнаяФорма = Новый ТабличныйДокумент();
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть("ОсновнаяЧасть1");
		ПечатнаяФорма.Вывести(ОбластьПечати);

		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;
		мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);
		
		ПечатнаяФорма = Новый ТабличныйДокумент();
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть("ОсновнаяЧасть2");
		ПечатнаяФорма.Вывести(ОбластьПечати);

		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;
		мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);
		
	Иначе
		Если ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
			ОбластьПечати = ТабличноеПоле.ПолучитьОбласть();
		Иначе
			ОбластьПечати = ТабличноеПоле.ПолучитьОбласть(ИмяОбластиТаблПоля);
		КонецЕсли;
		ПечатнаяФорма.Вывести(ОбластьПечати);

		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;
		мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);
	КонецЕсли;

КонецПроцедуры

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;
	
	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);
	
КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя) 

	ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяПоказателя);

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели);
	Если Не ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

			// В случае, если предлагаемое значение не числовое и второй тип (с корректировкой)
			// тогда принимаем предложенное значение за 0.
			Если (НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя)) И (ВариантЗаполнения = 2) Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя) Тогда
				НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;
			КонецЕсли;

			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыПанели].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле )

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле = ЭлементыФормы[ИмяТекТабличногоПоля];

		ОчиститьТабличноеПоле(ТекТабличноеПоле);

	КонецЦикла;


	// Далее выясним, есть ли добавленные в многостраничный раздел дополнительные страницы.
	// При наличии таких страниц удаляем их.
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекущейСтраницыПанели = Страница.Ключ;
		ТаблицаТекущейСтраницы   = Страница.Значение;

		Для каждого СтрокаТаблицы Из ТаблицаТекущейСтраницы Цикл

			Если СтрокаТаблицы.АктивнаяСтраница Тогда
				// данные активной страницы былы очищены ранее
				Продолжить;
			КонецЕсли;

			// удаляем дополнительную страницу
			ТаблицаТекущейСтраницы.Удалить(СтрокаТаблицы);

		КонецЦикла;
	КонецЦикла;

	// Обновляем структуру многостраничных разделов
	//ОбновитьСтруктуруМногостраничныхРазделов();


	// Далее выясним, есть ли добавленные в многострочный раздел дополнительные строки.
	// При наличии таких строк удаляем их.
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

		ИмяГруппы        = ЭлементСтруктуры.Ключ;
		СтруктураГруппы  = ЭлементСтруктуры.Значение;
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = СтруктураГруппы.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их

			НСтр = СтруктураГруппы.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
				
				ИмяПервойКолонки = СтруктураГруппы.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				// Определим область удаляемой строки
				УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// непосредственно удаляем область строки табличного документа
				ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

				// удаляем из структуры многострочного раздела соответствующую строку
				СтруктураГруппы.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// очищаем ячейки, в которых отображается дата подписи отчета
	// должностных лиц организации
	ЗаполнитьДаты();

	// выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	// устанавливаем флаг модифицированности формы
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // Очистить()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = СтрокаУровня2.ВыводНаПечать;

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = СтрокаУровня3.ВыводНаПечать;
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						//Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						//Иначе
						//	// выводим на печать все созданные страницы многостраничного раздела
						//	СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
						//	ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						//КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				//Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				//Иначе
				//	// выводим на печать все созданные страницы многостраничного раздела
				//	СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
				//	ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				//КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		//Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		//Иначе
		//	// выводим на печать все созданные страницы многостраничного раздела
		//	СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
		//	ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		//КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	
	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	КонецЕсли;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт 

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// обновляем структуру многостраничных разделов
	//ОбновитьСтруктуруМногостраничныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	//СписокСохранения.Вставить("Автозаполнение", ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;
	КонецЕсли;

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	мАдресвФорматеДляВыгрузки = мТитульный.Области.ОргЮрАдрес.Значение;
	мТитульный.Области.ОргЮрАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузки);

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	УстановитьФорматВывода();
	Расчет();

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Функция вычисляет сумму всех строк по указаной в параметров колонке
// многострочной части с учетом установленных в диалоге управления отчетом
// параметров округления.
// 
// Параметры
//   ИмяКолонкиМнЧ - строка, обязательный. Имя колонки многострочной части,
//                   для которой требуется вычислить итог.
//
Функция РасчетСуммМнЧ(ИмяКолонкиМнЧ, флОкруглять = 1)
	Перем СтруктураГруппы;
    Перем Показатель;
	
	ИтогПоКолонке = 0;

	// Поимени показателя определим ИД многострочного раздела
	ИдГруппы = Лев(ИмяКолонкиМнЧ, 11);
	
	// Получим структуру группы
	мСтруктураМногострочныхРазделов.Свойство(ИдГруппы, СтруктураГруппы);
	
	ИтогПоКолонке = 0;
	// Строки многострочного блока
	Для Ном = 1 По СтруктураГруппы.Количество() Цикл

		Если флОкруглять = 0 Тогда
			Показатель = СтруктураГруппы[Ном - 1][ИмяКолонкиМнЧ];
		Иначе
			Показатель = ОкруглитьЧислоПоФормату(СтруктураГруппы[Ном - 1][ИмяКолонкиМнЧ]);
		КонецЕсли;

		ИтогПоКолонке = ИтогПоКолонке + Показатель;

	КонецЦикла;

	Возврат ИтогПоКолонке;
	
КонецФункции // РасчетСуммМнЧ()

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "")
	Перем СтруктураГруппы1;
	Перем СтруктураГруппы2;
	Перем СтруктураГруппы3;
	Перем СтруктураГруппы4;
	Перем СтруктураГруппы5;
	Перем СтруктураГруппы6;
	Перем СтруктураГруппы7;

	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, СтруктураГруппы2);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы3, СтруктураГруппы3);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы4, СтруктураГруппы4);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы5, СтруктураГруппы5);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы6, СтруктураГруппы6);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы7, СтруктураГруппы7);

	Если ИмяТекущейСтраницыПанели = "Раздел1_1" Тогда
		// РАЗДЕЛ I
		
		ОкрП000010001003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010001003.Значение);
		ОкрП000010002003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010002003.Значение);
		ОкрП000010004003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010004003.Значение);
		
		ОкрП000010006003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010006003.Значение);
		
		ОкрП000010008003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010008003.Значение);
		ОкрП000010009003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010009003.Значение);
		
		ОкрП000010004005 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010004005.Значение);
		ОкрП000010005005 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010005005.Значение);
		ОкрП000010006005 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010006005.Значение);
		ОкрП000010007005 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010007005.Значение);
		ОкрП000010009005 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010009005.Значение);
		ОкрП000010008005 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010008005.Значение);
		
		ОкрП000010004006 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010004006.Значение);
		ОкрП000010005006 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010005006.Значение);
		ОкрП000010007006 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010007006.Значение);
		ОкрП000010009006 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000010009006.Значение);

		ОкрП000020001003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020001003.Значение);
		ОкрП000020002003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020002003.Значение);

		ОкрП000020003401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020003401.Значение);
		ОкрП000020003501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020003501.Значение);
		ОкрП000020003601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020003601.Значение);

		ОкрП000020004401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020004401.Значение);
		ОкрП000020004501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020004501.Значение);
		ОкрП000020004601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020004601.Значение);
		
		ОкрП000020005401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020005401.Значение);
		ОкрП000020005501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020005501.Значение);
		ОкрП000020005601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020005601.Значение);
		
		ОкрП000020006401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020006401.Значение);
		ОкрП000020006501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020006501.Значение);
		ОкрП000020006601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020006601.Значение);
		
		ОкрП000020007401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020007401.Значение);
		ОкрП000020007501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020007501.Значение);
		ОкрП000020007601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020007601.Значение);
		
		ОкрП000020013003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020013003.Значение);
		ОкрП000020014003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020014003.Значение);
		
		ОкрП000020015201 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020015201.Значение);
		ОкрП000020016203 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020016203.Значение);

		ОкрП000020015401 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020015401.Значение);
		ОкрП000020015501 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020015501.Значение);
		ОкрП000020015601 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020015601.Значение);

		ОкрП000020016403 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020016403.Значение);
		ОкрП000020016503 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020016503.Значение);
		ОкрП000020016603 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020016603.Значение);
		
		
		// Таблица 1
		мРаздел1_1.Области.П000010003003.Значение = ОкрП000010001003 - ОкрП000010002003;

		// строка 5
		мРаздел1_1.Области.П000010005003.Значение = ОкруглитьЧислоПоФормату(ОкрП000010006003
		                                                                  + мРаздел1_1.Области.П000010005006.Значение * 100000);
		
		// строка 7
		мРаздел1_1.Области.П000010007003.Значение = ОкруглитьЧислоПоФормату(ОкрП000010008003
		                                                                  + мРаздел1_1.Области.П000010007006.Значение * 300000);

		// итоги по строке 3
		мРаздел1_1.Области.П000010003005.Значение = ОкрП000010004005
		                                          + ОкрП000010005005
		                                          + ОкрП000010007005
		                                          + ОкрП000010009005;
		
		мРаздел1_1.Области.П000010003006.Значение = мРаздел1_1.Области.П000010004006.Значение
		                                          + мРаздел1_1.Области.П000010005006.Значение
		                                          + мРаздел1_1.Области.П000010007006.Значение
		                                          + мРаздел1_1.Области.П000010009006.Значение;
		
		// итоги по строке 10
		мРаздел1_1.Области.П000010010003.Значение = ОкрП000010001003
		                                          + ОкрП000010002003
		                                          + мРаздел1_1.Области.П000010003003.Значение
		                                          + ОкрП000010004003
		                                          + мРаздел1_1.Области.П000010005003.Значение
		                                          + ОкрП000010006003
		                                          + мРаздел1_1.Области.П000010007003.Значение
		                                          + ОкрП000010008003
		                                          + ОкрП000010009003;
		
		
		мРаздел1_1.Области.П000010010004.Значение = мРаздел1_1.Области.П000010004004.Значение
		                                          + мРаздел1_1.Области.П000010006004.Значение
		                                          + мРаздел1_1.Области.П000010008004.Значение;
		
		мРаздел1_1.Области.П000010010005.Значение = мРаздел1_1.Области.П000010003005.Значение
		                                          + ОкрП000010004005
		                                          + ОкрП000010005005
		                                          + ОкрП000010006005
		                                          + ОкрП000010007005
		                                          + ОкрП000010008005
		                                          + ОкрП000010009005;
		
		мРаздел1_1.Области.П000010010006.Значение = мРаздел1_1.Области.П000010003006.Значение
		                                          + ОкрП000010004006
		                                          + ОкрП000010005006
		                                          + ОкрП000010007006
		                                          + ОкрП000010009006;
		
		мРаздел1_1.Области.П000010010007.Значение = мРаздел1_1.Области.П000010003007.Значение;

		// ТАБЛИЦА 2. Расчеты по единому социальному налогу

		мРаздел1_1.Области.П000020003301.Значение = ОкрП000020003401
		                                          + ОкрП000020003501
		                                          + ОкрП000020003601;

		мРаздел1_1.Области.П000020004301.Значение = ОкрП000020004401
		                                          + ОкрП000020004501
		                                          + ОкрП000020004601;
		
		мРаздел1_1.Области.П000020005301.Значение = ОкрП000020005401
		                                          + ОкрП000020005501
		                                          + ОкрП000020005601;

		мРаздел1_1.Области.П000020006301.Значение = ОкрП000020006401
		                                          + ОкрП000020006501
		                                          + ОкрП000020006601;
		
		мРаздел1_1.Области.П000020007301.Значение = ОкрП000020007401
		                                          + ОкрП000020007501
		                                          + ОкрП000020007601;

		мРаздел1_1.Области.П000020008003.Значение = ОкрП000020001003
		                                          + ОкрП000020002003
		                                          + мРаздел1_1.Области.П000020003003.Значение
		                                          + мРаздел1_1.Области.П000020004003.Значение
		                                          + мРаздел1_1.Области.П000020005003.Значение
		                                          + мРаздел1_1.Области.П000020006003.Значение
		                                          + мРаздел1_1.Области.П000020007003.Значение;

		мРаздел1_1.Области.П000020012003.Значение = ОкрП000020013003
		                                          + ОкрП000020014003;

		мРаздел1_1.Области.П000020015301.Значение = ОкрП000020015401
		                                          + ОкрП000020015501
		                                          + ОкрП000020015601;
		
		мРаздел1_1.Области.П000020016303.Значение = ОкрП000020016403
		                                          + ОкрП000020016503
		                                          + ОкрП000020016603;

		// Эти 2 показателя нужны при автозаполниеие
		мРаздел1_1.Области.П000020017003.Значение = мРаздел1_1.Области.П000020012003.Значение
		                                          + мРаздел1_1.Области.П000020015003.Значение
		                                          + мРаздел1_1.Области.П000020016003.Значение;
		
		// строки 10 и 18
		Если мРаздел1_1.Области.П000020017003.Значение > мРаздел1_1.Области.П000020008003.Значение Тогда 
			ЗадолженностьЗаФондомВсего = мРаздел1_1.Области.П000020017003.Значение
			                           - мРаздел1_1.Области.П000020008003.Значение;
			мРаздел1_1.Области.П000020018003.Значение = 0;
		Иначе
			мРаздел1_1.Области.П000020018003.Значение = мРаздел1_1.Области.П000020008003.Значение
			                                          - мРаздел1_1.Области.П000020017003.Значение;
			ЗадолженностьЗаФондомВсего = 0;
		КонецЕсли;
		
		ОкрП000020011003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020011003.Значение);
		
		мРаздел1_1.Области.П000020010003.Значение = ЗадолженностьЗаФондомВсего - ОкрП000020011003;
		
		ОкрП000020010003 = ОкруглитьЧислоПоФормату(мРаздел1_1.Области.П000020010003.Значение);

		мРаздел1_1.Области.П000020009003.Значение = ОкрП000020010003 + ОкрП000020011003;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_2" Тогда
		
		// Таблица 3
		ОкрП000030001004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030001004.Значение);
		ОкрП000030002004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030002004.Значение);
		ОкрП000030003004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030003004.Значение);
		ОкрП000030004004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030004004.Значение);
		ОкрП000030005004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030005004.Значение);
		ОкрП000030006004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030006004.Значение);
		ОкрП000030007004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030007004.Значение);
		ОкрП000030008004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030008004.Значение);
		ОкрП000030010004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030010004.Значение);
		ОкрП000030011004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030011004.Значение);
		ОкрП000030012004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030012004.Значение);
		ОкрП000030015004 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030015004.Значение);
		
		ОкрП000030001005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030001005.Значение);
		ОкрП000030002005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030002005.Значение);
		ОкрП000030003005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030003005.Значение);
		ОкрП000030005005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030005005.Значение);
		ОкрП000030010005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030010005.Значение);
		ОкрП000030011005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030011005.Значение);
		ОкрП000030012005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030012005.Значение);
		ОкрП000030015005 = ОкруглитьЧислоПоФормату(мРаздел1_2.Области.П000030015005.Значение);
		
		
		// графа 3
		мРаздел1_2.Области.П000030017003.Значение = мРаздел1_2.Области.П000030015003.Значение
		                                          + РасчетСуммМнЧ("П000030016003", 0);
		
		мРаздел1_2.Области.П000030019003.Значение = мРаздел1_2.Области.П000030001003.Значение
		                                          + мРаздел1_2.Области.П000030002003.Значение
		                                          + мРаздел1_2.Области.П000030003003.Значение
		                                          + мРаздел1_2.Области.П000030004003.Значение
		                                          + мРаздел1_2.Области.П000030005003.Значение
		                                          + мРаздел1_2.Области.П000030006003.Значение
		                                          + мРаздел1_2.Области.П000030007003.Значение
		                                          + мРаздел1_2.Области.П000030008003.Значение
		                                          + мРаздел1_2.Области.П000030010003.Значение
		                                          + мРаздел1_2.Области.П000030011003.Значение
		                                          + мРаздел1_2.Области.П000030012003.Значение
		                                          + мРаздел1_2.Области.П000030015003.Значение
		                                          + мРаздел1_2.Области.П000030017003.Значение
		                                          + РасчетСуммМнЧ("П000030013003", 0)
		                                          + РасчетСуммМнЧ("П000030016003", 0);
		
		// графа 4
		мРаздел1_2.Области.П000030009004.Значение = ОкрП000030001004
		                                          + ОкрП000030002004
		                                          + ОкрП000030003004
		                                          + ОкрП000030004004
		                                          + ОкрП000030005004
		                                          + ОкрП000030006004
		                                          + ОкрП000030007004
		                                          + ОкрП000030008004;

		мРаздел1_2.Области.П000030014004.Значение = ОкрП000030010004
		                                          + ОкрП000030011004
		                                          + ОкрП000030012004
		                                          + РасчетСуммМнЧ("П000030013004");
		
		мРаздел1_2.Области.П000030017004.Значение = ОкрП000030015004
		                                          + РасчетСуммМнЧ("П000030016004");
		
		мРаздел1_2.Области.П000030018004.Значение = мРаздел1_2.Области.П000030009004.Значение
		                                          + мРаздел1_2.Области.П000030014004.Значение
		                                          + мРаздел1_2.Области.П000030017004.Значение;
		
		мРаздел1_2.Области.П000030019004.Значение = ОкрП000030001004
		                                          + ОкрП000030002004
		                                          + ОкрП000030003004
		                                          + ОкрП000030004004
		                                          + ОкрП000030005004
		                                          + ОкрП000030006004
		                                          + ОкрП000030007004
		                                          + ОкрП000030008004
		                                          + мРаздел1_2.Области.П000030009004.Значение
		                                          + ОкрП000030010004
		                                          + ОкрП000030011004
		                                          + ОкрП000030012004
		                                          + мРаздел1_2.Области.П000030014004.Значение
		                                          + ОкрП000030015004
		                                          + мРаздел1_2.Области.П000030017004.Значение
		                                          + мРаздел1_2.Области.П000030018004.Значение
		                                          + РасчетСуммМнЧ("П000030013004")
		                                          + РасчетСуммМнЧ("П000030016004");
		
		// графа 5
		мРаздел1_2.Области.П000030009005.Значение = ОкрП000030001005
		                                          + ОкрП000030002005
		                                          + ОкрП000030003005
		                                          + ОкрП000030005005;
		
		мРаздел1_2.Области.П000030014005.Значение = ОкрП000030010005
		                                          + ОкрП000030011005
		                                          + ОкрП000030012005
		                                          + РасчетСуммМнЧ("П000030013005");
		
		мРаздел1_2.Области.П000030017005.Значение = ОкрП000030015005 
		                                          + РасчетСуммМнЧ("П000030016005");
		
		мРаздел1_2.Области.П000030018005.Значение = мРаздел1_2.Области.П000030009005.Значение
		                                          + мРаздел1_2.Области.П000030014005.Значение
		                                          + мРаздел1_2.Области.П000030017005.Значение;
		
		мРаздел1_2.Области.П000030019005.Значение = ОкрП000030001005
		                                          + ОкрП000030002005
		                                          + ОкрП000030003005
		                                          + ОкрП000030005005
		                                          + мРаздел1_2.Области.П000030009005.Значение
		                                          + ОкрП000030010005
		                                          + ОкрП000030011005
		                                          + ОкрП000030012005
		                                          + мРаздел1_2.Области.П000030014005.Значение
		                                          + ОкрП000030015005
		                                          + мРаздел1_2.Области.П000030017005.Значение
		                                          + мРаздел1_2.Области.П000030018005.Значение
		                                          + РасчетСуммМнЧ("П000030013004")
		                                          + РасчетСуммМнЧ("П000030016004");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_1" Тогда

		// РАЗДЕЛ II

		мРаздел2_1.Области.Шифр.Значение = мРаздел2_1.Области.П000040000000.Значение;

		// Табл.5 Расчеты по средствам Фонда социального страхования
		ОкрП000050001003 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000050001003.Значение);
		ОкрП000050002003 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000050002003.Значение);
		ОкрП000050005003 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000050005003.Значение);
		ОкрП000050006003 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000050006003.Значение);
		ОкрП000050007003 = ОкруглитьЧислоПоФормату(мРаздел2_1.Области.П000050007003.Значение);

		мРаздел2_1.Области.П000050003003.Значение = ОкрП000050001003
		                                          + ОкрП000050002003;
		
		мРаздел2_1.Области.П000050008003.Значение = ОкрП000050005003
		                                          + ОкрП000050006003
		                                          + ОкрП000050007003;

		// строки 4 и 9
		Если мРаздел2_1.Области.П000050008003.Значение > мРаздел2_1.Области.П000050003003.Значение Тогда
			мРаздел2_1.Области.П000050004003.Значение = мРаздел2_1.Области.П000050008003.Значение 
			                                          - мРаздел2_1.Области.П000050003003.Значение;
			мРаздел2_1.Области.П000050009003.Значение = 0;
		Иначе
			мРаздел2_1.Области.П000050004003.Значение = 0;
			мРаздел2_1.Области.П000050009003.Значение = мРаздел2_1.Области.П000050003003.Значение 
			                                          - мРаздел2_1.Области.П000050008003.Значение;
		КонецЕсли;
	
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_2" Тогда

		// Таблица 6
		ОкрП000060001004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060001004.Значение);
		ОкрП000060002004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060002004.Значение);
		ОкрП000060003004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060003004.Значение);
		ОкрП000060004004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060004004.Значение);
		ОкрП000060005004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060005004.Значение);
		ОкрП000060006004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060006004.Значение);
		ОкрП000060007004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060007004.Значение);
		ОкрП000060008004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060008004.Значение);
		ОкрП000060010004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060010004.Значение);
		ОкрП000060011004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060011004.Значение);
		ОкрП000060012004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060012004.Значение);
		ОкрП000060015004 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060015004.Значение);
		
		ОкрП000060001005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060001005.Значение);
		ОкрП000060002005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060002005.Значение);
		ОкрП000060003005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060003005.Значение);
		ОкрП000060005005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060005005.Значение);
		ОкрП000060010005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060010005.Значение);
		ОкрП000060011005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060011005.Значение);
		ОкрП000060012005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060012005.Значение);
		ОкрП000060015005 = ОкруглитьЧислоПоФормату(мРаздел2_2.Области.П000060015005.Значение);
		
		// графа 3
		
		мРаздел2_2.Области.П000060017003.Значение = мРаздел2_2.Области.П000060015003.Значение
		                                          + РасчетСуммМнЧ("П000060016003", 0);
		
		мРаздел2_2.Области.П000060019003.Значение = мРаздел2_2.Области.П000060001003.Значение 
		                                          + мРаздел2_2.Области.П000060002003.Значение
		                                          + мРаздел2_2.Области.П000060003003.Значение
		                                          + мРаздел2_2.Области.П000060004003.Значение
		                                          + мРаздел2_2.Области.П000060005003.Значение
		                                          + мРаздел2_2.Области.П000060006003.Значение
		                                          + мРаздел2_2.Области.П000060007003.Значение
		                                          + мРаздел2_2.Области.П000060008003.Значение
		                                          + мРаздел2_2.Области.П000060010003.Значение
		                                          + мРаздел2_2.Области.П000060011003.Значение
		                                          + мРаздел2_2.Области.П000060012003.Значение
		                                          + мРаздел2_2.Области.П000060015003.Значение
		                                          + мРаздел2_2.Области.П000060017003.Значение
		                                          + РасчетСуммМнЧ("П000060013003", 0)
		                                          + РасчетСуммМнЧ("П000060016003", 0);
		
		// графа 4
		мРаздел2_2.Области.П000060009004.Значение = ОкрП000060001004
		                                          + ОкрП000060002004
		                                          + ОкрП000060003004
		                                          + ОкрП000060004004
		                                          + ОкрП000060005004
		                                          + ОкрП000060006004
		                                          + ОкрП000060007004
		                                          + ОкрП000060008004;

		мРаздел2_2.Области.П000060014004.Значение = ОкрП000060010004
		                                          + ОкрП000060011004
		                                          + ОкрП000060012004
		                                          + РасчетСуммМнЧ("П000060013004");
		
		мРаздел2_2.Области.П000060017004.Значение = ОкрП000060015004
		                                          + РасчетСуммМнЧ("П000060016004");
		
		мРаздел2_2.Области.П000060018004.Значение = мРаздел2_2.Области.П000060009004.Значение
		                                          + мРаздел2_2.Области.П000060014004.Значение
		                                          + мРаздел2_2.Области.П000060017004.Значение;
		
		мРаздел2_2.Области.П000060019004.Значение = ОкрП000060001004
		                                          + ОкрП000060002004
		                                          + ОкрП000060003004
		                                          + ОкрП000060004004
		                                          + ОкрП000060005004
		                                          + ОкрП000060006004
		                                          + ОкрП000060007004
		                                          + ОкрП000060008004
		                                          + мРаздел2_2.Области.П000060009004.Значение
		                                          + ОкрП000060010004
		                                          + ОкрП000060011004
		                                          + ОкрП000060012004
		                                          + мРаздел2_2.Области.П000060014004.Значение
		                                          + ОкрП000060015004
		                                          + мРаздел2_2.Области.П000060017004.Значение
		                                          + мРаздел2_2.Области.П000060018004.Значение
		                                          + РасчетСуммМнЧ("П000060013004")
		                                          + РасчетСуммМнЧ("П000060016004");
		
		// графа 5
		мРаздел2_2.Области.П000060009005.Значение = ОкрП000060001005
		                                          + ОкрП000060002005
		                                          + ОкрП000060003005
		                                          + ОкрП000060005005;
		
		мРаздел2_2.Области.П000060014005.Значение = ОкрП000060010005
		                                          + ОкрП000060011005
		                                          + ОкрП000060012005
		                                          + РасчетСуммМнЧ("П000060013005");
		
		мРаздел2_2.Области.П000060017005.Значение = ОкрП000060015005
		                                          + РасчетСуммМнЧ("П000060016005");
		
		мРаздел2_2.Области.П000060018005.Значение = мРаздел2_2.Области.П000060009005.Значение
		                                          + мРаздел2_2.Области.П000060014005.Значение
		                                          + мРаздел2_2.Области.П000060017005.Значение;
		
		мРаздел2_2.Области.П000060019005.Значение = ОкрП000060001005
		                                          + ОкрП000060002005
		                                          + ОкрП000060003005
		                                          + ОкрП000060005005
		                                          + мРаздел2_2.Области.П000060009005.Значение
		                                          + ОкрП000060010005
		                                          + ОкрП000060011005
		                                          + ОкрП000060012005
		                                          + мРаздел2_2.Области.П000060014005.Значение
		                                          + ОкрП000060015005
		                                          + мРаздел2_2.Области.П000060017005.Значение
		                                          + мРаздел2_2.Области.П000060018005.Значение
		                                          + РасчетСуммМнЧ("П000060013005")
		                                          + РасчетСуммМнЧ("П000060016005");

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_3" Тогда

		// Таблица 7
		ОкрП000070001004   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070001004.Значение);
		ОкрП000070002004   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070002004.Значение);
		ОкрП000070003004   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070003004.Значение);
		ОкрП000070004004   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070004004.Значение);
		
		ОкрП000070001006   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070001006.Значение);
		ОкрП000070002006   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070002006.Значение);
		ОкрП000070003006   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070003006.Значение);
		ОкрП000070004006   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070004006.Значение);
		
		ОкрП000070002008   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070002008.Значение);
		
		ОкрП000070001010   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070001010.Значение);
		ОкрП000070002010   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070002010.Значение);
		ОкрП000070003010   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070003010.Значение);
		ОкрП000070004010   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070004010.Значение);
		
		ОкрП000070001012   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070001012.Значение);
		ОкрП000070002012   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070002012.Значение);
		ОкрП000070003012   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070003012.Значение);
		ОкрП000070004012   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070004012.Значение);
		
		ОкрП000070001014   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070001014.Значение);
		ОкрП000070002014   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070002014.Значение);
		ОкрП000070003014   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070003014.Значение);
		ОкрП000070004014   = ОкруглитьЧислоПоФормату(мРаздел2_3.Области.П000070004014.Значение);

		// графа 15 строки 1-6
		мРаздел2_3.Области.П000070001015.Значение = мРаздел2_3.Области.П000070001003.Значение
		                                          + мРаздел2_3.Области.П000070001005.Значение
		                                          - мРаздел2_3.Области.П000070001009.Значение
		                                          - мРаздел2_3.Области.П000070001013.Значение;
		
		мРаздел2_3.Области.П000070002015.Значение = мРаздел2_3.Области.П000070002003.Значение
		                                          + мРаздел2_3.Области.П000070002005.Значение
		                                          + мРаздел2_3.Области.П000070002007.Значение
		                                          - мРаздел2_3.Области.П000070002009.Значение
		                                          - мРаздел2_3.Области.П000070002013.Значение;
		
		мРаздел2_3.Области.П000070003015.Значение = мРаздел2_3.Области.П000070003003.Значение
		                                          + мРаздел2_3.Области.П000070003005.Значение
		                                          - мРаздел2_3.Области.П000070003009.Значение
		                                          - мРаздел2_3.Области.П000070003013.Значение;
		
		мРаздел2_3.Области.П000070004015.Значение = мРаздел2_3.Области.П000070004003.Значение
		                                          + мРаздел2_3.Области.П000070004005.Значение
		                                          - мРаздел2_3.Области.П000070004009.Значение
		                                          - мРаздел2_3.Области.П000070004013.Значение;

		// графа 16 строки 1-6
		мРаздел2_3.Области.П000070001016.Значение = ОкрП000070001004
		                                          + ОкрП000070001006
		                                          - ОкрП000070001010
		                                          - ОкрП000070001014;
		
		мРаздел2_3.Области.П000070002016.Значение = ОкрП000070002004
		                                          + ОкрП000070002006
		                                          + ОкрП000070002008
		                                          - ОкрП000070002010
		                                          - ОкрП000070002014;
		
		мРаздел2_3.Области.П000070003016.Значение = ОкрП000070003004
		                                          + ОкрП000070003006
		                                          - ОкрП000070003010
		                                          - ОкрП000070003014;
		
		мРаздел2_3.Области.П000070004016.Значение = ОкрП000070004004
		                                          + ОкрП000070004006
		                                          - ОкрП000070004010
		                                          - ОкрП000070004014;
		
		// Строки по коду 5 многострочного блока
		Для Ном = 1 По СтруктураГруппы5.Количество() Цикл

			НомСтр = "_" + Ном;

			// Расчет показателя по графе 15
			ОкрП000070005003 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области["П000070005003"+НомСтр].Значение);
			ОкрП000070005005 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области["П000070005005"+НомСтр].Значение);
			ОкрП000070005007 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области["П000070005007"+НомСтр].Значение);
			ОкрП000070005009 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области["П000070005009"+НомСтр].Значение);
			ОкрП000070005013 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области["П000070005013"+НомСтр].Значение);

			
			мРаздел2_3.Области["П000070005015"+НомСтр].Значение = ОкрП000070005003
			                                                    + ОкрП000070005005
			                                                    + ОкрП000070005007
			                                                    - ОкрП000070005009
			                                                    - ОкрП000070005013;
			// Расчет показателя по графе 16
			ОкрП000070005004 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области["П000070005004"+НомСтр].Значение);
			ОкрП000070005006 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области["П000070005006"+НомСтр].Значение);
			ОкрП000070005008 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области["П000070005008"+НомСтр].Значение);
			ОкрП000070005010 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области["П000070005010"+НомСтр].Значение);
			ОкрП000070005010 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области["П000070005010"+НомСтр].Значение);
			ОкрП000070005014 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области["П000070005014"+НомСтр].Значение);

			
			мРаздел2_3.Области["П000070005016"+НомСтр].Значение = ОкрП000070005004
			                                                    + ОкрП000070005006
			                                                    + ОкрП000070005008
			                                                    - ОкрП000070005010
			                                                    - ОкрП000070005014;

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы5[Ном - 1];
			ТекСтрокаТаблицы.П000070005015 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области["П000070005015"+НомСтр].Значение);
			ТекСтрокаТаблицы.П000070005016 = ОкруглитьЧислоПоФормату(мРаздел2_3.Области["П000070005016"+НомСтр].Значение);

		КонецЦикла;
		

		// строка 7 графы 3-16
		мРаздел2_3.Области.П000070007003.Значение = мРаздел2_3.Области.П000070001003.Значение
		                                          + мРаздел2_3.Области.П000070002003.Значение
		                                          + мРаздел2_3.Области.П000070003003.Значение
		                                          + мРаздел2_3.Области.П000070004003.Значение
		                                          + РасчетСуммМнЧ("П000070005003", 0);
		
		мРаздел2_3.Области.П000070007004.Значение = ОкрП000070001004
		                                          + ОкрП000070002004
		                                          + ОкрП000070003004
		                                          + ОкрП000070004004
		                                          + РасчетСуммМнЧ("П000070005004",1);
		
		мРаздел2_3.Области.П000070007005.Значение = мРаздел2_3.Области.П000070001005.Значение
		                                          + мРаздел2_3.Области.П000070002005.Значение
		                                          + мРаздел2_3.Области.П000070003005.Значение
		                                          + мРаздел2_3.Области.П000070004005.Значение
		                                          + РасчетСуммМнЧ("П000070005005", 0);
		
		мРаздел2_3.Области.П000070007006.Значение = ОкрП000070001006
		                                          + ОкрП000070002006
		                                          + ОкрП000070003006
		                                          + ОкрП000070004006
		                                          + РасчетСуммМнЧ("П000070005006");
		
		мРаздел2_3.Области.П000070007007.Значение = мРаздел2_3.Области.П000070002007.Значение
		                                          + РасчетСуммМнЧ("П000070005007", 0);
		
		мРаздел2_3.Области.П000070007008.Значение = ОкрП000070002008
		                                          + РасчетСуммМнЧ("П000070005008");
		
		мРаздел2_3.Области.П000070007009.Значение = мРаздел2_3.Области.П000070001009.Значение
		                                          + мРаздел2_3.Области.П000070002009.Значение
		                                          + мРаздел2_3.Области.П000070003009.Значение
		                                          + мРаздел2_3.Области.П000070004009.Значение
		                                          + РасчетСуммМнЧ("П000070005009");
		
		мРаздел2_3.Области.П000070007010.Значение = ОкрП000070001010
		                                          + ОкрП000070002010
		                                          + ОкрП000070003010
		                                          + ОкрП000070004010
		                                          + РасчетСуммМнЧ("П000070005010");
		
		
		мРаздел2_3.Области.П000070007011.Значение = мРаздел2_3.Области.П000070001011.Значение
		                                          + мРаздел2_3.Области.П000070002011.Значение
		                                          + мРаздел2_3.Области.П000070003011.Значение
		                                          + мРаздел2_3.Области.П000070004011.Значение
		                                          + РасчетСуммМнЧ("П000070005011", 0);

		мРаздел2_3.Области.П000070007012.Значение = ОкрП000070001012
		                                          + ОкрП000070002012
		                                          + ОкрП000070003012
		                                          + ОкрП000070004012
		                                          + РасчетСуммМнЧ("П000070005012");
		
		мРаздел2_3.Области.П000070007013.Значение = мРаздел2_3.Области.П000070001013.Значение
		                                          + мРаздел2_3.Области.П000070002013.Значение
		                                          + мРаздел2_3.Области.П000070003013.Значение
		                                          + мРаздел2_3.Области.П000070004013.Значение
		                                          + РасчетСуммМнЧ("П000070005013");
		
		мРаздел2_3.Области.П000070007014.Значение = ОкрП000070001014
		                                          + ОкрП000070002014
		                                          + ОкрП000070003014
		                                          + ОкрП000070004014
		                                          + РасчетСуммМнЧ("П000070005014");
		
		мРаздел2_3.Области.П000070007015.Значение = мРаздел2_3.Области.П000070001015.Значение
		                                          + мРаздел2_3.Области.П000070002015.Значение
		                                          + мРаздел2_3.Области.П000070003015.Значение
		                                          + мРаздел2_3.Области.П000070004015.Значение
		                                          + РасчетСуммМнЧ("П000070005015", 0);

		мРаздел2_3.Области.П000070007016.Значение = мРаздел2_3.Области.П000070001016.Значение
		                                          + мРаздел2_3.Области.П000070002016.Значение
		                                          + мРаздел2_3.Области.П000070003016.Значение
		                                          + мРаздел2_3.Области.П000070004016.Значение
		                                          + РасчетСуммМнЧ("П000070005016", 0);

		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_4" Тогда

		// Таблица 8
		ОкрП000080001006   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001006.Значение);
		ОкрП000080002006   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002006.Значение);
		ОкрП000080003006   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003006.Значение);
		ОкрП000080004006   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004006.Значение);
		ОкрП000080005006   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005006.Значение);
		ОкрП000080006006   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006006.Значение);
		ОкрП000080007006   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080007006.Значение);
		//ОкрП000080008006_1 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080008006_1.Значение);
		ОкрП000080001008   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001008.Значение);
		ОкрП000080002008   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002008.Значение);
		ОкрП000080003008   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003008.Значение);
		ОкрП000080004008   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004008.Значение);
		ОкрП000080005008   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005008.Значение);
		ОкрП000080006008   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006008.Значение);
		ОкрП000080007008   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080007008.Значение);
		//ОкрП000080008008_1 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080008008_1.Значение);
		ОкрП000080001010   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001010.Значение);
		ОкрП000080002010   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002010.Значение);
		ОкрП000080003010   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003010.Значение);
		ОкрП000080004010   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004010.Значение);
		ОкрП000080005010   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005010.Значение);
		ОкрП000080006010   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006010.Значение);
		ОкрП000080007010   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080007010.Значение);
		//ОкрП000080008010_1 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080008010_1.Значение);
		ОкрП000080001012   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001012.Значение);
		ОкрП000080002012   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002012.Значение);
		ОкрП000080003012   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003012.Значение);
		ОкрП000080004012   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004012.Значение);
		ОкрП000080005012   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005012.Значение);
		ОкрП000080006012   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006012.Значение);
		ОкрП000080007012   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080007012.Значение);
		//ОкрП000080008012_1 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080008012_1.Значение);
		ОкрП000080001014   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080001014.Значение);
		ОкрП000080002014   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080002014.Значение);
		ОкрП000080003014   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080003014.Значение);
		ОкрП000080004014   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080004014.Значение);
		ОкрП000080005014   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080005014.Значение);
		ОкрП000080006014   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080006014.Значение);
		ОкрП000080007014   = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080007014.Значение);
		//ОкрП000080008014_1 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области.П000080008014_1.Значение);

		// графа 3, строки 1-8
		мРаздел2_4.Области.П000080001003.Значение = мРаздел2_4.Области.П000080001005.Значение
		                                          + мРаздел2_4.Области.П000080001007.Значение
		                                          + мРаздел2_4.Области.П000080001009.Значение
		                                          + мРаздел2_4.Области.П000080001011.Значение
		                                          + мРаздел2_4.Области.П000080001013.Значение;
		
		мРаздел2_4.Области.П000080002003.Значение = мРаздел2_4.Области.П000080002005.Значение
		                                          + мРаздел2_4.Области.П000080002007.Значение
		                                          + мРаздел2_4.Области.П000080002009.Значение
		                                          + мРаздел2_4.Области.П000080002011.Значение
		                                          + мРаздел2_4.Области.П000080002013.Значение;
		
		мРаздел2_4.Области.П000080003003.Значение = мРаздел2_4.Области.П000080003005.Значение
		                                          + мРаздел2_4.Области.П000080003007.Значение
		                                          + мРаздел2_4.Области.П000080003009.Значение
		                                          + мРаздел2_4.Области.П000080003011.Значение
		                                          + мРаздел2_4.Области.П000080003013.Значение;
		
		мРаздел2_4.Области.П000080004003.Значение = мРаздел2_4.Области.П000080004005.Значение
		                                          + мРаздел2_4.Области.П000080004007.Значение
		                                          + мРаздел2_4.Области.П000080004009.Значение
		                                          + мРаздел2_4.Области.П000080004011.Значение
		                                          + мРаздел2_4.Области.П000080004013.Значение;
		
		мРаздел2_4.Области.П000080005003.Значение = мРаздел2_4.Области.П000080005005.Значение
		                                          + мРаздел2_4.Области.П000080005007.Значение
		                                          + мРаздел2_4.Области.П000080005009.Значение
		                                          + мРаздел2_4.Области.П000080005011.Значение
		                                          + мРаздел2_4.Области.П000080005013.Значение;
		
		мРаздел2_4.Области.П000080006003.Значение = мРаздел2_4.Области.П000080006005.Значение
		                                          + мРаздел2_4.Области.П000080006007.Значение
		                                          + мРаздел2_4.Области.П000080006009.Значение
		                                          + мРаздел2_4.Области.П000080006011.Значение
		                                          + мРаздел2_4.Области.П000080006013.Значение;
		
		мРаздел2_4.Области.П000080007003.Значение = мРаздел2_4.Области.П000080007005.Значение
		                                          + мРаздел2_4.Области.П000080007007.Значение
		                                          + мРаздел2_4.Области.П000080007009.Значение
		                                          + мРаздел2_4.Области.П000080007011.Значение
		                                          + мРаздел2_4.Области.П000080007013.Значение;

		
		// графа 4, строки 1-8
		мРаздел2_4.Области.П000080001004.Значение = ОкрП000080001006
		                                          + ОкрП000080001008
		                                          + ОкрП000080001010
		                                          + ОкрП000080001012
		                                          + ОкрП000080001014;
		
		мРаздел2_4.Области.П000080002004.Значение = ОкрП000080002006
		                                          + ОкрП000080002008
		                                          + ОкрП000080002010
		                                          + ОкрП000080002012
		                                          + ОкрП000080002014;
		
		мРаздел2_4.Области.П000080003004.Значение = ОкрП000080003006
		                                          + ОкрП000080003008
		                                          + ОкрП000080003010
		                                          + ОкрП000080003012
		                                          + ОкрП000080003014;
		
		мРаздел2_4.Области.П000080004004.Значение = ОкрП000080004006
		                                          + ОкрП000080004008
		                                          + ОкрП000080004010
		                                          + ОкрП000080004012
		                                          + ОкрП000080004014;
		
		мРаздел2_4.Области.П000080005004.Значение = ОкрП000080005006
		                                          + ОкрП000080005008
		                                          + ОкрП000080005010
		                                          + ОкрП000080005012
		                                          + ОкрП000080005014;
		
		мРаздел2_4.Области.П000080006004.Значение = ОкрП000080006006
		                                          + ОкрП000080006008
		                                          + ОкрП000080006010
		                                          + ОкрП000080006012
		                                          + ОкрП000080006014;
		
		мРаздел2_4.Области.П000080007004.Значение = ОкрП000080007006
		                                          + ОкрП000080007008
		                                          + ОкрП000080007010
		                                          + ОкрП000080007012
		                                          + ОкрП000080007014;
		
		// Строки по коду 8 многострочного блока
		Для Ном = 1 По СтруктураГруппы6.Количество() Цикл

			НомСтр = "_" + Ном;

			// Расчет показателя по графе 3
			ОкрП000080008005 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области["П000080008005"+НомСтр].Значение);
			ОкрП000080008007 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области["П000080008007"+НомСтр].Значение);
			ОкрП000080008009 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области["П000080008009"+НомСтр].Значение);
			ОкрП000080008011 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области["П000080008011"+НомСтр].Значение);
			ОкрП000080008013 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области["П000080008013"+НомСтр].Значение);

			мРаздел2_4.Области["П000080008003"+НомСтр].Значение = ОкрП000080008005
			                                                    + ОкрП000080008007
			                                                    + ОкрП000080008009
			                                                    + ОкрП000080008011
			                                                    + ОкрП000080008013;

			ОкрП000080008006 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области["П000080008006"+НомСтр].Значение);
			ОкрП000080008008 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области["П000080008008"+НомСтр].Значение);
			ОкрП000080008010 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области["П000080008010"+НомСтр].Значение);
			ОкрП000080008012 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области["П000080008012"+НомСтр].Значение);
			ОкрП000080008014 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области["П000080008014"+НомСтр].Значение);

			мРаздел2_4.Области["П000080008004"+НомСтр].Значение = ОкрП000080008006
			                                                    + ОкрП000080008008
			                                                    + ОкрП000080008010
			                                                    + ОкрП000080008012
			                                                    + ОкрП000080008014;

			// здесь же обновляем структуру многострочного раздела
			ТекСтрокаТаблицы = СтруктураГруппы6[Ном - 1];
			ТекСтрокаТаблицы.П000080008003 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области["П000080008003"+НомСтр].Значение);
			ТекСтрокаТаблицы.П000080008004 = ОкруглитьЧислоПоФормату(мРаздел2_4.Области["П000080008004"+НомСтр].Значение);

		КонецЦикла;

		// строка 9, графы 3-14
		мРаздел2_4.Области.П000080009003.Значение = мРаздел2_4.Области.П000080001003.Значение
		                                          + мРаздел2_4.Области.П000080002003.Значение
		                                          + мРаздел2_4.Области.П000080003003.Значение
		                                          + мРаздел2_4.Области.П000080004003.Значение
		                                          + мРаздел2_4.Области.П000080005003.Значение
		                                          + мРаздел2_4.Области.П000080006003.Значение
		                                          + мРаздел2_4.Области.П000080007003.Значение
		                                          + РасчетСуммМнЧ("П000080008003", 0);
		
		мРаздел2_4.Области.П000080009004.Значение = мРаздел2_4.Области.П000080001004.Значение
		                                          + мРаздел2_4.Области.П000080002004.Значение
		                                          + мРаздел2_4.Области.П000080003004.Значение
		                                          + мРаздел2_4.Области.П000080004004.Значение
		                                          + мРаздел2_4.Области.П000080005004.Значение
		                                          + мРаздел2_4.Области.П000080006004.Значение
		                                          + мРаздел2_4.Области.П000080007004.Значение
		                                          + РасчетСуммМнЧ("П000080008004", 0);
		
		мРаздел2_4.Области.П000080009005.Значение = мРаздел2_4.Области.П000080001005.Значение
		                                          + мРаздел2_4.Области.П000080002005.Значение
		                                          + мРаздел2_4.Области.П000080003005.Значение
		                                          + мРаздел2_4.Области.П000080004005.Значение
		                                          + мРаздел2_4.Области.П000080005005.Значение
		                                          + мРаздел2_4.Области.П000080006005.Значение
		                                          + мРаздел2_4.Области.П000080007005.Значение
		                                          + РасчетСуммМнЧ("П000080008005");
		
		мРаздел2_4.Области.П000080009006.Значение = ОкрП000080001006
		                                          + ОкрП000080002006
		                                          + ОкрП000080003006
		                                          + ОкрП000080004006
		                                          + ОкрП000080005006
		                                          + ОкрП000080006006
		                                          + ОкрП000080007006
		                                          + РасчетСуммМнЧ("П000080008006", 0);
		
		мРаздел2_4.Области.П000080009007.Значение = мРаздел2_4.Области.П000080001007.Значение
		                                          + мРаздел2_4.Области.П000080002007.Значение
		                                          + мРаздел2_4.Области.П000080003007.Значение
		                                          + мРаздел2_4.Области.П000080004007.Значение
		                                          + мРаздел2_4.Области.П000080005007.Значение
		                                          + мРаздел2_4.Области.П000080006007.Значение
		                                          + мРаздел2_4.Области.П000080007007.Значение
		                                          + РасчетСуммМнЧ("П000080008007", 0);
		
		мРаздел2_4.Области.П000080009008.Значение = ОкрП000080001008
		                                          + ОкрП000080002008
		                                          + ОкрП000080003008
		                                          + ОкрП000080004008
		                                          + ОкрП000080005008
		                                          + ОкрП000080006008
		                                          + ОкрП000080007008
		                                          + РасчетСуммМнЧ("П000080008008")
		;
		
		мРаздел2_4.Области.П000080009009.Значение = мРаздел2_4.Области.П000080001009.Значение
		                                          + мРаздел2_4.Области.П000080002009.Значение
		                                          + мРаздел2_4.Области.П000080003009.Значение
		                                          + мРаздел2_4.Области.П000080004009.Значение
		                                          + мРаздел2_4.Области.П000080005009.Значение
		                                          + мРаздел2_4.Области.П000080006009.Значение
		                                          + мРаздел2_4.Области.П000080007009.Значение
		                                          + РасчетСуммМнЧ("П000080008009", 0);
		
		мРаздел2_4.Области.П000080009010.Значение = ОкрП000080001010
		                                          + ОкрП000080002010
		                                          + ОкрП000080003010
		                                          + ОкрП000080004010
		                                          + ОкрП000080005010
		                                          + ОкрП000080006010
		                                          + ОкрП000080007010
		                                          + РасчетСуммМнЧ("П000080008010");
		
		мРаздел2_4.Области.П000080009011.Значение = мРаздел2_4.Области.П000080001011.Значение
		                                          + мРаздел2_4.Области.П000080002011.Значение
		                                          + мРаздел2_4.Области.П000080003011.Значение
		                                          + мРаздел2_4.Области.П000080004011.Значение
		                                          + мРаздел2_4.Области.П000080005011.Значение
		                                          + мРаздел2_4.Области.П000080006011.Значение
		                                          + мРаздел2_4.Области.П000080007011.Значение
		                                          + РасчетСуммМнЧ("П000080008011", 0);
		
		мРаздел2_4.Области.П000080009012.Значение = ОкрП000080001012
		                                          + ОкрП000080002012
		                                          + ОкрП000080003012
		                                          + ОкрП000080004012
		                                          + ОкрП000080005012
		                                          + ОкрП000080006012
		                                          + ОкрП000080007012
		                                          + РасчетСуммМнЧ("П000080008012");
		
		мРаздел2_4.Области.П000080009013.Значение = мРаздел2_4.Области.П000080001013.Значение
		                                          + мРаздел2_4.Области.П000080002013.Значение
		                                          + мРаздел2_4.Области.П000080003013.Значение
		                                          + мРаздел2_4.Области.П000080004013.Значение
		                                          + мРаздел2_4.Области.П000080005013.Значение
		                                          + мРаздел2_4.Области.П000080006013.Значение
		                                          + мРаздел2_4.Области.П000080007013.Значение
		                                          + РасчетСуммМнЧ("П000080008013");
		
		мРаздел2_4.Области.П000080009014.Значение = ОкрП000080001014
		                                          + ОкрП000080002014
		                                          + ОкрП000080003014
		                                          + ОкрП000080004014
		                                          + ОкрП000080005014
		                                          + ОкрП000080006014
		                                          + ОкрП000080007014
		                                          + РасчетСуммМнЧ("П000080008014");
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3_1" Тогда
	
		// Раздел III
		// Таблица 9
		
		ОкрП000090001203 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000090001203.Значение);
		ОкрП000090001303 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000090001303.Значение);
		ОкрП000090001403 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000090001403.Значение);
		
		ОкрП000090001204 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000090001204.Значение);
		ОкрП000090001304 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000090001304.Значение);
		ОкрП000090001404 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000090001404.Значение);
		
		// Табл.9	 
		// размер страхового тарифа
		мРаздел3_1.Области.П000090001010.Значение = мРаздел3_1.Области.П000090001006.Значение
		                                          * (1 - мРаздел3_1.Области.П000090001007.Значение / 100
		                                               + мРаздел3_1.Области.П000090001009.Значение / 100);

		мРаздел3_1.Области.П000090001103.Значение = ОкрП000090001203
		                                          + ОкрП000090001303
		                                          + ОкрП000090001403;
		
		мРаздел3_1.Области.П000090001104.Значение = ОкрП000090001204
		                                          + ОкрП000090001304
		                                          + ОкрП000090001404;
		
		// Таблица 10
		
		ОкрП000100001003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100001003.Значение);
		ОкрП000100002401 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100002401.Значение);
		ОкрП000100002501 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100002501.Значение);
		ОкрП000100002601 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100002601.Значение);
		ОкрП000100003003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100003003.Значение);
		ОкрП000100004003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100004003.Значение);
		ОкрП000100005003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100005003.Значение);
		ОкрП000100006003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100006003.Значение);
		ОкрП000100009003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100009003.Значение);
		ОкрП000100010401 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100010401.Значение);
		ОкрП000100010501 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100010501.Значение);
		ОкрП000100010601 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100010601.Значение);
		ОкрП000100011403 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100011403.Значение);
		ОкрП000100011503 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100011503.Значение);
		ОкрП000100011603 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100011603.Значение);
		ОкрП000100012003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100012003.Значение);
		ОкрП000100013003 = ОкруглитьЧислоПоФормату(мРаздел3_1.Области.П000100013003.Значение);
		
		// строка 2
		мРаздел3_1.Области.П000100002301.Значение = ОкрП000100002401
		                                          + ОкрП000100002501
		                                          + ОкрП000100002601;

		// строка 7
		мРаздел3_1.Области.П000100007003.Значение = ОкрП000100001003
		                                          + мРаздел3_1.Области.П000100002003.Значение
		                                          + ОкрП000100003003
		                                          + ОкрП000100004003
		                                          + ОкрП000100005003
		                                          + ОкрП000100006003;
		
		// строка 10
		мРаздел3_1.Области.П000100010201.Значение = ОкрП000100010401
		                                          + ОкрП000100010501
		                                          + ОкрП000100010601;
		
		// строка 13
		мРаздел3_1.Области.П000100013003.Значение = ОкрП000100009003
		                                          + мРаздел3_1.Области.П000100010003.Значение
		                                          + мРаздел3_1.Области.П000100011003.Значение
		                                          + ОкрП000100012003;

		// строки 8 и 14
		Если мРаздел3_1.Области.П000100013003.Значение > мРаздел3_1.Области.П000100007003.Значение Тогда
			мРаздел3_1.Области.П000100008003.Значение = мРаздел3_1.Области.П000100013003.Значение
			                                          - мРаздел3_1.Области.П000100007003.Значение;
			мРаздел3_1.Области.П000100014003.Значение = 0;
		Иначе
			мРаздел3_1.Области.П000100008003.Значение = 0;
			мРаздел3_1.Области.П000100014003.Значение = мРаздел3_1.Области.П000100007003.Значение
			                                          - мРаздел3_1.Области.П000100013003.Значение;
		КонецЕсли;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3_2" Тогда
		
		// Табл.11
		ОкрП000110001004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110001004.Значение);
		ОкрП000110002004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110002004.Значение);
		ОкрП000110003004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110003004.Значение);
		ОкрП000110004004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110004004.Значение);
		ОкрП000110005004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110005004.Значение);
		ОкрП000110006004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110006004.Значение);
		ОкрП000110007004 = ОкруглитьЧислоПоФормату(мРаздел3_2.Области.П000110007004.Значение);
		
		мРаздел3_2.Области.П000110009004.Значение = ОкрП000110001004
		                                          + ОкрП000110003004
		                                          + ОкрП000110005004
		                                          + ОкрП000110007004
		                                          + РасчетСуммМнЧ("П000110008004");

		мРаздел3_2.Области.П000110010004.Значение = ОкрП000110001004
		                                          + ОкрП000110002004
		                                          + ОкрП000110003004
		                                          + ОкрП000110004004
		                                          + ОкрП000110005004
		                                          + ОкрП000110006004
		                                          + ОкрП000110007004
		                                          + РасчетСуммМнЧ("П000110008004");

		мРаздел3_2.Области.П000110010003.Значение = мРаздел3_2.Области.П000110001003.Значение
		                                          + мРаздел3_2.Области.П000110002003.Значение
		                                          + мРаздел3_2.Области.П000110003003.Значение
		                                          + мРаздел3_2.Области.П000110004003.Значение
		                                          + мРаздел3_2.Области.П000110005003.Значение
		                                          + мРаздел3_2.Области.П000110006003.Значение
		                                          + РасчетСуммМнЧ("П000110008003");

		// Табл.12 строка 4
		мРаздел3_2.Области.П000120004003.Значение = мРаздел3_2.Области.П000120001003.Значение
		                                          + мРаздел3_2.Области.П000120003003.Значение;
		
		мРаздел3_2.Области.П000120004004.Значение = мРаздел3_2.Области.П000120001004.Значение
		                                          + мРаздел3_2.Области.П000120003004.Значение;

	Иначе
		// ОБЩИЙ РАСЧЕТ ПОКАЗАТЕЛЕЙ ВСЕХ РАЗДЕЛОВ ДЕКЛАРАЦИИ

		// Используется, например, в случае изменения точности или единицы измерения
		// (так как разделы взаимосвязаны, порядок пересчета не важен).
		Расчет("Раздел1_1");
		Расчет("Раздел1_2");
		Расчет("Раздел2_1");
		Расчет("Раздел2_2");
		Расчет("Раздел2_3");
		Расчет("Раздел2_4");
		Расчет("Раздел3_1");
		Расчет("Раздел3_2");
		
	КонецЕсли;

КонецПроцедуры // Расчет()


////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

// Выполняет вывод полей запроса в табличный документ
Процедура ВывестиРезультатЗапросаВДокумент(РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого Колонка из РезультатЗапроса.Колонки Цикл
			УстановитьЗначениеПоказателя(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвтоВнутренний() Экспорт

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации(); РедакцияКонфигурации = РегламентированнаяОтчетность.РедакцияКонфигурации();
	
	// Данные берутся по обособленному подразделению (указанной организации)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамОрганизация",              Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация",      ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("парамВидСтавокЕСНиПФР",         Организация.ВидСтавокЕСНиПФР);
	Запрос.УстановитьПараметр("парамНачалоГода",               НачалоГода(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамГод",					   Год(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамКонецОтчетногоПериода",    КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Месяц1",                        Месяц(мДатаКонцаПериодаОтчета) - 2);
	Запрос.УстановитьПараметр("Месяц2",                        Месяц(мДатаКонцаПериодаОтчета) - 1);
	Запрос.УстановитьПараметр("Месяц3",                        Месяц(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КодДоходаПособияЗаСчетФСС",     Справочники.ДоходыЕСН.ПособияЗаСчетФСС);
	Запрос.УстановитьПараметр("Счет69_01",                     ПланыСчетов.Хозрасчетный.ФСС);
	
	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	// конец месяца налогового периода
	КонецМесяца = КонецМесяца(НачалоГода(мДатаКонцаПериодаОтчета));
	// первый месяц
	ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
	// прибавим остальные месяцы
	Для Сч = 2 По Месяц(мДатаКонцаПериодаОтчета) Цикл
		КонецМесяца = КонецМесяца(КонецМесяца+1);
    	ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	
    // УчетнаяПолитикаНалоговыйУчет
	// Таблица УчетнаяПолитикаНалоговыйУчетУСН - это список периодов, когда организация переходила на УСН
	// поля:
	//		УСН, 
	//		Месяц - месяц налогового периода
	// Описание:	
	//	Выбираем Из Периоды (таблица - список периодов с начала года по текущий период)
	//	Внутреннее соединение с "псевдосрезом" последних регистра УчетнаяПолитикаНалоговыйУчет
	//	по равенству периодов
	//  условие: что организация использует УСН
	
	Если ИДКонфигурации <> "ЗУП" Тогда
		
		УчетнаяПолитикаНалоговыйУчет = 
		"ВЫБРАТЬ
		|	МЕСЯЦ(Периоды.Период) КАК Месяц,
		|	ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчет.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК УСН
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
		|	ИЗ
		|		("+ ПериодыТекст +") КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период И УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация
		|
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период И УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация И ( ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчет.СистемаНалогообложения = &СистемаНО ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ)";	
	Иначе
	 	УчетнаяПолитикаНалоговыйУчет = 
		"ВЫБРАТЬ
		|	МЕСЯЦ(Периоды.Период) КАК Месяц,
		|	УчетнаяПолитикаНалоговыйУчет.УСН КАК УСН
		|ИЗ
		|	(ВЫБРАТЬ
		|		Периоды.Период КАК Период,
		|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
		|	ИЗ
		|		("+ ПериодыТекст +") КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период И УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация
		|
		|	СГРУППИРОВАТЬ ПО
		|		Периоды.Период) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период И УчетнаяПолитикаНалоговыйУчет.Организация = &парамГоловнаяОрганизация И (УчетнаяПолитикаНалоговыйУчет.УСН)";	
	КонецЕсли;

	// ДоходыЕСН 
	//	ФизЛицо 	 	- физическое лицо 
	//	Месяц			- месяц налогового периода
	//	КодДоходаЕСН	- код дохода с точки зрения ЕСН
	//	Результат		- сумма дохода
	//	Скидка			- необлагаемая ЕСН сумма дохода
	// Описание:
	//  Выбираются зарегистрированные доходы ЕСН, относящиеся к видам деятельности 
	//  облагаемым налогом на прибыль, строго по заданной организации. 
	
	ДоходыЕСН = 
	"ВЫБРАТЬ
	|	ЕСНСведенияОДоходах.ФизЛицо,
	|	МЕСЯЦ(ЕСНСведенияОДоходах.Период) КАК Месяц,
	|	ЕСНСведенияОДоходах.КодДоходаЕСН КАК КодДоходаЕСН,
	|	ЕСНСведенияОДоходах.Результат КАК Результат,
	|	ЕСНСведенияОДоходах.Скидка КАК Скидка
	|ИЗ
	|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|
	|ГДЕ
	|	ЕСНСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И &парамКонецОтчетногоПериода И
	|	(НЕ(ЕСНСведенияОДоходах.ОблагаетсяЕНВД)) И
	|	ЕСНСведенияОДоходах.ОбособленноеПодразделение = &парамОрганизация";
	
	// НалоговыеБазыПоФизлицам 
	//	ФизЛицо 	 	- физическое лицо 
	//	БазаФедеральныйБюджет - налоговая база по ФБ
	//	БазаФСС - налоговая база по ФСС
	//	БазаФОМС - налоговая база по ФОМС
	// Описание:
	//  Выбираются зарегистрированные доходы ЕСН за вычетом скидок строго по заданной организации. 
	//	Данные нужны для раздела 2.1.
	
	НалоговыеБазыПоФизлицам = 
	"ВЫБРАТЬ
	|	ЕСННачисления.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВЫБОР КОГДА ЕСННачисления.КодДоходаЕСН.ВходитВБазуФСС И УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL ТОГДА ЕСННачисления.Результат - ЕСННачисления.Скидка ИНАЧЕ 0 КОНЕЦ) КАК БазаФСС,
	|	СУММА(ВЫБОР КОГДА ЕСННачисления.КодДоходаЕСН.ВходитВБазуФСС И УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL ТОГДА ЕСННачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК НалоговаяБазаФСС,
	|	СУММА(ВЫБОР КОГДА ЕСННачисления.КодДоходаЕСН.ВходитВБазуФСС И УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL ТОГДА ЕСННачисления.Скидка ИНАЧЕ 0 КОНЕЦ) КАК СкидкаФСС
	|ИЗ
	|	(" + ДоходыЕСН + " ) КАК ЕСННачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ("+УчетнаяПолитикаНалоговыйУчет+") КАК УчетнаяПолитикаНалоговыйУчетУСН
	|		ПО ЕСННачисления.Месяц = УчетнаяПолитикаНалоговыйУчетУСН.Месяц
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСННачисления.ФизЛицо";
							  
	// Регрессивная шкала применяется всегда
	
	НалоговаяБазаПоФизлицамПределам = "
	|Выбрать 
	|	Сумма(ДоходыПоФЛ.НалоговаяБазаФСС)		КАК П000010001003, 
	|	Сумма(ЕСНИсчисленныйОбороты.ПримененнаяЛьготаФССОборот) КАК П000010002003, 
	|	Сумма(ВЫБОР КОГДА ДоходыПоФЛ.Физлицо.Пол = &ПолЖенский И ДоходыПоФЛ.БазаФСС <> 0 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ)	КАК П000010003007,

	//	Строка Налоговые базы первого предела (до 100 000 рублей) 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 1 	ТОГДА ДоходыПоФЛ.БазаФСС ИНАЧЕ 0 КОНЕЦ) КАК П000010004003, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 1 	ТОГДА ЕСНИсчисленныйОбороты.ФССОборот ИНАЧЕ 0 КОНЕЦ) 	КАК П000010004005,
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 1 	ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000010004006, 
	//	Строки Налоговые базы второго предела (до 300 000 рублей) 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 2 	ТОГДА СтавкиФСС.СуммаДоходаС ИНАЧЕ 0 КОНЕЦ) КАК П000010005003, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 2 	ТОГДА ЕСНИсчисленныйОбороты.ФССОборот ИНАЧЕ 0 КОНЕЦ) 	КАК П000010005005,
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 2 	ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000010005006, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 2 	ТОГДА ДоходыПоФЛ.БазаФСС - СтавкиФСС.СуммаДоходаС ИНАЧЕ 0 КОНЕЦ) КАК П000010006003, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 2 	ТОГДА ЕСНИсчисленныйОбороты.ФССОборот - СтавкиФСС.ФССвРублях ИНАЧЕ 0 КОНЕЦ) КАК П000010006005, 
	//	Строки 031 и 032 - Налоговые базы третьего предела (до 600 000 рублей) 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 3 	ТОГДА СтавкиФСС.СуммаДоходаС ИНАЧЕ 0 КОНЕЦ) КАК П000010007003, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 3 	ТОГДА ЕСНИсчисленныйОбороты.ФССОборот ИНАЧЕ 0 КОНЕЦ) 	КАК П000010007005,
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 3 	ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000010007006, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 3 	ТОГДА ДоходыПоФЛ.БазаФСС - СтавкиФСС.СуммаДоходаС ИНАЧЕ 0 КОНЕЦ) КАК П000010008003, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 3 	ТОГДА ЕСНИсчисленныйОбороты.ФССОборот - СтавкиФСС.ФССвРублях ИНАЧЕ 0 КОНЕЦ) КАК П000010008005, 
	//	Строки 041 и 042 - Налоговые базы четвертого предела (свыше 600000 рублей) 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 4 	ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000010009006, 
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 4 	ТОГДА ДоходыПоФЛ.БазаФСС - СтавкиФСС.СуммаДоходаС ИНАЧЕ 0 КОНЕЦ) КАК П000010009003,
	|	Сумма(Выбор КОГДА СтавкиФСС.НомерСтрокиСтавок = 4 	ТОГДА ЕСНИсчисленныйОбороты.ФССОборот - СтавкиФСС.ФССвРублях ИНАЧЕ 0 КОНЕЦ) КАК П000010009005
	|ИЗ 
	|	(" + НалоговыеБазыПоФизлицам + ") КАК ДоходыПоФЛ 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахЕСНиПФР КАК СтавкиФСС
	|		ПО (СтавкиФСС.ВидСтавокЕСНиПФР = &парамВидСтавокЕСНиПФР) И СтавкиФСС.Год = &парамГод И ДоходыПоФЛ.БазаФСС > СтавкиФСС.СуммаДоходаС И ДоходыПоФЛ.БазаФСС <= СтавкиФСС.СуммаДоходаПо
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЕСНИсчисленный.Обороты(&ДатаНачала, &ДатаОкончания, , Организация = &парамОрганизация) КАК ЕСНИсчисленныйОбороты
	|	ПО ДоходыПоФЛ.ФизЛицо = ЕСНИсчисленныйОбороты.ФизЛицо
	|";
	
	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	
	// Раздел 2
	
	Запрос.УстановитьПараметр("ПолЖенский", 	Перечисления.ПолФизическихЛиц.Женский);
	Запрос.УстановитьПараметр("ДатаНачала", 	мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", 	мДатаКонцаПериодаОтчета);
	
	Запрос.Текст = НалоговаяБазаПоФизлицамПределам;
	ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
	
	// РАСХОДЫ НА ЦЕЛИ ОБЯЗАТЕЛЬНОГО СОЦИАЛЬНОГО СТРАХОВАНИЯ С НАЧАЛА ГОДА
	
	// Раздел I (табл 3), Раздел II (табл 6) и Раздел III (табл 11)
	
	Если ИДКонфигурации <> "БП" И ИДКонфигурации <> "БПКОРП" И ИДКонфигурации <> "БАУКОРП" И ИДКонфигурации <> "БАУ" Тогда
		
		СписокОплатыБЛ = Новый СписокЗначений();
		СписокОплатыБЛ.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ);
		СписокОплатыБЛ.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам);
		СписокОплатыБЛ.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет);
		СписокОплатыБЛ.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами);
		СписокОплатыБЛ.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве);
		СписокПособий = Новый СписокЗначений();
		СписокПособий.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВСвязиСоСмертью);
		СписокПособий.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриПостановкеНаУчетВРанниеСрокиБеременности);
		СписокПособий.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриРожденииРебенка);
		СписокПособий.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриУсыновленииРебенка);
		Запрос.УстановитьПараметр("СписокОплатыБЛ", 					СписокОплатыБЛ);
		Запрос.УстановитьПараметр("СписокПособий", 						СписокПособий);
		Запрос.УстановитьПараметр("ОплатаБЛПоТравмеНаПроизводстве", 	ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве);
		Запрос.УстановитьПараметр("ОплатаПоСреднемуБЛ", 				ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ);
		Запрос.УстановитьПараметр("ОтпускПоБеременностиИРодам", 		ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам);
		Запрос.УстановитьПараметр("ПособиеПоУходуЗаРебенкомДо1_5Лет", 	ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет);
		Запрос.УстановитьПараметр("ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами);
		Запрос.УстановитьПараметр("ВСвязиСоСмертью",					ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВСвязиСоСмертью);
		Запрос.УстановитьПараметр("ПриПостановкеНаУчетВРанниеСрокиБеременности",ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриПостановкеНаУчетВРанниеСрокиБеременности);
		Запрос.УстановитьПараметр("ПриРожденииРебенка",					ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриРожденииРебенка);
		Запрос.УстановитьПараметр("ПриУсыновленииРебенка",				ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриУсыновленииРебенка);
		Запрос.УстановитьПараметр("ПоДням", Перечисления.ВидыУчетаВремени.ПоДням);
		Запрос.УстановитьПараметр("ПособияЗаСчетФСС", Справочники.ДоходыЕСН.ПособияЗаСчетФСС);
		Запрос.УстановитьПараметр("ДатаЗакона202ФЗ", '20050101');

		РасходыНаЦелиОбязательногоСС = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ЕСНОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030001004,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ЕСНОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030002004,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ЕСНОсновныеНачисления.ВидРасчета = &ПособиеПоУходуЗаРебенкомДо1_5Лет ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030003004,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ЕСНОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030006004,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ЕСНОсновныеНачисления.ВидРасчета = &ПособиеПоУходуЗаРебенкомДо1_5Лет ТОГДА РАЗНОСТЬДАТ(ЕСНОсновныеНачисления.ПериодДействияНачало, ЕСНОсновныеНачисления.ПериодДействияКонец, ДЕНЬ) ИНАЧЕ 0 КОНЕЦ) КАК П000030003003,
		|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ЕСНОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060001004,
		|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ЕСНОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060002004,
		|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ЕСНОсновныеНачисления.ВидРасчета = &ПособиеПоУходуЗаРебенкомДо1_5Лет ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060003004,
		|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ЕСНОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060006004,
		|	СУММА(ВЫБОР КОГДА (ЕСНОсновныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ЕСНОсновныеНачисления.ВидРасчета = &ПособиеПоУходуЗаРебенкомДо1_5Лет ТОГДА РАЗНОСТЬДАТ(ЕСНОсновныеНачисления.ПериодДействияНачало, ЕСНОсновныеНачисления.ПериодДействияКонец, ДЕНЬ) ИНАЧЕ 0 КОНЕЦ) КАК П000060003003,
		|	СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.ВидРасчета = &ОплатаБЛПоТравмеНаПроизводстве ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000110001004
		|ИЗ
		|	РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ("+УчетнаяПолитикаНалоговыйУчет+") КАК УчетнаяПолитикаНалоговыйУчетУСН
		|		ПО МЕСЯЦ(ЕСНОсновныеНачисления.ПериодРегистрации) = УчетнаяПолитикаНалоговыйУчетУСН.Месяц
		|
		|ГДЕ
		|	ЕСНОсновныеНачисления.ПериодРегистрации >= &ДатаНачала И
		|	ЕСНОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания И
		|	ЕСНОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация И
		|	ЕСНОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ) И
		|	ЕСНОсновныеНачисления.КодДоходаЕСН = &ПособияЗаСчетФСС";
		
		Запрос.Текст = РасходыНаЦелиОбязательногоСС;
		ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
		
		Если ИДКонфигурации = "ЗУП" ИЛИ ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
			РасходыНаЦелиОбязательногоСС = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ И ОсновныеНачисления.ПериодДействияНачало = ОсновныеНачисления.ДатаНачалаСобытия ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000030001001,
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ОсновныеНачисления.НормаДней - ВЫБОР КОГДА (ДанныеУчетаБЛ.ДниЗаСчетРаботодателя) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ДанныеУчетаБЛ.ДниЗаСчетРаботодателя КОНЕЦ ИНАЧЕ 0 КОНЕЦ) КАК П000030001003,
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000030002003,
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000030006003,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ И ОсновныеНачисления.ПериодДействияНачало = ОсновныеНачисления.ДатаНачалаСобытия ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000060001001,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000060001003,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000060002003,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000060006003,
			|	СУММА(ВЫБОР КОГДА ОсновныеНачисления.ВидРасчета = &ОплатаБЛПоТравмеНаПроизводстве ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000110001003
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ("+УчетнаяПолитикаНалоговыйУчет+") КАК УчетнаяПолитикаНалоговыйУчетУСН
			|		ПО МЕСЯЦ(ОсновныеНачисления.ПериодРегистрации) = УчетнаяПолитикаНалоговыйУчетУСН.Месяц
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СУММА(ВЫБОР КОГДА НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК НеЕНВД,
			|			СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.ОблагаетсяЕНВД ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК ЕНВД,
			|			ЕСНОсновныеНачисления.Сотрудник КАК Сотрудник,
			|			ЕСНОсновныеНачисления.ВидРасчета КАК ВидРасчета,
			|			ЕСНОсновныеНачисления.ПериодРегистрации КАК ПериодРегистрации
			|		ИЗ
			|			РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
			|		
			|		ГДЕ
			|			ЕСНОсновныеНачисления.ПериодРегистрации >= &ДатаНачала И
			|			ЕСНОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания И
			|			ЕСНОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ) И
			|			ЕСНОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ЕСНОсновныеНачисления.Сотрудник,
			|			ЕСНОсновныеНачисления.ВидРасчета,
			|			ЕСНОсновныеНачисления.ПериодРегистрации) КАК РаспределениеПоВидамДеятельности
			|		ПО ОсновныеНачисления.Сотрудник = РаспределениеПоВидамДеятельности.Сотрудник И ОсновныеНачисления.ВидРасчета = РаспределениеПоВидамДеятельности.ВидРасчета И ОсновныеНачисления.ПериодРегистрации = РаспределениеПоВидамДеятельности.ПериодРегистрации
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ОсновныеНачисления.Регистратор КАК Регистратор,
			|			ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|			ВЫБОР КОГДА ОсновныеНачисления.ВидУчетаВремени = &ПоДням ТОГДА СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) ИНАЧЕ СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КОНЕЦ КАК ДниЗаСчетРаботодателя
			|		ИЗ
			|			(ВЫБРАТЬ
			|				ОсновныеНачисления.Регистратор КАК Регистратор,
			|				ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|				ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
			|				ОсновныеНачисления.ГрафикРаботы КАК ГрафикРаботы,
			|				ОсновныеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
			|				ОсновныеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
			|				ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец
			|			ИЗ
			|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|			
			|			ГДЕ
			|				ОсновныеНачисления.ПодразделениеОрганизации.Владелец = &парамОрганизация И
			|				ОсновныеНачисления.ПериодРегистрации >= &ДатаНачала И
			|				ОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания И
			|				ОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ) И
			|				ОсновныеНачисления.ДатаНачалаСобытия >= &ДатаЗакона202ФЗ И
			|				(РАЗНОСТЬДАТ(ОсновныеНачисления.ДатаНачалаСобытия, ОсновныеНачисления.ПериодДействияНачало, ДЕНЬ) < 2)) КАК ОсновныеНачисления
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
			|				ПО ОсновныеНачисления.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы И ОсновныеНачисления.ВидУчетаВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени И ОсновныеНачисления.ПериодДействияНачало <= ГрафикиРаботыПоВидамВремени.Дата И (ДОБАВИТЬКДАТЕ(ОсновныеНачисления.ДатаНачалаСобытия, ДЕНЬ, 1) >= ГрафикиРаботыПоВидамВремени.Дата) И (ОсновныеНачисления.ПериодДействияКонец >= ГрафикиРаботыПоВидамВремени.Дата)
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ОсновныеНачисления.Регистратор,
			|			ОсновныеНачисления.ВидУчетаВремени,
			|			ОсновныеНачисления.НомерСтроки) КАК ДанныеУчетаБЛ
			|		ПО ОсновныеНачисления.Регистратор = ДанныеУчетаБЛ.Регистратор И ОсновныеНачисления.НомерСтроки = ДанныеУчетаБЛ.НомерСтроки
			|
			|ГДЕ
			|	ОсновныеНачисления.ПериодРегистрации >= &ДатаНачала И
			|	ОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания И
			|	ОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ) И
			|	ОсновныеНачисления.ПодразделениеОрганизации.Владелец = &парамОрганизация";
			
		Иначе
			РасходыНаЦелиОбязательногоСС = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ И ОсновныеНачисления.ПериодДействияНачало = ОсновныеНачисления.ДатаНачалаСобытия ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000030001001,
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ОсновныеНачисления.НормаДней - ВЫБОР КОГДА (ДанныеУчетаБЛ.ДниЗаСчетРаботодателя) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ДанныеУчетаБЛ.ДниЗаСчетРаботодателя КОНЕЦ ИНАЧЕ 0 КОНЕЦ) КАК П000030001003,
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000030002003,
			|	СУММА(ВЫБОР КОГДА РаспределениеПоВидамДеятельности.НеЕНВД <> 0 И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000030006003,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ И ОсновныеНачисления.ПериодДействияНачало = ОсновныеНачисления.ДатаНачалаСобытия ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000060001001,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ОсновныеНачисления.ВидРасчета = &ОплатаПоСреднемуБЛ ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000060001003,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ОсновныеНачисления.ВидРасчета = &ОтпускПоБеременностиИРодам ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000060002003,
			|	СУММА(ВЫБОР КОГДА (РаспределениеПоВидамДеятельности.ЕНВД <> 0 ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ОсновныеНачисления.ВидРасчета = &ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000060006003,
			|	СУММА(ВЫБОР КОГДА ОсновныеНачисления.ВидРасчета = &ОплатаБЛПоТравмеНаПроизводстве ТОГДА ОсновныеНачисления.НормаДней ИНАЧЕ 0 КОНЕЦ) КАК П000110001003
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ("+УчетнаяПолитикаНалоговыйУчет+") КАК УчетнаяПолитикаНалоговыйУчетУСН
			|		ПО МЕСЯЦ(ОсновныеНачисления.ПериодРегистрации) = УчетнаяПолитикаНалоговыйУчетУСН.Месяц
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СУММА(ВЫБОР КОГДА НЕ(ЕСНОсновныеНачисления.ОблагаетсяЕНВД) ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК НеЕНВД,
			|			СУММА(ВЫБОР КОГДА ЕСНОсновныеНачисления.ОблагаетсяЕНВД ТОГДА ЕСНОсновныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК ЕНВД,
			|			ЕСНОсновныеНачисления.ФизЛицо КАК ФизЛицо,
			|			ЕСНОсновныеНачисления.Приказ КАК Приказ,
			|			ЕСНОсновныеНачисления.ВидРасчета КАК ВидРасчета,
			|			ЕСНОсновныеНачисления.ПериодРегистрации КАК ПериодРегистрации
			|		ИЗ
			|			РегистрРасчета.ЕСНОсновныеНачисления КАК ЕСНОсновныеНачисления
			|		
			|		ГДЕ
			|			ЕСНОсновныеНачисления.ПериодРегистрации >= &ДатаНачала И
			|			ЕСНОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания И
			|			ЕСНОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ) И
			|			ЕСНОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ЕСНОсновныеНачисления.ФизЛицо,
			|			ЕСНОсновныеНачисления.Приказ,
			|			ЕСНОсновныеНачисления.ВидРасчета,
			|			ЕСНОсновныеНачисления.ПериодРегистрации) КАК РаспределениеПоВидамДеятельности
			|		ПО ОсновныеНачисления.ФизЛицо = РаспределениеПоВидамДеятельности.ФизЛицо И ОсновныеНачисления.Приказ = РаспределениеПоВидамДеятельности.Приказ И ОсновныеНачисления.ВидРасчета = РаспределениеПоВидамДеятельности.ВидРасчета И ОсновныеНачисления.ПериодРегистрации = РаспределениеПоВидамДеятельности.ПериодРегистрации
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ОсновныеНачисления.Регистратор КАК Регистратор,
			|			ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|			ВЫБОР КОГДА ОсновныеНачисления.ВидУчетаВремени = &ПоДням ТОГДА СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) ИНАЧЕ СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КОНЕЦ КАК ДниЗаСчетРаботодателя
			|		ИЗ
			|			(ВЫБРАТЬ
			|				ОсновныеНачисления.Регистратор КАК Регистратор,
			|				ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|				ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
			|				ОсновныеНачисления.ГрафикРаботы КАК ГрафикРаботы,
			|				ОсновныеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
			|				ОсновныеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
			|				ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец
			|			ИЗ
			|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|			
			|			ГДЕ
			|				ОсновныеНачисления.ПодразделениеОрганизации.Владелец = &парамОрганизация И
			|				ОсновныеНачисления.ПериодРегистрации >= &ДатаНачала И
			|				ОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания И
			|				ОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ) И
			|				ОсновныеНачисления.ДатаНачалаСобытия >= &ДатаЗакона202ФЗ И
			|				(РАЗНОСТЬДАТ(ОсновныеНачисления.ДатаНачалаСобытия, ОсновныеНачисления.ПериодДействияНачало, ДЕНЬ) < 2)) КАК ОсновныеНачисления
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
			|				ПО ОсновныеНачисления.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы И ОсновныеНачисления.ВидУчетаВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени И ОсновныеНачисления.ПериодДействияНачало <= ГрафикиРаботыПоВидамВремени.Дата И (ДОБАВИТЬКДАТЕ(ОсновныеНачисления.ДатаНачалаСобытия, ДЕНЬ, 1) >= ГрафикиРаботыПоВидамВремени.Дата) И (ОсновныеНачисления.ПериодДействияКонец >= ГрафикиРаботыПоВидамВремени.Дата)
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ОсновныеНачисления.Регистратор,
			|			ОсновныеНачисления.ВидУчетаВремени,
			|			ОсновныеНачисления.НомерСтроки) КАК ДанныеУчетаБЛ
			|		ПО ОсновныеНачисления.Регистратор = ДанныеУчетаБЛ.Регистратор И ОсновныеНачисления.НомерСтроки = ДанныеУчетаБЛ.НомерСтроки
			|
			|ГДЕ
			|	ОсновныеНачисления.ПериодРегистрации >= &ДатаНачала И
			|	ОсновныеНачисления.ПериодРегистрации <= &ДатаОкончания И
			|	ОсновныеНачисления.ВидРасчета В(&СписокОплатыБЛ) И
			|	ОсновныеНачисления.ПодразделениеОрганизации.Владелец = &парамОрганизация";
			
		КонецЕсли;
		
		Запрос.Текст = РасходыНаЦелиОбязательногоСС;
		ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
		
		РасходыНаЦелиОбязательногоСС = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНДополнительныеНачисления.ОблагаетсяЕНВД) И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриРожденииРебенка ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000030004003,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНДополнительныеНачисления.ОблагаетсяЕНВД) И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриРожденииРебенка ТОГДА ЕСНДополнительныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030004004,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНДополнительныеНачисления.ОблагаетсяЕНВД) И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ЕСНДополнительныеНачисления.ВидРасчета = &ВСвязиСоСмертью ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000030005003,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНДополнительныеНачисления.ОблагаетсяЕНВД) И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ЕСНДополнительныеНачисления.ВидРасчета = &ВСвязиСоСмертью ТОГДА ЕСНДополнительныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030005004,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНДополнительныеНачисления.ОблагаетсяЕНВД) И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриПостановкеНаУчетВРанниеСрокиБеременности ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000030007003,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНДополнительныеНачисления.ОблагаетсяЕНВД) И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриПостановкеНаУчетВРанниеСрокиБеременности ТОГДА ЕСНДополнительныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030007004,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНДополнительныеНачисления.ОблагаетсяЕНВД) И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриУсыновленииРебенка ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000030008003,
		|	СУММА(ВЫБОР КОГДА НЕ(ЕСНДополнительныеНачисления.ОблагаетсяЕНВД) И (УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ NULL) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриУсыновленииРебенка ТОГДА ЕСНДополнительныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000030008004,
		|	СУММА(ВЫБОР КОГДА (ЕСНДополнительныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриРожденииРебенка ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000060004003,
		|	СУММА(ВЫБОР КОГДА (ЕСНДополнительныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриРожденииРебенка ТОГДА ЕСНДополнительныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060004004,
		|	СУММА(ВЫБОР КОГДА (ЕСНДополнительныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ЕСНДополнительныеНачисления.ВидРасчета = &ВСвязиСоСмертью ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000060005003,
		|	СУММА(ВЫБОР КОГДА (ЕСНДополнительныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ЕСНДополнительныеНачисления.ВидРасчета = &ВСвязиСоСмертью ТОГДА ЕСНДополнительныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060005004,
		|	СУММА(ВЫБОР КОГДА (ЕСНДополнительныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриПостановкеНаУчетВРанниеСрокиБеременности ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000060007003,
		|	СУММА(ВЫБОР КОГДА (ЕСНДополнительныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриПостановкеНаУчетВРанниеСрокиБеременности ТОГДА ЕСНДополнительныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060007004,
		|	СУММА(ВЫБОР КОГДА (ЕСНДополнительныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриУсыновленииРебенка ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК П000060008003,
		|	СУММА(ВЫБОР КОГДА (ЕСНДополнительныеНачисления.ОблагаетсяЕНВД ИЛИ УчетнаяПолитикаНалоговыйУчетУСН.УСН ЕСТЬ НЕ NULL) И ЕСНДополнительныеНачисления.ВидРасчета = &ПриУсыновленииРебенка ТОГДА ЕСНДополнительныеНачисления.Результат ИНАЧЕ 0 КОНЕЦ) КАК П000060008004
		|ИЗ
		|	РегистрРасчета.ЕСНДополнительныеНачисления КАК ЕСНДополнительныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ("+УчетнаяПолитикаНалоговыйУчет+") КАК УчетнаяПолитикаНалоговыйУчетУСН
		|		ПО МЕСЯЦ(ЕСНДополнительныеНачисления.ПериодРегистрации) = УчетнаяПолитикаНалоговыйУчетУСН.Месяц
		|
		|ГДЕ
		|	ЕСНДополнительныеНачисления.ПериодРегистрации >= &ДатаНачала И
		|	ЕСНДополнительныеНачисления.ПериодРегистрации <= &ДатаОкончания И
		|	ЕСНДополнительныеНачисления.ВидРасчета В(&СписокПособий) И
		|	ЕСНДополнительныеНачисления.ОбособленноеПодразделение = &парамОрганизация";
		
		Запрос.Текст = РасходыНаЦелиОбязательногоСС;
		ВывестиРезультатЗапросаВДокумент(Запрос.Выполнить());
			
	КонецЕсли;
	
	// Таблица 2
	// Заполняем по данным бухгалтерского учета.
	// Инициализация
	
	Если Метаданные.Обработки.Найти("БухгалтерскиеИтоги") <> Неопределено Тогда
		ПС = ПланыСчетов["Хозрасчетный"];
		Счет51    = ПС.РасчетныеСчета;
		Счет69_01 = ПС.ФСС;
		Счет69_11 = ПС.ФСС_НСиПЗ;
		
		// Бухгалтерский итоги по счетам
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();

		// Бухгалтерские итоги по аналитике
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();

		НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
		Если НомерМесяца = "12" Тогда
			НомерМесяца = "0";
		КонецЕсли;

		НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
		НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");
		
		Номер1МесяцаКвартала = НомерКвартала * 3 - 2;
		Номер2МесяцаКвартала = НомерКвартала * 3 - 1;
		Номер3МесяцаКвартала = НомерКвартала * 3;
		
		ДатаВ1МесяцеКвартала = Дата(НомерГода, Номер1МесяцаКвартала, 1);
		
		ДатаНачала1МесяцаКвартала = НачалоМесяца(ДатаВ1МесяцеКвартала);
		ДатаКонца1МесяцаКвартала  = КонецМесяца(ДатаВ1МесяцеКвартала);
		
		ДатаВо2МесяцеКвартала = Дата(НомерГода, Номер2МесяцаКвартала, 1);
		
		ДатаНачала2МесяцаКвартала = НачалоМесяца(ДатаВо2МесяцеКвартала);
		ДатаКонца2МесяцаКвартала  = КонецМесяца(ДатаВо2МесяцеКвартала);

		ДатаВ3МесяцеКвартала = Дата(НомерГода, Номер3МесяцаКвартала, 1);
		
		ДатаНачала3МесяцаКвартала = НачалоМесяца(ДатаВ3МесяцеКвартала);
		ДатаКонца3МесяцаКвартала  = КонецМесяца(ДатаВ3МесяцеКвартала);

		// Извлекаем данные за 1 месяц квартала
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 3 "Начислено ЕСН, зачисляемого в ФСС РФ"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		УстановитьЗначениеПоказателя("П000020003401", СуммаКО);

		// строка 5 "Не принято к зачету расходов"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		УстановитьЗначениеПоказателя("П000020005401", СуммаКО);

		// строка 15 "Расходы на цели обязательного социального страхования"
		СуммаДО = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		УстановитьЗначениеПоказателя("П000020015401", СуммаДО);
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		// строка 6 "Получено от исполнительного органа Фонда"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", , Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		УстановитьЗначениеПоказателя("П000020006401", СуммаКО);
		
		// строка 16 "Перечислен единый социальный налог"
		СуммаДО = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", , Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		УстановитьЗначениеПоказателя("П000020016403", СуммаДО);
		
		// Извлекаем данные за 2 месяц квартала
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 3 "Начислено ЕСН, зачисляемого в ФСС РФ"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		УстановитьЗначениеПоказателя("П000020003501", СуммаКО);

		// строка 5 "Не принято к зачету расходов"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		УстановитьЗначениеПоказателя("П000020005501", СуммаКО);

		// строка 15 "Расходы на цели обязательного социального страхования"
		СуммаДО = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		УстановитьЗначениеПоказателя("П000020015501", СуммаДО);
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		// строка 6 "Получено от исполнительного органа Фонда"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", , Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		УстановитьЗначениеПоказателя("П000020006501", СуммаКО);
		
		// строка 16 "Перечислен единый социальный налог"
		СуммаДО = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", , Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		УстановитьЗначениеПоказателя("П000020016503", СуммаДО);
		
		// Извлекаем данные за 3 месяц квартала
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);
		
		// строка 3 "Начислено ЕСН, зачисляемого в ФСС РФ"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		УстановитьЗначениеПоказателя("П000020003601", СуммаКО);

		// строка 5 "Не принято к зачету расходов"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		УстановитьЗначениеПоказателя("П000020005601", СуммаКО);

		// строка 15 "Расходы на цели обязательного социального страхования"
		СуммаДО = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		УстановитьЗначениеПоказателя("П000020015601", СуммаДО);
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		// строка 6 "Получено от исполнительного органа Фонда"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", , Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		УстановитьЗначениеПоказателя("П000020006601", СуммаКО);

		// строка 16 "Перечислен единый социальный налог"
		СуммаДО = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", , Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		УстановитьЗначениеПоказателя("П000020016603", СуммаДО);
		
		// В целом за квартал

		// Бухгалтерские итоги по счетам и аналитике
		ИтогиРС = "НачальныйОстатокДт, НачальныйОстатокКт, КонечныйОстатокДт, КонечныйОстатокКт, ОборотДт, ОборотКт";
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);

		СуммаСНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		СуммаСНК = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		СуммаСКД = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт",  "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		П000020001003_1К = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		П000020001003_1Д = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		П000020014003_1Д = П000020001003_1Д;
		
		П000020011003_1Д = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		П000020001003_2К = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		
		// строка 1 "Задолженность за страхователем на начало года"
		УстановитьЗначениеПоказателя("П000020001003", П000020001003_1К + П000020001003_2К);
		
		// строка 13 "Задолженность за исполнительным органом Фонда"
		СуммаСНД = мБухИтогиРС.ПолучитьИтог("СуммаНачальныйОстатокДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		УстановитьЗначениеПоказателя("П000020013003", СуммаСНД);
		
		// строка 14 "Переплата ЕСН"
		УстановитьЗначениеПоказателя("П000020014003", П000020014003_1Д);

		// строка 11 ""переплата по единому социальному налогу"
		П000020011003 = П000020011003_1Д;

		// строка 3 "Начислено ЕСН, зачисляемого в ФСС РФ"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		УстановитьЗначениеПоказателя("П000020003003", СуммаКО);
		
		// на начало квартала
		мРаздел1_1.Области.П000020003201.Значение = мРаздел1_1.Области.П000020003003.Значение
		                                          - (мРаздел1_1.Области.П000020003401.Значение
		                                           + мРаздел1_1.Области.П000020003501.Значение
		                                           + мРаздел1_1.Области.П000020003601.Значение);

		// строка 5 "Не принято к зачету расходов"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		УстановитьЗначениеПоказателя("П000020005003", СуммаКО);
		
		// на начало квартала
		мРаздел1_1.Области.П000020005201.Значение = мРаздел1_1.Области.П000020005003.Значение
		                                          - (мРаздел1_1.Области.П000020005401.Значение
		                                           + мРаздел1_1.Области.П000020005501.Значение
		                                           + мРаздел1_1.Области.П000020005601.Значение);
		
		// строка 15 "Расходы на цели обязательного социального страхования"
		СуммаДО = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		УстановитьЗначениеПоказателя("П000020015003", СуммаДО);
		
		// на начало квартала
		мРаздел1_1.Области.П000020015201.Значение = мРаздел1_1.Области.П000020015003.Значение
		                                          - (мРаздел1_1.Области.П000020015401.Значение
		                                           + мРаздел1_1.Области.П000020015501.Значение
		                                           + мРаздел1_1.Области.П000020015601.Значение);
		
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.01", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		// строка 6 "Получено от исполнительного органа Фонда"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", , Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		УстановитьЗначениеПоказателя("П000020006003", СуммаКО);
		
		// на начало квартала
		мРаздел1_1.Области.П000020006201.Значение = мРаздел1_1.Области.П000020006003.Значение
		                                          - (мРаздел1_1.Области.П000020006401.Значение
		                                           + мРаздел1_1.Области.П000020006501.Значение
		                                           + мРаздел1_1.Области.П000020006601.Значение);
		
		// строка 16 "Перечислен единый социальный налог"
		СуммаДО = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", , Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда, Счет51);
		УстановитьЗначениеПоказателя("П000020016003", СуммаДО);
		
		// на начало квартала
		мРаздел1_1.Области.П000020016203.Значение = мРаздел1_1.Области.П000020016003.Значение
		                                          - (мРаздел1_1.Области.П000020016403.Значение
		                                           + мРаздел1_1.Области.П000020016503.Значение
		                                           + мРаздел1_1.Области.П000020016603.Значение);
		
		// Таблицу 5 автоматически не заполняем, так как в конфигурации пока
		// не поддерживаются специальные нлаоговые режимы (ЕНВД, УСН, ЕСХН)
		
		// Таблица. 10 
		// Расчеты по средствам обязательного социального страхования от несчастных 
		// случаев на производстве и профессиональных заболеваний

		// Бухгалтерские итоги по счетам, без аналитики
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", "НачальныйОстатокДт, НачальныйОстатокКт", "Сумма", "Счет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.11", , , , "Организация", Организация);

		// строка 1 "Задолженность за страхователем на начало года"
		СуммаСНК = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет69_11);
		УстановитьЗначениеПоказателя("П000100001003", СуммаСНК);

		// строка 9 "Задолженность за исполнительным органом фонда на начало года"
		СуммаСНД = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет69_11);
		УстановитьЗначениеПоказателя("П000100009003", СуммаСНК);
		
		// Бухгалтерские итоги по счетам и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);

		// строка 2 "Начислено взносов с начала года"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		УстановитьЗначениеПоказателя("П000100002003", СуммаКО);

		// строка 3 "Начислено взносов по актам"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		УстановитьЗначениеПоказателя("П000100003003", СуммаКО);

		// строка 4 "Начислено взносов самостоятельно страхователем"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		УстановитьЗначениеПоказателя("П000100004003", СуммаКО);

		// строка 5 "Не принято к зачету расходов"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		УстановитьЗначениеПоказателя("П000100005003", СуммаКО);
		
		// строка 6 "Получено от исполнительного органа на расчетный счет"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда);
		УстановитьЗначениеПоказателя("П000100006003", СуммаКО);
		
		// строка 10 "Расходы по обязательному социальному страхованию"
		СуммаДО = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		УстановитьЗначениеПоказателя("П000100010003", СуммаКО);

		// Итоги за 1 месяц квартала
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);

		// строка 2 "Начислено взносов за отчетный квартал помесячно"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		УстановитьЗначениеПоказателя("П000100002401", СуммаКО);
		
		// строка 10 "Расходы по обязательному социальному страхованию"
		СуммаДО = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		УстановитьЗначениеПоказателя("П000100010401", СуммаКО);
		
		// Итоги за 2 месяц квартала
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);

		// строка 2 "Начислено взносов за отчетный квартал помесячно"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		УстановитьЗначениеПоказателя("П000100002501", СуммаКО);
		
		// строка 10 "Расходы по обязательному социальному страхованию"
		СуммаДО = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		УстановитьЗначениеПоказателя("П000100010501", СуммаКО);
		
		// Итоги за 3 месяц квартала
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "ОборотДт, ОборотКт", "Сумма", "Счет, Субконто1", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация", Организация);

		// строка 2 "Начислено взносов за отчетный квартал помесячно"
		СуммаКО = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		УстановитьЗначениеПоказателя("П000100002601", СуммаКО);
		
		// Начислено взносов на начало квартала - вычисляется как разница
		// между "начислено с начала года" и "начислено за отчетный квартал"
		мРаздел3_1.Области.П000100002101.Значение = мРаздел3_1.Области.П000100002003.Значение
		                                          - (мРаздел3_1.Области.П000100002401.Значение
		                                           + мРаздел3_1.Области.П000100002501.Значение
		                                           + мРаздел3_1.Области.П000100002601.Значение);

		// строка 10 "Расходы по обязательному социальному страхованию"
		СуммаДО = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Субконто1", Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
		УстановитьЗначениеПоказателя("П000100010601", СуммаКО);

		// Начислено взносов на начало квартала - вычисляется как разница
		// между "начислено с начала года" и "начислено за отчетный квартал"
		мРаздел3_1.Области.П000100010101.Значение = мРаздел3_1.Области.П000100010003.Значение
		                                          - (мРаздел3_1.Области.П000100010401.Значение
		                                           + мРаздел3_1.Области.П000100010501.Значение
		                                           + мРаздел3_1.Области.П000100010601.Значение);

		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		// строка 11 "Перечислено страхователем с начала года"
		СуммаДО_1 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", , Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		СуммаДО_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", , Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51);
		УстановитьЗначениеПоказателя("П000100011003", СуммаДО_1 + СуммаДО_2);

		// Перечислено страхователем за квартал помесячно
		
		// 1-й месяц квартала
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала1МесяцаКвартала, ДатаКонца1МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		СуммаДО_1 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", , Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		СуммаДО_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", , Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51);
		УстановитьЗначениеПоказателя("П000100011403", СуммаДО_1 + СуммаДО_2);

		// 2-й месяц квартала
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала2МесяцаКвартала, ДатаКонца2МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		СуммаДО_1 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", , Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		СуммаДО_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", , Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51);
		УстановитьЗначениеПоказателя("П000100011503", СуммаДО_1 + СуммаДО_2);
		
		// 3-й месяц квартала
		// Бухгалтерские итоги по счету, корсчету и аналитике
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", "КорОборотДт, КорОборотКт", "Сумма", "Счет, Субконто1, КорСчет", ДатаНачала3МесяцаКвартала, ДатаКонца3МесяцаКвартала, , "69.11", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "51", , "Организация", Организация);
		
		СуммаДО_1 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", , Перечисления.ВидыПлатежейВГосБюджет.Налог, Счет51);
		СуммаДО_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", , Перечисления.ВидыПлатежейВГосБюджет.НалогАкт, Счет51);
		УстановитьЗначениеПоказателя("П000100011603", СуммаДО_1 + СуммаДО_2);
		
			// Перечислено на банковский счет на начало квартала - вычисляется как разница
		// между "перечислено с начала года" и "перечислено за отчетный квартал"
		мРаздел3_1.Области.П000100011103.Значение = мРаздел3_1.Области.П000100011003.Значение
		                                          - (мРаздел3_1.Области.П000100011403.Значение
		                                           + мРаздел3_1.Области.П000100011503.Значение
		                                           + мРаздел3_1.Области.П000100011603.Значение);
	 КонецЕсли;

	// -------------------------------------------------------------------------------
	// Расчет автовычисляемых полей
	Расчет();
	
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьАвто()

Процедура ЗаполнитьАвтоВнешний() Экспорт

    Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		Предупреждение("Заполнение по данным информационной базы не предусмотрено!");
		Возврат;
	КонецЕсли;
	
	// запрашиваем подтверждение у пользователя и очищаем отчет
	ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма);
	Если ПрерватьАвтоЗаполнение Тогда
		Возврат;
	КонецЕсли;

	// заполняем содержательную часть
	Если ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		ПараметрыОтчета = РегламентированнаяОтчетность.СформироватьСтруктуруПараметровОтчетаДляЗаполнения(ЭтаФорма);
		ПараметрыОтчета.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		ПараметрыОтчета.Вставить("ТочностьЕдиницыИзмерения", ТочностьЕдиницыИзмерения);
		ДанныеЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьДанныеЗаполненияОтчета(ЭтаФорма, , мВыбраннаяФорма, , ПараметрыОтчета);
		Если ТипЗнч(ДанныеЗаполненияОтчета) = Тип("ДеревоЗначений") Тогда
			Для Каждого СтрУровня1 Из ДанныеЗаполненияОтчета.Строки Цикл
				Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
					РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, СтрУровня2.Имя, СтрУровня2.Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Расчет();
	
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	

КонецПроцедуры


Процедура НачальнаяПодготовкаФормы() Экспорт 

	Перем ИсходноеКоличествоСтрокГруппы;
    ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();

	мВПрограммеИзмененаОрганизация = Ложь;

	мТитульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	мРаздел1_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_1;
	мРаздел1_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_2;
	мРаздел2_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_1;
	мРаздел2_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_2;
	мРаздел2_3 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_3;
	мРаздел2_4 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_4;
	мРаздел3_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел3_1;
	мРаздел3_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел3_2;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	мАдресвФорматеДляВыгрузки = "";
	мАвтоВыборКодов = Ложь;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;

					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			УстановитьФорматВывода();
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	// ИНИЦИАЛИЗАЦИЯ ЗАПОЛНЕНИЯ СОДЕРЖАТЕЛЬНОЙ ЧАСТИ ПО УЧЕТНЫМ ДАННЫМ
	
	СвойстваЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьСвойстваЗаполненияОтчета(ЭтотОбъект, мВыбраннаяФорма);
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда 	
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета);
	КонецЕсли;   	
	Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ") Тогда
		//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
		ИзМакета = Истина;
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);		
	КонецЕсли;

	
	////////////////////////////////////////////////////////////////////////

	ПоказатьПериод();

	// В случае, если по F9 поменяли организацию при копировании, тогда в переменную
	// мВПрограммеИзмененаОрганизация будет записано значение Истина;
	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда

		ЗаполнитьДаты();
		ЗаполнитьСведенияОбОрганизации();
		мВПрограммеИзмененаОрганизация = Ложь;

	КонецЕсли;

	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,, Страница.Имя);
	КонецЦикла;

КонецПроцедуры

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));

	НачальнаяПодготовкаФормы();
		
	ДоступностьКнопокДобавитьУдалить();

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью кнопок "Добавить" и "Удалить" формы.
// 
Процедура ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть = Неопределено)

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не ТекущаяОбласть = Неопределено Тогда
		КнопкаДобавитьУдалить = ЭлементыФормы.Найти("КнопкаУдалитьДопСтроки" + ИмяТекущейСтраницыПанели);

		Если КнопкаДобавитьУдалить <> Неопределено Тогда
			Если РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть ) = Неопределено Тогда
				КнопкаДобавитьУдалить.Доступность = Ложь;
			Иначе
				КнопкаДобавитьУдалить.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДоступностьКнопокДобавитьУдалить()

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = "Значение вычисляется автоматически";
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = "Значение вводится вручную";
		КонецЕсли;
		
		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()


// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	Если СвойстваЗаполненияОтчета = Неопределено Тогда 
		ЗаполнитьАвтоВнутренний();
	Иначе
		ЗаполнитьАвтоВнешний();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИдГруппы <> Неопределено Тогда
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
		ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	КонецЕсли;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	// управляем доступностью кнопок "Добавить" и "Удалить"
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);

	// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ЗаполнитьДаты();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел I (табл. 1, 2)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел I (табл. 3)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел1_2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел II (табл. 4, 5)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел2_1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел II (табл. 6)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел2_2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел III (таблицы 9, 10)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел3_1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел3_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Раздел III (таблицы 11, 12)"
// основной панели формы.
//
Процедура ПолеВыбораВариантЗаполненияРаздел3_2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел3_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел I (табл. 1, 2)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел I (табл. 3)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел1_2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел II (табл. 4, 5)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2_1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел II (табл. 6)" 
// основной панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел2_2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Раздел 2.1" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиРаздел3_1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел3_1ПриИзменении()

Процедура ПолеВводаЗначениеКорректировкиРаздел3_2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел3_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел I (табл. 1, 2)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел1_1ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментария на странице "Раздел I (табл.3)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел1_2ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел II (табл. 4, 5)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2_1ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел II (табл. 6)" по ячейке, для которой 
// установлен алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел2_2ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Раздел III (таблицы 9, 10)" по ячейке, 
// для которой установлен/ алгоритм автозаполнения [автоматически 
// с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийРаздел3_1ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел3_1ПриИзменении()

Процедура ПолеВводаКомментарийРаздел3_2ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел3_1ПриИзменении()

// Процедура вызывается при активизации поля табличного документа на странице 
// "Раздел I (табл. 1, 2)" основной панели формы. Определяет текущую область 
// табличного документа и вызывает процедуру управления доступностью 
// полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел1_1ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_1ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел1_2ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел2_2ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_2ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице 
// "Раздел III (табл. 9, 10)" основной панели формы. Определяет текущую область 
// табличного документа и вызывает процедуру управления доступностью 
// полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел3_1ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел3_1ПриАктивизацииОбласти()

// Процедура вызывается при активизации поля табличного документа на странице 
// "Раздел III (табл. 11, 12)" основной панели формы. Определяет текущую область 
// табличного документа и вызывает процедуру управления доступностью 
// полей ввода реквизитов автозаполнения.
//
Процедура ПолеТабличногоДокументаРаздел3_2ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел3_2ПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа, не участвующих в расчете других показателей отчета..
// Устанавливает признак модифицированности данных в форме.
//
Процедура ТабличныйДокументПолеВводаБезРасчетаПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры // ТабличныйДокументПолеВводаБезРасчетаПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел I (табл. 1, 2)" основной 
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает 
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел1_1ПриИзменении(Элемент)

	Расчет("Раздел1_1");
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_1ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел I (табл. 3)" основной панели 
// формы. Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел1_2ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	Расчет("Раздел1_2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел II (табл. 4, 5)" основной панели 
// формы. Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_1ПриИзменении(Элемент)

	Расчет("Раздел2_1");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_1ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел II (табл. 6)" основной панели 
// формы. Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_2ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	Расчет("Раздел2_2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_2ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел II (табл. 7)" основной панели 
// формы. Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_3ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	Расчет("Раздел2_3");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_3ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел II (табл. 8)" основной панели 
// формы. Вызывает пересчет связанных показателей отчета и устанавлвает признак
// модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел2_4ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	Расчет("Раздел2_4");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел2_4ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел III (табл. 9, 10)" основной 
// панели формы. Вызывает пересчет связанных показателей отчета и устанавлвает 
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел3_1ПриИзменении(Элемент)

	Расчет("Раздел3_1");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел3_1ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Раздел III (табл. 11, 12)" основной 
// панели формы.Вызывает пересчет связанных показателей отчета и устанавливает 
// признак модифицированности формы.
//
Процедура ПолеТабличногоДокументаРаздел3_2ПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	Расчет("Раздел3_2");
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаРаздел3_2ПриИзменении()

// Процедура - обработчик нажатия кнопки "Добавить" на странице 
// "Раздел I (табл. 3)" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиРаздел1_2Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел1_2Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице 
// "Раздел I (табл. 3)" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиРаздел1_2Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел1_2Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице 
// "Раздел II (табл. 6)" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиРаздел2_2Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел1_2Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице 
// "Раздел II (табл. 6)" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиРаздел2_2Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел2_2Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице 
// "Раздел II (табл. 8)" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиРаздел2_4Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел2_4Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице 
// "Раздел II (табл. 8)" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиРаздел2_4Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел2_4Нажатие()

// Процедура - обработчик нажатия кнопки "Добавить" на странице 
// "Раздел III (табл. 11, 12)" основной панели формы.
//
Процедура КнопкаДобавитьДопСтрокиРаздел3_2Нажатие(Элемент)

	ВставитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаДобавитьДопСтрокиРаздел1_2Нажатие()

// Процедура - обработчик нажатия кнопки "Удалить" на странице 
// "Раздел III (табл. 11, 12)" основной панели формы.
//
Процедура КнопкаУдалитьДопСтрокиРаздел3_2Нажатие(Элемент)

	УдалитьДополнительнуюСтроку();

КонецПроцедуры // КнопкаУдалитьДопСтрокиРаздел2_2Нажатие()

Процедура ПолеВыбораКатегорияНалогоплательщикаПриИзменении(Элемент)
	
	УстановитьСтавкиЕСН();

КонецПроцедуры // ПолеВыбораКатегорияНалогоплательщикаПриИзменении()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	//мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_1";
	СтрокаУровня1.Представление            = "Раздел I (таблицы 1, 2)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_2";
	СтрокаУровня1.Представление            = "Раздел I (таблица 3)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_1";
	СтрокаУровня1.Представление            = "Раздел II (таблицы 4, 5)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_2";
	СтрокаУровня1.Представление            = "Раздел II (таблица 6)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_3";
	СтрокаУровня1.Представление            = "Раздел II (таблица 7)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_4";
	СтрокаУровня1.Представление            = "Раздел II (таблица 8)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_1";
	СтрокаУровня1.Представление            = "Раздел III (таблицы 9, 10)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_2";
	СтрокаУровня1.Представление            = "Раздел III (таблицы 11, 12)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Процедура ПолеТабличногоДокументаТитульныйАдресПриИзменении(Элемент)

	Модифицированность = Истина;
	мАдресвФорматеДляВыгрузки = Элемент.Значение;

КонецПроцедуры

Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)

	Модифицированность = Истина;

КонецПроцедуры

Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	Если (Область.Имя = "ОргЮрАдрес") И (НЕ мАвтоВыборКодов) Тогда

		СтандартнаяОбработка = Ложь;

		ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", мАдресвФорматеДляВыгрузки);

		Если ВводАдреса.ОткрытьМодально() Тогда

			Если Область.Имя = "ОргЮрАдрес" Тогда
				мАдресвФорматеДляВыгрузки = ВводАдреса.НачальноеЗначениеВыбора.Представление;
				Если мАдресвФорматеДляВыгрузки = ",,,,,,,,," Тогда
					мАдресвФорматеДляВыгрузки = "";
				КонецЕсли;

				Область.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузки);

			КонецЕсли;

			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// 
Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

// Список поля выбора "ВариантЗаполнения" на странице "Раздел I (табл. 1, 2)"
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел1_1.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел1_1.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел1_1.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

// Список поля выбора "ВариантЗаполнения" на странице "Раздел I (табл. 3)"
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел1_2.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел1_2.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел1_2.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

// Список поля выбора "ВариантЗаполнения" на странице "Раздел III (табл. 9, 10)"
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел3_1.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел3_1.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел3_1.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

// Список поля выбора "ВариантЗаполнения" на странице "Раздел III (табл. 11, 12)"
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел3_2.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел3_2.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияРаздел3_2.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

ЭлементыФормы.ПолеВыбораКатегорияНалогоплательщика.СписокВыбора.Добавить(1, "01 - организации, включая коллегии адвокатов и иные адвокатские образования");
ЭлементыФормы.ПолеВыбораКатегорияНалогоплательщика.СписокВыбора.Добавить(2, "02 - сельскохозяйственные товаропроизводители и родовые, семейные общины");
ЭлементыФормы.ПолеВыбораКатегорияНалогоплательщика.СписокВыбора.Добавить(3, "03 - индивидуальные предприниматели");
//ЭлементыФормы.ПолеВыбораКатегорияНалогоплательщика.СписокВыбора.Добавить(4, "04 - физические лица");

ОписаниеТиповЧисло  = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);
ОписаниеТиповЧисло5 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5);

ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1  = "П0000300130";
мИдГруппы2  = "П0000300160";
мИдГруппы3  = "П0000600130";
мИдГруппы4  = "П0000600160";
мИдГруппы5  = "П0000700050";
мИдГруппы6  = "П0000800080";
мИдГруппы7  = "П0001100080";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 1;
КолИсхСтрокИдГруппы2 = 1;
КолИсхСтрокИдГруппы3 = 1;
КолИсхСтрокИдГруппы4 = 1;
КолИсхСтрокИдГруппы5 = 2;
КолИсхСтрокИдГруппы6 = 1;
КолИсхСтрокИдГруппы7 = 1;

// структура строк многострочного раздела на странице
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000030013001", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П000030013003", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000030013004", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000030013005", ОписаниеТиповЧисло);

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000030016001", ОписаниеТиповСтрока254);
СтруктураГруппы2.Колонки.Добавить("П000030016003", ОписаниеТиповЧисло);
СтруктураГруппы2.Колонки.Добавить("П000030016004", ОписаниеТиповЧисло);
СтруктураГруппы2.Колонки.Добавить("П000030016005", ОписаниеТиповЧисло);

СтруктураГруппы3 = Новый ТаблицаЗначений;
СтруктураГруппы3.Колонки.Добавить("П000060013001", ОписаниеТиповСтрока254);
СтруктураГруппы3.Колонки.Добавить("П000060013003", ОписаниеТиповЧисло);
СтруктураГруппы3.Колонки.Добавить("П000060013004", ОписаниеТиповЧисло);
СтруктураГруппы3.Колонки.Добавить("П000060013005", ОписаниеТиповЧисло);

СтруктураГруппы4 = Новый ТаблицаЗначений;
СтруктураГруппы4.Колонки.Добавить("П000060016001", ОписаниеТиповСтрока254);
СтруктураГруппы4.Колонки.Добавить("П000060016003", ОписаниеТиповЧисло);
СтруктураГруппы4.Колонки.Добавить("П000060016004", ОписаниеТиповЧисло);
СтруктураГруппы4.Колонки.Добавить("П000060016005", ОписаниеТиповЧисло);

СтруктураГруппы5 = Новый ТаблицаЗначений;
СтруктураГруппы5.Колонки.Добавить("П000070005001", ОписаниеТиповСтрока254);
СтруктураГруппы5.Колонки.Добавить("П000070005003", ОписаниеТиповЧисло5);
СтруктураГруппы5.Колонки.Добавить("П000070005004", ОписаниеТиповЧисло);
СтруктураГруппы5.Колонки.Добавить("П000070005005", ОписаниеТиповЧисло5);
СтруктураГруппы5.Колонки.Добавить("П000070005006", ОписаниеТиповЧисло);
СтруктураГруппы5.Колонки.Добавить("П000070005007", ОписаниеТиповЧисло5);
СтруктураГруппы5.Колонки.Добавить("П000070005008", ОписаниеТиповЧисло);
СтруктураГруппы5.Колонки.Добавить("П000070005009", ОписаниеТиповЧисло5);
СтруктураГруппы5.Колонки.Добавить("П000070005010", ОписаниеТиповЧисло);
СтруктураГруппы5.Колонки.Добавить("П000070005011", ОписаниеТиповЧисло5);
СтруктураГруппы5.Колонки.Добавить("П000070005012", ОписаниеТиповЧисло);
СтруктураГруппы5.Колонки.Добавить("П000070005013", ОписаниеТиповЧисло5);
СтруктураГруппы5.Колонки.Добавить("П000070005014", ОписаниеТиповЧисло);
СтруктураГруппы5.Колонки.Добавить("П000070005015", ОписаниеТиповЧисло5);
СтруктураГруппы5.Колонки.Добавить("П000070005016", ОписаниеТиповЧисло);

СтруктураГруппы6 = Новый ТаблицаЗначений;
СтруктураГруппы6.Колонки.Добавить("П000080008001", ОписаниеТиповСтрока254);
СтруктураГруппы6.Колонки.Добавить("П000080008003", ОписаниеТиповЧисло5);
СтруктураГруппы6.Колонки.Добавить("П000080008004", ОписаниеТиповЧисло);
СтруктураГруппы6.Колонки.Добавить("П000080008005", ОписаниеТиповЧисло5);
СтруктураГруппы6.Колонки.Добавить("П000080008006", ОписаниеТиповЧисло);
СтруктураГруппы6.Колонки.Добавить("П000080008007", ОписаниеТиповЧисло5);
СтруктураГруппы6.Колонки.Добавить("П000080008008", ОписаниеТиповЧисло);
СтруктураГруппы6.Колонки.Добавить("П000080008009", ОписаниеТиповЧисло5);
СтруктураГруппы6.Колонки.Добавить("П000080008010", ОписаниеТиповЧисло);
СтруктураГруппы6.Колонки.Добавить("П000080008011", ОписаниеТиповЧисло5);
СтруктураГруппы6.Колонки.Добавить("П000080008012", ОписаниеТиповЧисло);
СтруктураГруппы6.Колонки.Добавить("П000080008013", ОписаниеТиповЧисло5);
СтруктураГруппы6.Колонки.Добавить("П000080008014", ОписаниеТиповЧисло);

СтруктураГруппы7 = Новый ТаблицаЗначений;
СтруктураГруппы7.Колонки.Добавить("П000110008001", ОписаниеТиповСтрока254);
СтруктураГруппы7.Колонки.Добавить("П000110008003", ОписаниеТиповЧисло5);
СтруктураГруппы7.Колонки.Добавить("П000110008004", ОписаниеТиповЧисло);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы3, СтруктураГруппы3);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы4, СтруктураГруппы4);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы5, СтруктураГруппы5);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы6, СтруктураГруппы6);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы7, СтруктураГруппы7);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы3, КолИсхСтрокИдГруппы3);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы4, КолИсхСтрокИдГруппы4);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы5, КолИсхСтрокИдГруппы5);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы6, КолИсхСтрокИдГруппы6);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы7, КолИсхСтрокИдГруппы7);

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;


//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "01/12/2003";

// Код отчета условный
мКодОтчета   = 1159999;

мПечатныеФормы = Новый СписокЗначений;